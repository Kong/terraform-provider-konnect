// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RealmDataSource{}
var _ datasource.DataSourceWithConfigure = &RealmDataSource{}

func NewRealmDataSource() datasource.DataSource {
	return &RealmDataSource{}
}

// RealmDataSource is the data source implementation.
type RealmDataSource struct {
	client *sdk.Konnect
}

// RealmDataSourceModel describes the data model.
type RealmDataSourceModel struct {
	AllowAllControlPlanes types.Bool     `tfsdk:"allow_all_control_planes"`
	AllowedControlPlanes  []types.String `tfsdk:"allowed_control_planes"`
	ConsumerGroups        []types.String `tfsdk:"consumer_groups"`
	CreatedAt             types.String   `tfsdk:"created_at"`
	ID                    types.String   `tfsdk:"id"`
	Name                  types.String   `tfsdk:"name"`
	NegativeTTL           types.Int64    `tfsdk:"negative_ttl"`
	TTL                   types.Int64    `tfsdk:"ttl"`
	UpdatedAt             types.String   `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *RealmDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_realm"
}

// Schema defines the schema for the data source.
func (r *RealmDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Realm DataSource",

		Attributes: map[string]schema.Attribute{
			"allow_all_control_planes": schema.BoolAttribute{
				Computed:    true,
				Description: `Allow all control planes to use the realm. When this value is set it takes precedence on ` + "`" + `allowed_control_planes` + "`" + `.`,
			},
			"allowed_control_planes": schema.SetAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `List of control plane ids that are allowed to use the realm. This is used when ` + "`" + `allow_all_control_planes` + "`" + ` value` + "\n" +
					`is set to false.`,
			},
			"consumer_groups": schema.SetAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `A list of consumer groups to automatically add to any consumers created within this Realm.` + "\n" +
					`If ` + "`" + `consumer_groups` + "`" + ` are provided on the Consumer object _and_ on the Realm, the Consumer will be placed in all defined consumer groups.`,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"negative_ttl": schema.Int64Attribute{
				Computed: true,
				MarkdownDescription: `If a running Gateway triggers a lookup for a Consumer that cannot be authenticated this realm, a ` + "`" + `negative_ttl` + "`" + `` + "\n" +
					`is set. The Gateway will not try to lookup the Consumer in Konnect for ` + "`" + `negative_ttl` + "`" + ` minutes.` + "\n" +
					`` + "\n" +
					`A Consumer will be cached for ` + "`" + `negative_ttl` + "`" + ` if they do not exist in the Realm, or if the provided credentials` + "\n" +
					`are invalid.`,
			},
			"ttl": schema.Int64Attribute{
				Computed: true,
				MarkdownDescription: `The time in minutes that the Consumer will be cached in memory on a running Gateway if it is` + "\n" +
					`successfully loaded from Konnect.`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
		},
	}
}

func (r *RealmDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RealmDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RealmDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRealmRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Realms.GetRealm(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ConsumerRealm != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedConsumerRealm(ctx, res.ConsumerRealm)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
