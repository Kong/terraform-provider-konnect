// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginRequestValidatorDataSourceModel) RefreshFromSharedRequestValidatorPlugin(resp *shared.RequestValidatorPlugin) {
	if resp != nil {
		r.Config.AllowedContentTypes = make([]types.String, 0, len(resp.Config.AllowedContentTypes))
		for _, v := range resp.Config.AllowedContentTypes {
			r.Config.AllowedContentTypes = append(r.Config.AllowedContentTypes, types.StringValue(v))
		}
		r.Config.BodySchema = types.StringPointerValue(resp.Config.BodySchema)
		r.Config.ContentTypeParameterValidation = types.BoolPointerValue(resp.Config.ContentTypeParameterValidation)
		r.Config.ParameterSchema = []tfTypes.ParameterSchema{}
		if len(r.Config.ParameterSchema) > len(resp.Config.ParameterSchema) {
			r.Config.ParameterSchema = r.Config.ParameterSchema[:len(resp.Config.ParameterSchema)]
		}
		for parameterSchemaCount, parameterSchemaItem := range resp.Config.ParameterSchema {
			var parameterSchema1 tfTypes.ParameterSchema
			parameterSchema1.Explode = types.BoolPointerValue(parameterSchemaItem.Explode)
			parameterSchema1.In = types.StringValue(string(parameterSchemaItem.In))
			parameterSchema1.Name = types.StringValue(parameterSchemaItem.Name)
			parameterSchema1.Required = types.BoolValue(parameterSchemaItem.Required)
			parameterSchema1.Schema = types.StringPointerValue(parameterSchemaItem.Schema)
			if parameterSchemaItem.Style != nil {
				parameterSchema1.Style = types.StringValue(string(*parameterSchemaItem.Style))
			} else {
				parameterSchema1.Style = types.StringNull()
			}
			if parameterSchemaCount+1 > len(r.Config.ParameterSchema) {
				r.Config.ParameterSchema = append(r.Config.ParameterSchema, parameterSchema1)
			} else {
				r.Config.ParameterSchema[parameterSchemaCount].Explode = parameterSchema1.Explode
				r.Config.ParameterSchema[parameterSchemaCount].In = parameterSchema1.In
				r.Config.ParameterSchema[parameterSchemaCount].Name = parameterSchema1.Name
				r.Config.ParameterSchema[parameterSchemaCount].Required = parameterSchema1.Required
				r.Config.ParameterSchema[parameterSchemaCount].Schema = parameterSchema1.Schema
				r.Config.ParameterSchema[parameterSchemaCount].Style = parameterSchema1.Style
			}
		}
		r.Config.VerboseResponse = types.BoolPointerValue(resp.Config.VerboseResponse)
		if resp.Config.Version != nil {
			r.Config.Version = types.StringValue(string(*resp.Config.Version))
		} else {
			r.Config.Version = types.StringNull()
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
