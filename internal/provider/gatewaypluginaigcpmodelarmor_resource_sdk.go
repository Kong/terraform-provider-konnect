// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginAiGcpModelArmorResourceModel) RefreshFromSharedAiGcpModelArmorPlugin(ctx context.Context, resp *shared.AiGcpModelArmorPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.EnableMultiLanguageDetection = types.BoolPointerValue(resp.Config.EnableMultiLanguageDetection)
		r.Config.GcpServiceAccountJSON = types.StringPointerValue(resp.Config.GcpServiceAccountJSON)
		r.Config.GcpUseServiceAccount = types.BoolPointerValue(resp.Config.GcpUseServiceAccount)
		if resp.Config.GuardingMode != nil {
			r.Config.GuardingMode = types.StringValue(string(*resp.Config.GuardingMode))
		} else {
			r.Config.GuardingMode = types.StringNull()
		}
		r.Config.LocationID = types.StringValue(resp.Config.LocationID)
		r.Config.ProjectID = types.StringValue(resp.Config.ProjectID)
		r.Config.RequestFailureMessage = types.StringPointerValue(resp.Config.RequestFailureMessage)
		r.Config.ResponseBufferSize = types.Float64PointerValue(resp.Config.ResponseBufferSize)
		r.Config.ResponseFailureMessage = types.StringPointerValue(resp.Config.ResponseFailureMessage)
		r.Config.RevealFailureCategories = types.BoolPointerValue(resp.Config.RevealFailureCategories)
		r.Config.SourceLanguage = types.StringPointerValue(resp.Config.SourceLanguage)
		r.Config.StopOnError = types.BoolPointerValue(resp.Config.StopOnError)
		r.Config.TemplateID = types.StringValue(resp.Config.TemplateID)
		if resp.Config.TextSource != nil {
			r.Config.TextSource = types.StringValue(string(*resp.Config.TextSource))
		} else {
			r.Config.TextSource = types.StringNull()
		}
		r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.AcePluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.AcePluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.AcePluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAiGcpModelArmorResourceModel) ToOperationsCreateAigcpmodelarmorPluginRequest(ctx context.Context) (*operations.CreateAigcpmodelarmorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiGcpModelArmorPlugin, aiGcpModelArmorPluginDiags := r.ToSharedAiGcpModelArmorPlugin(ctx)
	diags.Append(aiGcpModelArmorPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAigcpmodelarmorPluginRequest{
		ControlPlaneID:        controlPlaneID,
		AiGcpModelArmorPlugin: *aiGcpModelArmorPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiGcpModelArmorResourceModel) ToOperationsDeleteAigcpmodelarmorPluginRequest(ctx context.Context) (*operations.DeleteAigcpmodelarmorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAigcpmodelarmorPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiGcpModelArmorResourceModel) ToOperationsGetAigcpmodelarmorPluginRequest(ctx context.Context) (*operations.GetAigcpmodelarmorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAigcpmodelarmorPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiGcpModelArmorResourceModel) ToOperationsUpdateAigcpmodelarmorPluginRequest(ctx context.Context) (*operations.UpdateAigcpmodelarmorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiGcpModelArmorPlugin, aiGcpModelArmorPluginDiags := r.ToSharedAiGcpModelArmorPlugin(ctx)
	diags.Append(aiGcpModelArmorPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAigcpmodelarmorPluginRequest{
		PluginID:              pluginID,
		ControlPlaneID:        controlPlaneID,
		AiGcpModelArmorPlugin: *aiGcpModelArmorPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiGcpModelArmorResourceModel) ToSharedAiGcpModelArmorPlugin(ctx context.Context) (*shared.AiGcpModelArmorPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AiGcpModelArmorPluginOrdering
	if r.Ordering != nil {
		var after *shared.AiGcpModelArmorPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AiGcpModelArmorPluginAfter{
				Access: access,
			}
		}
		var before *shared.AiGcpModelArmorPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AiGcpModelArmorPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AiGcpModelArmorPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AiGcpModelArmorPluginPartials
	if r.Partials != nil {
		partials = make([]shared.AiGcpModelArmorPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AiGcpModelArmorPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	enableMultiLanguageDetection := new(bool)
	if !r.Config.EnableMultiLanguageDetection.IsUnknown() && !r.Config.EnableMultiLanguageDetection.IsNull() {
		*enableMultiLanguageDetection = r.Config.EnableMultiLanguageDetection.ValueBool()
	} else {
		enableMultiLanguageDetection = nil
	}
	gcpServiceAccountJSON := new(string)
	if !r.Config.GcpServiceAccountJSON.IsUnknown() && !r.Config.GcpServiceAccountJSON.IsNull() {
		*gcpServiceAccountJSON = r.Config.GcpServiceAccountJSON.ValueString()
	} else {
		gcpServiceAccountJSON = nil
	}
	gcpUseServiceAccount := new(bool)
	if !r.Config.GcpUseServiceAccount.IsUnknown() && !r.Config.GcpUseServiceAccount.IsNull() {
		*gcpUseServiceAccount = r.Config.GcpUseServiceAccount.ValueBool()
	} else {
		gcpUseServiceAccount = nil
	}
	guardingMode := new(shared.AiGcpModelArmorPluginGuardingMode)
	if !r.Config.GuardingMode.IsUnknown() && !r.Config.GuardingMode.IsNull() {
		*guardingMode = shared.AiGcpModelArmorPluginGuardingMode(r.Config.GuardingMode.ValueString())
	} else {
		guardingMode = nil
	}
	var locationID string
	locationID = r.Config.LocationID.ValueString()

	var projectID string
	projectID = r.Config.ProjectID.ValueString()

	requestFailureMessage := new(string)
	if !r.Config.RequestFailureMessage.IsUnknown() && !r.Config.RequestFailureMessage.IsNull() {
		*requestFailureMessage = r.Config.RequestFailureMessage.ValueString()
	} else {
		requestFailureMessage = nil
	}
	responseBufferSize := new(float64)
	if !r.Config.ResponseBufferSize.IsUnknown() && !r.Config.ResponseBufferSize.IsNull() {
		*responseBufferSize = r.Config.ResponseBufferSize.ValueFloat64()
	} else {
		responseBufferSize = nil
	}
	responseFailureMessage := new(string)
	if !r.Config.ResponseFailureMessage.IsUnknown() && !r.Config.ResponseFailureMessage.IsNull() {
		*responseFailureMessage = r.Config.ResponseFailureMessage.ValueString()
	} else {
		responseFailureMessage = nil
	}
	revealFailureCategories := new(bool)
	if !r.Config.RevealFailureCategories.IsUnknown() && !r.Config.RevealFailureCategories.IsNull() {
		*revealFailureCategories = r.Config.RevealFailureCategories.ValueBool()
	} else {
		revealFailureCategories = nil
	}
	sourceLanguage := new(string)
	if !r.Config.SourceLanguage.IsUnknown() && !r.Config.SourceLanguage.IsNull() {
		*sourceLanguage = r.Config.SourceLanguage.ValueString()
	} else {
		sourceLanguage = nil
	}
	stopOnError := new(bool)
	if !r.Config.StopOnError.IsUnknown() && !r.Config.StopOnError.IsNull() {
		*stopOnError = r.Config.StopOnError.ValueBool()
	} else {
		stopOnError = nil
	}
	var templateID string
	templateID = r.Config.TemplateID.ValueString()

	textSource := new(shared.AiGcpModelArmorPluginTextSource)
	if !r.Config.TextSource.IsUnknown() && !r.Config.TextSource.IsNull() {
		*textSource = shared.AiGcpModelArmorPluginTextSource(r.Config.TextSource.ValueString())
	} else {
		textSource = nil
	}
	timeout := new(float64)
	if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
		*timeout = r.Config.Timeout.ValueFloat64()
	} else {
		timeout = nil
	}
	config := shared.AiGcpModelArmorPluginConfig{
		EnableMultiLanguageDetection: enableMultiLanguageDetection,
		GcpServiceAccountJSON:        gcpServiceAccountJSON,
		GcpUseServiceAccount:         gcpUseServiceAccount,
		GuardingMode:                 guardingMode,
		LocationID:                   locationID,
		ProjectID:                    projectID,
		RequestFailureMessage:        requestFailureMessage,
		ResponseBufferSize:           responseBufferSize,
		ResponseFailureMessage:       responseFailureMessage,
		RevealFailureCategories:      revealFailureCategories,
		SourceLanguage:               sourceLanguage,
		StopOnError:                  stopOnError,
		TemplateID:                   templateID,
		TextSource:                   textSource,
		Timeout:                      timeout,
	}
	var consumer *shared.AiGcpModelArmorPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.AiGcpModelArmorPluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.AiGcpModelArmorPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.AiGcpModelArmorPluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.AiGcpModelArmorPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AiGcpModelArmorPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AiGcpModelArmorPluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.AiGcpModelArmorPluginRoute{
			ID: id4,
		}
	}
	var service *shared.AiGcpModelArmorPluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.AiGcpModelArmorPluginService{
			ID: id5,
		}
	}
	out := shared.AiGcpModelArmorPlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}
