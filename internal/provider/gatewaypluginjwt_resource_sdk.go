// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginJwtResourceModel) ToSharedJwtPluginInput() *shared.JwtPluginInput {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	ordering := make(map[string]string)
	for orderingKey, orderingValue := range r.Ordering {
		var orderingInst string
		orderingInst = orderingValue.ValueString()

		ordering[orderingKey] = orderingInst
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	anonymous := new(string)
	if !r.Config.Anonymous.IsUnknown() && !r.Config.Anonymous.IsNull() {
		*anonymous = r.Config.Anonymous.ValueString()
	} else {
		anonymous = nil
	}
	var claimsToVerify []shared.ClaimsToVerify = []shared.ClaimsToVerify{}
	for _, claimsToVerifyItem := range r.Config.ClaimsToVerify {
		claimsToVerify = append(claimsToVerify, shared.ClaimsToVerify(claimsToVerifyItem.ValueString()))
	}
	var cookieNames []string = []string{}
	for _, cookieNamesItem := range r.Config.CookieNames {
		cookieNames = append(cookieNames, cookieNamesItem.ValueString())
	}
	var headerNames []string = []string{}
	for _, headerNamesItem := range r.Config.HeaderNames {
		headerNames = append(headerNames, headerNamesItem.ValueString())
	}
	keyClaimName := new(string)
	if !r.Config.KeyClaimName.IsUnknown() && !r.Config.KeyClaimName.IsNull() {
		*keyClaimName = r.Config.KeyClaimName.ValueString()
	} else {
		keyClaimName = nil
	}
	maximumExpiration := new(float64)
	if !r.Config.MaximumExpiration.IsUnknown() && !r.Config.MaximumExpiration.IsNull() {
		*maximumExpiration, _ = r.Config.MaximumExpiration.ValueBigFloat().Float64()
	} else {
		maximumExpiration = nil
	}
	realm := new(string)
	if !r.Config.Realm.IsUnknown() && !r.Config.Realm.IsNull() {
		*realm = r.Config.Realm.ValueString()
	} else {
		realm = nil
	}
	runOnPreflight := new(bool)
	if !r.Config.RunOnPreflight.IsUnknown() && !r.Config.RunOnPreflight.IsNull() {
		*runOnPreflight = r.Config.RunOnPreflight.ValueBool()
	} else {
		runOnPreflight = nil
	}
	secretIsBase64 := new(bool)
	if !r.Config.SecretIsBase64.IsUnknown() && !r.Config.SecretIsBase64.IsNull() {
		*secretIsBase64 = r.Config.SecretIsBase64.ValueBool()
	} else {
		secretIsBase64 = nil
	}
	var uriParamNames []string = []string{}
	for _, uriParamNamesItem := range r.Config.URIParamNames {
		uriParamNames = append(uriParamNames, uriParamNamesItem.ValueString())
	}
	config := shared.JwtPluginConfig{
		Anonymous:         anonymous,
		ClaimsToVerify:    claimsToVerify,
		CookieNames:       cookieNames,
		HeaderNames:       headerNames,
		KeyClaimName:      keyClaimName,
		MaximumExpiration: maximumExpiration,
		Realm:             realm,
		RunOnPreflight:    runOnPreflight,
		SecretIsBase64:    secretIsBase64,
		URIParamNames:     uriParamNames,
	}
	var protocols []shared.JwtPluginProtocols = []shared.JwtPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.JwtPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.JwtPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.JwtPluginRoute{
			ID: id1,
		}
	}
	var service *shared.JwtPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.JwtPluginService{
			ID: id2,
		}
	}
	out := shared.JwtPluginInput{
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Tags:         tags,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}
	return &out
}

func (r *GatewayPluginJwtResourceModel) RefreshFromSharedJwtPlugin(resp *shared.JwtPlugin) {
	if resp != nil {
		r.Config.Anonymous = types.StringPointerValue(resp.Config.Anonymous)
		r.Config.ClaimsToVerify = make([]types.String, 0, len(resp.Config.ClaimsToVerify))
		for _, v := range resp.Config.ClaimsToVerify {
			r.Config.ClaimsToVerify = append(r.Config.ClaimsToVerify, types.StringValue(string(v)))
		}
		r.Config.CookieNames = make([]types.String, 0, len(resp.Config.CookieNames))
		for _, v := range resp.Config.CookieNames {
			r.Config.CookieNames = append(r.Config.CookieNames, types.StringValue(v))
		}
		r.Config.HeaderNames = make([]types.String, 0, len(resp.Config.HeaderNames))
		for _, v := range resp.Config.HeaderNames {
			r.Config.HeaderNames = append(r.Config.HeaderNames, types.StringValue(v))
		}
		r.Config.KeyClaimName = types.StringPointerValue(resp.Config.KeyClaimName)
		if resp.Config.MaximumExpiration != nil {
			r.Config.MaximumExpiration = types.NumberValue(big.NewFloat(float64(*resp.Config.MaximumExpiration)))
		} else {
			r.Config.MaximumExpiration = types.NumberNull()
		}
		r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
		r.Config.RunOnPreflight = types.BoolPointerValue(resp.Config.RunOnPreflight)
		r.Config.SecretIsBase64 = types.BoolPointerValue(resp.Config.SecretIsBase64)
		r.Config.URIParamNames = make([]types.String, 0, len(resp.Config.URIParamNames))
		for _, v := range resp.Config.URIParamNames {
			r.Config.URIParamNames = append(r.Config.URIParamNames, types.StringValue(v))
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering != nil {
			r.Ordering = make(map[string]types.String, len(resp.Ordering))
			for key, value := range resp.Ordering {
				r.Ordering[key] = types.StringValue(value)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
