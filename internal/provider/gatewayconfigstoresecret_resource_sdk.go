// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayConfigStoreSecretResourceModel) RefreshFromSharedConfigStoreSecret(ctx context.Context, resp *shared.ConfigStoreSecret) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Key = types.StringPointerValue(resp.Key)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *GatewayConfigStoreSecretResourceModel) ToOperationsCreateConfigStoreSecretRequest(ctx context.Context) (*operations.CreateConfigStoreSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ConfigStoreID.ValueString()

	createConfigStoreSecret, createConfigStoreSecretDiags := r.ToSharedCreateConfigStoreSecret(ctx)
	diags.Append(createConfigStoreSecretDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateConfigStoreSecretRequest{
		ControlPlaneID:          controlPlaneID,
		ConfigStoreID:           configStoreID,
		CreateConfigStoreSecret: *createConfigStoreSecret,
	}

	return &out, diags
}

func (r *GatewayConfigStoreSecretResourceModel) ToOperationsDeleteConfigStoreSecretRequest(ctx context.Context) (*operations.DeleteConfigStoreSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ConfigStoreID.ValueString()

	var key string
	key = r.Key.ValueString()

	out := operations.DeleteConfigStoreSecretRequest{
		ControlPlaneID: controlPlaneID,
		ConfigStoreID:  configStoreID,
		Key:            key,
	}

	return &out, diags
}

func (r *GatewayConfigStoreSecretResourceModel) ToOperationsGetConfigStoreSecretRequest(ctx context.Context) (*operations.GetConfigStoreSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ConfigStoreID.ValueString()

	var key string
	key = r.Key.ValueString()

	out := operations.GetConfigStoreSecretRequest{
		ControlPlaneID: controlPlaneID,
		ConfigStoreID:  configStoreID,
		Key:            key,
	}

	return &out, diags
}

func (r *GatewayConfigStoreSecretResourceModel) ToOperationsUpdateConfigStoreSecretRequest(ctx context.Context) (*operations.UpdateConfigStoreSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ConfigStoreID.ValueString()

	var key string
	key = r.Key.ValueString()

	updateConfigStoreSecret, updateConfigStoreSecretDiags := r.ToSharedUpdateConfigStoreSecret(ctx)
	diags.Append(updateConfigStoreSecretDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateConfigStoreSecretRequest{
		ControlPlaneID:          controlPlaneID,
		ConfigStoreID:           configStoreID,
		Key:                     key,
		UpdateConfigStoreSecret: *updateConfigStoreSecret,
	}

	return &out, diags
}

func (r *GatewayConfigStoreSecretResourceModel) ToSharedCreateConfigStoreSecret(ctx context.Context) (*shared.CreateConfigStoreSecret, diag.Diagnostics) {
	var diags diag.Diagnostics

	var key string
	key = r.Key.ValueString()

	var value string
	value = r.Value.ValueString()

	out := shared.CreateConfigStoreSecret{
		Key:   key,
		Value: value,
	}

	return &out, diags
}

func (r *GatewayConfigStoreSecretResourceModel) ToSharedUpdateConfigStoreSecret(ctx context.Context) (*shared.UpdateConfigStoreSecret, diag.Diagnostics) {
	var diags diag.Diagnostics

	var value string
	value = r.Value.ValueString()

	out := shared.UpdateConfigStoreSecret{
		Value: value,
	}

	return &out, diags
}
