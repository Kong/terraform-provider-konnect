// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginRequestCalloutDataSourceModel) ToOperationsGetRequestcalloutPluginRequest(ctx context.Context) (*operations.GetRequestcalloutPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetRequestcalloutPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginRequestCalloutDataSourceModel) RefreshFromSharedRequestCalloutPlugin(ctx context.Context, resp *shared.RequestCalloutPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.RequestCalloutPluginConfig{}
			if resp.Config.Cache == nil {
				r.Config.Cache = nil
			} else {
				r.Config.Cache = &tfTypes.Cache{}
				r.Config.Cache.CacheTTL = types.Int64PointerValue(resp.Config.Cache.CacheTTL)
				if resp.Config.Cache.Memory == nil {
					r.Config.Cache.Memory = nil
				} else {
					r.Config.Cache.Memory = &tfTypes.Memory{}
					r.Config.Cache.Memory.DictionaryName = types.StringPointerValue(resp.Config.Cache.Memory.DictionaryName)
				}
				if resp.Config.Cache.Redis == nil {
					r.Config.Cache.Redis = nil
				} else {
					r.Config.Cache.Redis = &tfTypes.PartialRedisEEConfig{}
					r.Config.Cache.Redis.ClusterMaxRedirections = types.Int64PointerValue(resp.Config.Cache.Redis.ClusterMaxRedirections)
					r.Config.Cache.Redis.ClusterNodes = []tfTypes.PartialRedisEEClusterNodes{}
					if len(r.Config.Cache.Redis.ClusterNodes) > len(resp.Config.Cache.Redis.ClusterNodes) {
						r.Config.Cache.Redis.ClusterNodes = r.Config.Cache.Redis.ClusterNodes[:len(resp.Config.Cache.Redis.ClusterNodes)]
					}
					for clusterNodesCount, clusterNodesItem := range resp.Config.Cache.Redis.ClusterNodes {
						var clusterNodes tfTypes.PartialRedisEEClusterNodes
						clusterNodes.IP = types.StringPointerValue(clusterNodesItem.IP)
						clusterNodes.Port = types.Int64PointerValue(clusterNodesItem.Port)
						if clusterNodesCount+1 > len(r.Config.Cache.Redis.ClusterNodes) {
							r.Config.Cache.Redis.ClusterNodes = append(r.Config.Cache.Redis.ClusterNodes, clusterNodes)
						} else {
							r.Config.Cache.Redis.ClusterNodes[clusterNodesCount].IP = clusterNodes.IP
							r.Config.Cache.Redis.ClusterNodes[clusterNodesCount].Port = clusterNodes.Port
						}
					}
					r.Config.Cache.Redis.ConnectTimeout = types.Int64PointerValue(resp.Config.Cache.Redis.ConnectTimeout)
					r.Config.Cache.Redis.ConnectionIsProxied = types.BoolPointerValue(resp.Config.Cache.Redis.ConnectionIsProxied)
					r.Config.Cache.Redis.Database = types.Int64PointerValue(resp.Config.Cache.Redis.Database)
					r.Config.Cache.Redis.Host = types.StringPointerValue(resp.Config.Cache.Redis.Host)
					r.Config.Cache.Redis.KeepaliveBacklog = types.Int64PointerValue(resp.Config.Cache.Redis.KeepaliveBacklog)
					r.Config.Cache.Redis.KeepalivePoolSize = types.Int64PointerValue(resp.Config.Cache.Redis.KeepalivePoolSize)
					r.Config.Cache.Redis.Password = types.StringPointerValue(resp.Config.Cache.Redis.Password)
					r.Config.Cache.Redis.Port = types.Int64PointerValue(resp.Config.Cache.Redis.Port)
					r.Config.Cache.Redis.ReadTimeout = types.Int64PointerValue(resp.Config.Cache.Redis.ReadTimeout)
					r.Config.Cache.Redis.SendTimeout = types.Int64PointerValue(resp.Config.Cache.Redis.SendTimeout)
					r.Config.Cache.Redis.SentinelMaster = types.StringPointerValue(resp.Config.Cache.Redis.SentinelMaster)
					r.Config.Cache.Redis.SentinelNodes = []tfTypes.PartialRedisEESentinelNodes{}
					if len(r.Config.Cache.Redis.SentinelNodes) > len(resp.Config.Cache.Redis.SentinelNodes) {
						r.Config.Cache.Redis.SentinelNodes = r.Config.Cache.Redis.SentinelNodes[:len(resp.Config.Cache.Redis.SentinelNodes)]
					}
					for sentinelNodesCount, sentinelNodesItem := range resp.Config.Cache.Redis.SentinelNodes {
						var sentinelNodes tfTypes.PartialRedisEESentinelNodes
						sentinelNodes.Host = types.StringPointerValue(sentinelNodesItem.Host)
						sentinelNodes.Port = types.Int64PointerValue(sentinelNodesItem.Port)
						if sentinelNodesCount+1 > len(r.Config.Cache.Redis.SentinelNodes) {
							r.Config.Cache.Redis.SentinelNodes = append(r.Config.Cache.Redis.SentinelNodes, sentinelNodes)
						} else {
							r.Config.Cache.Redis.SentinelNodes[sentinelNodesCount].Host = sentinelNodes.Host
							r.Config.Cache.Redis.SentinelNodes[sentinelNodesCount].Port = sentinelNodes.Port
						}
					}
					r.Config.Cache.Redis.SentinelPassword = types.StringPointerValue(resp.Config.Cache.Redis.SentinelPassword)
					if resp.Config.Cache.Redis.SentinelRole != nil {
						r.Config.Cache.Redis.SentinelRole = types.StringValue(string(*resp.Config.Cache.Redis.SentinelRole))
					} else {
						r.Config.Cache.Redis.SentinelRole = types.StringNull()
					}
					r.Config.Cache.Redis.SentinelUsername = types.StringPointerValue(resp.Config.Cache.Redis.SentinelUsername)
					r.Config.Cache.Redis.ServerName = types.StringPointerValue(resp.Config.Cache.Redis.ServerName)
					r.Config.Cache.Redis.Ssl = types.BoolPointerValue(resp.Config.Cache.Redis.Ssl)
					r.Config.Cache.Redis.SslVerify = types.BoolPointerValue(resp.Config.Cache.Redis.SslVerify)
					r.Config.Cache.Redis.Username = types.StringPointerValue(resp.Config.Cache.Redis.Username)
				}
				if resp.Config.Cache.Strategy != nil {
					r.Config.Cache.Strategy = types.StringValue(string(*resp.Config.Cache.Strategy))
				} else {
					r.Config.Cache.Strategy = types.StringNull()
				}
			}
			r.Config.Callouts = []tfTypes.Callouts{}
			if len(r.Config.Callouts) > len(resp.Config.Callouts) {
				r.Config.Callouts = r.Config.Callouts[:len(resp.Config.Callouts)]
			}
			for calloutsCount, calloutsItem := range resp.Config.Callouts {
				var callouts tfTypes.Callouts
				callouts.Cache.Bypass = types.BoolPointerValue(calloutsItem.Cache.Bypass)
				callouts.DependsOn = make([]types.String, 0, len(calloutsItem.DependsOn))
				for _, v := range calloutsItem.DependsOn {
					callouts.DependsOn = append(callouts.DependsOn, types.StringValue(v))
				}
				callouts.Name = types.StringValue(calloutsItem.Name)
				if len(calloutsItem.Request.Body.Custom) > 0 {
					callouts.Request.Body.Custom = make(map[string]types.String, len(calloutsItem.Request.Body.Custom))
					for key, value := range calloutsItem.Request.Body.Custom {
						result, _ := json.Marshal(value)
						callouts.Request.Body.Custom[key] = types.StringValue(string(result))
					}
				}
				callouts.Request.Body.Decode = types.BoolPointerValue(calloutsItem.Request.Body.Decode)
				callouts.Request.Body.Forward = types.BoolPointerValue(calloutsItem.Request.Body.Forward)
				callouts.Request.ByLua = types.StringPointerValue(calloutsItem.Request.ByLua)
				callouts.Request.Error.ErrorResponseCode = types.Int64PointerValue(calloutsItem.Request.Error.ErrorResponseCode)
				callouts.Request.Error.ErrorResponseMsg = types.StringPointerValue(calloutsItem.Request.Error.ErrorResponseMsg)
				callouts.Request.Error.HTTPStatuses = make([]types.Int64, 0, len(calloutsItem.Request.Error.HTTPStatuses))
				for _, v := range calloutsItem.Request.Error.HTTPStatuses {
					callouts.Request.Error.HTTPStatuses = append(callouts.Request.Error.HTTPStatuses, types.Int64Value(v))
				}
				if calloutsItem.Request.Error.OnError != nil {
					callouts.Request.Error.OnError = types.StringValue(string(*calloutsItem.Request.Error.OnError))
				} else {
					callouts.Request.Error.OnError = types.StringNull()
				}
				callouts.Request.Error.Retries = types.Int64PointerValue(calloutsItem.Request.Error.Retries)
				if len(calloutsItem.Request.Headers.Custom) > 0 {
					callouts.Request.Headers.Custom = make(map[string]types.String, len(calloutsItem.Request.Headers.Custom))
					for key1, value1 := range calloutsItem.Request.Headers.Custom {
						result1, _ := json.Marshal(value1)
						callouts.Request.Headers.Custom[key1] = types.StringValue(string(result1))
					}
				}
				callouts.Request.Headers.Forward = types.BoolPointerValue(calloutsItem.Request.Headers.Forward)
				if calloutsItem.Request.HTTPOpts.Proxy == nil {
					callouts.Request.HTTPOpts.Proxy = nil
				} else {
					callouts.Request.HTTPOpts.Proxy = &tfTypes.Proxy{}
					callouts.Request.HTTPOpts.Proxy.AuthPassword = types.StringPointerValue(calloutsItem.Request.HTTPOpts.Proxy.AuthPassword)
					callouts.Request.HTTPOpts.Proxy.AuthUsername = types.StringPointerValue(calloutsItem.Request.HTTPOpts.Proxy.AuthUsername)
					callouts.Request.HTTPOpts.Proxy.HTTPProxy = types.StringPointerValue(calloutsItem.Request.HTTPOpts.Proxy.HTTPProxy)
					callouts.Request.HTTPOpts.Proxy.HTTPSProxy = types.StringPointerValue(calloutsItem.Request.HTTPOpts.Proxy.HTTPSProxy)
				}
				callouts.Request.HTTPOpts.SslServerName = types.StringPointerValue(calloutsItem.Request.HTTPOpts.SslServerName)
				callouts.Request.HTTPOpts.SslVerify = types.BoolPointerValue(calloutsItem.Request.HTTPOpts.SslVerify)
				if calloutsItem.Request.HTTPOpts.Timeouts == nil {
					callouts.Request.HTTPOpts.Timeouts = nil
				} else {
					callouts.Request.HTTPOpts.Timeouts = &tfTypes.Timeouts{}
					callouts.Request.HTTPOpts.Timeouts.Connect = types.Int64PointerValue(calloutsItem.Request.HTTPOpts.Timeouts.Connect)
					callouts.Request.HTTPOpts.Timeouts.Read = types.Int64PointerValue(calloutsItem.Request.HTTPOpts.Timeouts.Read)
					callouts.Request.HTTPOpts.Timeouts.Write = types.Int64PointerValue(calloutsItem.Request.HTTPOpts.Timeouts.Write)
				}
				callouts.Request.Method = types.StringPointerValue(calloutsItem.Request.Method)
				if len(calloutsItem.Request.Query.Custom) > 0 {
					callouts.Request.Query.Custom = make(map[string]types.String, len(calloutsItem.Request.Query.Custom))
					for key2, value2 := range calloutsItem.Request.Query.Custom {
						result2, _ := json.Marshal(value2)
						callouts.Request.Query.Custom[key2] = types.StringValue(string(result2))
					}
				}
				callouts.Request.Query.Forward = types.BoolPointerValue(calloutsItem.Request.Query.Forward)
				callouts.Request.URL = types.StringValue(calloutsItem.Request.URL)
				callouts.Response.Body.Decode = types.BoolPointerValue(calloutsItem.Response.Body.Decode)
				callouts.Response.Body.Store = types.BoolPointerValue(calloutsItem.Response.Body.Store)
				callouts.Response.ByLua = types.StringPointerValue(calloutsItem.Response.ByLua)
				callouts.Response.Headers.Store = types.BoolPointerValue(calloutsItem.Response.Headers.Store)
				if calloutsCount+1 > len(r.Config.Callouts) {
					r.Config.Callouts = append(r.Config.Callouts, callouts)
				} else {
					r.Config.Callouts[calloutsCount].Cache = callouts.Cache
					r.Config.Callouts[calloutsCount].DependsOn = callouts.DependsOn
					r.Config.Callouts[calloutsCount].Name = callouts.Name
					r.Config.Callouts[calloutsCount].Request = callouts.Request
					r.Config.Callouts[calloutsCount].Response = callouts.Response
				}
			}
			if resp.Config.Upstream == nil {
				r.Config.Upstream = nil
			} else {
				r.Config.Upstream = &tfTypes.RequestCalloutPluginUpstream{}
				if resp.Config.Upstream.Body == nil {
					r.Config.Upstream.Body = nil
				} else {
					r.Config.Upstream.Body = &tfTypes.RequestCalloutPluginConfigBody{}
					if len(resp.Config.Upstream.Body.Custom) > 0 {
						r.Config.Upstream.Body.Custom = make(map[string]types.String, len(resp.Config.Upstream.Body.Custom))
						for key3, value3 := range resp.Config.Upstream.Body.Custom {
							result3, _ := json.Marshal(value3)
							r.Config.Upstream.Body.Custom[key3] = types.StringValue(string(result3))
						}
					}
					r.Config.Upstream.Body.Decode = types.BoolPointerValue(resp.Config.Upstream.Body.Decode)
					r.Config.Upstream.Body.Forward = types.BoolPointerValue(resp.Config.Upstream.Body.Forward)
				}
				r.Config.Upstream.ByLua = types.StringPointerValue(resp.Config.Upstream.ByLua)
				if resp.Config.Upstream.Headers == nil {
					r.Config.Upstream.Headers = nil
				} else {
					r.Config.Upstream.Headers = &tfTypes.RequestCalloutPluginConfigHeaders{}
					if len(resp.Config.Upstream.Headers.Custom) > 0 {
						r.Config.Upstream.Headers.Custom = make(map[string]types.String, len(resp.Config.Upstream.Headers.Custom))
						for key4, value4 := range resp.Config.Upstream.Headers.Custom {
							result4, _ := json.Marshal(value4)
							r.Config.Upstream.Headers.Custom[key4] = types.StringValue(string(result4))
						}
					}
					r.Config.Upstream.Headers.Forward = types.BoolPointerValue(resp.Config.Upstream.Headers.Forward)
				}
				if resp.Config.Upstream.Query == nil {
					r.Config.Upstream.Query = nil
				} else {
					r.Config.Upstream.Query = &tfTypes.RequestCalloutPluginConfigHeaders{}
					if len(resp.Config.Upstream.Query.Custom) > 0 {
						r.Config.Upstream.Query.Custom = make(map[string]types.String, len(resp.Config.Upstream.Query.Custom))
						for key5, value5 := range resp.Config.Upstream.Query.Custom {
							result5, _ := json.Marshal(value5)
							r.Config.Upstream.Query.Custom[key5] = types.StringValue(string(result5))
						}
					}
					r.Config.Upstream.Query.Forward = types.BoolPointerValue(resp.Config.Upstream.Query.Forward)
				}
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
