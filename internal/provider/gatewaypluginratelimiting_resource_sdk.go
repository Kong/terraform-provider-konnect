// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginRateLimitingResourceModel) ToSharedCreateRateLimitingPlugin() *shared.CreateRateLimitingPlugin {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var protocols []shared.CreateRateLimitingPluginProtocols = []shared.CreateRateLimitingPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.CreateRateLimitingPluginProtocols(protocolsItem.ValueString()))
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var consumer *shared.CreateRateLimitingPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateRateLimitingPluginConsumer{
			ID: id,
		}
	}
	var route *shared.CreateRateLimitingPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.CreateRateLimitingPluginRoute{
			ID: id1,
		}
	}
	var service *shared.CreateRateLimitingPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.CreateRateLimitingPluginService{
			ID: id2,
		}
	}
	day := new(float64)
	if !r.Config.Day.IsUnknown() && !r.Config.Day.IsNull() {
		*day, _ = r.Config.Day.ValueBigFloat().Float64()
	} else {
		day = nil
	}
	errorCode := new(float64)
	if !r.Config.ErrorCode.IsUnknown() && !r.Config.ErrorCode.IsNull() {
		*errorCode, _ = r.Config.ErrorCode.ValueBigFloat().Float64()
	} else {
		errorCode = nil
	}
	errorMessage := new(string)
	if !r.Config.ErrorMessage.IsUnknown() && !r.Config.ErrorMessage.IsNull() {
		*errorMessage = r.Config.ErrorMessage.ValueString()
	} else {
		errorMessage = nil
	}
	faultTolerant := new(bool)
	if !r.Config.FaultTolerant.IsUnknown() && !r.Config.FaultTolerant.IsNull() {
		*faultTolerant = r.Config.FaultTolerant.ValueBool()
	} else {
		faultTolerant = nil
	}
	headerName := new(string)
	if !r.Config.HeaderName.IsUnknown() && !r.Config.HeaderName.IsNull() {
		*headerName = r.Config.HeaderName.ValueString()
	} else {
		headerName = nil
	}
	hideClientHeaders := new(bool)
	if !r.Config.HideClientHeaders.IsUnknown() && !r.Config.HideClientHeaders.IsNull() {
		*hideClientHeaders = r.Config.HideClientHeaders.ValueBool()
	} else {
		hideClientHeaders = nil
	}
	hour := new(float64)
	if !r.Config.Hour.IsUnknown() && !r.Config.Hour.IsNull() {
		*hour, _ = r.Config.Hour.ValueBigFloat().Float64()
	} else {
		hour = nil
	}
	limitBy := new(shared.CreateRateLimitingPluginLimitBy)
	if !r.Config.LimitBy.IsUnknown() && !r.Config.LimitBy.IsNull() {
		*limitBy = shared.CreateRateLimitingPluginLimitBy(r.Config.LimitBy.ValueString())
	} else {
		limitBy = nil
	}
	minute := new(float64)
	if !r.Config.Minute.IsUnknown() && !r.Config.Minute.IsNull() {
		*minute, _ = r.Config.Minute.ValueBigFloat().Float64()
	} else {
		minute = nil
	}
	month := new(float64)
	if !r.Config.Month.IsUnknown() && !r.Config.Month.IsNull() {
		*month, _ = r.Config.Month.ValueBigFloat().Float64()
	} else {
		month = nil
	}
	path := new(string)
	if !r.Config.Path.IsUnknown() && !r.Config.Path.IsNull() {
		*path = r.Config.Path.ValueString()
	} else {
		path = nil
	}
	policy := new(shared.CreateRateLimitingPluginPolicy)
	if !r.Config.Policy.IsUnknown() && !r.Config.Policy.IsNull() {
		*policy = shared.CreateRateLimitingPluginPolicy(r.Config.Policy.ValueString())
	} else {
		policy = nil
	}
	redisDatabase := new(int64)
	if !r.Config.RedisDatabase.IsUnknown() && !r.Config.RedisDatabase.IsNull() {
		*redisDatabase = r.Config.RedisDatabase.ValueInt64()
	} else {
		redisDatabase = nil
	}
	redisHost := new(string)
	if !r.Config.RedisHost.IsUnknown() && !r.Config.RedisHost.IsNull() {
		*redisHost = r.Config.RedisHost.ValueString()
	} else {
		redisHost = nil
	}
	redisPassword := new(string)
	if !r.Config.RedisPassword.IsUnknown() && !r.Config.RedisPassword.IsNull() {
		*redisPassword = r.Config.RedisPassword.ValueString()
	} else {
		redisPassword = nil
	}
	redisPort := new(int64)
	if !r.Config.RedisPort.IsUnknown() && !r.Config.RedisPort.IsNull() {
		*redisPort = r.Config.RedisPort.ValueInt64()
	} else {
		redisPort = nil
	}
	redisServerName := new(string)
	if !r.Config.RedisServerName.IsUnknown() && !r.Config.RedisServerName.IsNull() {
		*redisServerName = r.Config.RedisServerName.ValueString()
	} else {
		redisServerName = nil
	}
	redisSsl := new(bool)
	if !r.Config.RedisSsl.IsUnknown() && !r.Config.RedisSsl.IsNull() {
		*redisSsl = r.Config.RedisSsl.ValueBool()
	} else {
		redisSsl = nil
	}
	redisSslVerify := new(bool)
	if !r.Config.RedisSslVerify.IsUnknown() && !r.Config.RedisSslVerify.IsNull() {
		*redisSslVerify = r.Config.RedisSslVerify.ValueBool()
	} else {
		redisSslVerify = nil
	}
	redisTimeout := new(float64)
	if !r.Config.RedisTimeout.IsUnknown() && !r.Config.RedisTimeout.IsNull() {
		*redisTimeout, _ = r.Config.RedisTimeout.ValueBigFloat().Float64()
	} else {
		redisTimeout = nil
	}
	redisUsername := new(string)
	if !r.Config.RedisUsername.IsUnknown() && !r.Config.RedisUsername.IsNull() {
		*redisUsername = r.Config.RedisUsername.ValueString()
	} else {
		redisUsername = nil
	}
	second := new(float64)
	if !r.Config.Second.IsUnknown() && !r.Config.Second.IsNull() {
		*second, _ = r.Config.Second.ValueBigFloat().Float64()
	} else {
		second = nil
	}
	syncRate := new(float64)
	if !r.Config.SyncRate.IsUnknown() && !r.Config.SyncRate.IsNull() {
		*syncRate, _ = r.Config.SyncRate.ValueBigFloat().Float64()
	} else {
		syncRate = nil
	}
	year := new(float64)
	if !r.Config.Year.IsUnknown() && !r.Config.Year.IsNull() {
		*year, _ = r.Config.Year.ValueBigFloat().Float64()
	} else {
		year = nil
	}
	config := shared.CreateRateLimitingPluginConfig{
		Day:               day,
		ErrorCode:         errorCode,
		ErrorMessage:      errorMessage,
		FaultTolerant:     faultTolerant,
		HeaderName:        headerName,
		HideClientHeaders: hideClientHeaders,
		Hour:              hour,
		LimitBy:           limitBy,
		Minute:            minute,
		Month:             month,
		Path:              path,
		Policy:            policy,
		RedisDatabase:     redisDatabase,
		RedisHost:         redisHost,
		RedisPassword:     redisPassword,
		RedisPort:         redisPort,
		RedisServerName:   redisServerName,
		RedisSsl:          redisSsl,
		RedisSslVerify:    redisSslVerify,
		RedisTimeout:      redisTimeout,
		RedisUsername:     redisUsername,
		Second:            second,
		SyncRate:          syncRate,
		Year:              year,
	}
	out := shared.CreateRateLimitingPlugin{
		Enabled:   enabled,
		Protocols: protocols,
		Tags:      tags,
		Consumer:  consumer,
		Route:     route,
		Service:   service,
		Config:    config,
	}
	return &out
}

func (r *GatewayPluginRateLimitingResourceModel) RefreshFromSharedRateLimitingPlugin(resp *shared.RateLimitingPlugin) {
	if resp != nil {
		if resp.Config.Day != nil {
			r.Config.Day = types.NumberValue(big.NewFloat(float64(*resp.Config.Day)))
		} else {
			r.Config.Day = types.NumberNull()
		}
		if resp.Config.ErrorCode != nil {
			r.Config.ErrorCode = types.NumberValue(big.NewFloat(float64(*resp.Config.ErrorCode)))
		} else {
			r.Config.ErrorCode = types.NumberNull()
		}
		r.Config.ErrorMessage = types.StringPointerValue(resp.Config.ErrorMessage)
		r.Config.FaultTolerant = types.BoolPointerValue(resp.Config.FaultTolerant)
		r.Config.HeaderName = types.StringPointerValue(resp.Config.HeaderName)
		r.Config.HideClientHeaders = types.BoolPointerValue(resp.Config.HideClientHeaders)
		if resp.Config.Hour != nil {
			r.Config.Hour = types.NumberValue(big.NewFloat(float64(*resp.Config.Hour)))
		} else {
			r.Config.Hour = types.NumberNull()
		}
		if resp.Config.LimitBy != nil {
			r.Config.LimitBy = types.StringValue(string(*resp.Config.LimitBy))
		} else {
			r.Config.LimitBy = types.StringNull()
		}
		if resp.Config.Minute != nil {
			r.Config.Minute = types.NumberValue(big.NewFloat(float64(*resp.Config.Minute)))
		} else {
			r.Config.Minute = types.NumberNull()
		}
		if resp.Config.Month != nil {
			r.Config.Month = types.NumberValue(big.NewFloat(float64(*resp.Config.Month)))
		} else {
			r.Config.Month = types.NumberNull()
		}
		r.Config.Path = types.StringPointerValue(resp.Config.Path)
		if resp.Config.Policy != nil {
			r.Config.Policy = types.StringValue(string(*resp.Config.Policy))
		} else {
			r.Config.Policy = types.StringNull()
		}
		r.Config.RedisDatabase = types.Int64PointerValue(resp.Config.RedisDatabase)
		r.Config.RedisHost = types.StringPointerValue(resp.Config.RedisHost)
		r.Config.RedisPassword = types.StringPointerValue(resp.Config.RedisPassword)
		r.Config.RedisPort = types.Int64PointerValue(resp.Config.RedisPort)
		r.Config.RedisServerName = types.StringPointerValue(resp.Config.RedisServerName)
		r.Config.RedisSsl = types.BoolPointerValue(resp.Config.RedisSsl)
		r.Config.RedisSslVerify = types.BoolPointerValue(resp.Config.RedisSslVerify)
		if resp.Config.RedisTimeout != nil {
			r.Config.RedisTimeout = types.NumberValue(big.NewFloat(float64(*resp.Config.RedisTimeout)))
		} else {
			r.Config.RedisTimeout = types.NumberNull()
		}
		r.Config.RedisUsername = types.StringPointerValue(resp.Config.RedisUsername)
		if resp.Config.Second != nil {
			r.Config.Second = types.NumberValue(big.NewFloat(float64(*resp.Config.Second)))
		} else {
			r.Config.Second = types.NumberNull()
		}
		if resp.Config.SyncRate != nil {
			r.Config.SyncRate = types.NumberValue(big.NewFloat(float64(*resp.Config.SyncRate)))
		} else {
			r.Config.SyncRate = types.NumberNull()
		}
		if resp.Config.Year != nil {
			r.Config.Year = types.NumberValue(big.NewFloat(float64(*resp.Config.Year)))
		} else {
			r.Config.Year = types.NumberNull()
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}
}
