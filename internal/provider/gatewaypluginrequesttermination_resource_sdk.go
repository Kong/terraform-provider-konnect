// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginRequestTerminationResourceModel) RefreshFromSharedRequestTerminationPlugin(ctx context.Context, resp *shared.RequestTerminationPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.RequestTerminationPluginConfig{}
			r.Config.Body = types.StringPointerValue(resp.Config.Body)
			r.Config.ContentType = types.StringPointerValue(resp.Config.ContentType)
			r.Config.Echo = types.BoolPointerValue(resp.Config.Echo)
			r.Config.Message = types.StringPointerValue(resp.Config.Message)
			r.Config.StatusCode = types.Int64PointerValue(resp.Config.StatusCode)
			r.Config.Trigger = types.StringPointerValue(resp.Config.Trigger)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.After.Access != nil {
					r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
					for _, v := range resp.Ordering.After.Access {
						r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
					}
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.Before.Access != nil {
					r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
					for _, v := range resp.Ordering.Before.Access {
						r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
					}
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginRequestTerminationResourceModel) ToOperationsCreateRequestterminationPluginRequest(ctx context.Context) (*operations.CreateRequestterminationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	requestTerminationPlugin, requestTerminationPluginDiags := r.ToSharedRequestTerminationPlugin(ctx)
	diags.Append(requestTerminationPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateRequestterminationPluginRequest{
		ControlPlaneID:           controlPlaneID,
		RequestTerminationPlugin: *requestTerminationPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTerminationResourceModel) ToOperationsDeleteRequestterminationPluginRequest(ctx context.Context) (*operations.DeleteRequestterminationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteRequestterminationPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTerminationResourceModel) ToOperationsGetRequestterminationPluginRequest(ctx context.Context) (*operations.GetRequestterminationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetRequestterminationPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTerminationResourceModel) ToOperationsUpdateRequestterminationPluginRequest(ctx context.Context) (*operations.UpdateRequestterminationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	requestTerminationPlugin, requestTerminationPluginDiags := r.ToSharedRequestTerminationPlugin(ctx)
	diags.Append(requestTerminationPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateRequestterminationPluginRequest{
		PluginID:                 pluginID,
		ControlPlaneID:           controlPlaneID,
		RequestTerminationPlugin: *requestTerminationPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTerminationResourceModel) ToSharedRequestTerminationPlugin(ctx context.Context) (*shared.RequestTerminationPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.RequestTerminationPluginOrdering
	if r.Ordering != nil {
		var after *shared.RequestTerminationPluginAfter
		if r.Ordering.After != nil {
			var access []string
			if r.Ordering.After.Access != nil {
				access = make([]string, 0, len(r.Ordering.After.Access))
				for _, accessItem := range r.Ordering.After.Access {
					access = append(access, accessItem.ValueString())
				}
			}
			after = &shared.RequestTerminationPluginAfter{
				Access: access,
			}
		}
		var before *shared.RequestTerminationPluginBefore
		if r.Ordering.Before != nil {
			var access1 []string
			if r.Ordering.Before.Access != nil {
				access1 = make([]string, 0, len(r.Ordering.Before.Access))
				for _, accessItem1 := range r.Ordering.Before.Access {
					access1 = append(access1, accessItem1.ValueString())
				}
			}
			before = &shared.RequestTerminationPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.RequestTerminationPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.RequestTerminationPluginPartials
	if r.Partials != nil {
		partials = make([]shared.RequestTerminationPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.RequestTerminationPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.RequestTerminationPluginConfig
	if r.Config != nil {
		body := new(string)
		if !r.Config.Body.IsUnknown() && !r.Config.Body.IsNull() {
			*body = r.Config.Body.ValueString()
		} else {
			body = nil
		}
		contentType := new(string)
		if !r.Config.ContentType.IsUnknown() && !r.Config.ContentType.IsNull() {
			*contentType = r.Config.ContentType.ValueString()
		} else {
			contentType = nil
		}
		echo := new(bool)
		if !r.Config.Echo.IsUnknown() && !r.Config.Echo.IsNull() {
			*echo = r.Config.Echo.ValueBool()
		} else {
			echo = nil
		}
		message := new(string)
		if !r.Config.Message.IsUnknown() && !r.Config.Message.IsNull() {
			*message = r.Config.Message.ValueString()
		} else {
			message = nil
		}
		statusCode := new(int64)
		if !r.Config.StatusCode.IsUnknown() && !r.Config.StatusCode.IsNull() {
			*statusCode = r.Config.StatusCode.ValueInt64()
		} else {
			statusCode = nil
		}
		trigger := new(string)
		if !r.Config.Trigger.IsUnknown() && !r.Config.Trigger.IsNull() {
			*trigger = r.Config.Trigger.ValueString()
		} else {
			trigger = nil
		}
		config = &shared.RequestTerminationPluginConfig{
			Body:        body,
			ContentType: contentType,
			Echo:        echo,
			Message:     message,
			StatusCode:  statusCode,
			Trigger:     trigger,
		}
	}
	var consumer *shared.RequestTerminationPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.RequestTerminationPluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.RequestTerminationPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.RequestTerminationPluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.RequestTerminationPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.RequestTerminationPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.RequestTerminationPluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.RequestTerminationPluginRoute{
			ID: id4,
		}
	}
	var service *shared.RequestTerminationPluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.RequestTerminationPluginService{
			ID: id5,
		}
	}
	out := shared.RequestTerminationPlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}
