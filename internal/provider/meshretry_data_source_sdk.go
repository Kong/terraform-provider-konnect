// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshRetryDataSourceModel) RefreshFromSharedMeshRetryItem(resp *shared.MeshRetryItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			if resp.Spec.TargetRef.Kind != nil {
				r.Spec.TargetRef.Kind = types.StringValue(string(*resp.Spec.TargetRef.Kind))
			} else {
				r.Spec.TargetRef.Kind = types.StringNull()
			}
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshRetryItemTo{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to1 tfTypes.MeshRetryItemTo
			if toItem.Default == nil {
				to1.Default = nil
			} else {
				to1.Default = &tfTypes.MeshRetryItemDefault{}
				if toItem.Default.Grpc == nil {
					to1.Default.Grpc = nil
				} else {
					to1.Default.Grpc = &tfTypes.MeshRetryItemGrpc{}
					if toItem.Default.Grpc.BackOff == nil {
						to1.Default.Grpc.BackOff = nil
					} else {
						to1.Default.Grpc.BackOff = &tfTypes.BackOff{}
						to1.Default.Grpc.BackOff.BaseInterval = types.StringPointerValue(toItem.Default.Grpc.BackOff.BaseInterval)
						to1.Default.Grpc.BackOff.MaxInterval = types.StringPointerValue(toItem.Default.Grpc.BackOff.MaxInterval)
					}
					if toItem.Default.Grpc.NumRetries != nil {
						to1.Default.Grpc.NumRetries = types.Int64Value(int64(*toItem.Default.Grpc.NumRetries))
					} else {
						to1.Default.Grpc.NumRetries = types.Int64Null()
					}
					to1.Default.Grpc.PerTryTimeout = types.StringPointerValue(toItem.Default.Grpc.PerTryTimeout)
					if toItem.Default.Grpc.RateLimitedBackOff == nil {
						to1.Default.Grpc.RateLimitedBackOff = nil
					} else {
						to1.Default.Grpc.RateLimitedBackOff = &tfTypes.RateLimitedBackOff{}
						to1.Default.Grpc.RateLimitedBackOff.MaxInterval = types.StringPointerValue(toItem.Default.Grpc.RateLimitedBackOff.MaxInterval)
						to1.Default.Grpc.RateLimitedBackOff.ResetHeaders = []tfTypes.ResetHeaders{}
						for resetHeadersCount, resetHeadersItem := range toItem.Default.Grpc.RateLimitedBackOff.ResetHeaders {
							var resetHeaders1 tfTypes.ResetHeaders
							resetHeaders1.Format = types.StringValue(string(resetHeadersItem.Format))
							resetHeaders1.Name = types.StringValue(resetHeadersItem.Name)
							if resetHeadersCount+1 > len(to1.Default.Grpc.RateLimitedBackOff.ResetHeaders) {
								to1.Default.Grpc.RateLimitedBackOff.ResetHeaders = append(to1.Default.Grpc.RateLimitedBackOff.ResetHeaders, resetHeaders1)
							} else {
								to1.Default.Grpc.RateLimitedBackOff.ResetHeaders[resetHeadersCount].Format = resetHeaders1.Format
								to1.Default.Grpc.RateLimitedBackOff.ResetHeaders[resetHeadersCount].Name = resetHeaders1.Name
							}
						}
					}
					to1.Default.Grpc.RetryOn = make([]types.String, 0, len(toItem.Default.Grpc.RetryOn))
					for _, v := range toItem.Default.Grpc.RetryOn {
						to1.Default.Grpc.RetryOn = append(to1.Default.Grpc.RetryOn, types.StringValue(string(v)))
					}
				}
				if toItem.Default.HTTP == nil {
					to1.Default.HTTP = nil
				} else {
					to1.Default.HTTP = &tfTypes.MeshRetryItemHTTP{}
					if toItem.Default.HTTP.BackOff == nil {
						to1.Default.HTTP.BackOff = nil
					} else {
						to1.Default.HTTP.BackOff = &tfTypes.BackOff{}
						to1.Default.HTTP.BackOff.BaseInterval = types.StringPointerValue(toItem.Default.HTTP.BackOff.BaseInterval)
						to1.Default.HTTP.BackOff.MaxInterval = types.StringPointerValue(toItem.Default.HTTP.BackOff.MaxInterval)
					}
					to1.Default.HTTP.HostSelection = []tfTypes.HostSelection{}
					for hostSelectionCount, hostSelectionItem := range toItem.Default.HTTP.HostSelection {
						var hostSelection1 tfTypes.HostSelection
						hostSelection1.Predicate = types.StringValue(string(hostSelectionItem.Predicate))
						if len(hostSelectionItem.Tags) > 0 {
							hostSelection1.Tags = make(map[string]types.String)
							for key3, value3 := range hostSelectionItem.Tags {
								hostSelection1.Tags[key3] = types.StringValue(value3)
							}
						}
						if hostSelectionItem.UpdateFrequency != nil {
							hostSelection1.UpdateFrequency = types.Int64Value(int64(*hostSelectionItem.UpdateFrequency))
						} else {
							hostSelection1.UpdateFrequency = types.Int64Null()
						}
						if hostSelectionCount+1 > len(to1.Default.HTTP.HostSelection) {
							to1.Default.HTTP.HostSelection = append(to1.Default.HTTP.HostSelection, hostSelection1)
						} else {
							to1.Default.HTTP.HostSelection[hostSelectionCount].Predicate = hostSelection1.Predicate
							to1.Default.HTTP.HostSelection[hostSelectionCount].Tags = hostSelection1.Tags
							to1.Default.HTTP.HostSelection[hostSelectionCount].UpdateFrequency = hostSelection1.UpdateFrequency
						}
					}
					to1.Default.HTTP.HostSelectionMaxAttempts = types.Int64PointerValue(toItem.Default.HTTP.HostSelectionMaxAttempts)
					if toItem.Default.HTTP.NumRetries != nil {
						to1.Default.HTTP.NumRetries = types.Int64Value(int64(*toItem.Default.HTTP.NumRetries))
					} else {
						to1.Default.HTTP.NumRetries = types.Int64Null()
					}
					to1.Default.HTTP.PerTryTimeout = types.StringPointerValue(toItem.Default.HTTP.PerTryTimeout)
					if toItem.Default.HTTP.RateLimitedBackOff == nil {
						to1.Default.HTTP.RateLimitedBackOff = nil
					} else {
						to1.Default.HTTP.RateLimitedBackOff = &tfTypes.RateLimitedBackOff{}
						to1.Default.HTTP.RateLimitedBackOff.MaxInterval = types.StringPointerValue(toItem.Default.HTTP.RateLimitedBackOff.MaxInterval)
						to1.Default.HTTP.RateLimitedBackOff.ResetHeaders = []tfTypes.ResetHeaders{}
						for resetHeadersCount1, resetHeadersItem1 := range toItem.Default.HTTP.RateLimitedBackOff.ResetHeaders {
							var resetHeaders3 tfTypes.ResetHeaders
							resetHeaders3.Format = types.StringValue(string(resetHeadersItem1.Format))
							resetHeaders3.Name = types.StringValue(resetHeadersItem1.Name)
							if resetHeadersCount1+1 > len(to1.Default.HTTP.RateLimitedBackOff.ResetHeaders) {
								to1.Default.HTTP.RateLimitedBackOff.ResetHeaders = append(to1.Default.HTTP.RateLimitedBackOff.ResetHeaders, resetHeaders3)
							} else {
								to1.Default.HTTP.RateLimitedBackOff.ResetHeaders[resetHeadersCount1].Format = resetHeaders3.Format
								to1.Default.HTTP.RateLimitedBackOff.ResetHeaders[resetHeadersCount1].Name = resetHeaders3.Name
							}
						}
					}
					to1.Default.HTTP.RetriableRequestHeaders = []tfTypes.Headers{}
					for retriableRequestHeadersCount, retriableRequestHeadersItem := range toItem.Default.HTTP.RetriableRequestHeaders {
						var retriableRequestHeaders1 tfTypes.Headers
						retriableRequestHeaders1.Name = types.StringValue(retriableRequestHeadersItem.Name)
						if retriableRequestHeadersItem.Type != nil {
							retriableRequestHeaders1.Type = types.StringValue(string(*retriableRequestHeadersItem.Type))
						} else {
							retriableRequestHeaders1.Type = types.StringNull()
						}
						retriableRequestHeaders1.Value = types.StringPointerValue(retriableRequestHeadersItem.Value)
						if retriableRequestHeadersCount+1 > len(to1.Default.HTTP.RetriableRequestHeaders) {
							to1.Default.HTTP.RetriableRequestHeaders = append(to1.Default.HTTP.RetriableRequestHeaders, retriableRequestHeaders1)
						} else {
							to1.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Name = retriableRequestHeaders1.Name
							to1.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Type = retriableRequestHeaders1.Type
							to1.Default.HTTP.RetriableRequestHeaders[retriableRequestHeadersCount].Value = retriableRequestHeaders1.Value
						}
					}
					to1.Default.HTTP.RetriableResponseHeaders = []tfTypes.Headers{}
					for retriableResponseHeadersCount, retriableResponseHeadersItem := range toItem.Default.HTTP.RetriableResponseHeaders {
						var retriableResponseHeaders1 tfTypes.Headers
						retriableResponseHeaders1.Name = types.StringValue(retriableResponseHeadersItem.Name)
						if retriableResponseHeadersItem.Type != nil {
							retriableResponseHeaders1.Type = types.StringValue(string(*retriableResponseHeadersItem.Type))
						} else {
							retriableResponseHeaders1.Type = types.StringNull()
						}
						retriableResponseHeaders1.Value = types.StringPointerValue(retriableResponseHeadersItem.Value)
						if retriableResponseHeadersCount+1 > len(to1.Default.HTTP.RetriableResponseHeaders) {
							to1.Default.HTTP.RetriableResponseHeaders = append(to1.Default.HTTP.RetriableResponseHeaders, retriableResponseHeaders1)
						} else {
							to1.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Name = retriableResponseHeaders1.Name
							to1.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Type = retriableResponseHeaders1.Type
							to1.Default.HTTP.RetriableResponseHeaders[retriableResponseHeadersCount].Value = retriableResponseHeaders1.Value
						}
					}
					to1.Default.HTTP.RetryOn = make([]types.String, 0, len(toItem.Default.HTTP.RetryOn))
					for _, v := range toItem.Default.HTTP.RetryOn {
						to1.Default.HTTP.RetryOn = append(to1.Default.HTTP.RetryOn, types.StringValue(v))
					}
				}
				if toItem.Default.TCP == nil {
					to1.Default.TCP = nil
				} else {
					to1.Default.TCP = &tfTypes.MeshRetryItemTCP{}
					if toItem.Default.TCP.MaxConnectAttempt != nil {
						to1.Default.TCP.MaxConnectAttempt = types.Int64Value(int64(*toItem.Default.TCP.MaxConnectAttempt))
					} else {
						to1.Default.TCP.MaxConnectAttempt = types.Int64Null()
					}
				}
			}
			if toItem.TargetRef.Kind != nil {
				to1.TargetRef.Kind = types.StringValue(string(*toItem.TargetRef.Kind))
			} else {
				to1.TargetRef.Kind = types.StringNull()
			}
			if len(toItem.TargetRef.Labels) > 0 {
				to1.TargetRef.Labels = make(map[string]types.String)
				for key4, value6 := range toItem.TargetRef.Labels {
					to1.TargetRef.Labels[key4] = types.StringValue(value6)
				}
			}
			to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to1.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to1.TargetRef.Tags = make(map[string]types.String)
				for key5, value7 := range toItem.TargetRef.Tags {
					to1.TargetRef.Tags[key5] = types.StringValue(value7)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to1)
			} else {
				r.Spec.To[toCount].Default = to1.Default
				r.Spec.To[toCount].TargetRef = to1.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
