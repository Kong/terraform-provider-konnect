// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v3/internal/validators"
	speakeasy_int64validators "github.com/kong/terraform-provider-konnect/v3/internal/validators/int64validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &GatewayPluginConfluentResource{}
var _ resource.ResourceWithImportState = &GatewayPluginConfluentResource{}

func NewGatewayPluginConfluentResource() resource.Resource {
	return &GatewayPluginConfluentResource{}
}

// GatewayPluginConfluentResource defines the resource implementation.
type GatewayPluginConfluentResource struct {
	// Provider configured SDK client.
	client *sdk.Konnect
}

// GatewayPluginConfluentResourceModel describes the resource data model.
type GatewayPluginConfluentResourceModel struct {
	Config         tfTypes.ConfluentPluginConfig `tfsdk:"config"`
	Consumer       *tfTypes.Set                  `tfsdk:"consumer"`
	ControlPlaneID types.String                  `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64                   `tfsdk:"created_at"`
	Enabled        types.Bool                    `tfsdk:"enabled"`
	ID             types.String                  `tfsdk:"id"`
	InstanceName   types.String                  `tfsdk:"instance_name"`
	Ordering       *tfTypes.AcePluginOrdering    `tfsdk:"ordering"`
	Partials       []tfTypes.Partials            `tfsdk:"partials"`
	Protocols      []types.String                `tfsdk:"protocols"`
	Route          *tfTypes.Set                  `tfsdk:"route"`
	Service        *tfTypes.Set                  `tfsdk:"service"`
	Tags           []types.String                `tfsdk:"tags"`
	UpdatedAt      types.Int64                   `tfsdk:"updated_at"`
}

func (r *GatewayPluginConfluentResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_plugin_confluent"
}

func (r *GatewayPluginConfluentResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayPluginConfluent Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"allowed_topics": schema.ListAttribute{
						Optional:    true,
						ElementType: types.StringType,
						Description: `The list of allowed topic names to which messages can be sent. The default topic configured in the ` + "`" + `topic` + "`" + ` field is always allowed, regardless of its inclusion in ` + "`" + `allowed_topics` + "`" + `.`,
					},
					"bootstrap_servers": schema.ListNestedAttribute{
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"host": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `A string representing a host name, such as example.com. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"port": schema.Int64Attribute{
									Computed:    true,
									Optional:    true,
									Description: `An integer representing a port number between 0 and 65535, inclusive. Not Null`,
									Validators: []validator.Int64{
										speakeasy_int64validators.NotNull(),
										int64validator.AtMost(65535),
									},
								},
							},
						},
						Description: `Set of bootstrap brokers in a ` + "`" + `{host: host, port: port}` + "`" + ` list format.`,
					},
					"cluster_api_key": schema.StringAttribute{
						Required:    true,
						Description: `Username/Apikey for SASL authentication.`,
					},
					"cluster_api_secret": schema.StringAttribute{
						Required:    true,
						Description: `Password/ApiSecret for SASL authentication.`,
					},
					"cluster_name": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `An identifier for the Kafka cluster. By default, this field generates a random string. You can also set your own custom cluster identifier.  If more than one Kafka plugin is configured without a ` + "`" + `cluster_name` + "`" + ` (that is, if the default autogenerated value is removed), these plugins will use the same producer, and by extension, the same cluster. Logs will be sent to the leader of the cluster.`,
					},
					"confluent_cloud_api_key": schema.StringAttribute{
						Optional:    true,
						Description: `Apikey for authentication with Confluent Cloud. This allows for management tasks such as creating topics, ACLs, etc.`,
					},
					"confluent_cloud_api_secret": schema.StringAttribute{
						Optional:    true,
						Description: `The corresponding secret for the Confluent Cloud API key.`,
					},
					"forward_body": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Include the request body in the message. At least one of these must be true: ` + "`" + `forward_method` + "`" + `, ` + "`" + `forward_uri` + "`" + `, ` + "`" + `forward_headers` + "`" + `, ` + "`" + `forward_body` + "`" + `. Default: true`,
					},
					"forward_headers": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Include the request headers in the message. At least one of these must be true: ` + "`" + `forward_method` + "`" + `, ` + "`" + `forward_uri` + "`" + `, ` + "`" + `forward_headers` + "`" + `, ` + "`" + `forward_body` + "`" + `. Default: false`,
					},
					"forward_method": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Include the request method in the message. At least one of these must be true: ` + "`" + `forward_method` + "`" + `, ` + "`" + `forward_uri` + "`" + `, ` + "`" + `forward_headers` + "`" + `, ` + "`" + `forward_body` + "`" + `. Default: false`,
					},
					"forward_uri": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Include the request URI and URI arguments (as in, query arguments) in the message. At least one of these must be true: ` + "`" + `forward_method` + "`" + `, ` + "`" + `forward_uri` + "`" + `, ` + "`" + `forward_headers` + "`" + `, ` + "`" + `forward_body` + "`" + `. Default: false`,
					},
					"keepalive": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(60000),
						Description: `Keepalive timeout in milliseconds. Default: 60000`,
					},
					"keepalive_enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Default: false`,
					},
					"key_query_arg": schema.StringAttribute{
						Optional:    true,
						Description: `The request query parameter name that contains the Kafka message key. If specified, messages with the same key will be sent to the same Kafka partition, ensuring consistent ordering.`,
					},
					"message_by_lua_functions": schema.ListAttribute{
						Optional:    true,
						ElementType: types.StringType,
						Description: `The Lua functions that manipulates the message being sent to the Kafka topic.`,
					},
					"producer_async": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Flag to enable asynchronous mode. Default: true`,
					},
					"producer_async_buffering_limits_messages_in_memory": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(50000),
						Description: `Maximum number of messages that can be buffered in memory in asynchronous mode. Default: 50000`,
					},
					"producer_async_flush_timeout": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(1000),
						Description: `Maximum time interval in milliseconds between buffer flushes in asynchronous mode. Default: 1000`,
					},
					"producer_request_acks": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(1),
						Description: `The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments; 1 for only the leader; and -1 for the full ISR (In-Sync Replica set). Default: 1; must be one of ["-1", "0", "1"]`,
						Validators: []validator.Int64{
							int64validator.OneOf(-1, 0, 1),
						},
					},
					"producer_request_limits_bytes_per_request": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(1048576),
						Description: `Maximum size of a Produce request in bytes. Default: 1048576`,
					},
					"producer_request_limits_messages_per_request": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(200),
						Description: `Maximum number of messages to include into a single producer request. Default: 200`,
					},
					"producer_request_retries_backoff_timeout": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(100),
						Description: `Backoff interval between retry attempts in milliseconds. Default: 100`,
					},
					"producer_request_retries_max_attempts": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(10),
						Description: `Maximum number of retry attempts per single Produce request. Default: 10`,
					},
					"producer_request_timeout": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(2000),
						Description: `Time to wait for a Produce response in milliseconds. Default: 2000`,
					},
					"schema_registry": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"confluent": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"authentication": types.ObjectType{
										AttrTypes: map[string]attr.Type{
											`basic`: types.ObjectType{
												AttrTypes: map[string]attr.Type{
													`password`: types.StringType,
													`username`: types.StringType,
												},
											},
											`mode`: types.StringType,
											`oauth2`: types.ObjectType{
												AttrTypes: map[string]attr.Type{
													`audience`: types.ListType{
														ElemType: types.StringType,
													},
													`client_id`:     types.StringType,
													`client_secret`: types.StringType,
													`grant_type`:    types.StringType,
													`password`:      types.StringType,
													`scopes`: types.ListType{
														ElemType: types.StringType,
													},
													`token_endpoint`: types.StringType,
													`token_headers`: types.MapType{
														ElemType: jsontypes.NormalizedType{},
													},
													`token_post_args`: types.MapType{
														ElemType: jsontypes.NormalizedType{},
													},
													`username`: types.StringType,
												},
											},
											`oauth2_client`: types.ObjectType{
												AttrTypes: map[string]attr.Type{
													`auth_method`:               types.StringType,
													`client_secret_jwt_alg`:     types.StringType,
													`http_proxy`:                types.StringType,
													`http_proxy_authorization`:  types.StringType,
													`http_version`:              types.Float64Type,
													`https_proxy`:               types.StringType,
													`https_proxy_authorization`: types.StringType,
													`keep_alive`:                types.BoolType,
													`no_proxy`:                  types.StringType,
													`ssl_verify`:                types.BoolType,
													`timeout`:                   types.Int64Type,
												},
											},
										},
									},
									"key_schema": types.ObjectType{
										AttrTypes: map[string]attr.Type{
											`schema_version`: types.StringType,
											`subject_name`:   types.StringType,
										},
									},
									"ssl_verify": types.BoolType,
									"ttl":        types.Float64Type,
									"url":        types.StringType,
									"value_schema": types.ObjectType{
										AttrTypes: map[string]attr.Type{
											`schema_version`: types.StringType,
											`subject_name`:   types.StringType,
										},
									},
								})),
								Attributes: map[string]schema.Attribute{
									"authentication": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
											"basic": types.ObjectType{
												AttrTypes: map[string]attr.Type{
													`password`: types.StringType,
													`username`: types.StringType,
												},
											},
											"mode": types.StringType,
											"oauth2": types.ObjectType{
												AttrTypes: map[string]attr.Type{
													`audience`: types.ListType{
														ElemType: types.StringType,
													},
													`client_id`:     types.StringType,
													`client_secret`: types.StringType,
													`grant_type`:    types.StringType,
													`password`:      types.StringType,
													`scopes`: types.ListType{
														ElemType: types.StringType,
													},
													`token_endpoint`: types.StringType,
													`token_headers`: types.MapType{
														ElemType: jsontypes.NormalizedType{},
													},
													`token_post_args`: types.MapType{
														ElemType: jsontypes.NormalizedType{},
													},
													`username`: types.StringType,
												},
											},
											"oauth2_client": types.ObjectType{
												AttrTypes: map[string]attr.Type{
													`auth_method`:               types.StringType,
													`client_secret_jwt_alg`:     types.StringType,
													`http_proxy`:                types.StringType,
													`http_proxy_authorization`:  types.StringType,
													`http_version`:              types.Float64Type,
													`https_proxy`:               types.StringType,
													`https_proxy_authorization`: types.StringType,
													`keep_alive`:                types.BoolType,
													`no_proxy`:                  types.StringType,
													`ssl_verify`:                types.BoolType,
													`timeout`:                   types.Int64Type,
												},
											},
										})),
										Attributes: map[string]schema.Attribute{
											"basic": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
													"password": types.StringType,
													"username": types.StringType,
												})),
												Attributes: map[string]schema.Attribute{
													"password": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
													"username": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
												},
											},
											"mode": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Default:     stringdefault.StaticString(`none`),
												Description: `Authentication mode to use with the schema registry. Default: "none"; must be one of ["basic", "none", "oauth2"]`,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"basic",
														"none",
														"oauth2",
													),
												},
											},
											"oauth2": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
													"audience": types.ListType{
														ElemType: types.StringType,
													},
													"client_id":     types.StringType,
													"client_secret": types.StringType,
													"grant_type":    types.StringType,
													"password":      types.StringType,
													"scopes": types.ListType{
														ElemType: types.StringType,
													},
													"token_endpoint": types.StringType,
													"token_headers": types.MapType{
														ElemType: jsontypes.NormalizedType{},
													},
													"token_post_args": types.MapType{
														ElemType: jsontypes.NormalizedType{},
													},
													"username": types.StringType,
												})),
												Attributes: map[string]schema.Attribute{
													"audience": schema.ListAttribute{
														Computed:    true,
														Optional:    true,
														Default:     listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
														ElementType: types.StringType,
														Description: `List of audiences passed to the IdP when obtaining a new token. Default: []`,
													},
													"client_id": schema.StringAttribute{
														Optional:    true,
														Description: `The client ID for the application registration in the IdP.`,
													},
													"client_secret": schema.StringAttribute{
														Optional:    true,
														Description: `The client secret for the application registration in the IdP.`,
													},
													"grant_type": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Default:     stringdefault.StaticString(`client_credentials`),
														Description: `The OAuth grant type to be used. Default: "client_credentials"; must be one of ["client_credentials", "password"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"client_credentials",
																"password",
															),
														},
													},
													"password": schema.StringAttribute{
														Optional:    true,
														Description: `The password to use if ` + "`" + `config.oauth.grant_type` + "`" + ` is set to ` + "`" + `password` + "`" + `.`,
													},
													"scopes": schema.ListAttribute{
														Computed:    true,
														Optional:    true,
														Default:     listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{types.StringValue("openid")})),
														ElementType: types.StringType,
														Description: `List of scopes to request from the IdP when obtaining a new token. Default: ["openid"]`,
													},
													"token_endpoint": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Description: `The token endpoint URI. Not Null`,
														Validators: []validator.String{
															speakeasy_stringvalidators.NotNull(),
														},
													},
													"token_headers": schema.MapAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: jsontypes.NormalizedType{},
														Description: `Extra headers to be passed in the token endpoint request.`,
														Validators: []validator.Map{
															mapvalidator.ValueStringsAre(validators.IsValidJSON()),
														},
													},
													"token_post_args": schema.MapAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: jsontypes.NormalizedType{},
														Description: `Extra post arguments to be passed in the token endpoint request.`,
														Validators: []validator.Map{
															mapvalidator.ValueStringsAre(validators.IsValidJSON()),
														},
													},
													"username": schema.StringAttribute{
														Optional:    true,
														Description: `The username to use if ` + "`" + `config.oauth.grant_type` + "`" + ` is set to ` + "`" + `password` + "`" + `.`,
													},
												},
											},
											"oauth2_client": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
													"auth_method":               types.StringType,
													"client_secret_jwt_alg":     types.StringType,
													"http_proxy":                types.StringType,
													"http_proxy_authorization":  types.StringType,
													"http_version":              types.Float64Type,
													"https_proxy":               types.StringType,
													"https_proxy_authorization": types.StringType,
													"keep_alive":                types.BoolType,
													"no_proxy":                  types.StringType,
													"ssl_verify":                types.BoolType,
													"timeout":                   types.Int64Type,
												})),
												Attributes: map[string]schema.Attribute{
													"auth_method": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Default:     stringdefault.StaticString(`client_secret_post`),
														Description: `The authentication method used in client requests to the IdP. Supported values are: ` + "`" + `client_secret_basic` + "`" + ` to send ` + "`" + `client_id` + "`" + ` and ` + "`" + `client_secret` + "`" + ` in the ` + "`" + `Authorization: Basic` + "`" + ` header, ` + "`" + `client_secret_post` + "`" + ` to send ` + "`" + `client_id` + "`" + ` and ` + "`" + `client_secret` + "`" + ` as part of the request body, or ` + "`" + `client_secret_jwt` + "`" + ` to send a JWT signed with the ` + "`" + `client_secret` + "`" + ` using the client assertion as part of the body. Default: "client_secret_post"; must be one of ["client_secret_basic", "client_secret_jwt", "client_secret_post", "none"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"client_secret_basic",
																"client_secret_jwt",
																"client_secret_post",
																"none",
															),
														},
													},
													"client_secret_jwt_alg": schema.StringAttribute{
														Computed:    true,
														Optional:    true,
														Default:     stringdefault.StaticString(`HS512`),
														Description: `The algorithm to use with JWT when using ` + "`" + `client_secret_jwt` + "`" + ` authentication. Default: "HS512"; must be one of ["HS256", "HS512"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"HS256",
																"HS512",
															),
														},
													},
													"http_proxy": schema.StringAttribute{
														Optional:    true,
														Description: `The proxy to use when making HTTP requests to the IdP.`,
													},
													"http_proxy_authorization": schema.StringAttribute{
														Optional:    true,
														Description: `The ` + "`" + `Proxy-Authorization` + "`" + ` header value to be used with ` + "`" + `http_proxy` + "`" + `.`,
													},
													"http_version": schema.Float64Attribute{
														Computed:    true,
														Optional:    true,
														Default:     float64default.StaticFloat64(1.1),
														Description: `The HTTP version used for requests made by this plugin. Supported values: ` + "`" + `1.1` + "`" + ` for HTTP 1.1 and ` + "`" + `1.0` + "`" + ` for HTTP 1.0. Default: 1.1`,
													},
													"https_proxy": schema.StringAttribute{
														Optional:    true,
														Description: `The proxy to use when making HTTPS requests to the IdP.`,
													},
													"https_proxy_authorization": schema.StringAttribute{
														Optional:    true,
														Description: `The ` + "`" + `Proxy-Authorization` + "`" + ` header value to be used with ` + "`" + `https_proxy` + "`" + `.`,
													},
													"keep_alive": schema.BoolAttribute{
														Computed:    true,
														Optional:    true,
														Default:     booldefault.StaticBool(true),
														Description: `Whether to use keepalive connections to the IdP. Default: true`,
													},
													"no_proxy": schema.StringAttribute{
														Optional:    true,
														Description: `A comma-separated list of hosts that should not be proxied.`,
													},
													"ssl_verify": schema.BoolAttribute{
														Computed:    true,
														Optional:    true,
														Default:     booldefault.StaticBool(false),
														Description: `Whether to verify the certificate presented by the IdP when using HTTPS. Default: false`,
													},
													"timeout": schema.Int64Attribute{
														Computed:    true,
														Optional:    true,
														Default:     int64default.StaticInt64(10000),
														Description: `Network I/O timeout for requests to the IdP in milliseconds. Default: 10000`,
														Validators: []validator.Int64{
															int64validator.AtMost(2147483646),
														},
													},
												},
											},
										},
									},
									"key_schema": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
											"schema_version": types.StringType,
											"subject_name":   types.StringType,
										})),
										Attributes: map[string]schema.Attribute{
											"schema_version": schema.StringAttribute{
												Optional:    true,
												Description: `The schema version to use for serialization/deserialization. Use 'latest' to always fetch the most recent version.`,
											},
											"subject_name": schema.StringAttribute{
												Optional:    true,
												Description: `The name of the subject`,
											},
										},
									},
									"ssl_verify": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `Set to false to disable SSL certificate verification when connecting to the schema registry. Default: true`,
									},
									"ttl": schema.Float64Attribute{
										Optional:    true,
										Description: `The TTL in seconds for the schema registry cache.`,
										Validators: []validator.Float64{
											float64validator.Between(0, 3600),
										},
									},
									"url": schema.StringAttribute{
										Optional:    true,
										Description: `The URL of the schema registry.`,
									},
									"value_schema": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
											"schema_version": types.StringType,
											"subject_name":   types.StringType,
										})),
										Attributes: map[string]schema.Attribute{
											"schema_version": schema.StringAttribute{
												Optional:    true,
												Description: `The schema version to use for serialization/deserialization. Use 'latest' to always fetch the most recent version.`,
											},
											"subject_name": schema.StringAttribute{
												Optional:    true,
												Description: `The name of the subject`,
											},
										},
									},
								},
							},
						},
						Description: `The plugin-global schema registry configuration. This can be overwritten by the topic configuration.`,
					},
					"timeout": schema.Int64Attribute{
						Computed:    true,
						Optional:    true,
						Default:     int64default.StaticInt64(10000),
						Description: `Socket timeout in milliseconds. Default: 10000`,
					},
					"topic": schema.StringAttribute{
						Required:    true,
						Description: `The default Kafka topic to publish to if the query parameter defined in the ` + "`" + `topics_query_arg` + "`" + ` does not exist in the request`,
					},
					"topics_query_arg": schema.StringAttribute{
						Optional:    true,
						Description: `The request query parameter name that contains the topics to publish to`,
					},
				},
			},
			"consumer": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.`,
			},
			"control_plane_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the plugin is applied. Default: true`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string representing a UUID (universally unique identifier).`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"instance_name": schema.StringAttribute{
				Optional:    true,
				Description: `A unique string representing a UTF-8 encoded name.`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"after": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
					"before": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
				})),
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A string representing a UUID (universally unique identifier).`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A unique string representing a UTF-8 encoded name.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
				Description: `A list of partials to be used by the plugin.`,
			},
			"protocols": schema.SetAttribute{
				Computed: true,
				Optional: true,
				Default: setdefault.StaticValue(types.SetValueMust(types.StringType, []attr.Value{
					types.StringValue("grpc"),
					types.StringValue("grpcs"),
					types.StringValue("http"),
					types.StringValue("https"),
				})),
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols. Default: ["grpc","grpcs","http","https"]`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
		},
	}
}

func (r *GatewayPluginConfluentResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayPluginConfluentResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *GatewayPluginConfluentResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateConfluentPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.CreateConfluentPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ConfluentPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedConfluentPlugin(ctx, res.ConfluentPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginConfluentResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *GatewayPluginConfluentResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetConfluentPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetConfluentPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ConfluentPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedConfluentPlugin(ctx, res.ConfluentPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginConfluentResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *GatewayPluginConfluentResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateConfluentPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.UpdateConfluentPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ConfluentPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedConfluentPlugin(ctx, res.ConfluentPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginConfluentResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *GatewayPluginConfluentResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteConfluentPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.DeleteConfluentPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *GatewayPluginConfluentResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ControlPlaneID string `json:"control_plane_id"`
		ID             string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"control_plane_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": "3473c251-5b6c-4f45-b1ff-7ede735a366d"}': `+err.Error())
		return
	}

	if len(data.ControlPlaneID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field control_plane_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("control_plane_id"), data.ControlPlaneID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"3473c251-5b6c-4f45-b1ff-7ede735a366d"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}
