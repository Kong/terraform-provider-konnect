// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshOPADataSourceModel) RefreshFromSharedMeshOPAItem(resp *shared.MeshOPAItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Default == nil {
			r.Spec.Default = nil
		} else {
			r.Spec.Default = &tfTypes.MeshOPAItemDefault{}
			if resp.Spec.Default.AgentConfig == nil {
				r.Spec.Default.AgentConfig = nil
			} else {
				r.Spec.Default.AgentConfig = &tfTypes.CaCert{}
				r.Spec.Default.AgentConfig.Inline = types.StringPointerValue(resp.Spec.Default.AgentConfig.Inline)
				r.Spec.Default.AgentConfig.InlineString = types.StringPointerValue(resp.Spec.Default.AgentConfig.InlineString)
				r.Spec.Default.AgentConfig.Secret = types.StringPointerValue(resp.Spec.Default.AgentConfig.Secret)
			}
			r.Spec.Default.AppendPolicies = []tfTypes.AppendPolicies{}
			if len(r.Spec.Default.AppendPolicies) > len(resp.Spec.Default.AppendPolicies) {
				r.Spec.Default.AppendPolicies = r.Spec.Default.AppendPolicies[:len(resp.Spec.Default.AppendPolicies)]
			}
			for appendPoliciesCount, appendPoliciesItem := range resp.Spec.Default.AppendPolicies {
				var appendPolicies1 tfTypes.AppendPolicies
				appendPolicies1.IgnoreDecision = types.BoolPointerValue(appendPoliciesItem.IgnoreDecision)
				appendPolicies1.Rego.Inline = types.StringPointerValue(appendPoliciesItem.Rego.Inline)
				appendPolicies1.Rego.InlineString = types.StringPointerValue(appendPoliciesItem.Rego.InlineString)
				appendPolicies1.Rego.Secret = types.StringPointerValue(appendPoliciesItem.Rego.Secret)
				if appendPoliciesCount+1 > len(r.Spec.Default.AppendPolicies) {
					r.Spec.Default.AppendPolicies = append(r.Spec.Default.AppendPolicies, appendPolicies1)
				} else {
					r.Spec.Default.AppendPolicies[appendPoliciesCount].IgnoreDecision = appendPolicies1.IgnoreDecision
					r.Spec.Default.AppendPolicies[appendPoliciesCount].Rego = appendPolicies1.Rego
				}
			}
			if resp.Spec.Default.AuthConfig == nil {
				r.Spec.Default.AuthConfig = nil
			} else {
				r.Spec.Default.AuthConfig = &tfTypes.AuthConfig{}
				if resp.Spec.Default.AuthConfig.OnAgentFailure != nil {
					r.Spec.Default.AuthConfig.OnAgentFailure = types.StringValue(string(*resp.Spec.Default.AuthConfig.OnAgentFailure))
				} else {
					r.Spec.Default.AuthConfig.OnAgentFailure = types.StringNull()
				}
				if resp.Spec.Default.AuthConfig.RequestBody == nil {
					r.Spec.Default.AuthConfig.RequestBody = nil
				} else {
					r.Spec.Default.AuthConfig.RequestBody = &tfTypes.RequestBody{}
					if resp.Spec.Default.AuthConfig.RequestBody.MaxSize != nil {
						r.Spec.Default.AuthConfig.RequestBody.MaxSize = types.Int64Value(int64(*resp.Spec.Default.AuthConfig.RequestBody.MaxSize))
					} else {
						r.Spec.Default.AuthConfig.RequestBody.MaxSize = types.Int64Null()
					}
					r.Spec.Default.AuthConfig.RequestBody.SendRawBody = types.BoolPointerValue(resp.Spec.Default.AuthConfig.RequestBody.SendRawBody)
				}
				if resp.Spec.Default.AuthConfig.StatusOnError != nil {
					r.Spec.Default.AuthConfig.StatusOnError = types.Int64Value(int64(*resp.Spec.Default.AuthConfig.StatusOnError))
				} else {
					r.Spec.Default.AuthConfig.StatusOnError = types.Int64Null()
				}
				r.Spec.Default.AuthConfig.Timeout = types.StringPointerValue(resp.Spec.Default.AuthConfig.Timeout)
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			if resp.Spec.TargetRef.Kind != nil {
				r.Spec.TargetRef.Kind = types.StringValue(string(*resp.Spec.TargetRef.Kind))
			} else {
				r.Spec.TargetRef.Kind = types.StringNull()
			}
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
