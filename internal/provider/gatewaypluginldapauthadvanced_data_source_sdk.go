// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginLdapAuthAdvancedDataSourceModel) RefreshFromSharedLdapAuthAdvancedPlugin(resp *shared.LdapAuthAdvancedPlugin) {
	if resp != nil {
		r.Config.Anonymous = types.StringPointerValue(resp.Config.Anonymous)
		r.Config.Attribute = types.StringPointerValue(resp.Config.Attribute)
		r.Config.BaseDn = types.StringPointerValue(resp.Config.BaseDn)
		r.Config.BindDn = types.StringPointerValue(resp.Config.BindDn)
		if resp.Config.CacheTTL != nil {
			r.Config.CacheTTL = types.NumberValue(big.NewFloat(float64(*resp.Config.CacheTTL)))
		} else {
			r.Config.CacheTTL = types.NumberNull()
		}
		r.Config.ConsumerBy = []types.String{}
		for _, v := range resp.Config.ConsumerBy {
			r.Config.ConsumerBy = append(r.Config.ConsumerBy, types.StringValue(string(v)))
		}
		r.Config.ConsumerOptional = types.BoolPointerValue(resp.Config.ConsumerOptional)
		r.Config.GroupBaseDn = types.StringPointerValue(resp.Config.GroupBaseDn)
		r.Config.GroupMemberAttribute = types.StringPointerValue(resp.Config.GroupMemberAttribute)
		r.Config.GroupNameAttribute = types.StringPointerValue(resp.Config.GroupNameAttribute)
		r.Config.GroupsRequired = []types.String{}
		for _, v := range resp.Config.GroupsRequired {
			r.Config.GroupsRequired = append(r.Config.GroupsRequired, types.StringValue(v))
		}
		r.Config.HeaderType = types.StringPointerValue(resp.Config.HeaderType)
		r.Config.HideCredentials = types.BoolPointerValue(resp.Config.HideCredentials)
		if resp.Config.Keepalive != nil {
			r.Config.Keepalive = types.NumberValue(big.NewFloat(float64(*resp.Config.Keepalive)))
		} else {
			r.Config.Keepalive = types.NumberNull()
		}
		r.Config.LdapHost = types.StringPointerValue(resp.Config.LdapHost)
		r.Config.LdapPassword = types.StringPointerValue(resp.Config.LdapPassword)
		if resp.Config.LdapPort != nil {
			r.Config.LdapPort = types.NumberValue(big.NewFloat(float64(*resp.Config.LdapPort)))
		} else {
			r.Config.LdapPort = types.NumberNull()
		}
		r.Config.Ldaps = types.BoolPointerValue(resp.Config.Ldaps)
		r.Config.LogSearchResults = types.BoolPointerValue(resp.Config.LogSearchResults)
		r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
		r.Config.StartTLS = types.BoolPointerValue(resp.Config.StartTLS)
		if resp.Config.Timeout != nil {
			r.Config.Timeout = types.NumberValue(big.NewFloat(float64(*resp.Config.Timeout)))
		} else {
			r.Config.Timeout = types.NumberNull()
		}
		r.Config.VerifyLdapHost = types.BoolPointerValue(resp.Config.VerifyLdapHost)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = []types.String{}
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = []types.String{}
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
