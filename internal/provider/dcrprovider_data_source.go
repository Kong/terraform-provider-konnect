// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DcrProviderDataSource{}
var _ datasource.DataSourceWithConfigure = &DcrProviderDataSource{}

func NewDcrProviderDataSource() datasource.DataSource {
	return &DcrProviderDataSource{}
}

// DcrProviderDataSource is the data source implementation.
type DcrProviderDataSource struct {
	client *sdk.Konnect
}

// DcrProviderDataSourceModel describes the data model.
type DcrProviderDataSourceModel struct {
	Active      types.Bool                   `tfsdk:"active"`
	Auth0       *tfTypes.DcrProviderAuth01   `tfsdk:"auth0" tfPlanOnly:"true"`
	AzureAd     *tfTypes.DcrProviderAzureAd1 `tfsdk:"azure_ad" tfPlanOnly:"true"`
	Curity      *tfTypes.DcrProviderAzureAd1 `tfsdk:"curity" tfPlanOnly:"true"`
	DisplayName types.String                 `tfsdk:"display_name"`
	HTTP        *tfTypes.DcrProviderHTTP1    `tfsdk:"http" tfPlanOnly:"true"`
	ID          types.String                 `tfsdk:"id"`
	Issuer      types.String                 `tfsdk:"issuer"`
	Name        types.String                 `tfsdk:"name"`
	Okta        *tfTypes.DcrProviderOkta1    `tfsdk:"okta" tfPlanOnly:"true"`
}

// Metadata returns the data source type name.
func (r *DcrProviderDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dcr_provider"
}

// Schema defines the schema for the data source.
func (r *DcrProviderDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "DcrProvider DataSource",

		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Computed:    true,
				Description: `At least one active auth strategy is using this DCR provider.`,
			},
			"auth0": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one active auth strategy is using this DCR provider.`,
					},
					"dcr_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"initial_client_audience": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `This is the audience value used for the initial client.` + "\n" +
									`If using a custom domain on Auth0, this must be set as to the Auth0 Management API audience value.` + "\n" +
									`If left blank, the issuer will be used instead.`,
							},
							"initial_client_id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `This ID should be copied from your identity provider's settings after you create a client` + "\n" +
									`and assign it as the management client for DCR for this developer portal`,
							},
							"use_developer_managed_scopes": schema.BoolAttribute{
								Computed: true,
							},
						},
						Description: `A DCR provider configuration for Auth0`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"issuer": schema.StringAttribute{
						Computed:    true,
						Description: `The issuer of the DCR provider.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.`,
					},
					"provider_type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A DCR provider for Auth0 -- only properties not included in DcrProviderBase`,
			},
			"azure_ad": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one active auth strategy is using this DCR provider.`,
					},
					"dcr_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"initial_client_id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `This ID should be copied from your identity provider's settings after you create a client` + "\n" +
									`and assign it as the management client for DCR for this developer portal`,
							},
						},
						Description: `A DCR provider configuration for Azure AD`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"issuer": schema.StringAttribute{
						Computed:    true,
						Description: `The issuer of the DCR provider.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.`,
					},
					"provider_type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A DCR provider for Azure AD -- only properties not included in DcrProviderBase`,
			},
			"curity": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one active auth strategy is using this DCR provider.`,
					},
					"dcr_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"initial_client_id": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `This ID should be copied from your identity provider's settings after you create a client` + "\n" +
									`and assign it as the management client for DCR for this developer portal`,
							},
						},
						Description: `A DCR provider configuration for Curity`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"issuer": schema.StringAttribute{
						Computed:    true,
						Description: `The issuer of the DCR provider.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.`,
					},
					"provider_type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A DCR provider for Curity -- only properties not included in DcrProviderBase`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
			},
			"http": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one active auth strategy is using this DCR provider.`,
					},
					"dcr_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"dcr_base_url": schema.StringAttribute{
								Computed: true,
							},
							"disable_event_hooks": schema.BoolAttribute{
								Computed:    true,
								Description: `This flag disables all the event-hooks on the application flow for the DCR provider.`,
							},
							"disable_refresh_secret": schema.BoolAttribute{
								Computed:    true,
								Description: `This flag disable the refresh-secret endpoint on the application flow for the DCR provider.`,
							},
						},
						Description: `A DCR provider configuration for HTTP`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"issuer": schema.StringAttribute{
						Computed:    true,
						Description: `The issuer of the DCR provider.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.`,
					},
					"provider_type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A DCR provider for HTTP -- only properties not included in DcrProviderBase`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Contains a unique identifier used by the API for this resource.`,
			},
			"issuer": schema.StringAttribute{
				Computed:    true,
				Description: `The issuer of the DCR provider.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.`,
			},
			"okta": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one active auth strategy is using this DCR provider.`,
					},
					"dcr_config": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `A DCR provider configuration for Okta`,
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"issuer": schema.StringAttribute{
						Computed:    true,
						Description: `The issuer of the DCR provider.`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.`,
					},
					"provider_type": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `A DCR provider for Okta -- only properties not included in DcrProviderBase`,
			},
		},
	}
}

func (r *DcrProviderDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DcrProviderDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DcrProviderDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var dcrProviderID string
	dcrProviderID = data.ID.ValueString()

	request := operations.GetDcrProviderRequest{
		DcrProviderID: dcrProviderID,
	}
	res, err := r.client.DCRProviders.GetDcrProvider(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DcrProviderResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedDcrProviderResponse(res.DcrProviderResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
