// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginOasValidationResourceModel) RefreshFromSharedOasValidationPlugin(ctx context.Context, resp *shared.OasValidationPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.AllowedHeaderParameters = types.StringPointerValue(resp.Config.AllowedHeaderParameters)
		r.Config.APISpec = types.StringValue(resp.Config.APISpec)
		r.Config.APISpecEncoded = types.BoolPointerValue(resp.Config.APISpecEncoded)
		r.Config.CustomBasePath = types.StringPointerValue(resp.Config.CustomBasePath)
		r.Config.HeaderParameterCheck = types.BoolPointerValue(resp.Config.HeaderParameterCheck)
		r.Config.IncludeBasePath = types.BoolPointerValue(resp.Config.IncludeBasePath)
		r.Config.NotifyOnlyRequestValidationFailure = types.BoolPointerValue(resp.Config.NotifyOnlyRequestValidationFailure)
		r.Config.NotifyOnlyResponseBodyValidationFailure = types.BoolPointerValue(resp.Config.NotifyOnlyResponseBodyValidationFailure)
		r.Config.QueryParameterCheck = types.BoolPointerValue(resp.Config.QueryParameterCheck)
		r.Config.ValidateRequestBody = types.BoolPointerValue(resp.Config.ValidateRequestBody)
		r.Config.ValidateRequestHeaderParams = types.BoolPointerValue(resp.Config.ValidateRequestHeaderParams)
		r.Config.ValidateRequestQueryParams = types.BoolPointerValue(resp.Config.ValidateRequestQueryParams)
		r.Config.ValidateRequestURIParams = types.BoolPointerValue(resp.Config.ValidateRequestURIParams)
		r.Config.ValidateResponseBody = types.BoolPointerValue(resp.Config.ValidateResponseBody)
		r.Config.VerboseResponse = types.BoolPointerValue(resp.Config.VerboseResponse)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.After.Access != nil {
					r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
					for _, v := range resp.Ordering.After.Access {
						r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
					}
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.Before.Access != nil {
					r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
					for _, v := range resp.Ordering.Before.Access {
						r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
					}
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginOasValidationResourceModel) ToOperationsCreateOasvalidationPluginRequest(ctx context.Context) (*operations.CreateOasvalidationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	oasValidationPlugin, oasValidationPluginDiags := r.ToSharedOasValidationPlugin(ctx)
	diags.Append(oasValidationPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOasvalidationPluginRequest{
		ControlPlaneID:      controlPlaneID,
		OasValidationPlugin: *oasValidationPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginOasValidationResourceModel) ToOperationsDeleteOasvalidationPluginRequest(ctx context.Context) (*operations.DeleteOasvalidationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteOasvalidationPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginOasValidationResourceModel) ToOperationsGetOasvalidationPluginRequest(ctx context.Context) (*operations.GetOasvalidationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetOasvalidationPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginOasValidationResourceModel) ToOperationsUpdateOasvalidationPluginRequest(ctx context.Context) (*operations.UpdateOasvalidationPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	oasValidationPlugin, oasValidationPluginDiags := r.ToSharedOasValidationPlugin(ctx)
	diags.Append(oasValidationPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOasvalidationPluginRequest{
		PluginID:            pluginID,
		ControlPlaneID:      controlPlaneID,
		OasValidationPlugin: *oasValidationPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginOasValidationResourceModel) ToSharedOasValidationPlugin(ctx context.Context) (*shared.OasValidationPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.OasValidationPluginOrdering
	if r.Ordering != nil {
		var after *shared.OasValidationPluginAfter
		if r.Ordering.After != nil {
			var access []string
			if r.Ordering.After.Access != nil {
				access = make([]string, 0, len(r.Ordering.After.Access))
				for _, accessItem := range r.Ordering.After.Access {
					access = append(access, accessItem.ValueString())
				}
			}
			after = &shared.OasValidationPluginAfter{
				Access: access,
			}
		}
		var before *shared.OasValidationPluginBefore
		if r.Ordering.Before != nil {
			var access1 []string
			if r.Ordering.Before.Access != nil {
				access1 = make([]string, 0, len(r.Ordering.Before.Access))
				for _, accessItem1 := range r.Ordering.Before.Access {
					access1 = append(access1, accessItem1.ValueString())
				}
			}
			before = &shared.OasValidationPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.OasValidationPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.OasValidationPluginPartials
	if r.Partials != nil {
		partials = make([]shared.OasValidationPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.OasValidationPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	allowedHeaderParameters := new(string)
	if !r.Config.AllowedHeaderParameters.IsUnknown() && !r.Config.AllowedHeaderParameters.IsNull() {
		*allowedHeaderParameters = r.Config.AllowedHeaderParameters.ValueString()
	} else {
		allowedHeaderParameters = nil
	}
	var apiSpec string
	apiSpec = r.Config.APISpec.ValueString()

	apiSpecEncoded := new(bool)
	if !r.Config.APISpecEncoded.IsUnknown() && !r.Config.APISpecEncoded.IsNull() {
		*apiSpecEncoded = r.Config.APISpecEncoded.ValueBool()
	} else {
		apiSpecEncoded = nil
	}
	customBasePath := new(string)
	if !r.Config.CustomBasePath.IsUnknown() && !r.Config.CustomBasePath.IsNull() {
		*customBasePath = r.Config.CustomBasePath.ValueString()
	} else {
		customBasePath = nil
	}
	headerParameterCheck := new(bool)
	if !r.Config.HeaderParameterCheck.IsUnknown() && !r.Config.HeaderParameterCheck.IsNull() {
		*headerParameterCheck = r.Config.HeaderParameterCheck.ValueBool()
	} else {
		headerParameterCheck = nil
	}
	includeBasePath := new(bool)
	if !r.Config.IncludeBasePath.IsUnknown() && !r.Config.IncludeBasePath.IsNull() {
		*includeBasePath = r.Config.IncludeBasePath.ValueBool()
	} else {
		includeBasePath = nil
	}
	notifyOnlyRequestValidationFailure := new(bool)
	if !r.Config.NotifyOnlyRequestValidationFailure.IsUnknown() && !r.Config.NotifyOnlyRequestValidationFailure.IsNull() {
		*notifyOnlyRequestValidationFailure = r.Config.NotifyOnlyRequestValidationFailure.ValueBool()
	} else {
		notifyOnlyRequestValidationFailure = nil
	}
	notifyOnlyResponseBodyValidationFailure := new(bool)
	if !r.Config.NotifyOnlyResponseBodyValidationFailure.IsUnknown() && !r.Config.NotifyOnlyResponseBodyValidationFailure.IsNull() {
		*notifyOnlyResponseBodyValidationFailure = r.Config.NotifyOnlyResponseBodyValidationFailure.ValueBool()
	} else {
		notifyOnlyResponseBodyValidationFailure = nil
	}
	queryParameterCheck := new(bool)
	if !r.Config.QueryParameterCheck.IsUnknown() && !r.Config.QueryParameterCheck.IsNull() {
		*queryParameterCheck = r.Config.QueryParameterCheck.ValueBool()
	} else {
		queryParameterCheck = nil
	}
	validateRequestBody := new(bool)
	if !r.Config.ValidateRequestBody.IsUnknown() && !r.Config.ValidateRequestBody.IsNull() {
		*validateRequestBody = r.Config.ValidateRequestBody.ValueBool()
	} else {
		validateRequestBody = nil
	}
	validateRequestHeaderParams := new(bool)
	if !r.Config.ValidateRequestHeaderParams.IsUnknown() && !r.Config.ValidateRequestHeaderParams.IsNull() {
		*validateRequestHeaderParams = r.Config.ValidateRequestHeaderParams.ValueBool()
	} else {
		validateRequestHeaderParams = nil
	}
	validateRequestQueryParams := new(bool)
	if !r.Config.ValidateRequestQueryParams.IsUnknown() && !r.Config.ValidateRequestQueryParams.IsNull() {
		*validateRequestQueryParams = r.Config.ValidateRequestQueryParams.ValueBool()
	} else {
		validateRequestQueryParams = nil
	}
	validateRequestURIParams := new(bool)
	if !r.Config.ValidateRequestURIParams.IsUnknown() && !r.Config.ValidateRequestURIParams.IsNull() {
		*validateRequestURIParams = r.Config.ValidateRequestURIParams.ValueBool()
	} else {
		validateRequestURIParams = nil
	}
	validateResponseBody := new(bool)
	if !r.Config.ValidateResponseBody.IsUnknown() && !r.Config.ValidateResponseBody.IsNull() {
		*validateResponseBody = r.Config.ValidateResponseBody.ValueBool()
	} else {
		validateResponseBody = nil
	}
	verboseResponse := new(bool)
	if !r.Config.VerboseResponse.IsUnknown() && !r.Config.VerboseResponse.IsNull() {
		*verboseResponse = r.Config.VerboseResponse.ValueBool()
	} else {
		verboseResponse = nil
	}
	config := shared.OasValidationPluginConfig{
		AllowedHeaderParameters:                 allowedHeaderParameters,
		APISpec:                                 apiSpec,
		APISpecEncoded:                          apiSpecEncoded,
		CustomBasePath:                          customBasePath,
		HeaderParameterCheck:                    headerParameterCheck,
		IncludeBasePath:                         includeBasePath,
		NotifyOnlyRequestValidationFailure:      notifyOnlyRequestValidationFailure,
		NotifyOnlyResponseBodyValidationFailure: notifyOnlyResponseBodyValidationFailure,
		QueryParameterCheck:                     queryParameterCheck,
		ValidateRequestBody:                     validateRequestBody,
		ValidateRequestHeaderParams:             validateRequestHeaderParams,
		ValidateRequestQueryParams:              validateRequestQueryParams,
		ValidateRequestURIParams:                validateRequestURIParams,
		ValidateResponseBody:                    validateResponseBody,
		VerboseResponse:                         verboseResponse,
	}
	var consumer *shared.OasValidationPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.OasValidationPluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.OasValidationPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.OasValidationPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.OasValidationPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.OasValidationPluginRoute{
			ID: id3,
		}
	}
	var service *shared.OasValidationPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.OasValidationPluginService{
			ID: id4,
		}
	}
	out := shared.OasValidationPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
