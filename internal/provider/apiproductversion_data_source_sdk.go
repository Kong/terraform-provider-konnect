// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *APIProductVersionDataSourceModel) RefreshFromSharedAPIProductVersion(resp *shared.APIProductVersion) {
	if resp != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.Deprecated = types.BoolValue(resp.Deprecated)
		if resp.GatewayService == nil {
			r.GatewayService = nil
		} else {
			r.GatewayService = &tfTypes.GatewayService{}
			r.GatewayService.ControlPlaneID = types.StringValue(resp.GatewayService.ControlPlaneID)
			r.GatewayService.ID = types.StringPointerValue(resp.GatewayService.ID)
			r.GatewayService.RuntimeGroupID = types.StringPointerValue(resp.GatewayService.RuntimeGroupID)
		}
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Portals = []tfTypes.APIProductVersionPortal{}
		if len(r.Portals) > len(resp.Portals) {
			r.Portals = r.Portals[:len(resp.Portals)]
		}
		for portalsCount, portalsItem := range resp.Portals {
			var portals1 tfTypes.APIProductVersionPortal
			portals1.ApplicationRegistrationEnabled = types.BoolValue(portalsItem.ApplicationRegistrationEnabled)
			portals1.AuthStrategies = []tfTypes.APIProductVersionAuthStrategy{}
			for authStrategiesCount, authStrategiesItem := range portalsItem.AuthStrategies {
				var authStrategies1 tfTypes.APIProductVersionAuthStrategy
				authStrategies1.ID = types.StringValue(authStrategiesItem.ID)
				authStrategies1.Name = types.StringValue(authStrategiesItem.Name)
				if authStrategiesCount+1 > len(portals1.AuthStrategies) {
					portals1.AuthStrategies = append(portals1.AuthStrategies, authStrategies1)
				} else {
					portals1.AuthStrategies[authStrategiesCount].ID = authStrategies1.ID
					portals1.AuthStrategies[authStrategiesCount].Name = authStrategies1.Name
				}
			}
			portals1.AutoApproveRegistration = types.BoolValue(portalsItem.AutoApproveRegistration)
			portals1.Deprecated = types.BoolValue(portalsItem.Deprecated)
			portals1.PortalID = types.StringValue(portalsItem.PortalID)
			portals1.PortalName = types.StringValue(portalsItem.PortalName)
			portals1.PortalProductVersionID = types.StringValue(portalsItem.PortalProductVersionID)
			portals1.PublishStatus = types.StringValue(string(portalsItem.PublishStatus))
			if portalsCount+1 > len(r.Portals) {
				r.Portals = append(r.Portals, portals1)
			} else {
				r.Portals[portalsCount].ApplicationRegistrationEnabled = portals1.ApplicationRegistrationEnabled
				r.Portals[portalsCount].AuthStrategies = portals1.AuthStrategies
				r.Portals[portalsCount].AutoApproveRegistration = portals1.AutoApproveRegistration
				r.Portals[portalsCount].Deprecated = portals1.Deprecated
				r.Portals[portalsCount].PortalID = portals1.PortalID
				r.Portals[portalsCount].PortalName = portals1.PortalName
				r.Portals[portalsCount].PortalProductVersionID = portals1.PortalProductVersionID
				r.Portals[portalsCount].PublishStatus = portals1.PublishStatus
			}
		}
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	}
}
