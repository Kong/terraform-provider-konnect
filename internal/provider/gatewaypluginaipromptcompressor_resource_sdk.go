// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginAiPromptCompressorResourceModel) RefreshFromSharedAiPromptCompressorPlugin(ctx context.Context, resp *shared.AiPromptCompressorPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.CompressionRanges = []tfTypes.CompressionRanges{}

		for _, compressionRangesItem := range resp.Config.CompressionRanges {
			var compressionRanges tfTypes.CompressionRanges

			compressionRanges.MaxTokens = types.Int64Value(compressionRangesItem.MaxTokens)
			compressionRanges.MinTokens = types.Int64Value(compressionRangesItem.MinTokens)
			compressionRanges.Value = types.Float64Value(compressionRangesItem.Value)

			r.Config.CompressionRanges = append(r.Config.CompressionRanges, compressionRanges)
		}
		if resp.Config.CompressorType != nil {
			r.Config.CompressorType = types.StringValue(string(*resp.Config.CompressorType))
		} else {
			r.Config.CompressorType = types.StringNull()
		}
		r.Config.CompressorURL = types.StringPointerValue(resp.Config.CompressorURL)
		r.Config.KeepaliveTimeout = types.Float64PointerValue(resp.Config.KeepaliveTimeout)
		r.Config.LogTextData = types.BoolPointerValue(resp.Config.LogTextData)
		r.Config.MessageType = make([]types.String, 0, len(resp.Config.MessageType))
		for _, v := range resp.Config.MessageType {
			r.Config.MessageType = append(r.Config.MessageType, types.StringValue(string(v)))
		}
		r.Config.StopOnError = types.BoolPointerValue(resp.Config.StopOnError)
		r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAiPromptCompressorResourceModel) ToOperationsCreateAipromptcompressorPluginRequest(ctx context.Context) (*operations.CreateAipromptcompressorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiPromptCompressorPlugin, aiPromptCompressorPluginDiags := r.ToSharedAiPromptCompressorPlugin(ctx)
	diags.Append(aiPromptCompressorPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAipromptcompressorPluginRequest{
		ControlPlaneID:           controlPlaneID,
		AiPromptCompressorPlugin: *aiPromptCompressorPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiPromptCompressorResourceModel) ToOperationsDeleteAipromptcompressorPluginRequest(ctx context.Context) (*operations.DeleteAipromptcompressorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAipromptcompressorPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiPromptCompressorResourceModel) ToOperationsGetAipromptcompressorPluginRequest(ctx context.Context) (*operations.GetAipromptcompressorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAipromptcompressorPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiPromptCompressorResourceModel) ToOperationsUpdateAipromptcompressorPluginRequest(ctx context.Context) (*operations.UpdateAipromptcompressorPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiPromptCompressorPlugin, aiPromptCompressorPluginDiags := r.ToSharedAiPromptCompressorPlugin(ctx)
	diags.Append(aiPromptCompressorPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAipromptcompressorPluginRequest{
		PluginID:                 pluginID,
		ControlPlaneID:           controlPlaneID,
		AiPromptCompressorPlugin: *aiPromptCompressorPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiPromptCompressorResourceModel) ToSharedAiPromptCompressorPlugin(ctx context.Context) (*shared.AiPromptCompressorPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AiPromptCompressorPluginOrdering
	if r.Ordering != nil {
		var after *shared.AiPromptCompressorPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AiPromptCompressorPluginAfter{
				Access: access,
			}
		}
		var before *shared.AiPromptCompressorPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AiPromptCompressorPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AiPromptCompressorPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AiPromptCompressorPluginPartials
	if r.Partials != nil {
		partials = make([]shared.AiPromptCompressorPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AiPromptCompressorPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	compressionRanges := make([]shared.CompressionRanges, 0, len(r.Config.CompressionRanges))
	for _, compressionRangesItem := range r.Config.CompressionRanges {
		var maxTokens int64
		maxTokens = compressionRangesItem.MaxTokens.ValueInt64()

		var minTokens int64
		minTokens = compressionRangesItem.MinTokens.ValueInt64()

		var value float64
		value = compressionRangesItem.Value.ValueFloat64()

		compressionRanges = append(compressionRanges, shared.CompressionRanges{
			MaxTokens: maxTokens,
			MinTokens: minTokens,
			Value:     value,
		})
	}
	compressorType := new(shared.CompressorType)
	if !r.Config.CompressorType.IsUnknown() && !r.Config.CompressorType.IsNull() {
		*compressorType = shared.CompressorType(r.Config.CompressorType.ValueString())
	} else {
		compressorType = nil
	}
	compressorURL := new(string)
	if !r.Config.CompressorURL.IsUnknown() && !r.Config.CompressorURL.IsNull() {
		*compressorURL = r.Config.CompressorURL.ValueString()
	} else {
		compressorURL = nil
	}
	keepaliveTimeout := new(float64)
	if !r.Config.KeepaliveTimeout.IsUnknown() && !r.Config.KeepaliveTimeout.IsNull() {
		*keepaliveTimeout = r.Config.KeepaliveTimeout.ValueFloat64()
	} else {
		keepaliveTimeout = nil
	}
	logTextData := new(bool)
	if !r.Config.LogTextData.IsUnknown() && !r.Config.LogTextData.IsNull() {
		*logTextData = r.Config.LogTextData.ValueBool()
	} else {
		logTextData = nil
	}
	messageType := make([]shared.MessageType, 0, len(r.Config.MessageType))
	for _, messageTypeItem := range r.Config.MessageType {
		messageType = append(messageType, shared.MessageType(messageTypeItem.ValueString()))
	}
	stopOnError := new(bool)
	if !r.Config.StopOnError.IsUnknown() && !r.Config.StopOnError.IsNull() {
		*stopOnError = r.Config.StopOnError.ValueBool()
	} else {
		stopOnError = nil
	}
	timeout := new(float64)
	if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
		*timeout = r.Config.Timeout.ValueFloat64()
	} else {
		timeout = nil
	}
	config := shared.AiPromptCompressorPluginConfig{
		CompressionRanges: compressionRanges,
		CompressorType:    compressorType,
		CompressorURL:     compressorURL,
		KeepaliveTimeout:  keepaliveTimeout,
		LogTextData:       logTextData,
		MessageType:       messageType,
		StopOnError:       stopOnError,
		Timeout:           timeout,
	}
	var consumer *shared.AiPromptCompressorPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.AiPromptCompressorPluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.AiPromptCompressorPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.AiPromptCompressorPluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.AiPromptCompressorPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AiPromptCompressorPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AiPromptCompressorPluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.AiPromptCompressorPluginRoute{
			ID: id4,
		}
	}
	var service *shared.AiPromptCompressorPluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.AiPromptCompressorPluginService{
			ID: id5,
		}
	}
	out := shared.AiPromptCompressorPlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}
