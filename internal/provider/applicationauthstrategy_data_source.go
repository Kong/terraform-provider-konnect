// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ApplicationAuthStrategyDataSource{}
var _ datasource.DataSourceWithConfigure = &ApplicationAuthStrategyDataSource{}

func NewApplicationAuthStrategyDataSource() datasource.DataSource {
	return &ApplicationAuthStrategyDataSource{}
}

// ApplicationAuthStrategyDataSource is the data source implementation.
type ApplicationAuthStrategyDataSource struct {
	client *sdk.Konnect
}

// ApplicationAuthStrategyDataSourceModel describes the data model.
type ApplicationAuthStrategyDataSourceModel struct {
	Active        types.Bool                                    `tfsdk:"active"`
	DisplayName   types.String                                  `tfsdk:"display_name"`
	ID            types.String                                  `tfsdk:"id"`
	KeyAuth       *tfTypes.AppAuthStrategyKeyAuthResponse       `queryParam:"inline" tfsdk:"key_auth" tfPlanOnly:"true"`
	Name          types.String                                  `tfsdk:"name"`
	OpenidConnect *tfTypes.AppAuthStrategyOpenIDConnectResponse `queryParam:"inline" tfsdk:"openid_connect" tfPlanOnly:"true"`
}

// Metadata returns the data source type name.
func (r *ApplicationAuthStrategyDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_auth_strategy"
}

// Schema defines the schema for the data source.
func (r *ApplicationAuthStrategyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ApplicationAuthStrategy DataSource",

		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Computed:    true,
				Description: `At least one published product version is using this auth strategy.`,
			},
			"display_name": schema.StringAttribute{
				Computed:    true,
				Description: `The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `Contains a unique identifier used by the API for this resource.`,
			},
			"key_auth": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one published product version is using this auth strategy.`,
					},
					"configs": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"key_auth": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"key_names": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The names of the headers containing the API key. You can specify multiple header names.`,
									},
								},
								MarkdownDescription: `The most basic mode to configure an Application Auth Strategy for an API Product Version. ` + "\n" +
									`Using this mode will allow developers to generate API keys that will authenticate their application requests. ` + "\n" +
									`Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.`,
							},
						},
						Description: `JSON-B object containing the configuration for the Key Auth strategy`,
					},
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `An ISO-8601 timestamp representation of entity creation date.`,
					},
					"dcr_provider": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								Computed:    true,
								Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `Contains a unique identifier used by the API for this resource.`,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"provider_type": schema.StringAttribute{
								Computed:    true,
								Description: `The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http`,
							},
						},
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"labels": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
							`` + "\n" +
							`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.`,
					},
					"strategy_type": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `An ISO-8601 timestamp representation of entity update date.`,
					},
				},
				Description: `Response payload from creating or updating a Key Auth Application Auth Strategy`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.`,
			},
			"openid_connect": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.BoolAttribute{
						Computed:    true,
						Description: `At least one published product version is using this auth strategy.`,
					},
					"configs": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"openid_connect": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed:    true,
										Description: `Parsed as JSON.`,
									},
									"auth_methods": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"credential_claim": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"issuer": schema.StringAttribute{
										Computed: true,
									},
									"labels": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
										MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
											`` + "\n" +
											`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
									},
									"scopes": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
								},
								MarkdownDescription: `A more advanced mode to configure an API Product Versionâ€™s Application Auth Strategy. ` + "\n" +
									`Using this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests. ` + "\n" +
									`Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy. ` + "\n" +
									`An OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.`,
							},
						},
						Description: `JSON-B object containing the configuration for the OIDC strategy`,
					},
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `An ISO-8601 timestamp representation of entity creation date.`,
					},
					"dcr_provider": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"display_name": schema.StringAttribute{
								Computed:    true,
								Description: `The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.`,
							},
							"id": schema.StringAttribute{
								Computed:    true,
								Description: `Contains a unique identifier used by the API for this resource.`,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"provider_type": schema.StringAttribute{
								Computed:    true,
								Description: `The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http`,
							},
						},
					},
					"display_name": schema.StringAttribute{
						Computed:    true,
						Description: `The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.`,
					},
					"id": schema.StringAttribute{
						Computed:    true,
						Description: `Contains a unique identifier used by the API for this resource.`,
					},
					"labels": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						MarkdownDescription: `Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. ` + "\n" +
							`` + "\n" +
							`Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".`,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.`,
					},
					"strategy_type": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `An ISO-8601 timestamp representation of entity update date.`,
					},
				},
				Description: `Response payload from creating an OIDC Application Auth Strategy`,
			},
		},
	}
}

func (r *ApplicationAuthStrategyDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ApplicationAuthStrategyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ApplicationAuthStrategyDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var authStrategyID string
	authStrategyID = data.ID.ValueString()

	request := operations.GetAppAuthStrategyRequest{
		AuthStrategyID: authStrategyID,
	}
	res, err := r.client.AppAuthStrategies.GetAppAuthStrategy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.CreateAppAuthStrategyResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedCreateAppAuthStrategyResponse(ctx, res.CreateAppAuthStrategyResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
