// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginAiAwsGuardrailsResourceModel) RefreshFromSharedAiAwsGuardrailsPlugin(ctx context.Context, resp *shared.AiAwsGuardrailsPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.AwsAccessKeyID = types.StringPointerValue(resp.Config.AwsAccessKeyID)
		r.Config.AwsRegion = types.StringValue(resp.Config.AwsRegion)
		r.Config.AwsSecretAccessKey = types.StringPointerValue(resp.Config.AwsSecretAccessKey)
		if resp.Config.GuardingMode != nil {
			r.Config.GuardingMode = types.StringValue(string(*resp.Config.GuardingMode))
		} else {
			r.Config.GuardingMode = types.StringNull()
		}
		r.Config.GuardrailsID = types.StringValue(resp.Config.GuardrailsID)
		r.Config.GuardrailsVersion = types.StringValue(resp.Config.GuardrailsVersion)
		r.Config.ResponseBufferSize = types.Float64PointerValue(resp.Config.ResponseBufferSize)
		r.Config.StopOnError = types.BoolPointerValue(resp.Config.StopOnError)
		if resp.Config.TextSource != nil {
			r.Config.TextSource = types.StringValue(string(*resp.Config.TextSource))
		} else {
			r.Config.TextSource = types.StringNull()
		}
		r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAiAwsGuardrailsResourceModel) ToOperationsCreateAiawsguardrailsPluginRequest(ctx context.Context) (*operations.CreateAiawsguardrailsPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiAwsGuardrailsPlugin, aiAwsGuardrailsPluginDiags := r.ToSharedAiAwsGuardrailsPlugin(ctx)
	diags.Append(aiAwsGuardrailsPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAiawsguardrailsPluginRequest{
		ControlPlaneID:        controlPlaneID,
		AiAwsGuardrailsPlugin: *aiAwsGuardrailsPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiAwsGuardrailsResourceModel) ToOperationsDeleteAiawsguardrailsPluginRequest(ctx context.Context) (*operations.DeleteAiawsguardrailsPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAiawsguardrailsPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiAwsGuardrailsResourceModel) ToOperationsGetAiawsguardrailsPluginRequest(ctx context.Context) (*operations.GetAiawsguardrailsPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAiawsguardrailsPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiAwsGuardrailsResourceModel) ToOperationsUpdateAiawsguardrailsPluginRequest(ctx context.Context) (*operations.UpdateAiawsguardrailsPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiAwsGuardrailsPlugin, aiAwsGuardrailsPluginDiags := r.ToSharedAiAwsGuardrailsPlugin(ctx)
	diags.Append(aiAwsGuardrailsPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAiawsguardrailsPluginRequest{
		PluginID:              pluginID,
		ControlPlaneID:        controlPlaneID,
		AiAwsGuardrailsPlugin: *aiAwsGuardrailsPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiAwsGuardrailsResourceModel) ToSharedAiAwsGuardrailsPlugin(ctx context.Context) (*shared.AiAwsGuardrailsPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AiAwsGuardrailsPluginOrdering
	if r.Ordering != nil {
		var after *shared.AiAwsGuardrailsPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AiAwsGuardrailsPluginAfter{
				Access: access,
			}
		}
		var before *shared.AiAwsGuardrailsPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AiAwsGuardrailsPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AiAwsGuardrailsPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AiAwsGuardrailsPluginPartials
	if r.Partials != nil {
		partials = make([]shared.AiAwsGuardrailsPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AiAwsGuardrailsPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	awsAccessKeyID := new(string)
	if !r.Config.AwsAccessKeyID.IsUnknown() && !r.Config.AwsAccessKeyID.IsNull() {
		*awsAccessKeyID = r.Config.AwsAccessKeyID.ValueString()
	} else {
		awsAccessKeyID = nil
	}
	var awsRegion string
	awsRegion = r.Config.AwsRegion.ValueString()

	awsSecretAccessKey := new(string)
	if !r.Config.AwsSecretAccessKey.IsUnknown() && !r.Config.AwsSecretAccessKey.IsNull() {
		*awsSecretAccessKey = r.Config.AwsSecretAccessKey.ValueString()
	} else {
		awsSecretAccessKey = nil
	}
	guardingMode := new(shared.GuardingMode)
	if !r.Config.GuardingMode.IsUnknown() && !r.Config.GuardingMode.IsNull() {
		*guardingMode = shared.GuardingMode(r.Config.GuardingMode.ValueString())
	} else {
		guardingMode = nil
	}
	var guardrailsID string
	guardrailsID = r.Config.GuardrailsID.ValueString()

	var guardrailsVersion string
	guardrailsVersion = r.Config.GuardrailsVersion.ValueString()

	responseBufferSize := new(float64)
	if !r.Config.ResponseBufferSize.IsUnknown() && !r.Config.ResponseBufferSize.IsNull() {
		*responseBufferSize = r.Config.ResponseBufferSize.ValueFloat64()
	} else {
		responseBufferSize = nil
	}
	stopOnError := new(bool)
	if !r.Config.StopOnError.IsUnknown() && !r.Config.StopOnError.IsNull() {
		*stopOnError = r.Config.StopOnError.ValueBool()
	} else {
		stopOnError = nil
	}
	textSource := new(shared.TextSource)
	if !r.Config.TextSource.IsUnknown() && !r.Config.TextSource.IsNull() {
		*textSource = shared.TextSource(r.Config.TextSource.ValueString())
	} else {
		textSource = nil
	}
	timeout := new(float64)
	if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
		*timeout = r.Config.Timeout.ValueFloat64()
	} else {
		timeout = nil
	}
	config := shared.AiAwsGuardrailsPluginConfig{
		AwsAccessKeyID:     awsAccessKeyID,
		AwsRegion:          awsRegion,
		AwsSecretAccessKey: awsSecretAccessKey,
		GuardingMode:       guardingMode,
		GuardrailsID:       guardrailsID,
		GuardrailsVersion:  guardrailsVersion,
		ResponseBufferSize: responseBufferSize,
		StopOnError:        stopOnError,
		TextSource:         textSource,
		Timeout:            timeout,
	}
	var consumer *shared.AiAwsGuardrailsPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.AiAwsGuardrailsPluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.AiAwsGuardrailsPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.AiAwsGuardrailsPluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.AiAwsGuardrailsPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AiAwsGuardrailsPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AiAwsGuardrailsPluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.AiAwsGuardrailsPluginRoute{
			ID: id4,
		}
	}
	var service *shared.AiAwsGuardrailsPluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.AiAwsGuardrailsPluginService{
			ID: id5,
		}
	}
	out := shared.AiAwsGuardrailsPlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}
