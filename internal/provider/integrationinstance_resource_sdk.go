// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *IntegrationInstanceResourceModel) RefreshFromSharedIntegrationInstance(ctx context.Context, resp *shared.IntegrationInstance) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Authorized = types.BoolValue(resp.Authorized)
		configResult, _ := json.Marshal(resp.Config)
		r.Config = types.StringValue(string(configResult))
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringValue(resp.DisplayName)
		r.ID = types.StringValue(resp.ID)
		r.Integration.DisplayName = types.StringValue(resp.Integration.DisplayName)
		r.Integration.Name = types.StringValue(resp.Integration.Name)
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *IntegrationInstanceResourceModel) ToOperationsDeleteIntegrationInstanceRequest(ctx context.Context) (*operations.DeleteIntegrationInstanceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteIntegrationInstanceRequest{
		ID: id,
	}

	return &out, diags
}

func (r *IntegrationInstanceResourceModel) ToOperationsFetchIntegrationInstanceRequest(ctx context.Context) (*operations.FetchIntegrationInstanceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.FetchIntegrationInstanceRequest{
		ID: id,
	}

	return &out, diags
}

func (r *IntegrationInstanceResourceModel) ToOperationsUpdateIntegrationInstanceRequest(ctx context.Context) (*operations.UpdateIntegrationInstanceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateIntegrationInstance, updateIntegrationInstanceDiags := r.ToSharedUpdateIntegrationInstance(ctx)
	diags.Append(updateIntegrationInstanceDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateIntegrationInstanceRequest{
		ID:                        id,
		UpdateIntegrationInstance: *updateIntegrationInstance,
	}

	return &out, diags
}

func (r *IntegrationInstanceResourceModel) ToSharedCreateIntegrationInstance(ctx context.Context) (*shared.CreateIntegrationInstance, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationName string
	integrationName = r.IntegrationName.ValueString()

	var name string
	name = r.Name.ValueString()

	var displayName string
	displayName = r.DisplayName.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var config interface{}
	_ = json.Unmarshal([]byte(r.Config.ValueString()), &config)
	out := shared.CreateIntegrationInstance{
		IntegrationName: integrationName,
		Name:            name,
		DisplayName:     displayName,
		Description:     description,
		Config:          config,
	}

	return &out, diags
}

func (r *IntegrationInstanceResourceModel) ToSharedUpdateIntegrationInstance(ctx context.Context) (*shared.UpdateIntegrationInstance, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var config interface{}
	if !r.Config.IsUnknown() && !r.Config.IsNull() {
		_ = json.Unmarshal([]byte(r.Config.ValueString()), &config)
	}
	out := shared.UpdateIntegrationInstance{
		Name:        name,
		DisplayName: displayName,
		Description: description,
		Config:      config,
	}

	return &out, diags
}
