// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &IdentityProviderDataSource{}
var _ datasource.DataSourceWithConfigure = &IdentityProviderDataSource{}

func NewIdentityProviderDataSource() datasource.DataSource {
	return &IdentityProviderDataSource{}
}

// IdentityProviderDataSource is the data source implementation.
type IdentityProviderDataSource struct {
	client *sdk.Konnect
}

// IdentityProviderDataSourceModel describes the data model.
type IdentityProviderDataSourceModel struct {
	Config    *tfTypes.IdentityProviderConfig `tfsdk:"config"`
	CreatedAt types.String                    `tfsdk:"created_at"`
	Enabled   types.Bool                      `tfsdk:"enabled"`
	ID        types.String                    `tfsdk:"id"`
	LoginPath types.String                    `tfsdk:"login_path"`
	Type      types.String                    `tfsdk:"type"`
	UpdatedAt types.String                    `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *IdentityProviderDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_identity_provider"
}

// Schema defines the schema for the data source.
func (r *IdentityProviderDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "IdentityProvider DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"oidc_identity_provider_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"claim_mappings": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed:    true,
										Description: `The claim mapping for the user's email address.`,
									},
									"groups": schema.StringAttribute{
										Computed:    true,
										Description: `The claim mapping for the user's group membership information.`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `The claim mapping for the user's name.`,
									},
								},
								MarkdownDescription: `Defines the mappings between OpenID Connect (OIDC) claims and local claims used by your application for` + "\n" +
									`authentication.`,
							},
							"client_id": schema.StringAttribute{
								Computed:    true,
								Description: `The client ID assigned to your application by the identity provider.`,
							},
							"issuer_url": schema.StringAttribute{
								Computed:    true,
								Description: `The issuer URI of the identity provider. This is the URL where the provider's metadata can be obtained.`,
							},
							"scopes": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `The scopes requested by your application when authenticating with the identity provider.`,
							},
						},
						Description: `The identity provider that contains configuration data for the OIDC authentication integration.`,
					},
					"saml_identity_provider_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"callback_url": schema.StringAttribute{
								Computed:    true,
								Description: `The URL where the SAML identity provider sends authentication responses after successful login attempts.`,
							},
							"idp_metadata_url": schema.StringAttribute{
								Computed:    true,
								Description: `The identity provider's metadata URL where the identity provider's metadata can be obtained.`,
							},
							"idp_metadata_xml": schema.StringAttribute{
								Computed:    true,
								Description: `The identity provider's SAML metadata. If the identity provider supports a metadata URL, you can use the ` + "`" + `idp_metadata_url` + "`" + ` field instead.`,
							},
							"login_url": schema.StringAttribute{
								Computed:    true,
								Description: `The URL to redirect users to for initiating login with the identity provider.`,
							},
							"sp_entity_id": schema.StringAttribute{
								Computed:    true,
								Description: `The entity ID of the service provider (SP).`,
							},
							"sp_metadata_url": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `The identity provider that contains configuration data for the SAML authentication integration.`,
					},
				},
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity creation date.`,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
				MarkdownDescription: `Indicates whether the identity provider is enabled.` + "\n" +
					`Only one identity provider can be active at a time, such as SAML or OIDC.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `ID of the identity provider.`,
			},
			"login_path": schema.StringAttribute{
				Computed:    true,
				Description: `The path used for initiating login requests with the identity provider.`,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `Specifies the type of identity provider.`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An ISO-8601 timestamp representation of entity update date.`,
			},
		},
	}
}

func (r *IdentityProviderDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *IdentityProviderDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *IdentityProviderDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetIdentityProviderRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AuthSettings.GetIdentityProvider(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.IdentityProvider != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedIdentityProvider(ctx, res.IdentityProvider)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
