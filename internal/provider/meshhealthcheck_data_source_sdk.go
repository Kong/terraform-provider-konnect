// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshHealthCheckDataSourceModel) RefreshFromSharedMeshHealthCheckItem(resp *shared.MeshHealthCheckItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshHealthCheckItemTo{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to1 tfTypes.MeshHealthCheckItemTo
			if toItem.Default == nil {
				to1.Default = nil
			} else {
				to1.Default = &tfTypes.MeshHealthCheckItemDefault{}
				to1.Default.AlwaysLogHealthCheckFailures = types.BoolPointerValue(toItem.Default.AlwaysLogHealthCheckFailures)
				to1.Default.EventLogPath = types.StringPointerValue(toItem.Default.EventLogPath)
				to1.Default.FailTrafficOnPanic = types.BoolPointerValue(toItem.Default.FailTrafficOnPanic)
				if toItem.Default.Grpc == nil {
					to1.Default.Grpc = nil
				} else {
					to1.Default.Grpc = &tfTypes.Grpc{}
					to1.Default.Grpc.Authority = types.StringPointerValue(toItem.Default.Grpc.Authority)
					to1.Default.Grpc.Disabled = types.BoolPointerValue(toItem.Default.Grpc.Disabled)
					to1.Default.Grpc.ServiceName = types.StringPointerValue(toItem.Default.Grpc.ServiceName)
				}
				if toItem.Default.HealthyPanicThreshold == nil {
					to1.Default.HealthyPanicThreshold = nil
				} else {
					to1.Default.HealthyPanicThreshold = &tfTypes.Mode{}
					if toItem.Default.HealthyPanicThreshold.Integer != nil {
						to1.Default.HealthyPanicThreshold.Integer = types.Int64PointerValue(toItem.Default.HealthyPanicThreshold.Integer)
					}
					if toItem.Default.HealthyPanicThreshold.Str != nil {
						to1.Default.HealthyPanicThreshold.Str = types.StringPointerValue(toItem.Default.HealthyPanicThreshold.Str)
					}
				}
				if toItem.Default.HealthyThreshold != nil {
					to1.Default.HealthyThreshold = types.Int64Value(int64(*toItem.Default.HealthyThreshold))
				} else {
					to1.Default.HealthyThreshold = types.Int64Null()
				}
				if toItem.Default.HTTP == nil {
					to1.Default.HTTP = nil
				} else {
					to1.Default.HTTP = &tfTypes.MeshHealthCheckItemHTTP{}
					to1.Default.HTTP.Disabled = types.BoolPointerValue(toItem.Default.HTTP.Disabled)
					to1.Default.HTTP.ExpectedStatuses = make([]types.Int64, 0, len(toItem.Default.HTTP.ExpectedStatuses))
					for _, v := range toItem.Default.HTTP.ExpectedStatuses {
						to1.Default.HTTP.ExpectedStatuses = append(to1.Default.HTTP.ExpectedStatuses, types.Int64Value(v))
					}
					to1.Default.HTTP.Path = types.StringPointerValue(toItem.Default.HTTP.Path)
					if toItem.Default.HTTP.RequestHeadersToAdd == nil {
						to1.Default.HTTP.RequestHeadersToAdd = nil
					} else {
						to1.Default.HTTP.RequestHeadersToAdd = &tfTypes.MeshGlobalRateLimitItemSpecHeaders{}
						to1.Default.HTTP.RequestHeadersToAdd.Add = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
						for addCount, addItem := range toItem.Default.HTTP.RequestHeadersToAdd.Add {
							var add1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
							add1.Name = types.StringValue(addItem.Name)
							add1.Value = types.StringValue(addItem.Value)
							if addCount+1 > len(to1.Default.HTTP.RequestHeadersToAdd.Add) {
								to1.Default.HTTP.RequestHeadersToAdd.Add = append(to1.Default.HTTP.RequestHeadersToAdd.Add, add1)
							} else {
								to1.Default.HTTP.RequestHeadersToAdd.Add[addCount].Name = add1.Name
								to1.Default.HTTP.RequestHeadersToAdd.Add[addCount].Value = add1.Value
							}
						}
						to1.Default.HTTP.RequestHeadersToAdd.Set = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
						for setCount, setItem := range toItem.Default.HTTP.RequestHeadersToAdd.Set {
							var set1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
							set1.Name = types.StringValue(setItem.Name)
							set1.Value = types.StringValue(setItem.Value)
							if setCount+1 > len(to1.Default.HTTP.RequestHeadersToAdd.Set) {
								to1.Default.HTTP.RequestHeadersToAdd.Set = append(to1.Default.HTTP.RequestHeadersToAdd.Set, set1)
							} else {
								to1.Default.HTTP.RequestHeadersToAdd.Set[setCount].Name = set1.Name
								to1.Default.HTTP.RequestHeadersToAdd.Set[setCount].Value = set1.Value
							}
						}
					}
				}
				to1.Default.InitialJitter = types.StringPointerValue(toItem.Default.InitialJitter)
				to1.Default.Interval = types.StringPointerValue(toItem.Default.Interval)
				to1.Default.IntervalJitter = types.StringPointerValue(toItem.Default.IntervalJitter)
				if toItem.Default.IntervalJitterPercent != nil {
					to1.Default.IntervalJitterPercent = types.Int64Value(int64(*toItem.Default.IntervalJitterPercent))
				} else {
					to1.Default.IntervalJitterPercent = types.Int64Null()
				}
				to1.Default.NoTrafficInterval = types.StringPointerValue(toItem.Default.NoTrafficInterval)
				to1.Default.ReuseConnection = types.BoolPointerValue(toItem.Default.ReuseConnection)
				if toItem.Default.TCP == nil {
					to1.Default.TCP = nil
				} else {
					to1.Default.TCP = &tfTypes.TCP{}
					to1.Default.TCP.Disabled = types.BoolPointerValue(toItem.Default.TCP.Disabled)
					to1.Default.TCP.Receive = make([]types.String, 0, len(toItem.Default.TCP.Receive))
					for _, v := range toItem.Default.TCP.Receive {
						to1.Default.TCP.Receive = append(to1.Default.TCP.Receive, types.StringValue(v))
					}
					to1.Default.TCP.Send = types.StringPointerValue(toItem.Default.TCP.Send)
				}
				to1.Default.Timeout = types.StringPointerValue(toItem.Default.Timeout)
				if toItem.Default.UnhealthyThreshold != nil {
					to1.Default.UnhealthyThreshold = types.Int64Value(int64(*toItem.Default.UnhealthyThreshold))
				} else {
					to1.Default.UnhealthyThreshold = types.Int64Null()
				}
			}
			to1.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to1.TargetRef.Labels = make(map[string]types.String)
				for key3, value5 := range toItem.TargetRef.Labels {
					to1.TargetRef.Labels[key3] = types.StringValue(value5)
				}
			}
			to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to1.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to1.TargetRef.Tags = make(map[string]types.String)
				for key4, value6 := range toItem.TargetRef.Tags {
					to1.TargetRef.Tags[key4] = types.StringValue(value6)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to1)
			} else {
				r.Spec.To[toCount].Default = to1.Default
				r.Spec.To[toCount].TargetRef = to1.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
