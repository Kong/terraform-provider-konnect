// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayKeyResourceModel) ToSharedKeyInput() *shared.KeyInput {
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	jwk := new(string)
	if !r.Jwk.IsUnknown() && !r.Jwk.IsNull() {
		*jwk = r.Jwk.ValueString()
	} else {
		jwk = nil
	}
	var kid string
	kid = r.Kid.ValueString()

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var pem *shared.Pem
	if r.Pem != nil {
		privateKey := new(string)
		if !r.Pem.PrivateKey.IsUnknown() && !r.Pem.PrivateKey.IsNull() {
			*privateKey = r.Pem.PrivateKey.ValueString()
		} else {
			privateKey = nil
		}
		publicKey := new(string)
		if !r.Pem.PublicKey.IsUnknown() && !r.Pem.PublicKey.IsNull() {
			*publicKey = r.Pem.PublicKey.ValueString()
		} else {
			publicKey = nil
		}
		pem = &shared.Pem{
			PrivateKey: privateKey,
			PublicKey:  publicKey,
		}
	}
	var set *shared.Set
	if r.Set != nil {
		id1 := new(string)
		if !r.Set.ID.IsUnknown() && !r.Set.ID.IsNull() {
			*id1 = r.Set.ID.ValueString()
		} else {
			id1 = nil
		}
		set = &shared.Set{
			ID: id1,
		}
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.KeyInput{
		ID:   id,
		Jwk:  jwk,
		Kid:  kid,
		Name: name,
		Pem:  pem,
		Set:  set,
		Tags: tags,
	}
	return &out
}

func (r *GatewayKeyResourceModel) RefreshFromSharedKey(resp *shared.Key) {
	if resp != nil {
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.ID = types.StringPointerValue(resp.ID)
		r.Jwk = types.StringPointerValue(resp.Jwk)
		r.Kid = types.StringValue(resp.Kid)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Pem == nil {
			r.Pem = nil
		} else {
			r.Pem = &tfTypes.Pem{}
			r.Pem.PrivateKey = types.StringPointerValue(resp.Pem.PrivateKey)
			r.Pem.PublicKey = types.StringPointerValue(resp.Pem.PublicKey)
		}
		if resp.Set == nil {
			r.Set = nil
		} else {
			r.Set = &tfTypes.ACLWithoutParentsConsumer{}
			r.Set.ID = types.StringPointerValue(resp.Set.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
