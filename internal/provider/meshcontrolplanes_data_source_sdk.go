// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *MeshControlPlanesDataSourceModel) RefreshFromSharedListMeshControlPlanesResponse(ctx context.Context, resp *shared.ListMeshControlPlanesResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.MeshControlPlane{}

		for _, dataItem := range resp.Data {
			var data tfTypes.MeshControlPlane

			data.CreatedAt = types.StringValue(typeconvert.TimeToString(dataItem.CreatedAt))
			data.Description = types.StringPointerValue(dataItem.Description)
			data.Features = []tfTypes.MeshControlPlaneFeature{}

			for _, featuresItem := range dataItem.Features {
				var features tfTypes.MeshControlPlaneFeature

				if featuresItem.HostnameGeneratorCreation == nil {
					features.HostnameGeneratorCreation = nil
				} else {
					features.HostnameGeneratorCreation = &tfTypes.MeshControlPlaneFeatureHostnameGenerationCreation{}
					features.HostnameGeneratorCreation.Enabled = types.BoolValue(featuresItem.HostnameGeneratorCreation.Enabled)
				}
				if featuresItem.MeshCreation == nil {
					features.MeshCreation = nil
				} else {
					features.MeshCreation = &tfTypes.MeshControlPlaneFeatureHostnameGenerationCreation{}
					features.MeshCreation.Enabled = types.BoolValue(featuresItem.MeshCreation.Enabled)
				}
				features.Type = types.StringValue(string(featuresItem.Type))

				data.Features = append(data.Features, features)
			}
			data.ID = types.StringValue(dataItem.ID)
			if dataItem.Labels != nil {
				data.Labels = make(map[string]types.String, len(dataItem.Labels))
				for key, value := range dataItem.Labels {
					data.Labels[key] = types.StringPointerValue(value)
				}
			}
			data.Name = types.StringValue(dataItem.Name)
			data.UpdatedAt = types.StringValue(typeconvert.TimeToString(dataItem.UpdatedAt))

			r.Data = append(r.Data, data)
		}
		if resp.Meta == nil {
			r.Meta = nil
		} else {
			r.Meta = &tfTypes.PaginatedMeta{}
			r.Meta.Page.Number = types.Float64Value(resp.Meta.Page.Number)
			r.Meta.Page.Size = types.Float64Value(resp.Meta.Page.Size)
			r.Meta.Page.Total = types.Float64Value(resp.Meta.Page.Total)
		}
	}

	return diags
}

func (r *MeshControlPlanesDataSourceModel) ToOperationsListMeshControlPlanesRequest(ctx context.Context) (*operations.ListMeshControlPlanesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	pageNumber := new(int64)
	if !r.PageNumber.IsUnknown() && !r.PageNumber.IsNull() {
		*pageNumber = r.PageNumber.ValueInt64()
	} else {
		pageNumber = nil
	}
	out := operations.ListMeshControlPlanesRequest{
		PageSize:   pageSize,
		PageNumber: pageNumber,
	}

	return &out, diags
}
