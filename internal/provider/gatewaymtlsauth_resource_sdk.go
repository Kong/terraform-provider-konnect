// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayMTLSAuthResourceModel) ToSharedMTLSAuthWithoutParents(ctx context.Context) (*shared.MTLSAuthWithoutParents, diag.Diagnostics) {
	var diags diag.Diagnostics

	var caCertificate *shared.MTLSAuthWithoutParentsCaCertificate
	if r.CaCertificate != nil {
		id := new(string)
		if !r.CaCertificate.ID.IsUnknown() && !r.CaCertificate.ID.IsNull() {
			*id = r.CaCertificate.ID.ValueString()
		} else {
			id = nil
		}
		caCertificate = &shared.MTLSAuthWithoutParentsCaCertificate{
			ID: id,
		}
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	id1 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id1 = r.ID.ValueString()
	} else {
		id1 = nil
	}
	var subjectName string
	subjectName = r.SubjectName.ValueString()

	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.MTLSAuthWithoutParents{
		CaCertificate: caCertificate,
		CreatedAt:     createdAt,
		ID:            id1,
		SubjectName:   subjectName,
		Tags:          tags,
	}

	return &out, diags
}

func (r *GatewayMTLSAuthResourceModel) ToOperationsCreateMtlsAuthWithConsumerRequest(ctx context.Context) (*operations.CreateMtlsAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	mtlsAuthWithoutParents, mtlsAuthWithoutParentsDiags := r.ToSharedMTLSAuthWithoutParents(ctx)
	diags.Append(mtlsAuthWithoutParentsDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateMtlsAuthWithConsumerRequest{
		ControlPlaneID:         controlPlaneID,
		ConsumerID:             consumerID,
		MTLSAuthWithoutParents: *mtlsAuthWithoutParents,
	}

	return &out, diags
}

func (r *GatewayMTLSAuthResourceModel) ToOperationsGetMtlsAuthWithConsumerRequest(ctx context.Context) (*operations.GetMtlsAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var mtlsAuthID string
	mtlsAuthID = r.ID.ValueString()

	out := operations.GetMtlsAuthWithConsumerRequest{
		ControlPlaneID: controlPlaneID,
		ConsumerID:     consumerID,
		MTLSAuthID:     mtlsAuthID,
	}

	return &out, diags
}

func (r *GatewayMTLSAuthResourceModel) ToOperationsDeleteMtlsAuthWithConsumerRequest(ctx context.Context) (*operations.DeleteMtlsAuthWithConsumerRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var consumerID string
	consumerID = r.ConsumerID.ValueString()

	var mtlsAuthID string
	mtlsAuthID = r.ID.ValueString()

	out := operations.DeleteMtlsAuthWithConsumerRequest{
		ControlPlaneID: controlPlaneID,
		ConsumerID:     consumerID,
		MTLSAuthID:     mtlsAuthID,
	}

	return &out, diags
}

func (r *GatewayMTLSAuthResourceModel) RefreshFromSharedMTLSAuth(ctx context.Context, resp *shared.MTLSAuth) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.CaCertificate == nil {
			r.CaCertificate = nil
		} else {
			r.CaCertificate = &tfTypes.Set{}
			r.CaCertificate.ID = types.StringPointerValue(resp.CaCertificate.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.ID = types.StringPointerValue(resp.ID)
		r.SubjectName = types.StringValue(resp.SubjectName)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}

	return diags
}
