// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginDatadogResourceModel) RefreshFromSharedDatadogPlugin(ctx context.Context, resp *shared.DatadogPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.DatadogPluginConfig{}
			r.Config.ConsumerTag = types.StringPointerValue(resp.Config.ConsumerTag)
			r.Config.FlushTimeout = types.Float64PointerValue(resp.Config.FlushTimeout)
			r.Config.Host = types.StringPointerValue(resp.Config.Host)
			r.Config.Metrics = []tfTypes.Metrics{}

			for _, metricsItem := range resp.Config.Metrics {
				var metrics tfTypes.Metrics

				if metricsItem.ConsumerIdentifier != nil {
					metrics.ConsumerIdentifier = types.StringValue(string(*metricsItem.ConsumerIdentifier))
				} else {
					metrics.ConsumerIdentifier = types.StringNull()
				}
				metrics.Name = types.StringValue(string(metricsItem.Name))
				metrics.SampleRate = types.Float64PointerValue(metricsItem.SampleRate)
				metrics.StatType = types.StringValue(string(metricsItem.StatType))
				metrics.Tags = make([]types.String, 0, len(metricsItem.Tags))
				for _, v := range metricsItem.Tags {
					metrics.Tags = append(metrics.Tags, types.StringValue(v))
				}

				r.Config.Metrics = append(r.Config.Metrics, metrics)
			}
			r.Config.Port = types.Int64PointerValue(resp.Config.Port)
			r.Config.Prefix = types.StringPointerValue(resp.Config.Prefix)
			if resp.Config.Queue == nil {
				r.Config.Queue = nil
			} else {
				r.Config.Queue = &tfTypes.Queue{}
				if resp.Config.Queue.ConcurrencyLimit != nil {
					r.Config.Queue.ConcurrencyLimit = types.Int64Value(int64(*resp.Config.Queue.ConcurrencyLimit))
				} else {
					r.Config.Queue.ConcurrencyLimit = types.Int64Null()
				}
				r.Config.Queue.InitialRetryDelay = types.Float64PointerValue(resp.Config.Queue.InitialRetryDelay)
				r.Config.Queue.MaxBatchSize = types.Int64PointerValue(resp.Config.Queue.MaxBatchSize)
				r.Config.Queue.MaxBytes = types.Int64PointerValue(resp.Config.Queue.MaxBytes)
				r.Config.Queue.MaxCoalescingDelay = types.Float64PointerValue(resp.Config.Queue.MaxCoalescingDelay)
				r.Config.Queue.MaxEntries = types.Int64PointerValue(resp.Config.Queue.MaxEntries)
				r.Config.Queue.MaxRetryDelay = types.Float64PointerValue(resp.Config.Queue.MaxRetryDelay)
				r.Config.Queue.MaxRetryTime = types.Float64PointerValue(resp.Config.Queue.MaxRetryTime)
			}
			r.Config.QueueSize = types.Int64PointerValue(resp.Config.QueueSize)
			r.Config.RetryCount = types.Int64PointerValue(resp.Config.RetryCount)
			r.Config.ServiceNameTag = types.StringPointerValue(resp.Config.ServiceNameTag)
			r.Config.StatusTag = types.StringPointerValue(resp.Config.StatusTag)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginDatadogResourceModel) ToOperationsCreateDatadogPluginRequest(ctx context.Context) (*operations.CreateDatadogPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	datadogPlugin, datadogPluginDiags := r.ToSharedDatadogPlugin(ctx)
	diags.Append(datadogPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateDatadogPluginRequest{
		ControlPlaneID: controlPlaneID,
		DatadogPlugin:  *datadogPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginDatadogResourceModel) ToOperationsDeleteDatadogPluginRequest(ctx context.Context) (*operations.DeleteDatadogPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteDatadogPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginDatadogResourceModel) ToOperationsGetDatadogPluginRequest(ctx context.Context) (*operations.GetDatadogPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetDatadogPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginDatadogResourceModel) ToOperationsUpdateDatadogPluginRequest(ctx context.Context) (*operations.UpdateDatadogPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	datadogPlugin, datadogPluginDiags := r.ToSharedDatadogPlugin(ctx)
	diags.Append(datadogPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateDatadogPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
		DatadogPlugin:  *datadogPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginDatadogResourceModel) ToSharedDatadogPlugin(ctx context.Context) (*shared.DatadogPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.DatadogPluginOrdering
	if r.Ordering != nil {
		var after *shared.DatadogPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.DatadogPluginAfter{
				Access: access,
			}
		}
		var before *shared.DatadogPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.DatadogPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.DatadogPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.DatadogPluginPartials
	if r.Partials != nil {
		partials = make([]shared.DatadogPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.DatadogPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.DatadogPluginConfig
	if r.Config != nil {
		consumerTag := new(string)
		if !r.Config.ConsumerTag.IsUnknown() && !r.Config.ConsumerTag.IsNull() {
			*consumerTag = r.Config.ConsumerTag.ValueString()
		} else {
			consumerTag = nil
		}
		flushTimeout := new(float64)
		if !r.Config.FlushTimeout.IsUnknown() && !r.Config.FlushTimeout.IsNull() {
			*flushTimeout = r.Config.FlushTimeout.ValueFloat64()
		} else {
			flushTimeout = nil
		}
		host := new(string)
		if !r.Config.Host.IsUnknown() && !r.Config.Host.IsNull() {
			*host = r.Config.Host.ValueString()
		} else {
			host = nil
		}
		metrics := make([]shared.Metrics, 0, len(r.Config.Metrics))
		for _, metricsItem := range r.Config.Metrics {
			consumerIdentifier := new(shared.ConsumerIdentifier)
			if !metricsItem.ConsumerIdentifier.IsUnknown() && !metricsItem.ConsumerIdentifier.IsNull() {
				*consumerIdentifier = shared.ConsumerIdentifier(metricsItem.ConsumerIdentifier.ValueString())
			} else {
				consumerIdentifier = nil
			}
			name1 := shared.DatadogPluginName(metricsItem.Name.ValueString())
			sampleRate := new(float64)
			if !metricsItem.SampleRate.IsUnknown() && !metricsItem.SampleRate.IsNull() {
				*sampleRate = metricsItem.SampleRate.ValueFloat64()
			} else {
				sampleRate = nil
			}
			statType := shared.StatType(metricsItem.StatType.ValueString())
			tags1 := make([]string, 0, len(metricsItem.Tags))
			for _, tagsItem1 := range metricsItem.Tags {
				tags1 = append(tags1, tagsItem1.ValueString())
			}
			metrics = append(metrics, shared.Metrics{
				ConsumerIdentifier: consumerIdentifier,
				Name:               name1,
				SampleRate:         sampleRate,
				StatType:           statType,
				Tags:               tags1,
			})
		}
		port := new(int64)
		if !r.Config.Port.IsUnknown() && !r.Config.Port.IsNull() {
			*port = r.Config.Port.ValueInt64()
		} else {
			port = nil
		}
		prefix := new(string)
		if !r.Config.Prefix.IsUnknown() && !r.Config.Prefix.IsNull() {
			*prefix = r.Config.Prefix.ValueString()
		} else {
			prefix = nil
		}
		var queue *shared.Queue
		if r.Config.Queue != nil {
			concurrencyLimit := new(shared.ConcurrencyLimit)
			if !r.Config.Queue.ConcurrencyLimit.IsUnknown() && !r.Config.Queue.ConcurrencyLimit.IsNull() {
				*concurrencyLimit = shared.ConcurrencyLimit(r.Config.Queue.ConcurrencyLimit.ValueInt64())
			} else {
				concurrencyLimit = nil
			}
			initialRetryDelay := new(float64)
			if !r.Config.Queue.InitialRetryDelay.IsUnknown() && !r.Config.Queue.InitialRetryDelay.IsNull() {
				*initialRetryDelay = r.Config.Queue.InitialRetryDelay.ValueFloat64()
			} else {
				initialRetryDelay = nil
			}
			maxBatchSize := new(int64)
			if !r.Config.Queue.MaxBatchSize.IsUnknown() && !r.Config.Queue.MaxBatchSize.IsNull() {
				*maxBatchSize = r.Config.Queue.MaxBatchSize.ValueInt64()
			} else {
				maxBatchSize = nil
			}
			maxBytes := new(int64)
			if !r.Config.Queue.MaxBytes.IsUnknown() && !r.Config.Queue.MaxBytes.IsNull() {
				*maxBytes = r.Config.Queue.MaxBytes.ValueInt64()
			} else {
				maxBytes = nil
			}
			maxCoalescingDelay := new(float64)
			if !r.Config.Queue.MaxCoalescingDelay.IsUnknown() && !r.Config.Queue.MaxCoalescingDelay.IsNull() {
				*maxCoalescingDelay = r.Config.Queue.MaxCoalescingDelay.ValueFloat64()
			} else {
				maxCoalescingDelay = nil
			}
			maxEntries := new(int64)
			if !r.Config.Queue.MaxEntries.IsUnknown() && !r.Config.Queue.MaxEntries.IsNull() {
				*maxEntries = r.Config.Queue.MaxEntries.ValueInt64()
			} else {
				maxEntries = nil
			}
			maxRetryDelay := new(float64)
			if !r.Config.Queue.MaxRetryDelay.IsUnknown() && !r.Config.Queue.MaxRetryDelay.IsNull() {
				*maxRetryDelay = r.Config.Queue.MaxRetryDelay.ValueFloat64()
			} else {
				maxRetryDelay = nil
			}
			maxRetryTime := new(float64)
			if !r.Config.Queue.MaxRetryTime.IsUnknown() && !r.Config.Queue.MaxRetryTime.IsNull() {
				*maxRetryTime = r.Config.Queue.MaxRetryTime.ValueFloat64()
			} else {
				maxRetryTime = nil
			}
			queue = &shared.Queue{
				ConcurrencyLimit:   concurrencyLimit,
				InitialRetryDelay:  initialRetryDelay,
				MaxBatchSize:       maxBatchSize,
				MaxBytes:           maxBytes,
				MaxCoalescingDelay: maxCoalescingDelay,
				MaxEntries:         maxEntries,
				MaxRetryDelay:      maxRetryDelay,
				MaxRetryTime:       maxRetryTime,
			}
		}
		queueSize := new(int64)
		if !r.Config.QueueSize.IsUnknown() && !r.Config.QueueSize.IsNull() {
			*queueSize = r.Config.QueueSize.ValueInt64()
		} else {
			queueSize = nil
		}
		retryCount := new(int64)
		if !r.Config.RetryCount.IsUnknown() && !r.Config.RetryCount.IsNull() {
			*retryCount = r.Config.RetryCount.ValueInt64()
		} else {
			retryCount = nil
		}
		serviceNameTag := new(string)
		if !r.Config.ServiceNameTag.IsUnknown() && !r.Config.ServiceNameTag.IsNull() {
			*serviceNameTag = r.Config.ServiceNameTag.ValueString()
		} else {
			serviceNameTag = nil
		}
		statusTag := new(string)
		if !r.Config.StatusTag.IsUnknown() && !r.Config.StatusTag.IsNull() {
			*statusTag = r.Config.StatusTag.ValueString()
		} else {
			statusTag = nil
		}
		config = &shared.DatadogPluginConfig{
			ConsumerTag:    consumerTag,
			FlushTimeout:   flushTimeout,
			Host:           host,
			Metrics:        metrics,
			Port:           port,
			Prefix:         prefix,
			Queue:          queue,
			QueueSize:      queueSize,
			RetryCount:     retryCount,
			ServiceNameTag: serviceNameTag,
			StatusTag:      statusTag,
		}
	}
	var consumer *shared.DatadogPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.DatadogPluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.DatadogPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.DatadogPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.DatadogPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.DatadogPluginRoute{
			ID: id3,
		}
	}
	var service *shared.DatadogPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.DatadogPluginService{
			ID: id4,
		}
	}
	out := shared.DatadogPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
