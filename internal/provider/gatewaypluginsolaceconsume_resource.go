// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v3/internal/validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &GatewayPluginSolaceConsumeResource{}
var _ resource.ResourceWithImportState = &GatewayPluginSolaceConsumeResource{}

func NewGatewayPluginSolaceConsumeResource() resource.Resource {
	return &GatewayPluginSolaceConsumeResource{}
}

// GatewayPluginSolaceConsumeResource defines the resource implementation.
type GatewayPluginSolaceConsumeResource struct {
	// Provider configured SDK client.
	client *sdk.Konnect
}

// GatewayPluginSolaceConsumeResourceModel describes the resource data model.
type GatewayPluginSolaceConsumeResourceModel struct {
	Config         tfTypes.SolaceConsumePluginConfig `tfsdk:"config"`
	ControlPlaneID types.String                      `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64                       `tfsdk:"created_at"`
	Enabled        types.Bool                        `tfsdk:"enabled"`
	ID             types.String                      `tfsdk:"id"`
	InstanceName   types.String                      `tfsdk:"instance_name"`
	Ordering       *tfTypes.AcePluginOrdering        `tfsdk:"ordering"`
	Partials       []tfTypes.Partials                `tfsdk:"partials"`
	Protocols      []types.String                    `tfsdk:"protocols"`
	Route          *tfTypes.Set                      `tfsdk:"route"`
	Service        *tfTypes.Set                      `tfsdk:"service"`
	Tags           []types.String                    `tfsdk:"tags"`
	UpdatedAt      types.Int64                       `tfsdk:"updated_at"`
}

func (r *GatewayPluginSolaceConsumeResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_plugin_solace_consume"
}

func (r *GatewayPluginSolaceConsumeResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayPluginSolaceConsume Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"flow": schema.SingleNestedAttribute{
						Required: true,
						Attributes: map[string]schema.Attribute{
							"ack_mode": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Default:     stringdefault.StaticString(`CLIENT`),
								Description: `Controls how acknowledgments are generated for received Guaranteed messages. When set to ` + "`" + `AUTO` + "`" + `, the messages are positively acknowledged upon receiving them. When set to 'CLIENT', the messages are positively or negatively acknowledged by Kong regarding to client delivery status. Default: "CLIENT"; must be one of ["AUTO", "CLIENT"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"AUTO",
										"CLIENT",
									),
								},
							},
							"binds": schema.ListNestedAttribute{
								Required: true,
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The name of the Queue that is the target of the bind. You can use $(uri_captures['<capture-identifier>']) in this field (replace ` + "`" + `<capture-identifier>` + "`" + ` with a real value, for example ` + "`" + `$uri_captures['queue']` + "`" + ` when the matched route has a path ` + "`" + `~/(?<queue>[a-z]+)` + "`" + `). Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
										"type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Default:     stringdefault.StaticString(`QUEUE`),
											Description: `The type of object to which this Flow is bound. Default: "QUEUE"; must be "QUEUE"`,
											Validators: []validator.String{
												stringvalidator.OneOf("QUEUE"),
											},
										},
									},
								},
							},
							"functions": schema.ListAttribute{
								Optional:    true,
								ElementType: types.StringType,
								Description: `The Lua functions that manipulates the message being received from Solace. The ` + "`" + `message` + "`" + ` variable can be used to access the current message content, and the function can return a new content.`,
							},
							"max_unacked_messages": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(-1),
								Description: `This property controls the maximum number of messages that may be unacknowledged on the Flow. Default: -1`,
							},
							"properties": schema.MapAttribute{
								Optional:    true,
								ElementType: jsontypes.NormalizedType{},
								Description: `Additional Solace flow properties (each setting needs to have ` + "`" + `FLOW_` + "`" + ` prefix).`,
								Validators: []validator.Map{
									mapvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"selector": schema.StringAttribute{
								Optional:    true,
								Description: `The selector when binding to an endpoint.`,
							},
							"wait_timeout": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(50),
								Description: `Specifies in milliseconds how long to wait for messages to appear on each poll before giving up or retrying. Default: 50`,
								Validators: []validator.Int64{
									int64validator.Between(1, 5000),
								},
							},
							"window_size": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(255),
								Description: `The Guaranteed message window size for the Flow. Default: 255`,
								Validators: []validator.Int64{
									int64validator.Between(1, 255),
								},
							},
						},
						Description: `The flow related configuration.`,
					},
					"mode": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Default:     stringdefault.StaticString(`POLLING`),
						Description: `The mode of operation for the plugin. The ` + "`" + `AUTO` + "`" + ` determines the mode automatically from the client request. Default: "POLLING"; must be one of ["AUTO", "POLLING", "SERVER-SENT-EVENTS", "WEBSOCKET"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"AUTO",
								"POLLING",
								"SERVER-SENT-EVENTS",
								"WEBSOCKET",
							),
						},
					},
					"polling": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
							"timeout": types.Int64Type,
						})),
						Attributes: map[string]schema.Attribute{
							"timeout": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(0),
								Description: `Polling timeout in milliseconds. When set to ` + "`" + `0` + "`" + `, the polling works like short-polling and waits at maximum the Flow ` + "`" + `wait_timeout` + "`" + ` amount of time for the new messages (short-polling). When set to larger than ` + "`" + `0` + "`" + `, the connection is kept open and only closed after the timeout or in case messages appear earlier (long-polling). Default: 0`,
								Validators: []validator.Int64{
									int64validator.AtMost(300000),
								},
							},
						},
						Description: `The ` + "`" + `POLLING` + "`" + ` mode related configuration settings.`,
					},
					"session": schema.SingleNestedAttribute{
						Required: true,
						Attributes: map[string]schema.Attribute{
							"authentication": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"access_token":        types.StringType,
									"access_token_header": types.StringType,
									"id_token":            types.StringType,
									"id_token_header":     types.StringType,
									"password":            types.StringType,
									"scheme":              types.StringType,
									"username":            types.StringType,
								})),
								Attributes: map[string]schema.Attribute{
									"access_token": schema.StringAttribute{
										Optional:    true,
										Description: `The OAuth2 access token used with ` + "`" + `OAUTH2` + "`" + ` authentication scheme when connecting to an event broker.`,
									},
									"access_token_header": schema.StringAttribute{
										Optional: true,
									},
									"id_token": schema.StringAttribute{
										Optional:    true,
										Description: `The OpenID Connect ID token used with ` + "`" + `OAUTH2` + "`" + ` authentication scheme when connecting to an event broker.`,
									},
									"id_token_header": schema.StringAttribute{
										Optional: true,
									},
									"password": schema.StringAttribute{
										Optional:    true,
										Description: `The password used with ` + "`" + `BASIC` + "`" + ` authentication scheme when connecting to an event broker.`,
										Validators: []validator.String{
											stringvalidator.UTF8LengthAtMost(128),
										},
									},
									"scheme": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Default:     stringdefault.StaticString(`BASIC`),
										Description: `The client authentication scheme used when connection to an event broker. Default: "BASIC"; must be one of ["BASIC", "NONE", "OAUTH2"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"BASIC",
												"NONE",
												"OAUTH2",
											),
										},
									},
									"username": schema.StringAttribute{
										Optional:    true,
										Description: `The username used with ` + "`" + `BASIC` + "`" + ` authentication scheme when connecting to an event broker.`,
										Validators: []validator.String{
											stringvalidator.UTF8LengthAtMost(189),
										},
									},
								},
								Description: `Session authentication related configuration.`,
							},
							"calculate_message_expiry": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(true),
								Description: `If this property is true and time-to-live has a positive value in a message, the expiration time is calculated when the message is sent or received. Default: true`,
							},
							"connect_timeout": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(3000),
								Description: `The timeout period (in milliseconds) for a connect operation to a given host (per host). Default: 3000`,
								Validators: []validator.Int64{
									int64validator.Between(100, 100000),
								},
							},
							"generate_rcv_timestamps": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(true),
								Description: `When enabled, a receive timestamp is recorded for each message. Default: true`,
							},
							"generate_send_timestamps": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(true),
								Description: `When enabled, a send timestamp is automatically included (if not already present) in the Solace-defined fields for each message sent. Default: true`,
							},
							"generate_sender_id": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(true),
								Description: `When enabled, a sender id is automatically included (if not already present) in the Solace-defined fields for each message sent. Default: true`,
							},
							"generate_sequence_number": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(true),
								Description: `When enabled, a sequence number is automatically included (if not already present) in the Solace-defined fields for each message sent. Default: true`,
							},
							"host": schema.StringAttribute{
								Required:    true,
								Description: `The IPv4 or IPv6 address or host name to connect to (see: https://docs.solace.com/API-Developer-Online-Ref-Documentation/c/index.html#host-entry).`,
							},
							"properties": schema.MapAttribute{
								Optional:    true,
								ElementType: jsontypes.NormalizedType{},
								Description: `Additional Solace session properties (each setting needs to have ` + "`" + `SESSION_` + "`" + ` prefix).`,
								Validators: []validator.Map{
									mapvalidator.ValueStringsAre(validators.IsValidJSON()),
								},
							},
							"ssl_validate_certificate": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Default:     booldefault.StaticBool(false),
								Description: `Indicates whether the API should validate server certificates with the trusted certificates. Default: false`,
							},
							"vpn_name": schema.StringAttribute{
								Optional:    true,
								Description: `The name of the Message VPN to attempt to join when connecting to an event broker.`,
								Validators: []validator.String{
									stringvalidator.UTF8LengthAtMost(32),
								},
							},
						},
						Description: `Session related configuration.`,
					},
					"websocket": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
							"max_recv_len": types.Int64Type,
							"max_send_len": types.Int64Type,
							"timeout":      types.Int64Type,
						})),
						Attributes: map[string]schema.Attribute{
							"max_recv_len": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(65536),
								Description: `Specifies the maximal length of payload allowed when receiving WebSocket frames. Default: 65536`,
							},
							"max_send_len": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(65536),
								Description: `Specifies the maximal length of payload allowed when sending WebSocket frames. Default: 65536`,
							},
							"timeout": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(1000),
								Description: `Specifies the network timeout threshold in milliseconds. Default: 1000`,
								Validators: []validator.Int64{
									int64validator.Between(1, 60000),
								},
							},
						},
						Description: `The ` + "`" + `WEBSOCKET` + "`" + ` mode related configuration settings.`,
					},
				},
			},
			"control_plane_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the plugin is applied. Default: true`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string representing a UUID (universally unique identifier).`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"instance_name": schema.StringAttribute{
				Optional:    true,
				Description: `A unique string representing a UTF-8 encoded name.`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"after": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
					"before": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
				})),
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A string representing a UUID (universally unique identifier).`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A unique string representing a UTF-8 encoded name.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
				Description: `A list of partials to be used by the plugin.`,
			},
			"protocols": schema.SetAttribute{
				Computed: true,
				Optional: true,
				Default: setdefault.StaticValue(types.SetValueMust(types.StringType, []attr.Value{
					types.StringValue("grpc"),
					types.StringValue("grpcs"),
					types.StringValue("http"),
					types.StringValue("https"),
				})),
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols. Default: ["grpc","grpcs","http","https"]`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
		},
	}
}

func (r *GatewayPluginSolaceConsumeResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayPluginSolaceConsumeResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *GatewayPluginSolaceConsumeResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateSolaceconsumePluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.CreateSolaceconsumePlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SolaceConsumePlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSolaceConsumePlugin(ctx, res.SolaceConsumePlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginSolaceConsumeResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *GatewayPluginSolaceConsumeResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetSolaceconsumePluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetSolaceconsumePlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SolaceConsumePlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSolaceConsumePlugin(ctx, res.SolaceConsumePlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginSolaceConsumeResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *GatewayPluginSolaceConsumeResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateSolaceconsumePluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.UpdateSolaceconsumePlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.SolaceConsumePlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedSolaceConsumePlugin(ctx, res.SolaceConsumePlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginSolaceConsumeResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *GatewayPluginSolaceConsumeResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteSolaceconsumePluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.DeleteSolaceconsumePlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *GatewayPluginSolaceConsumeResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ControlPlaneID string `json:"control_plane_id"`
		ID             string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"control_plane_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": "3473c251-5b6c-4f45-b1ff-7ede735a366d"}': `+err.Error())
		return
	}

	if len(data.ControlPlaneID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field control_plane_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("control_plane_id"), data.ControlPlaneID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"3473c251-5b6c-4f45-b1ff-7ede735a366d"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}
