// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginOauth2ResourceModel) ToSharedOauth2Plugin(ctx context.Context) (*shared.Oauth2Plugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.Oauth2PluginOrdering
	if r.Ordering != nil {
		var after *shared.Oauth2PluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.Oauth2PluginAfter{
				Access: access,
			}
		}
		var before *shared.Oauth2PluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.Oauth2PluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.Oauth2PluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.Oauth2PluginPartials
	if r.Partials != nil {
		partials = make([]shared.Oauth2PluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.Oauth2PluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.Oauth2PluginConfig
	if r.Config != nil {
		acceptHTTPIfAlreadyTerminated := new(bool)
		if !r.Config.AcceptHTTPIfAlreadyTerminated.IsUnknown() && !r.Config.AcceptHTTPIfAlreadyTerminated.IsNull() {
			*acceptHTTPIfAlreadyTerminated = r.Config.AcceptHTTPIfAlreadyTerminated.ValueBool()
		} else {
			acceptHTTPIfAlreadyTerminated = nil
		}
		anonymous := new(string)
		if !r.Config.Anonymous.IsUnknown() && !r.Config.Anonymous.IsNull() {
			*anonymous = r.Config.Anonymous.ValueString()
		} else {
			anonymous = nil
		}
		authHeaderName := new(string)
		if !r.Config.AuthHeaderName.IsUnknown() && !r.Config.AuthHeaderName.IsNull() {
			*authHeaderName = r.Config.AuthHeaderName.ValueString()
		} else {
			authHeaderName = nil
		}
		enableAuthorizationCode := new(bool)
		if !r.Config.EnableAuthorizationCode.IsUnknown() && !r.Config.EnableAuthorizationCode.IsNull() {
			*enableAuthorizationCode = r.Config.EnableAuthorizationCode.ValueBool()
		} else {
			enableAuthorizationCode = nil
		}
		enableClientCredentials := new(bool)
		if !r.Config.EnableClientCredentials.IsUnknown() && !r.Config.EnableClientCredentials.IsNull() {
			*enableClientCredentials = r.Config.EnableClientCredentials.ValueBool()
		} else {
			enableClientCredentials = nil
		}
		enableImplicitGrant := new(bool)
		if !r.Config.EnableImplicitGrant.IsUnknown() && !r.Config.EnableImplicitGrant.IsNull() {
			*enableImplicitGrant = r.Config.EnableImplicitGrant.ValueBool()
		} else {
			enableImplicitGrant = nil
		}
		enablePasswordGrant := new(bool)
		if !r.Config.EnablePasswordGrant.IsUnknown() && !r.Config.EnablePasswordGrant.IsNull() {
			*enablePasswordGrant = r.Config.EnablePasswordGrant.ValueBool()
		} else {
			enablePasswordGrant = nil
		}
		globalCredentials := new(bool)
		if !r.Config.GlobalCredentials.IsUnknown() && !r.Config.GlobalCredentials.IsNull() {
			*globalCredentials = r.Config.GlobalCredentials.ValueBool()
		} else {
			globalCredentials = nil
		}
		hideCredentials := new(bool)
		if !r.Config.HideCredentials.IsUnknown() && !r.Config.HideCredentials.IsNull() {
			*hideCredentials = r.Config.HideCredentials.ValueBool()
		} else {
			hideCredentials = nil
		}
		mandatoryScope := new(bool)
		if !r.Config.MandatoryScope.IsUnknown() && !r.Config.MandatoryScope.IsNull() {
			*mandatoryScope = r.Config.MandatoryScope.ValueBool()
		} else {
			mandatoryScope = nil
		}
		persistentRefreshToken := new(bool)
		if !r.Config.PersistentRefreshToken.IsUnknown() && !r.Config.PersistentRefreshToken.IsNull() {
			*persistentRefreshToken = r.Config.PersistentRefreshToken.ValueBool()
		} else {
			persistentRefreshToken = nil
		}
		pkce := new(shared.Pkce)
		if !r.Config.Pkce.IsUnknown() && !r.Config.Pkce.IsNull() {
			*pkce = shared.Pkce(r.Config.Pkce.ValueString())
		} else {
			pkce = nil
		}
		provisionKey := new(string)
		if !r.Config.ProvisionKey.IsUnknown() && !r.Config.ProvisionKey.IsNull() {
			*provisionKey = r.Config.ProvisionKey.ValueString()
		} else {
			provisionKey = nil
		}
		realm := new(string)
		if !r.Config.Realm.IsUnknown() && !r.Config.Realm.IsNull() {
			*realm = r.Config.Realm.ValueString()
		} else {
			realm = nil
		}
		refreshTokenTTL := new(float64)
		if !r.Config.RefreshTokenTTL.IsUnknown() && !r.Config.RefreshTokenTTL.IsNull() {
			*refreshTokenTTL = r.Config.RefreshTokenTTL.ValueFloat64()
		} else {
			refreshTokenTTL = nil
		}
		reuseRefreshToken := new(bool)
		if !r.Config.ReuseRefreshToken.IsUnknown() && !r.Config.ReuseRefreshToken.IsNull() {
			*reuseRefreshToken = r.Config.ReuseRefreshToken.ValueBool()
		} else {
			reuseRefreshToken = nil
		}
		scopes := make([]string, 0, len(r.Config.Scopes))
		for _, scopesItem := range r.Config.Scopes {
			scopes = append(scopes, scopesItem.ValueString())
		}
		tokenExpiration := new(float64)
		if !r.Config.TokenExpiration.IsUnknown() && !r.Config.TokenExpiration.IsNull() {
			*tokenExpiration = r.Config.TokenExpiration.ValueFloat64()
		} else {
			tokenExpiration = nil
		}
		config = &shared.Oauth2PluginConfig{
			AcceptHTTPIfAlreadyTerminated: acceptHTTPIfAlreadyTerminated,
			Anonymous:                     anonymous,
			AuthHeaderName:                authHeaderName,
			EnableAuthorizationCode:       enableAuthorizationCode,
			EnableClientCredentials:       enableClientCredentials,
			EnableImplicitGrant:           enableImplicitGrant,
			EnablePasswordGrant:           enablePasswordGrant,
			GlobalCredentials:             globalCredentials,
			HideCredentials:               hideCredentials,
			MandatoryScope:                mandatoryScope,
			PersistentRefreshToken:        persistentRefreshToken,
			Pkce:                          pkce,
			ProvisionKey:                  provisionKey,
			Realm:                         realm,
			RefreshTokenTTL:               refreshTokenTTL,
			ReuseRefreshToken:             reuseRefreshToken,
			Scopes:                        scopes,
			TokenExpiration:               tokenExpiration,
		}
	}
	protocols := make([]shared.Oauth2PluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.Oauth2PluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.Oauth2PluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.Oauth2PluginRoute{
			ID: id2,
		}
	}
	var service *shared.Oauth2PluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.Oauth2PluginService{
			ID: id3,
		}
	}
	out := shared.Oauth2Plugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}

func (r *GatewayPluginOauth2ResourceModel) ToOperationsCreateOauth2PluginRequest(ctx context.Context) (*operations.CreateOauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	oauth2Plugin, oauth2PluginDiags := r.ToSharedOauth2Plugin(ctx)
	diags.Append(oauth2PluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateOauth2PluginRequest{
		ControlPlaneID: controlPlaneID,
		Oauth2Plugin:   *oauth2Plugin,
	}

	return &out, diags
}

func (r *GatewayPluginOauth2ResourceModel) ToOperationsUpdateOauth2PluginRequest(ctx context.Context) (*operations.UpdateOauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	oauth2Plugin, oauth2PluginDiags := r.ToSharedOauth2Plugin(ctx)
	diags.Append(oauth2PluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOauth2PluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
		Oauth2Plugin:   *oauth2Plugin,
	}

	return &out, diags
}

func (r *GatewayPluginOauth2ResourceModel) ToOperationsGetOauth2PluginRequest(ctx context.Context) (*operations.GetOauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetOauth2PluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginOauth2ResourceModel) ToOperationsDeleteOauth2PluginRequest(ctx context.Context) (*operations.DeleteOauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteOauth2PluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginOauth2ResourceModel) RefreshFromSharedOauth2Plugin(ctx context.Context, resp *shared.Oauth2Plugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.Oauth2PluginConfig{}
			r.Config.AcceptHTTPIfAlreadyTerminated = types.BoolPointerValue(resp.Config.AcceptHTTPIfAlreadyTerminated)
			r.Config.Anonymous = types.StringPointerValue(resp.Config.Anonymous)
			r.Config.AuthHeaderName = types.StringPointerValue(resp.Config.AuthHeaderName)
			r.Config.EnableAuthorizationCode = types.BoolPointerValue(resp.Config.EnableAuthorizationCode)
			r.Config.EnableClientCredentials = types.BoolPointerValue(resp.Config.EnableClientCredentials)
			r.Config.EnableImplicitGrant = types.BoolPointerValue(resp.Config.EnableImplicitGrant)
			r.Config.EnablePasswordGrant = types.BoolPointerValue(resp.Config.EnablePasswordGrant)
			r.Config.GlobalCredentials = types.BoolPointerValue(resp.Config.GlobalCredentials)
			r.Config.HideCredentials = types.BoolPointerValue(resp.Config.HideCredentials)
			r.Config.MandatoryScope = types.BoolPointerValue(resp.Config.MandatoryScope)
			r.Config.PersistentRefreshToken = types.BoolPointerValue(resp.Config.PersistentRefreshToken)
			if resp.Config.Pkce != nil {
				r.Config.Pkce = types.StringValue(string(*resp.Config.Pkce))
			} else {
				r.Config.Pkce = types.StringNull()
			}
			r.Config.ProvisionKey = types.StringPointerValue(resp.Config.ProvisionKey)
			r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
			r.Config.RefreshTokenTTL = types.Float64PointerValue(resp.Config.RefreshTokenTTL)
			r.Config.ReuseRefreshToken = types.BoolPointerValue(resp.Config.ReuseRefreshToken)
			r.Config.Scopes = make([]types.String, 0, len(resp.Config.Scopes))
			for _, v := range resp.Config.Scopes {
				r.Config.Scopes = append(r.Config.Scopes, types.StringValue(v))
			}
			r.Config.TokenExpiration = types.Float64PointerValue(resp.Config.TokenExpiration)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
