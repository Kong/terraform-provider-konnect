// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshMetricDataSourceModel) RefreshFromSharedMeshMetricItem(resp *shared.MeshMetricItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Default == nil {
			r.Spec.Default = nil
		} else {
			r.Spec.Default = &tfTypes.Default{}
			r.Spec.Default.Applications = []tfTypes.Applications{}
			if len(r.Spec.Default.Applications) > len(resp.Spec.Default.Applications) {
				r.Spec.Default.Applications = r.Spec.Default.Applications[:len(resp.Spec.Default.Applications)]
			}
			for applicationsCount, applicationsItem := range resp.Spec.Default.Applications {
				var applications1 tfTypes.Applications
				applications1.Address = types.StringPointerValue(applicationsItem.Address)
				applications1.Name = types.StringPointerValue(applicationsItem.Name)
				applications1.Path = types.StringPointerValue(applicationsItem.Path)
				applications1.Port = types.Int32Value(int32(applicationsItem.Port))
				if applicationsCount+1 > len(r.Spec.Default.Applications) {
					r.Spec.Default.Applications = append(r.Spec.Default.Applications, applications1)
				} else {
					r.Spec.Default.Applications[applicationsCount].Address = applications1.Address
					r.Spec.Default.Applications[applicationsCount].Name = applications1.Name
					r.Spec.Default.Applications[applicationsCount].Path = applications1.Path
					r.Spec.Default.Applications[applicationsCount].Port = applications1.Port
				}
			}
			r.Spec.Default.Backends = []tfTypes.MeshMetricItemBackends{}
			if len(r.Spec.Default.Backends) > len(resp.Spec.Default.Backends) {
				r.Spec.Default.Backends = r.Spec.Default.Backends[:len(resp.Spec.Default.Backends)]
			}
			for backendsCount, backendsItem := range resp.Spec.Default.Backends {
				var backends1 tfTypes.MeshMetricItemBackends
				if backendsItem.OpenTelemetry == nil {
					backends1.OpenTelemetry = nil
				} else {
					backends1.OpenTelemetry = &tfTypes.OpenTelemetry{}
					backends1.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
					backends1.OpenTelemetry.RefreshInterval = types.StringPointerValue(backendsItem.OpenTelemetry.RefreshInterval)
				}
				if backendsItem.Prometheus == nil {
					backends1.Prometheus = nil
				} else {
					backends1.Prometheus = &tfTypes.Prometheus{}
					backends1.Prometheus.ClientID = types.StringPointerValue(backendsItem.Prometheus.ClientID)
					backends1.Prometheus.Path = types.StringPointerValue(backendsItem.Prometheus.Path)
					if backendsItem.Prometheus.Port != nil {
						backends1.Prometheus.Port = types.Int32Value(int32(*backendsItem.Prometheus.Port))
					} else {
						backends1.Prometheus.Port = types.Int32Null()
					}
					if backendsItem.Prometheus.TLS == nil {
						backends1.Prometheus.TLS = nil
					} else {
						backends1.Prometheus.TLS = &tfTypes.MeshMetricItemTLS{}
						if backendsItem.Prometheus.TLS.Mode != nil {
							backends1.Prometheus.TLS.Mode = types.StringValue(string(*backendsItem.Prometheus.TLS.Mode))
						} else {
							backends1.Prometheus.TLS.Mode = types.StringNull()
						}
					}
				}
				backends1.Type = types.StringValue(string(backendsItem.Type))
				if backendsCount+1 > len(r.Spec.Default.Backends) {
					r.Spec.Default.Backends = append(r.Spec.Default.Backends, backends1)
				} else {
					r.Spec.Default.Backends[backendsCount].OpenTelemetry = backends1.OpenTelemetry
					r.Spec.Default.Backends[backendsCount].Prometheus = backends1.Prometheus
					r.Spec.Default.Backends[backendsCount].Type = backends1.Type
				}
			}
			if resp.Spec.Default.Sidecar == nil {
				r.Spec.Default.Sidecar = nil
			} else {
				r.Spec.Default.Sidecar = &tfTypes.Sidecar{}
				r.Spec.Default.Sidecar.IncludeUnused = types.BoolPointerValue(resp.Spec.Default.Sidecar.IncludeUnused)
				if resp.Spec.Default.Sidecar.Profiles == nil {
					r.Spec.Default.Sidecar.Profiles = nil
				} else {
					r.Spec.Default.Sidecar.Profiles = &tfTypes.Profiles{}
					r.Spec.Default.Sidecar.Profiles.AppendProfiles = []tfTypes.MeshLoadBalancingStrategyItemSpecHeader{}
					if len(r.Spec.Default.Sidecar.Profiles.AppendProfiles) > len(resp.Spec.Default.Sidecar.Profiles.AppendProfiles) {
						r.Spec.Default.Sidecar.Profiles.AppendProfiles = r.Spec.Default.Sidecar.Profiles.AppendProfiles[:len(resp.Spec.Default.Sidecar.Profiles.AppendProfiles)]
					}
					for appendProfilesCount, appendProfilesItem := range resp.Spec.Default.Sidecar.Profiles.AppendProfiles {
						var appendProfiles1 tfTypes.MeshLoadBalancingStrategyItemSpecHeader
						appendProfiles1.Name = types.StringValue(string(appendProfilesItem.Name))
						if appendProfilesCount+1 > len(r.Spec.Default.Sidecar.Profiles.AppendProfiles) {
							r.Spec.Default.Sidecar.Profiles.AppendProfiles = append(r.Spec.Default.Sidecar.Profiles.AppendProfiles, appendProfiles1)
						} else {
							r.Spec.Default.Sidecar.Profiles.AppendProfiles[appendProfilesCount].Name = appendProfiles1.Name
						}
					}
					r.Spec.Default.Sidecar.Profiles.Exclude = []tfTypes.Exclude{}
					if len(r.Spec.Default.Sidecar.Profiles.Exclude) > len(resp.Spec.Default.Sidecar.Profiles.Exclude) {
						r.Spec.Default.Sidecar.Profiles.Exclude = r.Spec.Default.Sidecar.Profiles.Exclude[:len(resp.Spec.Default.Sidecar.Profiles.Exclude)]
					}
					for excludeCount, excludeItem := range resp.Spec.Default.Sidecar.Profiles.Exclude {
						var exclude1 tfTypes.Exclude
						exclude1.Match = types.StringValue(excludeItem.Match)
						exclude1.Type = types.StringValue(string(excludeItem.Type))
						if excludeCount+1 > len(r.Spec.Default.Sidecar.Profiles.Exclude) {
							r.Spec.Default.Sidecar.Profiles.Exclude = append(r.Spec.Default.Sidecar.Profiles.Exclude, exclude1)
						} else {
							r.Spec.Default.Sidecar.Profiles.Exclude[excludeCount].Match = exclude1.Match
							r.Spec.Default.Sidecar.Profiles.Exclude[excludeCount].Type = exclude1.Type
						}
					}
					r.Spec.Default.Sidecar.Profiles.Include = []tfTypes.Exclude{}
					if len(r.Spec.Default.Sidecar.Profiles.Include) > len(resp.Spec.Default.Sidecar.Profiles.Include) {
						r.Spec.Default.Sidecar.Profiles.Include = r.Spec.Default.Sidecar.Profiles.Include[:len(resp.Spec.Default.Sidecar.Profiles.Include)]
					}
					for includeCount, includeItem := range resp.Spec.Default.Sidecar.Profiles.Include {
						var include1 tfTypes.Exclude
						include1.Match = types.StringValue(includeItem.Match)
						include1.Type = types.StringValue(string(includeItem.Type))
						if includeCount+1 > len(r.Spec.Default.Sidecar.Profiles.Include) {
							r.Spec.Default.Sidecar.Profiles.Include = append(r.Spec.Default.Sidecar.Profiles.Include, include1)
						} else {
							r.Spec.Default.Sidecar.Profiles.Include[includeCount].Match = include1.Match
							r.Spec.Default.Sidecar.Profiles.Include[includeCount].Type = include1.Type
						}
					}
				}
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String, len(resp.Spec.TargetRef.Labels))
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String, len(resp.Spec.TargetRef.Tags))
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
