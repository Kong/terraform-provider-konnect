// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginStandardWebhooksResourceModel) ToSharedStandardWebhooksPluginInput() *shared.StandardWebhooksPluginInput {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	ordering := make(map[string]string)
	for orderingKey, orderingValue := range r.Ordering {
		var orderingInst string
		orderingInst = orderingValue.ValueString()

		ordering[orderingKey] = orderingInst
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	secretV1 := new(string)
	if !r.Config.SecretV1.IsUnknown() && !r.Config.SecretV1.IsNull() {
		*secretV1 = r.Config.SecretV1.ValueString()
	} else {
		secretV1 = nil
	}
	toleranceSecond := new(int64)
	if !r.Config.ToleranceSecond.IsUnknown() && !r.Config.ToleranceSecond.IsNull() {
		*toleranceSecond = r.Config.ToleranceSecond.ValueInt64()
	} else {
		toleranceSecond = nil
	}
	config := shared.StandardWebhooksPluginConfig{
		SecretV1:        secretV1,
		ToleranceSecond: toleranceSecond,
	}
	var consumerGroup *shared.StandardWebhooksPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id1 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id1 = r.ConsumerGroup.ID.ValueString()
		} else {
			id1 = nil
		}
		consumerGroup = &shared.StandardWebhooksPluginConsumerGroup{
			ID: id1,
		}
	}
	var protocols []shared.StandardWebhooksPluginProtocols = []shared.StandardWebhooksPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.StandardWebhooksPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.StandardWebhooksPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.StandardWebhooksPluginRoute{
			ID: id2,
		}
	}
	var service *shared.StandardWebhooksPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.StandardWebhooksPluginService{
			ID: id3,
		}
	}
	out := shared.StandardWebhooksPluginInput{
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Tags:          tags,
		Config:        config,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}
	return &out
}

func (r *GatewayPluginStandardWebhooksResourceModel) RefreshFromSharedStandardWebhooksPlugin(resp *shared.StandardWebhooksPlugin) {
	if resp != nil {
		r.Config.SecretV1 = types.StringPointerValue(resp.Config.SecretV1)
		r.Config.ToleranceSecond = types.Int64PointerValue(resp.Config.ToleranceSecond)
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering != nil {
			r.Ordering = make(map[string]types.String, len(resp.Ordering))
			for key, value := range resp.Ordering {
				r.Ordering[key] = types.StringValue(value)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
