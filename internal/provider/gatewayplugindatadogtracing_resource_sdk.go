// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginDatadogTracingResourceModel) ToSharedDatadogTracingPluginInput() *shared.DatadogTracingPluginInput {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	ordering := make(map[string]string)
	for orderingKey, orderingValue := range r.Ordering {
		var orderingInst string
		orderingInst = orderingValue.ValueString()

		ordering[orderingKey] = orderingInst
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	batchFlushDelay := new(int64)
	if !r.Config.BatchFlushDelay.IsUnknown() && !r.Config.BatchFlushDelay.IsNull() {
		*batchFlushDelay = r.Config.BatchFlushDelay.ValueInt64()
	} else {
		batchFlushDelay = nil
	}
	batchSpanCount := new(int64)
	if !r.Config.BatchSpanCount.IsUnknown() && !r.Config.BatchSpanCount.IsNull() {
		*batchSpanCount = r.Config.BatchSpanCount.ValueInt64()
	} else {
		batchSpanCount = nil
	}
	connectTimeout := new(int64)
	if !r.Config.ConnectTimeout.IsUnknown() && !r.Config.ConnectTimeout.IsNull() {
		*connectTimeout = r.Config.ConnectTimeout.ValueInt64()
	} else {
		connectTimeout = nil
	}
	endpoint := new(string)
	if !r.Config.Endpoint.IsUnknown() && !r.Config.Endpoint.IsNull() {
		*endpoint = r.Config.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	environment := new(string)
	if !r.Config.Environment.IsUnknown() && !r.Config.Environment.IsNull() {
		*environment = r.Config.Environment.ValueString()
	} else {
		environment = nil
	}
	readTimeout := new(int64)
	if !r.Config.ReadTimeout.IsUnknown() && !r.Config.ReadTimeout.IsNull() {
		*readTimeout = r.Config.ReadTimeout.ValueInt64()
	} else {
		readTimeout = nil
	}
	sendTimeout := new(int64)
	if !r.Config.SendTimeout.IsUnknown() && !r.Config.SendTimeout.IsNull() {
		*sendTimeout = r.Config.SendTimeout.ValueInt64()
	} else {
		sendTimeout = nil
	}
	serviceName := new(string)
	if !r.Config.ServiceName.IsUnknown() && !r.Config.ServiceName.IsNull() {
		*serviceName = r.Config.ServiceName.ValueString()
	} else {
		serviceName = nil
	}
	config := shared.DatadogTracingPluginConfig{
		BatchFlushDelay: batchFlushDelay,
		BatchSpanCount:  batchSpanCount,
		ConnectTimeout:  connectTimeout,
		Endpoint:        endpoint,
		Environment:     environment,
		ReadTimeout:     readTimeout,
		SendTimeout:     sendTimeout,
		ServiceName:     serviceName,
	}
	var consumerGroup *shared.DatadogTracingPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id1 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id1 = r.ConsumerGroup.ID.ValueString()
		} else {
			id1 = nil
		}
		consumerGroup = &shared.DatadogTracingPluginConsumerGroup{
			ID: id1,
		}
	}
	var protocols []shared.DatadogTracingPluginProtocols = []shared.DatadogTracingPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.DatadogTracingPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.DatadogTracingPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.DatadogTracingPluginRoute{
			ID: id2,
		}
	}
	var service *shared.DatadogTracingPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.DatadogTracingPluginService{
			ID: id3,
		}
	}
	out := shared.DatadogTracingPluginInput{
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Tags:          tags,
		Config:        config,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}
	return &out
}

func (r *GatewayPluginDatadogTracingResourceModel) RefreshFromSharedDatadogTracingPlugin(resp *shared.DatadogTracingPlugin) {
	if resp != nil {
		r.Config.BatchFlushDelay = types.Int64PointerValue(resp.Config.BatchFlushDelay)
		r.Config.BatchSpanCount = types.Int64PointerValue(resp.Config.BatchSpanCount)
		r.Config.ConnectTimeout = types.Int64PointerValue(resp.Config.ConnectTimeout)
		r.Config.Endpoint = types.StringPointerValue(resp.Config.Endpoint)
		r.Config.Environment = types.StringPointerValue(resp.Config.Environment)
		r.Config.ReadTimeout = types.Int64PointerValue(resp.Config.ReadTimeout)
		r.Config.SendTimeout = types.Int64PointerValue(resp.Config.SendTimeout)
		r.Config.ServiceName = types.StringPointerValue(resp.Config.ServiceName)
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering != nil {
			r.Ordering = make(map[string]types.String, len(resp.Ordering))
			for key, value := range resp.Ordering {
				r.Ordering[key] = types.StringValue(value)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
