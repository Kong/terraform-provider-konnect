// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshTraceResourceModel) ToSharedMeshTraceItem() *shared.MeshTraceItem {
	typeVar := shared.MeshTraceItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var defaultVar *shared.MeshTraceItemDefault
	if r.Spec.Default != nil {
		var backends []shared.MeshTraceItemBackends = []shared.MeshTraceItemBackends{}
		for _, backendsItem := range r.Spec.Default.Backends {
			var datadog *shared.Datadog
			if backendsItem.Datadog != nil {
				splitService := new(bool)
				if !backendsItem.Datadog.SplitService.IsUnknown() && !backendsItem.Datadog.SplitService.IsNull() {
					*splitService = backendsItem.Datadog.SplitService.ValueBool()
				} else {
					splitService = nil
				}
				var url string
				url = backendsItem.Datadog.URL.ValueString()

				datadog = &shared.Datadog{
					SplitService: splitService,
					URL:          url,
				}
			}
			var openTelemetry *shared.MeshTraceItemOpenTelemetry
			if backendsItem.OpenTelemetry != nil {
				var endpoint string
				endpoint = backendsItem.OpenTelemetry.Endpoint.ValueString()

				openTelemetry = &shared.MeshTraceItemOpenTelemetry{
					Endpoint: endpoint,
				}
			}
			type1 := shared.MeshTraceItemSpecType(backendsItem.Type.ValueString())
			var zipkin *shared.Zipkin
			if backendsItem.Zipkin != nil {
				apiVersion := new(shared.APIVersion)
				if !backendsItem.Zipkin.APIVersion.IsUnknown() && !backendsItem.Zipkin.APIVersion.IsNull() {
					*apiVersion = shared.APIVersion(backendsItem.Zipkin.APIVersion.ValueString())
				} else {
					apiVersion = nil
				}
				sharedSpanContext := new(bool)
				if !backendsItem.Zipkin.SharedSpanContext.IsUnknown() && !backendsItem.Zipkin.SharedSpanContext.IsNull() {
					*sharedSpanContext = backendsItem.Zipkin.SharedSpanContext.ValueBool()
				} else {
					sharedSpanContext = nil
				}
				traceId128bit := new(bool)
				if !backendsItem.Zipkin.TraceId128bit.IsUnknown() && !backendsItem.Zipkin.TraceId128bit.IsNull() {
					*traceId128bit = backendsItem.Zipkin.TraceId128bit.ValueBool()
				} else {
					traceId128bit = nil
				}
				var url1 string
				url1 = backendsItem.Zipkin.URL.ValueString()

				zipkin = &shared.Zipkin{
					APIVersion:        apiVersion,
					SharedSpanContext: sharedSpanContext,
					TraceId128bit:     traceId128bit,
					URL:               url1,
				}
			}
			backends = append(backends, shared.MeshTraceItemBackends{
				Datadog:       datadog,
				OpenTelemetry: openTelemetry,
				Type:          type1,
				Zipkin:        zipkin,
			})
		}
		var sampling *shared.MeshTraceItemSampling
		if r.Spec.Default.Sampling != nil {
			var client *shared.MeshTraceItemClient
			if r.Spec.Default.Sampling.Client != nil {
				integer := new(int64)
				if !r.Spec.Default.Sampling.Client.Integer.IsUnknown() && !r.Spec.Default.Sampling.Client.Integer.IsNull() {
					*integer = r.Spec.Default.Sampling.Client.Integer.ValueInt64()
				} else {
					integer = nil
				}
				if integer != nil {
					client = &shared.MeshTraceItemClient{
						Integer: integer,
					}
				}
				str := new(string)
				if !r.Spec.Default.Sampling.Client.Str.IsUnknown() && !r.Spec.Default.Sampling.Client.Str.IsNull() {
					*str = r.Spec.Default.Sampling.Client.Str.ValueString()
				} else {
					str = nil
				}
				if str != nil {
					client = &shared.MeshTraceItemClient{
						Str: str,
					}
				}
			}
			var overall *shared.Overall
			if r.Spec.Default.Sampling.Overall != nil {
				integer1 := new(int64)
				if !r.Spec.Default.Sampling.Overall.Integer.IsUnknown() && !r.Spec.Default.Sampling.Overall.Integer.IsNull() {
					*integer1 = r.Spec.Default.Sampling.Overall.Integer.ValueInt64()
				} else {
					integer1 = nil
				}
				if integer1 != nil {
					overall = &shared.Overall{
						Integer: integer1,
					}
				}
				str1 := new(string)
				if !r.Spec.Default.Sampling.Overall.Str.IsUnknown() && !r.Spec.Default.Sampling.Overall.Str.IsNull() {
					*str1 = r.Spec.Default.Sampling.Overall.Str.ValueString()
				} else {
					str1 = nil
				}
				if str1 != nil {
					overall = &shared.Overall{
						Str: str1,
					}
				}
			}
			var random *shared.Random
			if r.Spec.Default.Sampling.Random != nil {
				integer2 := new(int64)
				if !r.Spec.Default.Sampling.Random.Integer.IsUnknown() && !r.Spec.Default.Sampling.Random.Integer.IsNull() {
					*integer2 = r.Spec.Default.Sampling.Random.Integer.ValueInt64()
				} else {
					integer2 = nil
				}
				if integer2 != nil {
					random = &shared.Random{
						Integer: integer2,
					}
				}
				str2 := new(string)
				if !r.Spec.Default.Sampling.Random.Str.IsUnknown() && !r.Spec.Default.Sampling.Random.Str.IsNull() {
					*str2 = r.Spec.Default.Sampling.Random.Str.ValueString()
				} else {
					str2 = nil
				}
				if str2 != nil {
					random = &shared.Random{
						Str: str2,
					}
				}
			}
			sampling = &shared.MeshTraceItemSampling{
				Client:  client,
				Overall: overall,
				Random:  random,
			}
		}
		var tags []shared.Tags = []shared.Tags{}
		for _, tagsItem := range r.Spec.Default.Tags {
			var header *shared.Header
			if tagsItem.Header != nil {
				defaultVar1 := new(string)
				if !tagsItem.Header.Default.IsUnknown() && !tagsItem.Header.Default.IsNull() {
					*defaultVar1 = tagsItem.Header.Default.ValueString()
				} else {
					defaultVar1 = nil
				}
				var name1 string
				name1 = tagsItem.Header.Name.ValueString()

				header = &shared.Header{
					Default: defaultVar1,
					Name:    name1,
				}
			}
			literal := new(string)
			if !tagsItem.Literal.IsUnknown() && !tagsItem.Literal.IsNull() {
				*literal = tagsItem.Literal.ValueString()
			} else {
				literal = nil
			}
			var name2 string
			name2 = tagsItem.Name.ValueString()

			tags = append(tags, shared.Tags{
				Header:  header,
				Literal: literal,
				Name:    name2,
			})
		}
		defaultVar = &shared.MeshTraceItemDefault{
			Backends: backends,
			Sampling: sampling,
			Tags:     tags,
		}
	}
	var targetRef *shared.MeshTraceItemTargetRef
	if r.Spec.TargetRef != nil {
		kind := new(shared.MeshTraceItemKind)
		if !r.Spec.TargetRef.Kind.IsUnknown() && !r.Spec.TargetRef.Kind.IsNull() {
			*kind = shared.MeshTraceItemKind(r.Spec.TargetRef.Kind.ValueString())
		} else {
			kind = nil
		}
		labels1 := make(map[string]string)
		for labelsKey1, labelsValue1 := range r.Spec.TargetRef.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels1[labelsKey1] = labelsInst1
		}
		mesh1 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh1 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name3 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name3 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name3 = nil
		}
		namespace := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		var proxyTypes []shared.MeshTraceItemProxyTypes = []shared.MeshTraceItemProxyTypes{}
		for _, proxyTypesItem := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshTraceItemProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags1 := make(map[string]string)
		for tagsKey, tagsValue := range r.Spec.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags1[tagsKey] = tagsInst
		}
		targetRef = &shared.MeshTraceItemTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name3,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags1,
		}
	}
	spec := shared.MeshTraceItemSpec{
		Default:   defaultVar,
		TargetRef: targetRef,
	}
	creationTime := new(time.Time)
	if !r.CreationTime.IsUnknown() && !r.CreationTime.IsNull() {
		*creationTime, _ = time.Parse(time.RFC3339Nano, r.CreationTime.ValueString())
	} else {
		creationTime = nil
	}
	modificationTime := new(time.Time)
	if !r.ModificationTime.IsUnknown() && !r.ModificationTime.IsNull() {
		*modificationTime, _ = time.Parse(time.RFC3339Nano, r.ModificationTime.ValueString())
	} else {
		modificationTime = nil
	}
	out := shared.MeshTraceItem{
		Type:             typeVar,
		Mesh:             mesh,
		Name:             name,
		Labels:           labels,
		Spec:             spec,
		CreationTime:     creationTime,
		ModificationTime: modificationTime,
	}
	return &out
}

func (r *MeshTraceResourceModel) RefreshFromSharedMeshTraceCreateOrUpdateSuccessResponse(resp *shared.MeshTraceCreateOrUpdateSuccessResponse) {
	if resp != nil {
		r.Warnings = []types.String{}
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}
}

func (r *MeshTraceResourceModel) RefreshFromSharedMeshTraceItem(resp *shared.MeshTraceItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Default == nil {
			r.Spec.Default = nil
		} else {
			r.Spec.Default = &tfTypes.MeshTraceItemDefault{}
			r.Spec.Default.Backends = []tfTypes.MeshTraceItemBackends{}
			if len(r.Spec.Default.Backends) > len(resp.Spec.Default.Backends) {
				r.Spec.Default.Backends = r.Spec.Default.Backends[:len(resp.Spec.Default.Backends)]
			}
			for backendsCount, backendsItem := range resp.Spec.Default.Backends {
				var backends1 tfTypes.MeshTraceItemBackends
				if backendsItem.Datadog == nil {
					backends1.Datadog = nil
				} else {
					backends1.Datadog = &tfTypes.Datadog{}
					backends1.Datadog.SplitService = types.BoolPointerValue(backendsItem.Datadog.SplitService)
					backends1.Datadog.URL = types.StringValue(backendsItem.Datadog.URL)
				}
				if backendsItem.OpenTelemetry == nil {
					backends1.OpenTelemetry = nil
				} else {
					backends1.OpenTelemetry = &tfTypes.MeshTraceItemOpenTelemetry{}
					backends1.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
				}
				backends1.Type = types.StringValue(string(backendsItem.Type))
				if backendsItem.Zipkin == nil {
					backends1.Zipkin = nil
				} else {
					backends1.Zipkin = &tfTypes.Zipkin{}
					if backendsItem.Zipkin.APIVersion != nil {
						backends1.Zipkin.APIVersion = types.StringValue(string(*backendsItem.Zipkin.APIVersion))
					} else {
						backends1.Zipkin.APIVersion = types.StringNull()
					}
					backends1.Zipkin.SharedSpanContext = types.BoolPointerValue(backendsItem.Zipkin.SharedSpanContext)
					backends1.Zipkin.TraceId128bit = types.BoolPointerValue(backendsItem.Zipkin.TraceId128bit)
					backends1.Zipkin.URL = types.StringValue(backendsItem.Zipkin.URL)
				}
				if backendsCount+1 > len(r.Spec.Default.Backends) {
					r.Spec.Default.Backends = append(r.Spec.Default.Backends, backends1)
				} else {
					r.Spec.Default.Backends[backendsCount].Datadog = backends1.Datadog
					r.Spec.Default.Backends[backendsCount].OpenTelemetry = backends1.OpenTelemetry
					r.Spec.Default.Backends[backendsCount].Type = backends1.Type
					r.Spec.Default.Backends[backendsCount].Zipkin = backends1.Zipkin
				}
			}
			if resp.Spec.Default.Sampling == nil {
				r.Spec.Default.Sampling = nil
			} else {
				r.Spec.Default.Sampling = &tfTypes.MeshTraceItemSampling{}
				if resp.Spec.Default.Sampling.Client == nil {
					r.Spec.Default.Sampling.Client = nil
				} else {
					r.Spec.Default.Sampling.Client = &tfTypes.Mode{}
					if resp.Spec.Default.Sampling.Client.Integer != nil {
						r.Spec.Default.Sampling.Client.Integer = types.Int64PointerValue(resp.Spec.Default.Sampling.Client.Integer)
					}
					if resp.Spec.Default.Sampling.Client.Str != nil {
						r.Spec.Default.Sampling.Client.Str = types.StringPointerValue(resp.Spec.Default.Sampling.Client.Str)
					}
				}
				if resp.Spec.Default.Sampling.Overall == nil {
					r.Spec.Default.Sampling.Overall = nil
				} else {
					r.Spec.Default.Sampling.Overall = &tfTypes.Mode{}
					if resp.Spec.Default.Sampling.Overall.Integer != nil {
						r.Spec.Default.Sampling.Overall.Integer = types.Int64PointerValue(resp.Spec.Default.Sampling.Overall.Integer)
					}
					if resp.Spec.Default.Sampling.Overall.Str != nil {
						r.Spec.Default.Sampling.Overall.Str = types.StringPointerValue(resp.Spec.Default.Sampling.Overall.Str)
					}
				}
				if resp.Spec.Default.Sampling.Random == nil {
					r.Spec.Default.Sampling.Random = nil
				} else {
					r.Spec.Default.Sampling.Random = &tfTypes.Mode{}
					if resp.Spec.Default.Sampling.Random.Integer != nil {
						r.Spec.Default.Sampling.Random.Integer = types.Int64PointerValue(resp.Spec.Default.Sampling.Random.Integer)
					}
					if resp.Spec.Default.Sampling.Random.Str != nil {
						r.Spec.Default.Sampling.Random.Str = types.StringPointerValue(resp.Spec.Default.Sampling.Random.Str)
					}
				}
			}
			r.Spec.Default.Tags = []tfTypes.Tags{}
			if len(r.Spec.Default.Tags) > len(resp.Spec.Default.Tags) {
				r.Spec.Default.Tags = r.Spec.Default.Tags[:len(resp.Spec.Default.Tags)]
			}
			for tagsCount, tagsItem := range resp.Spec.Default.Tags {
				var tags1 tfTypes.Tags
				if tagsItem.Header == nil {
					tags1.Header = nil
				} else {
					tags1.Header = &tfTypes.Header{}
					tags1.Header.Default = types.StringPointerValue(tagsItem.Header.Default)
					tags1.Header.Name = types.StringValue(tagsItem.Header.Name)
				}
				tags1.Literal = types.StringPointerValue(tagsItem.Literal)
				tags1.Name = types.StringValue(tagsItem.Name)
				if tagsCount+1 > len(r.Spec.Default.Tags) {
					r.Spec.Default.Tags = append(r.Spec.Default.Tags, tags1)
				} else {
					r.Spec.Default.Tags[tagsCount].Header = tags1.Header
					r.Spec.Default.Tags[tagsCount].Literal = tags1.Literal
					r.Spec.Default.Tags[tagsCount].Name = tags1.Name
				}
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			if resp.Spec.TargetRef.Kind != nil {
				r.Spec.TargetRef.Kind = types.StringValue(string(*resp.Spec.TargetRef.Kind))
			} else {
				r.Spec.TargetRef.Kind = types.StringNull()
			}
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = []types.String{}
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
