// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"time"
)

func (r *ServerlessCloudGatewayResourceModel) ToSharedCreateServerlessCloudGatewayRequest() *shared.CreateServerlessCloudGatewayRequest {
	id := r.ControlPlane.ID.ValueString()
	prefix := r.ControlPlane.Prefix.ValueString()
	region := shared.CpRegion(r.ControlPlane.Region.ValueString())
	controlPlane := shared.ServerlessControlPlane{
		ID:     id,
		Prefix: prefix,
		Region: region,
	}
	clusterCert := r.ClusterCert.ValueString()
	clusterCertKey := r.ClusterCertKey.ValueString()
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := labelsValue.ValueString()
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateServerlessCloudGatewayRequest{
		ControlPlane:   controlPlane,
		ClusterCert:    clusterCert,
		ClusterCertKey: clusterCertKey,
		Labels:         labels,
	}
	return &out
}

func (r *ServerlessCloudGatewayResourceModel) RefreshFromSharedServerlessCloudGateway(resp *shared.ServerlessCloudGateway) {
	if resp != nil {
		r.ControlPlane.ID = types.StringValue(resp.ControlPlane.ID)
		r.ControlPlane.Prefix = types.StringValue(resp.ControlPlane.Prefix)
		r.ControlPlane.Region = types.StringValue(string(resp.ControlPlane.Region))
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.GatewayEndpoint = types.StringValue(resp.GatewayEndpoint)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	}
}
