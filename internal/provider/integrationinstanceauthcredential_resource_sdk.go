// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *IntegrationInstanceAuthCredentialResourceModel) RefreshFromSharedIntegrationInstanceAuthCredential(ctx context.Context, resp *shared.IntegrationInstanceAuthCredential) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.MultiKeyAuthCredential != nil {
			r.MultiKeyAuthCredential = &tfTypes.MultiKeyAuthCredential{}
			r.MultiKeyAuthCredential.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.MultiKeyAuthCredential.CreatedAt))
			r.CreatedAt = r.MultiKeyAuthCredential.CreatedAt
			r.MultiKeyAuthCredential.ExpiresAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.MultiKeyAuthCredential.ExpiresAt))
			r.ExpiresAt = r.MultiKeyAuthCredential.ExpiresAt
			r.MultiKeyAuthCredential.ID = types.StringValue(resp.MultiKeyAuthCredential.ID)
			r.ID = r.MultiKeyAuthCredential.ID
			r.MultiKeyAuthCredential.IntegrationInstance.DisplayName = types.StringValue(resp.MultiKeyAuthCredential.IntegrationInstance.DisplayName)
			r.MultiKeyAuthCredential.IntegrationInstance.ID = types.StringValue(resp.MultiKeyAuthCredential.IntegrationInstance.ID)
			r.MultiKeyAuthCredential.IntegrationInstance.Name = types.StringValue(resp.MultiKeyAuthCredential.IntegrationInstance.Name)
			r.MultiKeyAuthCredential.MissingPermissions = []tfTypes.MissingPermission{}

			for _, missingPermissionsItem := range resp.MultiKeyAuthCredential.MissingPermissions {
				var missingPermissions tfTypes.MissingPermission

				missingPermissions.Message = types.StringValue(missingPermissionsItem.Message)
				missingPermissions.Scopes = make([]types.String, 0, len(missingPermissionsItem.Scopes))
				for _, v := range missingPermissionsItem.Scopes {
					missingPermissions.Scopes = append(missingPermissions.Scopes, types.StringPointerValue(v))
				}

				r.MultiKeyAuthCredential.MissingPermissions = append(r.MultiKeyAuthCredential.MissingPermissions, missingPermissions)
			}
			r.MultiKeyAuthCredential.Tainted = types.BoolValue(resp.MultiKeyAuthCredential.Tainted)
			r.Tainted = r.MultiKeyAuthCredential.Tainted
		}
	}

	return diags
}

func (r *IntegrationInstanceAuthCredentialResourceModel) ToOperationsCreateIntegrationInstanceAuthCredentialRequest(ctx context.Context) (*operations.CreateIntegrationInstanceAuthCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	createIntegrationInstanceAuthCredential, createIntegrationInstanceAuthCredentialDiags := r.ToSharedCreateIntegrationInstanceAuthCredential(ctx)
	diags.Append(createIntegrationInstanceAuthCredentialDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateIntegrationInstanceAuthCredentialRequest{
		IntegrationInstanceID:                   integrationInstanceID,
		CreateIntegrationInstanceAuthCredential: *createIntegrationInstanceAuthCredential,
	}

	return &out, diags
}

func (r *IntegrationInstanceAuthCredentialResourceModel) ToOperationsDeleteIntegrationInstanceAuthCredentialRequest(ctx context.Context) (*operations.DeleteIntegrationInstanceAuthCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	out := operations.DeleteIntegrationInstanceAuthCredentialRequest{
		IntegrationInstanceID: integrationInstanceID,
	}

	return &out, diags
}

func (r *IntegrationInstanceAuthCredentialResourceModel) ToOperationsGetIntegrationInstanceAuthCredentialRequest(ctx context.Context) (*operations.GetIntegrationInstanceAuthCredentialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	out := operations.GetIntegrationInstanceAuthCredentialRequest{
		IntegrationInstanceID: integrationInstanceID,
	}

	return &out, diags
}

func (r *IntegrationInstanceAuthCredentialResourceModel) ToSharedCreateIntegrationInstanceAuthCredential(ctx context.Context) (*shared.CreateIntegrationInstanceAuthCredential, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.CreateIntegrationInstanceAuthCredential
	var multiKeyAuth *shared.MultiKeyAuth
	if r.MultiKeyAuth != nil {
		headers := make([]shared.Headers, 0, len(r.MultiKeyAuth.Config.Headers))
		for _, headersItem := range r.MultiKeyAuth.Config.Headers {
			var name string
			name = headersItem.Name.ValueString()

			var key string
			key = headersItem.Key.ValueString()

			headers = append(headers, shared.Headers{
				Name: name,
				Key:  key,
			})
		}
		config := shared.CreateMultiKeyAuthCredentialConfig{
			Headers: headers,
		}
		multiKeyAuth = &shared.MultiKeyAuth{
			Config: config,
		}
	}
	if multiKeyAuth != nil {
		out = shared.CreateIntegrationInstanceAuthCredential{
			MultiKeyAuth: multiKeyAuth,
		}
	}

	return &out, diags
}
