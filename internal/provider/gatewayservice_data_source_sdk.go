// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayServiceDataSourceModel) ToOperationsGetServiceRequest(ctx context.Context) (*operations.GetServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var serviceID string
	serviceID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetServiceRequest{
		ServiceID:      serviceID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayServiceDataSourceModel) RefreshFromSharedService(ctx context.Context, resp *shared.Service) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.CaCertificates != nil {
			r.CaCertificates = make([]types.String, 0, len(resp.CaCertificates))
			for _, v := range resp.CaCertificates {
				r.CaCertificates = append(r.CaCertificates, types.StringValue(v))
			}
		}
		if resp.ClientCertificate == nil {
			r.ClientCertificate = nil
		} else {
			r.ClientCertificate = &tfTypes.ACLWithoutParentsConsumer{}
			r.ClientCertificate.ID = types.StringPointerValue(resp.ClientCertificate.ID)
		}
		r.ConnectTimeout = types.Int64PointerValue(resp.ConnectTimeout)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.Host = types.StringValue(resp.Host)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.Path = types.StringPointerValue(resp.Path)
		r.Port = types.Int64PointerValue(resp.Port)
		if resp.Protocol != nil {
			r.Protocol = types.StringValue(string(*resp.Protocol))
		} else {
			r.Protocol = types.StringNull()
		}
		r.ReadTimeout = types.Int64PointerValue(resp.ReadTimeout)
		r.Retries = types.Int64PointerValue(resp.Retries)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.TLSVerify = types.BoolPointerValue(resp.TLSVerify)
		r.TLSVerifyDepth = types.Int64PointerValue(resp.TLSVerifyDepth)
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
		r.WriteTimeout = types.Int64PointerValue(resp.WriteTimeout)
	}

	return diags
}
