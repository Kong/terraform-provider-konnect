// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginAceResourceModel) RefreshFromSharedAcePlugin(ctx context.Context, resp *shared.AcePlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.AcePluginConfig{}
			r.Config.Anonymous = types.StringPointerValue(resp.Config.Anonymous)
			if resp.Config.MatchPolicy != nil {
				r.Config.MatchPolicy = types.StringValue(string(*resp.Config.MatchPolicy))
			} else {
				r.Config.MatchPolicy = types.StringNull()
			}
			if resp.Config.RateLimiting == nil {
				r.Config.RateLimiting = nil
			} else {
				r.Config.RateLimiting = &tfTypes.RateLimiting{}
				if resp.Config.RateLimiting.Redis == nil {
					r.Config.RateLimiting.Redis = nil
				} else {
					r.Config.RateLimiting.Redis = &tfTypes.AcePluginRedis{}
					r.Config.RateLimiting.Redis.ClusterMaxRedirections = types.Int64PointerValue(resp.Config.RateLimiting.Redis.ClusterMaxRedirections)
					if resp.Config.RateLimiting.Redis.ClusterNodes != nil {
						r.Config.RateLimiting.Redis.ClusterNodes = []tfTypes.PartialRedisEeClusterNodes{}

						for _, clusterNodesItem := range resp.Config.RateLimiting.Redis.ClusterNodes {
							var clusterNodes tfTypes.PartialRedisEeClusterNodes

							clusterNodes.IP = types.StringPointerValue(clusterNodesItem.IP)
							clusterNodes.Port = types.Int64PointerValue(clusterNodesItem.Port)

							r.Config.RateLimiting.Redis.ClusterNodes = append(r.Config.RateLimiting.Redis.ClusterNodes, clusterNodes)
						}
					}
					r.Config.RateLimiting.Redis.ConnectTimeout = types.Int64PointerValue(resp.Config.RateLimiting.Redis.ConnectTimeout)
					r.Config.RateLimiting.Redis.ConnectionIsProxied = types.BoolPointerValue(resp.Config.RateLimiting.Redis.ConnectionIsProxied)
					r.Config.RateLimiting.Redis.Database = types.Int64PointerValue(resp.Config.RateLimiting.Redis.Database)
					r.Config.RateLimiting.Redis.Host = types.StringPointerValue(resp.Config.RateLimiting.Redis.Host)
					r.Config.RateLimiting.Redis.KeepaliveBacklog = types.Int64PointerValue(resp.Config.RateLimiting.Redis.KeepaliveBacklog)
					r.Config.RateLimiting.Redis.KeepalivePoolSize = types.Int64PointerValue(resp.Config.RateLimiting.Redis.KeepalivePoolSize)
					r.Config.RateLimiting.Redis.Password = types.StringPointerValue(resp.Config.RateLimiting.Redis.Password)
					r.Config.RateLimiting.Redis.Port = types.Int64PointerValue(resp.Config.RateLimiting.Redis.Port)
					r.Config.RateLimiting.Redis.ReadTimeout = types.Int64PointerValue(resp.Config.RateLimiting.Redis.ReadTimeout)
					r.Config.RateLimiting.Redis.SendTimeout = types.Int64PointerValue(resp.Config.RateLimiting.Redis.SendTimeout)
					r.Config.RateLimiting.Redis.SentinelMaster = types.StringPointerValue(resp.Config.RateLimiting.Redis.SentinelMaster)
					if resp.Config.RateLimiting.Redis.SentinelNodes != nil {
						r.Config.RateLimiting.Redis.SentinelNodes = []tfTypes.PartialRedisEeSentinelNodes{}

						for _, sentinelNodesItem := range resp.Config.RateLimiting.Redis.SentinelNodes {
							var sentinelNodes tfTypes.PartialRedisEeSentinelNodes

							sentinelNodes.Host = types.StringPointerValue(sentinelNodesItem.Host)
							sentinelNodes.Port = types.Int64PointerValue(sentinelNodesItem.Port)

							r.Config.RateLimiting.Redis.SentinelNodes = append(r.Config.RateLimiting.Redis.SentinelNodes, sentinelNodes)
						}
					}
					r.Config.RateLimiting.Redis.SentinelPassword = types.StringPointerValue(resp.Config.RateLimiting.Redis.SentinelPassword)
					if resp.Config.RateLimiting.Redis.SentinelRole != nil {
						r.Config.RateLimiting.Redis.SentinelRole = types.StringValue(string(*resp.Config.RateLimiting.Redis.SentinelRole))
					} else {
						r.Config.RateLimiting.Redis.SentinelRole = types.StringNull()
					}
					r.Config.RateLimiting.Redis.SentinelUsername = types.StringPointerValue(resp.Config.RateLimiting.Redis.SentinelUsername)
					r.Config.RateLimiting.Redis.ServerName = types.StringPointerValue(resp.Config.RateLimiting.Redis.ServerName)
					r.Config.RateLimiting.Redis.Ssl = types.BoolPointerValue(resp.Config.RateLimiting.Redis.Ssl)
					r.Config.RateLimiting.Redis.SslVerify = types.BoolPointerValue(resp.Config.RateLimiting.Redis.SslVerify)
					r.Config.RateLimiting.Redis.Username = types.StringPointerValue(resp.Config.RateLimiting.Redis.Username)
				}
				r.Config.RateLimiting.SyncRate = types.Float64PointerValue(resp.Config.RateLimiting.SyncRate)
			}
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.AcePluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.AcePluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.AcePluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAceResourceModel) ToOperationsCreateAcePluginRequest(ctx context.Context) (*operations.CreateAcePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	acePlugin, acePluginDiags := r.ToSharedAcePlugin(ctx)
	diags.Append(acePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAcePluginRequest{
		ControlPlaneID: controlPlaneID,
		AcePlugin:      *acePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAceResourceModel) ToOperationsDeleteAcePluginRequest(ctx context.Context) (*operations.DeleteAcePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAcePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAceResourceModel) ToOperationsGetAcePluginRequest(ctx context.Context) (*operations.GetAcePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAcePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAceResourceModel) ToOperationsUpdateAcePluginRequest(ctx context.Context) (*operations.UpdateAcePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	acePlugin, acePluginDiags := r.ToSharedAcePlugin(ctx)
	diags.Append(acePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAcePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
		AcePlugin:      *acePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAceResourceModel) ToSharedAcePlugin(ctx context.Context) (*shared.AcePlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AcePluginOrdering
	if r.Ordering != nil {
		var after *shared.AcePluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AcePluginAfter{
				Access: access,
			}
		}
		var before *shared.AcePluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AcePluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AcePluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.Partials
	if r.Partials != nil {
		partials = make([]shared.Partials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.Partials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.AcePluginConfig
	if r.Config != nil {
		anonymous := new(string)
		if !r.Config.Anonymous.IsUnknown() && !r.Config.Anonymous.IsNull() {
			*anonymous = r.Config.Anonymous.ValueString()
		} else {
			anonymous = nil
		}
		matchPolicy := new(shared.MatchPolicy)
		if !r.Config.MatchPolicy.IsUnknown() && !r.Config.MatchPolicy.IsNull() {
			*matchPolicy = shared.MatchPolicy(r.Config.MatchPolicy.ValueString())
		} else {
			matchPolicy = nil
		}
		var rateLimiting *shared.RateLimiting
		if r.Config.RateLimiting != nil {
			var redis *shared.AcePluginRedis
			if r.Config.RateLimiting.Redis != nil {
				clusterMaxRedirections := new(int64)
				if !r.Config.RateLimiting.Redis.ClusterMaxRedirections.IsUnknown() && !r.Config.RateLimiting.Redis.ClusterMaxRedirections.IsNull() {
					*clusterMaxRedirections = r.Config.RateLimiting.Redis.ClusterMaxRedirections.ValueInt64()
				} else {
					clusterMaxRedirections = nil
				}
				var clusterNodes []shared.AcePluginClusterNodes
				if r.Config.RateLimiting.Redis.ClusterNodes != nil {
					clusterNodes = make([]shared.AcePluginClusterNodes, 0, len(r.Config.RateLimiting.Redis.ClusterNodes))
					for _, clusterNodesItem := range r.Config.RateLimiting.Redis.ClusterNodes {
						ip := new(string)
						if !clusterNodesItem.IP.IsUnknown() && !clusterNodesItem.IP.IsNull() {
							*ip = clusterNodesItem.IP.ValueString()
						} else {
							ip = nil
						}
						port := new(int64)
						if !clusterNodesItem.Port.IsUnknown() && !clusterNodesItem.Port.IsNull() {
							*port = clusterNodesItem.Port.ValueInt64()
						} else {
							port = nil
						}
						clusterNodes = append(clusterNodes, shared.AcePluginClusterNodes{
							IP:   ip,
							Port: port,
						})
					}
				}
				connectTimeout := new(int64)
				if !r.Config.RateLimiting.Redis.ConnectTimeout.IsUnknown() && !r.Config.RateLimiting.Redis.ConnectTimeout.IsNull() {
					*connectTimeout = r.Config.RateLimiting.Redis.ConnectTimeout.ValueInt64()
				} else {
					connectTimeout = nil
				}
				connectionIsProxied := new(bool)
				if !r.Config.RateLimiting.Redis.ConnectionIsProxied.IsUnknown() && !r.Config.RateLimiting.Redis.ConnectionIsProxied.IsNull() {
					*connectionIsProxied = r.Config.RateLimiting.Redis.ConnectionIsProxied.ValueBool()
				} else {
					connectionIsProxied = nil
				}
				database := new(int64)
				if !r.Config.RateLimiting.Redis.Database.IsUnknown() && !r.Config.RateLimiting.Redis.Database.IsNull() {
					*database = r.Config.RateLimiting.Redis.Database.ValueInt64()
				} else {
					database = nil
				}
				host := new(string)
				if !r.Config.RateLimiting.Redis.Host.IsUnknown() && !r.Config.RateLimiting.Redis.Host.IsNull() {
					*host = r.Config.RateLimiting.Redis.Host.ValueString()
				} else {
					host = nil
				}
				keepaliveBacklog := new(int64)
				if !r.Config.RateLimiting.Redis.KeepaliveBacklog.IsUnknown() && !r.Config.RateLimiting.Redis.KeepaliveBacklog.IsNull() {
					*keepaliveBacklog = r.Config.RateLimiting.Redis.KeepaliveBacklog.ValueInt64()
				} else {
					keepaliveBacklog = nil
				}
				keepalivePoolSize := new(int64)
				if !r.Config.RateLimiting.Redis.KeepalivePoolSize.IsUnknown() && !r.Config.RateLimiting.Redis.KeepalivePoolSize.IsNull() {
					*keepalivePoolSize = r.Config.RateLimiting.Redis.KeepalivePoolSize.ValueInt64()
				} else {
					keepalivePoolSize = nil
				}
				password := new(string)
				if !r.Config.RateLimiting.Redis.Password.IsUnknown() && !r.Config.RateLimiting.Redis.Password.IsNull() {
					*password = r.Config.RateLimiting.Redis.Password.ValueString()
				} else {
					password = nil
				}
				port1 := new(int64)
				if !r.Config.RateLimiting.Redis.Port.IsUnknown() && !r.Config.RateLimiting.Redis.Port.IsNull() {
					*port1 = r.Config.RateLimiting.Redis.Port.ValueInt64()
				} else {
					port1 = nil
				}
				readTimeout := new(int64)
				if !r.Config.RateLimiting.Redis.ReadTimeout.IsUnknown() && !r.Config.RateLimiting.Redis.ReadTimeout.IsNull() {
					*readTimeout = r.Config.RateLimiting.Redis.ReadTimeout.ValueInt64()
				} else {
					readTimeout = nil
				}
				sendTimeout := new(int64)
				if !r.Config.RateLimiting.Redis.SendTimeout.IsUnknown() && !r.Config.RateLimiting.Redis.SendTimeout.IsNull() {
					*sendTimeout = r.Config.RateLimiting.Redis.SendTimeout.ValueInt64()
				} else {
					sendTimeout = nil
				}
				sentinelMaster := new(string)
				if !r.Config.RateLimiting.Redis.SentinelMaster.IsUnknown() && !r.Config.RateLimiting.Redis.SentinelMaster.IsNull() {
					*sentinelMaster = r.Config.RateLimiting.Redis.SentinelMaster.ValueString()
				} else {
					sentinelMaster = nil
				}
				var sentinelNodes []shared.AcePluginSentinelNodes
				if r.Config.RateLimiting.Redis.SentinelNodes != nil {
					sentinelNodes = make([]shared.AcePluginSentinelNodes, 0, len(r.Config.RateLimiting.Redis.SentinelNodes))
					for _, sentinelNodesItem := range r.Config.RateLimiting.Redis.SentinelNodes {
						host1 := new(string)
						if !sentinelNodesItem.Host.IsUnknown() && !sentinelNodesItem.Host.IsNull() {
							*host1 = sentinelNodesItem.Host.ValueString()
						} else {
							host1 = nil
						}
						port2 := new(int64)
						if !sentinelNodesItem.Port.IsUnknown() && !sentinelNodesItem.Port.IsNull() {
							*port2 = sentinelNodesItem.Port.ValueInt64()
						} else {
							port2 = nil
						}
						sentinelNodes = append(sentinelNodes, shared.AcePluginSentinelNodes{
							Host: host1,
							Port: port2,
						})
					}
				}
				sentinelPassword := new(string)
				if !r.Config.RateLimiting.Redis.SentinelPassword.IsUnknown() && !r.Config.RateLimiting.Redis.SentinelPassword.IsNull() {
					*sentinelPassword = r.Config.RateLimiting.Redis.SentinelPassword.ValueString()
				} else {
					sentinelPassword = nil
				}
				sentinelRole := new(shared.AcePluginSentinelRole)
				if !r.Config.RateLimiting.Redis.SentinelRole.IsUnknown() && !r.Config.RateLimiting.Redis.SentinelRole.IsNull() {
					*sentinelRole = shared.AcePluginSentinelRole(r.Config.RateLimiting.Redis.SentinelRole.ValueString())
				} else {
					sentinelRole = nil
				}
				sentinelUsername := new(string)
				if !r.Config.RateLimiting.Redis.SentinelUsername.IsUnknown() && !r.Config.RateLimiting.Redis.SentinelUsername.IsNull() {
					*sentinelUsername = r.Config.RateLimiting.Redis.SentinelUsername.ValueString()
				} else {
					sentinelUsername = nil
				}
				serverName := new(string)
				if !r.Config.RateLimiting.Redis.ServerName.IsUnknown() && !r.Config.RateLimiting.Redis.ServerName.IsNull() {
					*serverName = r.Config.RateLimiting.Redis.ServerName.ValueString()
				} else {
					serverName = nil
				}
				ssl := new(bool)
				if !r.Config.RateLimiting.Redis.Ssl.IsUnknown() && !r.Config.RateLimiting.Redis.Ssl.IsNull() {
					*ssl = r.Config.RateLimiting.Redis.Ssl.ValueBool()
				} else {
					ssl = nil
				}
				sslVerify := new(bool)
				if !r.Config.RateLimiting.Redis.SslVerify.IsUnknown() && !r.Config.RateLimiting.Redis.SslVerify.IsNull() {
					*sslVerify = r.Config.RateLimiting.Redis.SslVerify.ValueBool()
				} else {
					sslVerify = nil
				}
				username := new(string)
				if !r.Config.RateLimiting.Redis.Username.IsUnknown() && !r.Config.RateLimiting.Redis.Username.IsNull() {
					*username = r.Config.RateLimiting.Redis.Username.ValueString()
				} else {
					username = nil
				}
				redis = &shared.AcePluginRedis{
					ClusterMaxRedirections: clusterMaxRedirections,
					ClusterNodes:           clusterNodes,
					ConnectTimeout:         connectTimeout,
					ConnectionIsProxied:    connectionIsProxied,
					Database:               database,
					Host:                   host,
					KeepaliveBacklog:       keepaliveBacklog,
					KeepalivePoolSize:      keepalivePoolSize,
					Password:               password,
					Port:                   port1,
					ReadTimeout:            readTimeout,
					SendTimeout:            sendTimeout,
					SentinelMaster:         sentinelMaster,
					SentinelNodes:          sentinelNodes,
					SentinelPassword:       sentinelPassword,
					SentinelRole:           sentinelRole,
					SentinelUsername:       sentinelUsername,
					ServerName:             serverName,
					Ssl:                    ssl,
					SslVerify:              sslVerify,
					Username:               username,
				}
			}
			syncRate := new(float64)
			if !r.Config.RateLimiting.SyncRate.IsUnknown() && !r.Config.RateLimiting.SyncRate.IsNull() {
				*syncRate = r.Config.RateLimiting.SyncRate.ValueFloat64()
			} else {
				syncRate = nil
			}
			rateLimiting = &shared.RateLimiting{
				Redis:    redis,
				SyncRate: syncRate,
			}
		}
		config = &shared.AcePluginConfig{
			Anonymous:    anonymous,
			MatchPolicy:  matchPolicy,
			RateLimiting: rateLimiting,
		}
	}
	protocols := make([]shared.AcePluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AcePluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AcePluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.AcePluginRoute{
			ID: id2,
		}
	}
	var service *shared.AcePluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.AcePluginService{
			ID: id3,
		}
	}
	out := shared.AcePlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
