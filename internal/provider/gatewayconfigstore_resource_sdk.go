// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayConfigStoreResourceModel) RefreshFromSharedConfigStore(ctx context.Context, resp *shared.ConfigStore) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *GatewayConfigStoreResourceModel) ToOperationsCreateConfigStoreRequest(ctx context.Context) (*operations.CreateConfigStoreRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	createConfigStore, createConfigStoreDiags := r.ToSharedCreateConfigStore(ctx)
	diags.Append(createConfigStoreDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateConfigStoreRequest{
		ControlPlaneID:    controlPlaneID,
		CreateConfigStore: *createConfigStore,
	}

	return &out, diags
}

func (r *GatewayConfigStoreResourceModel) ToOperationsDeleteConfigStoreRequest(ctx context.Context) (*operations.DeleteConfigStoreRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ID.ValueString()

	out := operations.DeleteConfigStoreRequest{
		ControlPlaneID: controlPlaneID,
		ConfigStoreID:  configStoreID,
	}

	return &out, diags
}

func (r *GatewayConfigStoreResourceModel) ToOperationsGetConfigStoreRequest(ctx context.Context) (*operations.GetConfigStoreRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ID.ValueString()

	out := operations.GetConfigStoreRequest{
		ControlPlaneID: controlPlaneID,
		ConfigStoreID:  configStoreID,
	}

	return &out, diags
}

func (r *GatewayConfigStoreResourceModel) ToOperationsUpdateConfigStoreRequest(ctx context.Context) (*operations.UpdateConfigStoreRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var configStoreID string
	configStoreID = r.ID.ValueString()

	updateConfigStore, updateConfigStoreDiags := r.ToSharedUpdateConfigStore(ctx)
	diags.Append(updateConfigStoreDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateConfigStoreRequest{
		ControlPlaneID:    controlPlaneID,
		ConfigStoreID:     configStoreID,
		UpdateConfigStore: *updateConfigStore,
	}

	return &out, diags
}

func (r *GatewayConfigStoreResourceModel) ToSharedCreateConfigStore(ctx context.Context) (*shared.CreateConfigStore, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.CreateConfigStore{
		Name: name,
	}

	return &out, diags
}

func (r *GatewayConfigStoreResourceModel) ToSharedUpdateConfigStore(ctx context.Context) (*shared.UpdateConfigStore, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.UpdateConfigStore{
		Name: name,
	}

	return &out, diags
}
