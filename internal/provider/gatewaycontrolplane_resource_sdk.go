// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayControlPlaneResourceModel) RefreshFromSharedControlPlane(ctx context.Context, resp *shared.ControlPlane) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.AuthType = types.StringValue(string(resp.Config.AuthType))
		r.Config.CloudGateway = types.BoolValue(resp.Config.CloudGateway)
		r.Config.ClusterType = types.StringValue(string(resp.Config.ClusterType))
		r.Config.ControlPlaneEndpoint = types.StringValue(resp.Config.ControlPlaneEndpoint)
		r.Config.ProxyUrls = []tfTypes.ProxyURL{}

		for _, proxyUrlsItem := range resp.Config.ProxyUrls {
			var proxyUrls tfTypes.ProxyURL

			proxyUrls.Host = types.StringValue(proxyUrlsItem.Host)
			proxyUrls.Port = types.Int64Value(proxyUrlsItem.Port)
			proxyUrls.Protocol = types.StringValue(proxyUrlsItem.Protocol)

			r.Config.ProxyUrls = append(r.Config.ProxyUrls, proxyUrls)
		}
		r.Config.TelemetryEndpoint = types.StringValue(resp.Config.TelemetryEndpoint)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
	}

	return diags
}

func (r *GatewayControlPlaneResourceModel) ToOperationsDeleteControlPlaneRequest(ctx context.Context) (*operations.DeleteControlPlaneRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteControlPlaneRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GatewayControlPlaneResourceModel) ToOperationsGetControlPlaneRequest(ctx context.Context) (*operations.GetControlPlaneRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetControlPlaneRequest{
		ID: id,
	}

	return &out, diags
}

func (r *GatewayControlPlaneResourceModel) ToOperationsUpdateControlPlaneRequest(ctx context.Context) (*operations.UpdateControlPlaneRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateControlPlaneRequest, updateControlPlaneRequestDiags := r.ToSharedUpdateControlPlaneRequest(ctx)
	diags.Append(updateControlPlaneRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateControlPlaneRequest{
		ID:                        id,
		UpdateControlPlaneRequest: *updateControlPlaneRequest,
	}

	return &out, diags
}

func (r *GatewayControlPlaneResourceModel) ToSharedCreateControlPlaneRequest(ctx context.Context) (*shared.CreateControlPlaneRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	clusterType := new(shared.CreateControlPlaneRequestClusterType)
	if !r.ClusterType.IsUnknown() && !r.ClusterType.IsNull() {
		*clusterType = shared.CreateControlPlaneRequestClusterType(r.ClusterType.ValueString())
	} else {
		clusterType = nil
	}
	authType := new(shared.AuthType)
	if !r.AuthType.IsUnknown() && !r.AuthType.IsNull() {
		*authType = shared.AuthType(r.AuthType.ValueString())
	} else {
		authType = nil
	}
	cloudGateway := new(bool)
	if !r.CloudGateway.IsUnknown() && !r.CloudGateway.IsNull() {
		*cloudGateway = r.CloudGateway.ValueBool()
	} else {
		cloudGateway = nil
	}
	proxyUrls := make([]shared.ProxyURL, 0, len(r.ProxyUrls))
	for _, proxyUrlsItem := range r.ProxyUrls {
		var host string
		host = proxyUrlsItem.Host.ValueString()

		var port int64
		port = proxyUrlsItem.Port.ValueInt64()

		var protocol string
		protocol = proxyUrlsItem.Protocol.ValueString()

		proxyUrls = append(proxyUrls, shared.ProxyURL{
			Host:     host,
			Port:     port,
			Protocol: protocol,
		})
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.CreateControlPlaneRequest{
		Name:         name,
		Description:  description,
		ClusterType:  clusterType,
		AuthType:     authType,
		CloudGateway: cloudGateway,
		ProxyUrls:    proxyUrls,
		Labels:       labels,
	}

	return &out, diags
}

func (r *GatewayControlPlaneResourceModel) ToSharedUpdateControlPlaneRequest(ctx context.Context) (*shared.UpdateControlPlaneRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	authType := new(shared.UpdateControlPlaneRequestAuthType)
	if !r.AuthType.IsUnknown() && !r.AuthType.IsNull() {
		*authType = shared.UpdateControlPlaneRequestAuthType(r.AuthType.ValueString())
	} else {
		authType = nil
	}
	proxyUrls := make([]shared.ProxyURL, 0, len(r.ProxyUrls))
	for _, proxyUrlsItem := range r.ProxyUrls {
		var host string
		host = proxyUrlsItem.Host.ValueString()

		var port int64
		port = proxyUrlsItem.Port.ValueInt64()

		var protocol string
		protocol = proxyUrlsItem.Protocol.ValueString()

		proxyUrls = append(proxyUrls, shared.ProxyURL{
			Host:     host,
			Port:     port,
			Protocol: protocol,
		})
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	out := shared.UpdateControlPlaneRequest{
		Name:        name,
		Description: description,
		AuthType:    authType,
		ProxyUrls:   proxyUrls,
		Labels:      labels,
	}

	return &out, diags
}
