// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginAIProxyResourceModel) ToSharedCreateAIProxyPlugin() *shared.CreateAIProxyPlugin {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var protocols []shared.CreateAIProxyPluginProtocols = []shared.CreateAIProxyPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.CreateAIProxyPluginProtocols(protocolsItem.ValueString()))
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var consumer *shared.CreateAIProxyPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateAIProxyPluginConsumer{
			ID: id,
		}
	}
	var route *shared.CreateAIProxyPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.CreateAIProxyPluginRoute{
			ID: id1,
		}
	}
	var service *shared.CreateAIProxyPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.CreateAIProxyPluginService{
			ID: id2,
		}
	}
	var auth *shared.CreateAIProxyPluginAuth
	if r.Config.Auth != nil {
		headerName := new(string)
		if !r.Config.Auth.HeaderName.IsUnknown() && !r.Config.Auth.HeaderName.IsNull() {
			*headerName = r.Config.Auth.HeaderName.ValueString()
		} else {
			headerName = nil
		}
		headerValue := new(string)
		if !r.Config.Auth.HeaderValue.IsUnknown() && !r.Config.Auth.HeaderValue.IsNull() {
			*headerValue = r.Config.Auth.HeaderValue.ValueString()
		} else {
			headerValue = nil
		}
		paramLocation := new(shared.CreateAIProxyPluginParamLocation)
		if !r.Config.Auth.ParamLocation.IsUnknown() && !r.Config.Auth.ParamLocation.IsNull() {
			*paramLocation = shared.CreateAIProxyPluginParamLocation(r.Config.Auth.ParamLocation.ValueString())
		} else {
			paramLocation = nil
		}
		paramName := new(string)
		if !r.Config.Auth.ParamName.IsUnknown() && !r.Config.Auth.ParamName.IsNull() {
			*paramName = r.Config.Auth.ParamName.ValueString()
		} else {
			paramName = nil
		}
		paramValue := new(string)
		if !r.Config.Auth.ParamValue.IsUnknown() && !r.Config.Auth.ParamValue.IsNull() {
			*paramValue = r.Config.Auth.ParamValue.ValueString()
		} else {
			paramValue = nil
		}
		auth = &shared.CreateAIProxyPluginAuth{
			HeaderName:    headerName,
			HeaderValue:   headerValue,
			ParamLocation: paramLocation,
			ParamName:     paramName,
			ParamValue:    paramValue,
		}
	}
	var logging *shared.CreateAIProxyPluginLogging
	if r.Config.Logging != nil {
		logPayloads := new(bool)
		if !r.Config.Logging.LogPayloads.IsUnknown() && !r.Config.Logging.LogPayloads.IsNull() {
			*logPayloads = r.Config.Logging.LogPayloads.ValueBool()
		} else {
			logPayloads = nil
		}
		logStatistics := new(bool)
		if !r.Config.Logging.LogStatistics.IsUnknown() && !r.Config.Logging.LogStatistics.IsNull() {
			*logStatistics = r.Config.Logging.LogStatistics.ValueBool()
		} else {
			logStatistics = nil
		}
		logging = &shared.CreateAIProxyPluginLogging{
			LogPayloads:   logPayloads,
			LogStatistics: logStatistics,
		}
	}
	name := new(string)
	if !r.Config.Model.Name.IsUnknown() && !r.Config.Model.Name.IsNull() {
		*name = r.Config.Model.Name.ValueString()
	} else {
		name = nil
	}
	var options *shared.CreateAIProxyPluginOptions
	if r.Config.Model.Options != nil {
		anthropicVersion := new(string)
		if !r.Config.Model.Options.AnthropicVersion.IsUnknown() && !r.Config.Model.Options.AnthropicVersion.IsNull() {
			*anthropicVersion = r.Config.Model.Options.AnthropicVersion.ValueString()
		} else {
			anthropicVersion = nil
		}
		azureAPIVersion := new(string)
		if !r.Config.Model.Options.AzureAPIVersion.IsUnknown() && !r.Config.Model.Options.AzureAPIVersion.IsNull() {
			*azureAPIVersion = r.Config.Model.Options.AzureAPIVersion.ValueString()
		} else {
			azureAPIVersion = nil
		}
		azureDeploymentID := new(string)
		if !r.Config.Model.Options.AzureDeploymentID.IsUnknown() && !r.Config.Model.Options.AzureDeploymentID.IsNull() {
			*azureDeploymentID = r.Config.Model.Options.AzureDeploymentID.ValueString()
		} else {
			azureDeploymentID = nil
		}
		azureInstance := new(string)
		if !r.Config.Model.Options.AzureInstance.IsUnknown() && !r.Config.Model.Options.AzureInstance.IsNull() {
			*azureInstance = r.Config.Model.Options.AzureInstance.ValueString()
		} else {
			azureInstance = nil
		}
		llama2Format := new(shared.CreateAIProxyPluginLlama2Format)
		if !r.Config.Model.Options.Llama2Format.IsUnknown() && !r.Config.Model.Options.Llama2Format.IsNull() {
			*llama2Format = shared.CreateAIProxyPluginLlama2Format(r.Config.Model.Options.Llama2Format.ValueString())
		} else {
			llama2Format = nil
		}
		maxTokens := new(int64)
		if !r.Config.Model.Options.MaxTokens.IsUnknown() && !r.Config.Model.Options.MaxTokens.IsNull() {
			*maxTokens = r.Config.Model.Options.MaxTokens.ValueInt64()
		} else {
			maxTokens = nil
		}
		mistralFormat := new(shared.CreateAIProxyPluginMistralFormat)
		if !r.Config.Model.Options.MistralFormat.IsUnknown() && !r.Config.Model.Options.MistralFormat.IsNull() {
			*mistralFormat = shared.CreateAIProxyPluginMistralFormat(r.Config.Model.Options.MistralFormat.ValueString())
		} else {
			mistralFormat = nil
		}
		temperature := new(float64)
		if !r.Config.Model.Options.Temperature.IsUnknown() && !r.Config.Model.Options.Temperature.IsNull() {
			*temperature, _ = r.Config.Model.Options.Temperature.ValueBigFloat().Float64()
		} else {
			temperature = nil
		}
		topK := new(int64)
		if !r.Config.Model.Options.TopK.IsUnknown() && !r.Config.Model.Options.TopK.IsNull() {
			*topK = r.Config.Model.Options.TopK.ValueInt64()
		} else {
			topK = nil
		}
		topP := new(float64)
		if !r.Config.Model.Options.TopP.IsUnknown() && !r.Config.Model.Options.TopP.IsNull() {
			*topP, _ = r.Config.Model.Options.TopP.ValueBigFloat().Float64()
		} else {
			topP = nil
		}
		upstreamURL := new(string)
		if !r.Config.Model.Options.UpstreamURL.IsUnknown() && !r.Config.Model.Options.UpstreamURL.IsNull() {
			*upstreamURL = r.Config.Model.Options.UpstreamURL.ValueString()
		} else {
			upstreamURL = nil
		}
		options = &shared.CreateAIProxyPluginOptions{
			AnthropicVersion:  anthropicVersion,
			AzureAPIVersion:   azureAPIVersion,
			AzureDeploymentID: azureDeploymentID,
			AzureInstance:     azureInstance,
			Llama2Format:      llama2Format,
			MaxTokens:         maxTokens,
			MistralFormat:     mistralFormat,
			Temperature:       temperature,
			TopK:              topK,
			TopP:              topP,
			UpstreamURL:       upstreamURL,
		}
	}
	provider := new(shared.CreateAIProxyPluginProvider)
	if !r.Config.Model.Provider.IsUnknown() && !r.Config.Model.Provider.IsNull() {
		*provider = shared.CreateAIProxyPluginProvider(r.Config.Model.Provider.ValueString())
	} else {
		provider = nil
	}
	model := shared.CreateAIProxyPluginModel{
		Name:     name,
		Options:  options,
		Provider: provider,
	}
	routeType := new(shared.CreateAIProxyPluginRouteType)
	if !r.Config.RouteType.IsUnknown() && !r.Config.RouteType.IsNull() {
		*routeType = shared.CreateAIProxyPluginRouteType(r.Config.RouteType.ValueString())
	} else {
		routeType = nil
	}
	config := shared.CreateAIProxyPluginConfig{
		Auth:      auth,
		Logging:   logging,
		Model:     model,
		RouteType: routeType,
	}
	out := shared.CreateAIProxyPlugin{
		Enabled:   enabled,
		Protocols: protocols,
		Tags:      tags,
		Consumer:  consumer,
		Route:     route,
		Service:   service,
		Config:    config,
	}
	return &out
}

func (r *GatewayPluginAIProxyResourceModel) RefreshFromSharedAIProxyPlugin(resp *shared.AIProxyPlugin) {
	if resp != nil {
		if resp.Config.Auth == nil {
			r.Config.Auth = nil
		} else {
			r.Config.Auth = &tfTypes.CreateAIProxyPluginAuth{}
			r.Config.Auth.HeaderName = types.StringPointerValue(resp.Config.Auth.HeaderName)
			r.Config.Auth.HeaderValue = types.StringPointerValue(resp.Config.Auth.HeaderValue)
			if resp.Config.Auth.ParamLocation != nil {
				r.Config.Auth.ParamLocation = types.StringValue(string(*resp.Config.Auth.ParamLocation))
			} else {
				r.Config.Auth.ParamLocation = types.StringNull()
			}
			r.Config.Auth.ParamName = types.StringPointerValue(resp.Config.Auth.ParamName)
			r.Config.Auth.ParamValue = types.StringPointerValue(resp.Config.Auth.ParamValue)
		}
		if resp.Config.Logging == nil {
			r.Config.Logging = nil
		} else {
			r.Config.Logging = &tfTypes.CreateAIProxyPluginLogging{}
			r.Config.Logging.LogPayloads = types.BoolPointerValue(resp.Config.Logging.LogPayloads)
			r.Config.Logging.LogStatistics = types.BoolPointerValue(resp.Config.Logging.LogStatistics)
		}
		r.Config.Model.Name = types.StringPointerValue(resp.Config.Model.Name)
		if resp.Config.Model.Options == nil {
			r.Config.Model.Options = nil
		} else {
			r.Config.Model.Options = &tfTypes.CreateAIProxyPluginOptions{}
			r.Config.Model.Options.AnthropicVersion = types.StringPointerValue(resp.Config.Model.Options.AnthropicVersion)
			r.Config.Model.Options.AzureAPIVersion = types.StringPointerValue(resp.Config.Model.Options.AzureAPIVersion)
			r.Config.Model.Options.AzureDeploymentID = types.StringPointerValue(resp.Config.Model.Options.AzureDeploymentID)
			r.Config.Model.Options.AzureInstance = types.StringPointerValue(resp.Config.Model.Options.AzureInstance)
			if resp.Config.Model.Options.Llama2Format != nil {
				r.Config.Model.Options.Llama2Format = types.StringValue(string(*resp.Config.Model.Options.Llama2Format))
			} else {
				r.Config.Model.Options.Llama2Format = types.StringNull()
			}
			r.Config.Model.Options.MaxTokens = types.Int64PointerValue(resp.Config.Model.Options.MaxTokens)
			if resp.Config.Model.Options.MistralFormat != nil {
				r.Config.Model.Options.MistralFormat = types.StringValue(string(*resp.Config.Model.Options.MistralFormat))
			} else {
				r.Config.Model.Options.MistralFormat = types.StringNull()
			}
			if resp.Config.Model.Options.Temperature != nil {
				r.Config.Model.Options.Temperature = types.NumberValue(big.NewFloat(float64(*resp.Config.Model.Options.Temperature)))
			} else {
				r.Config.Model.Options.Temperature = types.NumberNull()
			}
			r.Config.Model.Options.TopK = types.Int64PointerValue(resp.Config.Model.Options.TopK)
			if resp.Config.Model.Options.TopP != nil {
				r.Config.Model.Options.TopP = types.NumberValue(big.NewFloat(float64(*resp.Config.Model.Options.TopP)))
			} else {
				r.Config.Model.Options.TopP = types.NumberNull()
			}
			r.Config.Model.Options.UpstreamURL = types.StringPointerValue(resp.Config.Model.Options.UpstreamURL)
		}
		if resp.Config.Model.Provider != nil {
			r.Config.Model.Provider = types.StringValue(string(*resp.Config.Model.Provider))
		} else {
			r.Config.Model.Provider = types.StringNull()
		}
		if resp.Config.RouteType != nil {
			r.Config.RouteType = types.StringValue(string(*resp.Config.RouteType))
		} else {
			r.Config.RouteType = types.StringNull()
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}
}
