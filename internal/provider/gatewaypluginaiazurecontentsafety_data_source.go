// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &GatewayPluginAiAzureContentSafetyDataSource{}
var _ datasource.DataSourceWithConfigure = &GatewayPluginAiAzureContentSafetyDataSource{}

func NewGatewayPluginAiAzureContentSafetyDataSource() datasource.DataSource {
	return &GatewayPluginAiAzureContentSafetyDataSource{}
}

// GatewayPluginAiAzureContentSafetyDataSource is the data source implementation.
type GatewayPluginAiAzureContentSafetyDataSource struct {
	client *sdk.Konnect
}

// GatewayPluginAiAzureContentSafetyDataSourceModel describes the data model.
type GatewayPluginAiAzureContentSafetyDataSourceModel struct {
	Config         *tfTypes.AiAzureContentSafetyPluginConfig `tfsdk:"config"`
	ControlPlaneID types.String                              `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64                               `tfsdk:"created_at"`
	Enabled        types.Bool                                `tfsdk:"enabled"`
	ID             types.String                              `tfsdk:"id"`
	InstanceName   types.String                              `tfsdk:"instance_name"`
	Ordering       *tfTypes.ACLPluginOrdering                `tfsdk:"ordering"`
	Partials       []tfTypes.Partials                        `tfsdk:"partials"`
	Protocols      []types.String                            `tfsdk:"protocols"`
	Route          *tfTypes.ACLWithoutParentsConsumer        `tfsdk:"route"`
	Service        *tfTypes.ACLWithoutParentsConsumer        `tfsdk:"service"`
	Tags           []types.String                            `tfsdk:"tags"`
	UpdatedAt      types.Int64                               `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *GatewayPluginAiAzureContentSafetyDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_plugin_ai_azure_content_safety"
}

// Schema defines the schema for the data source.
func (r *GatewayPluginAiAzureContentSafetyDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayPluginAiAzureContentSafety DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"azure_api_version": schema.StringAttribute{
						Computed:    true,
						Description: `Sets the ?api-version URL parameter, used for defining the Azure Content Services interchange format.`,
					},
					"azure_client_id": schema.StringAttribute{
						Computed:    true,
						Description: `If ` + "`" + `azure_use_managed_identity` + "`" + ` is true, set the client ID if required.`,
					},
					"azure_client_secret": schema.StringAttribute{
						Computed:    true,
						Description: `If ` + "`" + `azure_use_managed_identity` + "`" + ` is true, set the client secret if required.`,
					},
					"azure_tenant_id": schema.StringAttribute{
						Computed:    true,
						Description: `If ` + "`" + `azure_use_managed_identity` + "`" + ` is true, set the tenant ID if required.`,
					},
					"azure_use_managed_identity": schema.BoolAttribute{
						Computed:    true,
						Description: `If checked, uses (if set) ` + "`" + `azure_client_id` + "`" + `, ` + "`" + `azure_client_secret` + "`" + `, and/or ` + "`" + `azure_tenant_id` + "`" + ` for Azure authentication, via Managed or User-assigned identity`,
					},
					"blocklist_names": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `Use these configured blocklists (in Azure Content Services) when inspecting content.`,
					},
					"categories": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"name": schema.StringAttribute{
									Computed: true,
								},
								"rejection_level": schema.Int64Attribute{
									Computed: true,
								},
							},
						},
						Description: `Array of categories, and their thresholds, to measure on.`,
					},
					"content_safety_key": schema.StringAttribute{
						Computed:    true,
						Description: `If ` + "`" + `azure_use_managed_identity` + "`" + ` is true, set the API key to call Content Safety.`,
					},
					"content_safety_url": schema.StringAttribute{
						Computed:    true,
						Description: `Full URL, inc protocol, of the Azure Content Safety instance.`,
					},
					"halt_on_blocklist_hit": schema.BoolAttribute{
						Computed:    true,
						Description: `Tells Azure to reject the request if any blocklist filter is hit.`,
					},
					"output_type": schema.StringAttribute{
						Computed:    true,
						Description: `See https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/content-filter#content-filtering-categories`,
					},
					"reveal_failure_reason": schema.BoolAttribute{
						Computed:    true,
						Description: `Set true to tell the caller why their request was rejected, if so.`,
					},
					"text_source": schema.StringAttribute{
						Computed:    true,
						Description: `Select where to pick the 'text' for the Azure Content Services request.`,
					},
				},
			},
			"control_plane_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your control plane. This variable is available in the Konnect manager.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the plugin is applied.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"instance_name": schema.StringAttribute{
				Computed: true,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"path": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"protocols": schema.SetAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols.`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
		},
	}
}

func (r *GatewayPluginAiAzureContentSafetyDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayPluginAiAzureContentSafetyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *GatewayPluginAiAzureContentSafetyDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAiazurecontentsafetyPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetAiazurecontentsafetyPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AiAzureContentSafetyPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAiAzureContentSafetyPlugin(ctx, res.AiAzureContentSafetyPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
