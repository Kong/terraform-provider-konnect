// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginSessionResourceModel) RefreshFromSharedSessionPlugin(ctx context.Context, resp *shared.SessionPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.SessionPluginConfig{}
			r.Config.AbsoluteTimeout = types.Float64PointerValue(resp.Config.AbsoluteTimeout)
			r.Config.Audience = types.StringPointerValue(resp.Config.Audience)
			r.Config.CookieDomain = types.StringPointerValue(resp.Config.CookieDomain)
			r.Config.CookieHTTPOnly = types.BoolPointerValue(resp.Config.CookieHTTPOnly)
			r.Config.CookieName = types.StringPointerValue(resp.Config.CookieName)
			r.Config.CookiePath = types.StringPointerValue(resp.Config.CookiePath)
			if resp.Config.CookieSameSite != nil {
				r.Config.CookieSameSite = types.StringValue(string(*resp.Config.CookieSameSite))
			} else {
				r.Config.CookieSameSite = types.StringNull()
			}
			r.Config.CookieSecure = types.BoolPointerValue(resp.Config.CookieSecure)
			r.Config.HashSubject = types.BoolPointerValue(resp.Config.HashSubject)
			r.Config.IdlingTimeout = types.Float64PointerValue(resp.Config.IdlingTimeout)
			r.Config.LogoutMethods = make([]types.String, 0, len(resp.Config.LogoutMethods))
			for _, v := range resp.Config.LogoutMethods {
				r.Config.LogoutMethods = append(r.Config.LogoutMethods, types.StringValue(string(v)))
			}
			r.Config.LogoutPostArg = types.StringPointerValue(resp.Config.LogoutPostArg)
			r.Config.LogoutQueryArg = types.StringPointerValue(resp.Config.LogoutQueryArg)
			r.Config.ReadBodyForLogout = types.BoolPointerValue(resp.Config.ReadBodyForLogout)
			r.Config.Remember = types.BoolPointerValue(resp.Config.Remember)
			r.Config.RememberAbsoluteTimeout = types.Float64PointerValue(resp.Config.RememberAbsoluteTimeout)
			r.Config.RememberCookieName = types.StringPointerValue(resp.Config.RememberCookieName)
			r.Config.RememberRollingTimeout = types.Float64PointerValue(resp.Config.RememberRollingTimeout)
			r.Config.RequestHeaders = make([]types.String, 0, len(resp.Config.RequestHeaders))
			for _, v := range resp.Config.RequestHeaders {
				r.Config.RequestHeaders = append(r.Config.RequestHeaders, types.StringValue(string(v)))
			}
			r.Config.ResponseHeaders = make([]types.String, 0, len(resp.Config.ResponseHeaders))
			for _, v := range resp.Config.ResponseHeaders {
				r.Config.ResponseHeaders = append(r.Config.ResponseHeaders, types.StringValue(string(v)))
			}
			r.Config.RollingTimeout = types.Float64PointerValue(resp.Config.RollingTimeout)
			r.Config.Secret = types.StringPointerValue(resp.Config.Secret)
			r.Config.StaleTTL = types.Float64PointerValue(resp.Config.StaleTTL)
			if resp.Config.Storage != nil {
				r.Config.Storage = types.StringValue(string(*resp.Config.Storage))
			} else {
				r.Config.Storage = types.StringNull()
			}
			r.Config.StoreMetadata = types.BoolPointerValue(resp.Config.StoreMetadata)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginSessionResourceModel) ToOperationsCreateSessionPluginRequest(ctx context.Context) (*operations.CreateSessionPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	sessionPlugin, sessionPluginDiags := r.ToSharedSessionPlugin(ctx)
	diags.Append(sessionPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSessionPluginRequest{
		ControlPlaneID: controlPlaneID,
		SessionPlugin:  *sessionPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginSessionResourceModel) ToOperationsDeleteSessionPluginRequest(ctx context.Context) (*operations.DeleteSessionPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteSessionPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginSessionResourceModel) ToOperationsGetSessionPluginRequest(ctx context.Context) (*operations.GetSessionPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetSessionPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginSessionResourceModel) ToOperationsUpdateSessionPluginRequest(ctx context.Context) (*operations.UpdateSessionPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	sessionPlugin, sessionPluginDiags := r.ToSharedSessionPlugin(ctx)
	diags.Append(sessionPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSessionPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
		SessionPlugin:  *sessionPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginSessionResourceModel) ToSharedSessionPlugin(ctx context.Context) (*shared.SessionPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.SessionPluginOrdering
	if r.Ordering != nil {
		var after *shared.SessionPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.SessionPluginAfter{
				Access: access,
			}
		}
		var before *shared.SessionPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.SessionPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.SessionPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.SessionPluginPartials
	if r.Partials != nil {
		partials = make([]shared.SessionPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.SessionPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.SessionPluginConfig
	if r.Config != nil {
		absoluteTimeout := new(float64)
		if !r.Config.AbsoluteTimeout.IsUnknown() && !r.Config.AbsoluteTimeout.IsNull() {
			*absoluteTimeout = r.Config.AbsoluteTimeout.ValueFloat64()
		} else {
			absoluteTimeout = nil
		}
		audience := new(string)
		if !r.Config.Audience.IsUnknown() && !r.Config.Audience.IsNull() {
			*audience = r.Config.Audience.ValueString()
		} else {
			audience = nil
		}
		cookieDomain := new(string)
		if !r.Config.CookieDomain.IsUnknown() && !r.Config.CookieDomain.IsNull() {
			*cookieDomain = r.Config.CookieDomain.ValueString()
		} else {
			cookieDomain = nil
		}
		cookieHTTPOnly := new(bool)
		if !r.Config.CookieHTTPOnly.IsUnknown() && !r.Config.CookieHTTPOnly.IsNull() {
			*cookieHTTPOnly = r.Config.CookieHTTPOnly.ValueBool()
		} else {
			cookieHTTPOnly = nil
		}
		cookieName := new(string)
		if !r.Config.CookieName.IsUnknown() && !r.Config.CookieName.IsNull() {
			*cookieName = r.Config.CookieName.ValueString()
		} else {
			cookieName = nil
		}
		cookiePath := new(string)
		if !r.Config.CookiePath.IsUnknown() && !r.Config.CookiePath.IsNull() {
			*cookiePath = r.Config.CookiePath.ValueString()
		} else {
			cookiePath = nil
		}
		cookieSameSite := new(shared.CookieSameSite)
		if !r.Config.CookieSameSite.IsUnknown() && !r.Config.CookieSameSite.IsNull() {
			*cookieSameSite = shared.CookieSameSite(r.Config.CookieSameSite.ValueString())
		} else {
			cookieSameSite = nil
		}
		cookieSecure := new(bool)
		if !r.Config.CookieSecure.IsUnknown() && !r.Config.CookieSecure.IsNull() {
			*cookieSecure = r.Config.CookieSecure.ValueBool()
		} else {
			cookieSecure = nil
		}
		hashSubject := new(bool)
		if !r.Config.HashSubject.IsUnknown() && !r.Config.HashSubject.IsNull() {
			*hashSubject = r.Config.HashSubject.ValueBool()
		} else {
			hashSubject = nil
		}
		idlingTimeout := new(float64)
		if !r.Config.IdlingTimeout.IsUnknown() && !r.Config.IdlingTimeout.IsNull() {
			*idlingTimeout = r.Config.IdlingTimeout.ValueFloat64()
		} else {
			idlingTimeout = nil
		}
		logoutMethods := make([]shared.SessionPluginLogoutMethods, 0, len(r.Config.LogoutMethods))
		for _, logoutMethodsItem := range r.Config.LogoutMethods {
			logoutMethods = append(logoutMethods, shared.SessionPluginLogoutMethods(logoutMethodsItem.ValueString()))
		}
		logoutPostArg := new(string)
		if !r.Config.LogoutPostArg.IsUnknown() && !r.Config.LogoutPostArg.IsNull() {
			*logoutPostArg = r.Config.LogoutPostArg.ValueString()
		} else {
			logoutPostArg = nil
		}
		logoutQueryArg := new(string)
		if !r.Config.LogoutQueryArg.IsUnknown() && !r.Config.LogoutQueryArg.IsNull() {
			*logoutQueryArg = r.Config.LogoutQueryArg.ValueString()
		} else {
			logoutQueryArg = nil
		}
		readBodyForLogout := new(bool)
		if !r.Config.ReadBodyForLogout.IsUnknown() && !r.Config.ReadBodyForLogout.IsNull() {
			*readBodyForLogout = r.Config.ReadBodyForLogout.ValueBool()
		} else {
			readBodyForLogout = nil
		}
		remember := new(bool)
		if !r.Config.Remember.IsUnknown() && !r.Config.Remember.IsNull() {
			*remember = r.Config.Remember.ValueBool()
		} else {
			remember = nil
		}
		rememberAbsoluteTimeout := new(float64)
		if !r.Config.RememberAbsoluteTimeout.IsUnknown() && !r.Config.RememberAbsoluteTimeout.IsNull() {
			*rememberAbsoluteTimeout = r.Config.RememberAbsoluteTimeout.ValueFloat64()
		} else {
			rememberAbsoluteTimeout = nil
		}
		rememberCookieName := new(string)
		if !r.Config.RememberCookieName.IsUnknown() && !r.Config.RememberCookieName.IsNull() {
			*rememberCookieName = r.Config.RememberCookieName.ValueString()
		} else {
			rememberCookieName = nil
		}
		rememberRollingTimeout := new(float64)
		if !r.Config.RememberRollingTimeout.IsUnknown() && !r.Config.RememberRollingTimeout.IsNull() {
			*rememberRollingTimeout = r.Config.RememberRollingTimeout.ValueFloat64()
		} else {
			rememberRollingTimeout = nil
		}
		requestHeaders := make([]shared.RequestHeaders, 0, len(r.Config.RequestHeaders))
		for _, requestHeadersItem := range r.Config.RequestHeaders {
			requestHeaders = append(requestHeaders, shared.RequestHeaders(requestHeadersItem.ValueString()))
		}
		responseHeaders := make([]shared.SessionPluginResponseHeaders, 0, len(r.Config.ResponseHeaders))
		for _, responseHeadersItem := range r.Config.ResponseHeaders {
			responseHeaders = append(responseHeaders, shared.SessionPluginResponseHeaders(responseHeadersItem.ValueString()))
		}
		rollingTimeout := new(float64)
		if !r.Config.RollingTimeout.IsUnknown() && !r.Config.RollingTimeout.IsNull() {
			*rollingTimeout = r.Config.RollingTimeout.ValueFloat64()
		} else {
			rollingTimeout = nil
		}
		secret := new(string)
		if !r.Config.Secret.IsUnknown() && !r.Config.Secret.IsNull() {
			*secret = r.Config.Secret.ValueString()
		} else {
			secret = nil
		}
		staleTTL := new(float64)
		if !r.Config.StaleTTL.IsUnknown() && !r.Config.StaleTTL.IsNull() {
			*staleTTL = r.Config.StaleTTL.ValueFloat64()
		} else {
			staleTTL = nil
		}
		storage := new(shared.SessionPluginStorage)
		if !r.Config.Storage.IsUnknown() && !r.Config.Storage.IsNull() {
			*storage = shared.SessionPluginStorage(r.Config.Storage.ValueString())
		} else {
			storage = nil
		}
		storeMetadata := new(bool)
		if !r.Config.StoreMetadata.IsUnknown() && !r.Config.StoreMetadata.IsNull() {
			*storeMetadata = r.Config.StoreMetadata.ValueBool()
		} else {
			storeMetadata = nil
		}
		config = &shared.SessionPluginConfig{
			AbsoluteTimeout:         absoluteTimeout,
			Audience:                audience,
			CookieDomain:            cookieDomain,
			CookieHTTPOnly:          cookieHTTPOnly,
			CookieName:              cookieName,
			CookiePath:              cookiePath,
			CookieSameSite:          cookieSameSite,
			CookieSecure:            cookieSecure,
			HashSubject:             hashSubject,
			IdlingTimeout:           idlingTimeout,
			LogoutMethods:           logoutMethods,
			LogoutPostArg:           logoutPostArg,
			LogoutQueryArg:          logoutQueryArg,
			ReadBodyForLogout:       readBodyForLogout,
			Remember:                remember,
			RememberAbsoluteTimeout: rememberAbsoluteTimeout,
			RememberCookieName:      rememberCookieName,
			RememberRollingTimeout:  rememberRollingTimeout,
			RequestHeaders:          requestHeaders,
			ResponseHeaders:         responseHeaders,
			RollingTimeout:          rollingTimeout,
			Secret:                  secret,
			StaleTTL:                staleTTL,
			Storage:                 storage,
			StoreMetadata:           storeMetadata,
		}
	}
	protocols := make([]shared.SessionPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.SessionPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.SessionPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.SessionPluginRoute{
			ID: id2,
		}
	}
	var service *shared.SessionPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.SessionPluginService{
			ID: id3,
		}
	}
	out := shared.SessionPlugin{
		CreatedAt:    createdAt,
		Description:  description,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
