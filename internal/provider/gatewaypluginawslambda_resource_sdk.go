// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginAwsLambdaResourceModel) RefreshFromSharedAwsLambdaPlugin(ctx context.Context, resp *shared.AwsLambdaPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.AwsLambdaPluginConfig{}
			r.Config.AwsAssumeRoleArn = types.StringPointerValue(resp.Config.AwsAssumeRoleArn)
			if resp.Config.AwsImdsProtocolVersion != nil {
				r.Config.AwsImdsProtocolVersion = types.StringValue(string(*resp.Config.AwsImdsProtocolVersion))
			} else {
				r.Config.AwsImdsProtocolVersion = types.StringNull()
			}
			r.Config.AwsKey = types.StringPointerValue(resp.Config.AwsKey)
			r.Config.AwsRegion = types.StringPointerValue(resp.Config.AwsRegion)
			r.Config.AwsRoleSessionName = types.StringPointerValue(resp.Config.AwsRoleSessionName)
			r.Config.AwsSecret = types.StringPointerValue(resp.Config.AwsSecret)
			r.Config.AwsStsEndpointURL = types.StringPointerValue(resp.Config.AwsStsEndpointURL)
			r.Config.AwsgatewayCompatible = types.BoolPointerValue(resp.Config.AwsgatewayCompatible)
			r.Config.Base64EncodeBody = types.BoolPointerValue(resp.Config.Base64EncodeBody)
			r.Config.DisableHTTPS = types.BoolPointerValue(resp.Config.DisableHTTPS)
			if resp.Config.EmptyArraysMode != nil {
				r.Config.EmptyArraysMode = types.StringValue(string(*resp.Config.EmptyArraysMode))
			} else {
				r.Config.EmptyArraysMode = types.StringNull()
			}
			r.Config.ForwardRequestBody = types.BoolPointerValue(resp.Config.ForwardRequestBody)
			r.Config.ForwardRequestHeaders = types.BoolPointerValue(resp.Config.ForwardRequestHeaders)
			r.Config.ForwardRequestMethod = types.BoolPointerValue(resp.Config.ForwardRequestMethod)
			r.Config.ForwardRequestURI = types.BoolPointerValue(resp.Config.ForwardRequestURI)
			r.Config.FunctionName = types.StringPointerValue(resp.Config.FunctionName)
			r.Config.Host = types.StringPointerValue(resp.Config.Host)
			if resp.Config.InvocationType != nil {
				r.Config.InvocationType = types.StringValue(string(*resp.Config.InvocationType))
			} else {
				r.Config.InvocationType = types.StringNull()
			}
			r.Config.IsProxyIntegration = types.BoolPointerValue(resp.Config.IsProxyIntegration)
			r.Config.Keepalive = types.Float64PointerValue(resp.Config.Keepalive)
			if resp.Config.LogType != nil {
				r.Config.LogType = types.StringValue(string(*resp.Config.LogType))
			} else {
				r.Config.LogType = types.StringNull()
			}
			r.Config.Port = types.Int64PointerValue(resp.Config.Port)
			r.Config.ProxyURL = types.StringPointerValue(resp.Config.ProxyURL)
			r.Config.Qualifier = types.StringPointerValue(resp.Config.Qualifier)
			r.Config.SkipLargeBodies = types.BoolPointerValue(resp.Config.SkipLargeBodies)
			r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
			r.Config.UnhandledStatus = types.Int64PointerValue(resp.Config.UnhandledStatus)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAwsLambdaResourceModel) ToOperationsCreateAwslambdaPluginRequest(ctx context.Context) (*operations.CreateAwslambdaPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	awsLambdaPlugin, awsLambdaPluginDiags := r.ToSharedAwsLambdaPlugin(ctx)
	diags.Append(awsLambdaPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAwslambdaPluginRequest{
		ControlPlaneID:  controlPlaneID,
		AwsLambdaPlugin: *awsLambdaPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAwsLambdaResourceModel) ToOperationsDeleteAwslambdaPluginRequest(ctx context.Context) (*operations.DeleteAwslambdaPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAwslambdaPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAwsLambdaResourceModel) ToOperationsGetAwslambdaPluginRequest(ctx context.Context) (*operations.GetAwslambdaPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAwslambdaPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAwsLambdaResourceModel) ToOperationsUpdateAwslambdaPluginRequest(ctx context.Context) (*operations.UpdateAwslambdaPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	awsLambdaPlugin, awsLambdaPluginDiags := r.ToSharedAwsLambdaPlugin(ctx)
	diags.Append(awsLambdaPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAwslambdaPluginRequest{
		PluginID:        pluginID,
		ControlPlaneID:  controlPlaneID,
		AwsLambdaPlugin: *awsLambdaPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAwsLambdaResourceModel) ToSharedAwsLambdaPlugin(ctx context.Context) (*shared.AwsLambdaPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AwsLambdaPluginOrdering
	if r.Ordering != nil {
		var after *shared.AwsLambdaPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AwsLambdaPluginAfter{
				Access: access,
			}
		}
		var before *shared.AwsLambdaPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AwsLambdaPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AwsLambdaPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AwsLambdaPluginPartials
	if r.Partials != nil {
		partials = make([]shared.AwsLambdaPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AwsLambdaPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.AwsLambdaPluginConfig
	if r.Config != nil {
		awsAssumeRoleArn := new(string)
		if !r.Config.AwsAssumeRoleArn.IsUnknown() && !r.Config.AwsAssumeRoleArn.IsNull() {
			*awsAssumeRoleArn = r.Config.AwsAssumeRoleArn.ValueString()
		} else {
			awsAssumeRoleArn = nil
		}
		awsImdsProtocolVersion := new(shared.AwsImdsProtocolVersion)
		if !r.Config.AwsImdsProtocolVersion.IsUnknown() && !r.Config.AwsImdsProtocolVersion.IsNull() {
			*awsImdsProtocolVersion = shared.AwsImdsProtocolVersion(r.Config.AwsImdsProtocolVersion.ValueString())
		} else {
			awsImdsProtocolVersion = nil
		}
		awsKey := new(string)
		if !r.Config.AwsKey.IsUnknown() && !r.Config.AwsKey.IsNull() {
			*awsKey = r.Config.AwsKey.ValueString()
		} else {
			awsKey = nil
		}
		awsRegion := new(string)
		if !r.Config.AwsRegion.IsUnknown() && !r.Config.AwsRegion.IsNull() {
			*awsRegion = r.Config.AwsRegion.ValueString()
		} else {
			awsRegion = nil
		}
		awsRoleSessionName := new(string)
		if !r.Config.AwsRoleSessionName.IsUnknown() && !r.Config.AwsRoleSessionName.IsNull() {
			*awsRoleSessionName = r.Config.AwsRoleSessionName.ValueString()
		} else {
			awsRoleSessionName = nil
		}
		awsSecret := new(string)
		if !r.Config.AwsSecret.IsUnknown() && !r.Config.AwsSecret.IsNull() {
			*awsSecret = r.Config.AwsSecret.ValueString()
		} else {
			awsSecret = nil
		}
		awsStsEndpointURL := new(string)
		if !r.Config.AwsStsEndpointURL.IsUnknown() && !r.Config.AwsStsEndpointURL.IsNull() {
			*awsStsEndpointURL = r.Config.AwsStsEndpointURL.ValueString()
		} else {
			awsStsEndpointURL = nil
		}
		awsgatewayCompatible := new(bool)
		if !r.Config.AwsgatewayCompatible.IsUnknown() && !r.Config.AwsgatewayCompatible.IsNull() {
			*awsgatewayCompatible = r.Config.AwsgatewayCompatible.ValueBool()
		} else {
			awsgatewayCompatible = nil
		}
		base64EncodeBody := new(bool)
		if !r.Config.Base64EncodeBody.IsUnknown() && !r.Config.Base64EncodeBody.IsNull() {
			*base64EncodeBody = r.Config.Base64EncodeBody.ValueBool()
		} else {
			base64EncodeBody = nil
		}
		disableHTTPS := new(bool)
		if !r.Config.DisableHTTPS.IsUnknown() && !r.Config.DisableHTTPS.IsNull() {
			*disableHTTPS = r.Config.DisableHTTPS.ValueBool()
		} else {
			disableHTTPS = nil
		}
		emptyArraysMode := new(shared.EmptyArraysMode)
		if !r.Config.EmptyArraysMode.IsUnknown() && !r.Config.EmptyArraysMode.IsNull() {
			*emptyArraysMode = shared.EmptyArraysMode(r.Config.EmptyArraysMode.ValueString())
		} else {
			emptyArraysMode = nil
		}
		forwardRequestBody := new(bool)
		if !r.Config.ForwardRequestBody.IsUnknown() && !r.Config.ForwardRequestBody.IsNull() {
			*forwardRequestBody = r.Config.ForwardRequestBody.ValueBool()
		} else {
			forwardRequestBody = nil
		}
		forwardRequestHeaders := new(bool)
		if !r.Config.ForwardRequestHeaders.IsUnknown() && !r.Config.ForwardRequestHeaders.IsNull() {
			*forwardRequestHeaders = r.Config.ForwardRequestHeaders.ValueBool()
		} else {
			forwardRequestHeaders = nil
		}
		forwardRequestMethod := new(bool)
		if !r.Config.ForwardRequestMethod.IsUnknown() && !r.Config.ForwardRequestMethod.IsNull() {
			*forwardRequestMethod = r.Config.ForwardRequestMethod.ValueBool()
		} else {
			forwardRequestMethod = nil
		}
		forwardRequestURI := new(bool)
		if !r.Config.ForwardRequestURI.IsUnknown() && !r.Config.ForwardRequestURI.IsNull() {
			*forwardRequestURI = r.Config.ForwardRequestURI.ValueBool()
		} else {
			forwardRequestURI = nil
		}
		functionName := new(string)
		if !r.Config.FunctionName.IsUnknown() && !r.Config.FunctionName.IsNull() {
			*functionName = r.Config.FunctionName.ValueString()
		} else {
			functionName = nil
		}
		host := new(string)
		if !r.Config.Host.IsUnknown() && !r.Config.Host.IsNull() {
			*host = r.Config.Host.ValueString()
		} else {
			host = nil
		}
		invocationType := new(shared.InvocationType)
		if !r.Config.InvocationType.IsUnknown() && !r.Config.InvocationType.IsNull() {
			*invocationType = shared.InvocationType(r.Config.InvocationType.ValueString())
		} else {
			invocationType = nil
		}
		isProxyIntegration := new(bool)
		if !r.Config.IsProxyIntegration.IsUnknown() && !r.Config.IsProxyIntegration.IsNull() {
			*isProxyIntegration = r.Config.IsProxyIntegration.ValueBool()
		} else {
			isProxyIntegration = nil
		}
		keepalive := new(float64)
		if !r.Config.Keepalive.IsUnknown() && !r.Config.Keepalive.IsNull() {
			*keepalive = r.Config.Keepalive.ValueFloat64()
		} else {
			keepalive = nil
		}
		logType := new(shared.LogType)
		if !r.Config.LogType.IsUnknown() && !r.Config.LogType.IsNull() {
			*logType = shared.LogType(r.Config.LogType.ValueString())
		} else {
			logType = nil
		}
		port := new(int64)
		if !r.Config.Port.IsUnknown() && !r.Config.Port.IsNull() {
			*port = r.Config.Port.ValueInt64()
		} else {
			port = nil
		}
		proxyURL := new(string)
		if !r.Config.ProxyURL.IsUnknown() && !r.Config.ProxyURL.IsNull() {
			*proxyURL = r.Config.ProxyURL.ValueString()
		} else {
			proxyURL = nil
		}
		qualifier := new(string)
		if !r.Config.Qualifier.IsUnknown() && !r.Config.Qualifier.IsNull() {
			*qualifier = r.Config.Qualifier.ValueString()
		} else {
			qualifier = nil
		}
		skipLargeBodies := new(bool)
		if !r.Config.SkipLargeBodies.IsUnknown() && !r.Config.SkipLargeBodies.IsNull() {
			*skipLargeBodies = r.Config.SkipLargeBodies.ValueBool()
		} else {
			skipLargeBodies = nil
		}
		timeout := new(float64)
		if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
			*timeout = r.Config.Timeout.ValueFloat64()
		} else {
			timeout = nil
		}
		unhandledStatus := new(int64)
		if !r.Config.UnhandledStatus.IsUnknown() && !r.Config.UnhandledStatus.IsNull() {
			*unhandledStatus = r.Config.UnhandledStatus.ValueInt64()
		} else {
			unhandledStatus = nil
		}
		config = &shared.AwsLambdaPluginConfig{
			AwsAssumeRoleArn:       awsAssumeRoleArn,
			AwsImdsProtocolVersion: awsImdsProtocolVersion,
			AwsKey:                 awsKey,
			AwsRegion:              awsRegion,
			AwsRoleSessionName:     awsRoleSessionName,
			AwsSecret:              awsSecret,
			AwsStsEndpointURL:      awsStsEndpointURL,
			AwsgatewayCompatible:   awsgatewayCompatible,
			Base64EncodeBody:       base64EncodeBody,
			DisableHTTPS:           disableHTTPS,
			EmptyArraysMode:        emptyArraysMode,
			ForwardRequestBody:     forwardRequestBody,
			ForwardRequestHeaders:  forwardRequestHeaders,
			ForwardRequestMethod:   forwardRequestMethod,
			ForwardRequestURI:      forwardRequestURI,
			FunctionName:           functionName,
			Host:                   host,
			InvocationType:         invocationType,
			IsProxyIntegration:     isProxyIntegration,
			Keepalive:              keepalive,
			LogType:                logType,
			Port:                   port,
			ProxyURL:               proxyURL,
			Qualifier:              qualifier,
			SkipLargeBodies:        skipLargeBodies,
			Timeout:                timeout,
			UnhandledStatus:        unhandledStatus,
		}
	}
	var consumer *shared.AwsLambdaPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.AwsLambdaPluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.AwsLambdaPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AwsLambdaPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AwsLambdaPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.AwsLambdaPluginRoute{
			ID: id3,
		}
	}
	var service *shared.AwsLambdaPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.AwsLambdaPluginService{
			ID: id4,
		}
	}
	out := shared.AwsLambdaPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
