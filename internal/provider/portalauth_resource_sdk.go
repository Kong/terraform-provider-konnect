// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *PortalAuthResourceModel) RefreshFromSharedPortalAuthenticationSettingsResponse(ctx context.Context, resp *shared.PortalAuthenticationSettingsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.BasicAuthEnabled = types.BoolValue(resp.BasicAuthEnabled)
		r.IdpMappingEnabled = types.BoolPointerValue(resp.IdpMappingEnabled)
		r.KonnectMappingEnabled = types.BoolValue(resp.KonnectMappingEnabled)
		r.OidcAuthEnabled = types.BoolValue(resp.OidcAuthEnabled)
		if resp.OidcConfig == nil {
			r.OidcConfig = nil
		} else {
			r.OidcConfig = &tfTypes.PortalOIDCConfig{}
			if resp.OidcConfig.ClaimMappings == nil {
				r.OidcConfig.ClaimMappings = nil
			} else {
				r.OidcConfig.ClaimMappings = &tfTypes.PortalClaimMappings{}
				r.OidcConfig.ClaimMappings.Email = types.StringPointerValue(resp.OidcConfig.ClaimMappings.Email)
				r.OidcConfig.ClaimMappings.Groups = types.StringPointerValue(resp.OidcConfig.ClaimMappings.Groups)
				r.OidcConfig.ClaimMappings.Name = types.StringPointerValue(resp.OidcConfig.ClaimMappings.Name)
			}
			r.OidcConfig.ClientID = types.StringValue(resp.OidcConfig.ClientID)
			r.OidcConfig.Issuer = types.StringValue(resp.OidcConfig.Issuer)
			r.OidcConfig.Scopes = make([]types.String, 0, len(resp.OidcConfig.Scopes))
			for _, v := range resp.OidcConfig.Scopes {
				r.OidcConfig.Scopes = append(r.OidcConfig.Scopes, types.StringValue(v))
			}
		}
		r.OidcTeamMappingEnabled = types.BoolValue(resp.OidcTeamMappingEnabled)
		r.SamlAuthEnabled = types.BoolPointerValue(resp.SamlAuthEnabled)
	}

	return diags
}

func (r *PortalAuthResourceModel) ToOperationsGetPortalAuthenticationSettingsRequest(ctx context.Context) (*operations.GetPortalAuthenticationSettingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.GetPortalAuthenticationSettingsRequest{
		PortalID: portalID,
	}

	return &out, diags
}

func (r *PortalAuthResourceModel) ToOperationsUpdatePortalAuthenticationSettingsRequest(ctx context.Context) (*operations.UpdatePortalAuthenticationSettingsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	portalAuthenticationSettingsUpdateRequest, portalAuthenticationSettingsUpdateRequestDiags := r.ToSharedPortalAuthenticationSettingsUpdateRequest(ctx)
	diags.Append(portalAuthenticationSettingsUpdateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePortalAuthenticationSettingsRequest{
		PortalID: portalID,
		PortalAuthenticationSettingsUpdateRequest: portalAuthenticationSettingsUpdateRequest,
	}

	return &out, diags
}

func (r *PortalAuthResourceModel) ToSharedPortalAuthenticationSettingsUpdateRequest(ctx context.Context) (*shared.PortalAuthenticationSettingsUpdateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	basicAuthEnabled := new(bool)
	if !r.BasicAuthEnabled.IsUnknown() && !r.BasicAuthEnabled.IsNull() {
		*basicAuthEnabled = r.BasicAuthEnabled.ValueBool()
	} else {
		basicAuthEnabled = nil
	}
	oidcAuthEnabled := new(bool)
	if !r.OidcAuthEnabled.IsUnknown() && !r.OidcAuthEnabled.IsNull() {
		*oidcAuthEnabled = r.OidcAuthEnabled.ValueBool()
	} else {
		oidcAuthEnabled = nil
	}
	samlAuthEnabled := new(bool)
	if !r.SamlAuthEnabled.IsUnknown() && !r.SamlAuthEnabled.IsNull() {
		*samlAuthEnabled = r.SamlAuthEnabled.ValueBool()
	} else {
		samlAuthEnabled = nil
	}
	oidcTeamMappingEnabled := new(bool)
	if !r.OidcTeamMappingEnabled.IsUnknown() && !r.OidcTeamMappingEnabled.IsNull() {
		*oidcTeamMappingEnabled = r.OidcTeamMappingEnabled.ValueBool()
	} else {
		oidcTeamMappingEnabled = nil
	}
	konnectMappingEnabled := new(bool)
	if !r.KonnectMappingEnabled.IsUnknown() && !r.KonnectMappingEnabled.IsNull() {
		*konnectMappingEnabled = r.KonnectMappingEnabled.ValueBool()
	} else {
		konnectMappingEnabled = nil
	}
	idpMappingEnabled := new(bool)
	if !r.IdpMappingEnabled.IsUnknown() && !r.IdpMappingEnabled.IsNull() {
		*idpMappingEnabled = r.IdpMappingEnabled.ValueBool()
	} else {
		idpMappingEnabled = nil
	}
	oidcIssuer := new(string)
	if !r.OidcIssuer.IsUnknown() && !r.OidcIssuer.IsNull() {
		*oidcIssuer = r.OidcIssuer.ValueString()
	} else {
		oidcIssuer = nil
	}
	oidcClientID := new(string)
	if !r.OidcClientID.IsUnknown() && !r.OidcClientID.IsNull() {
		*oidcClientID = r.OidcClientID.ValueString()
	} else {
		oidcClientID = nil
	}
	oidcClientSecret := new(string)
	if !r.OidcClientSecret.IsUnknown() && !r.OidcClientSecret.IsNull() {
		*oidcClientSecret = r.OidcClientSecret.ValueString()
	} else {
		oidcClientSecret = nil
	}
	var oidcScopes []string
	if r.OidcScopes != nil {
		oidcScopes = make([]string, 0, len(r.OidcScopes))
		for _, oidcScopesItem := range r.OidcScopes {
			oidcScopes = append(oidcScopes, oidcScopesItem.ValueString())
		}
	}
	var oidcClaimMappings *shared.PortalClaimMappings
	if r.OidcClaimMappings != nil {
		name := new(string)
		if !r.OidcClaimMappings.Name.IsUnknown() && !r.OidcClaimMappings.Name.IsNull() {
			*name = r.OidcClaimMappings.Name.ValueString()
		} else {
			name = nil
		}
		email := new(string)
		if !r.OidcClaimMappings.Email.IsUnknown() && !r.OidcClaimMappings.Email.IsNull() {
			*email = r.OidcClaimMappings.Email.ValueString()
		} else {
			email = nil
		}
		groups := new(string)
		if !r.OidcClaimMappings.Groups.IsUnknown() && !r.OidcClaimMappings.Groups.IsNull() {
			*groups = r.OidcClaimMappings.Groups.ValueString()
		} else {
			groups = nil
		}
		oidcClaimMappings = &shared.PortalClaimMappings{
			Name:   name,
			Email:  email,
			Groups: groups,
		}
	}
	out := shared.PortalAuthenticationSettingsUpdateRequest{
		BasicAuthEnabled:       basicAuthEnabled,
		OidcAuthEnabled:        oidcAuthEnabled,
		SamlAuthEnabled:        samlAuthEnabled,
		OidcTeamMappingEnabled: oidcTeamMappingEnabled,
		KonnectMappingEnabled:  konnectMappingEnabled,
		IdpMappingEnabled:      idpMappingEnabled,
		OidcIssuer:             oidcIssuer,
		OidcClientID:           oidcClientID,
		OidcClientSecret:       oidcClientSecret,
		OidcScopes:             oidcScopes,
		OidcClaimMappings:      oidcClaimMappings,
	}

	return &out, diags
}
