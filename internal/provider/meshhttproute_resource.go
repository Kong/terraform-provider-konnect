// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	custom_boolplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/boolplanmodifier"
	custom_listplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/listplanmodifier"
	speakeasy_listplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/listplanmodifier"
	custom_stringplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/stringplanmodifier"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/validators"
	speakeasy_listvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &MeshHTTPRouteResource{}
var _ resource.ResourceWithImportState = &MeshHTTPRouteResource{}

func NewMeshHTTPRouteResource() resource.Resource {
	return &MeshHTTPRouteResource{}
}

// MeshHTTPRouteResource defines the resource implementation.
type MeshHTTPRouteResource struct {
	client *sdk.Konnect
}

// MeshHTTPRouteResourceModel describes the resource data model.
type MeshHTTPRouteResourceModel struct {
	CpID             types.String                  `tfsdk:"cp_id"`
	CreationTime     types.String                  `tfsdk:"creation_time"`
	Labels           map[string]types.String       `tfsdk:"labels"`
	Mesh             types.String                  `tfsdk:"mesh"`
	ModificationTime types.String                  `tfsdk:"modification_time"`
	Name             types.String                  `tfsdk:"name"`
	Spec             tfTypes.MeshHTTPRouteItemSpec `tfsdk:"spec"`
	Type             types.String                  `tfsdk:"type"`
	Warnings         []types.String                `tfsdk:"warnings"`
}

func (r *MeshHTTPRouteResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_http_route"
}

func (r *MeshHTTPRouteResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshHTTPRoute Resource",
		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					custom_stringplanmodifier.RequiresReplaceModifier(),
				},
				Description: `Id of the Konnect resource`,
			},
			"creation_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was created`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"labels": schema.MapAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The labels to help identity resources`,
			},
			"mesh": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					custom_stringplanmodifier.RequiresReplaceModifier(),
				},
				Description: `name of the mesh`,
			},
			"modification_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was updated`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					custom_stringplanmodifier.RequiresReplaceModifier(),
				},
				Description: `name of the MeshHTTPRoute`,
			},
			"spec": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"target_ref": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								Required:    true,
								Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"Mesh",
										"MeshSubset",
										"MeshGateway",
										"MeshService",
										"MeshExternalService",
										"MeshMultiZoneService",
										"MeshServiceSubset",
										"MeshHTTPRoute",
										"Dataplane",
									),
								},
							},
							"labels": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
									`Name and Namespace can be used.`,
							},
							"mesh": schema.StringAttribute{
								Optional:    true,
								Description: `Mesh is reserved for future use to identify cross mesh resources.`,
							},
							"name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
									`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
							},
							"namespace": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
									`will be targeted.`,
							},
							"proxy_types": schema.ListAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.List{
									custom_listplanmodifier.SupressZeroNullModifier(),
								},
								ElementType: types.StringType,
								MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
									`all data plane types are targeted by the policy.`,
							},
							"section_name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
									`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
							},
							"tags": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
									`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
							},
						},
						MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
							`The resource could be either a real store object or virtual resource` + "\n" +
							`defined inplace.`,
					},
					"to": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							custom_listplanmodifier.SupressZeroNullModifier(),
						},
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"hostnames": schema.ListAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										custom_listplanmodifier.SupressZeroNullModifier(),
									},
									ElementType: types.StringType,
									MarkdownDescription: `Hostnames is only valid when targeting MeshGateway and limits the` + "\n" +
										`effects of the rules to requests to this hostname.` + "\n" +
										`Given hostnames must intersect with the hostname of the listeners the` + "\n" +
										`route attaches to.`,
								},
								"rules": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									PlanModifiers: []planmodifier.List{
										custom_listplanmodifier.SupressZeroNullModifier(),
									},
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"default": schema.SingleNestedAttribute{
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"backend_refs": schema.ListNestedAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.List{
															custom_listplanmodifier.SupressZeroNullModifier(),
														},
														NestedObject: schema.NestedAttributeObject{
															Validators: []validator.Object{
																speakeasy_objectvalidators.NotNull(),
															},
															Attributes: map[string]schema.Attribute{
																"kind": schema.StringAttribute{
																	Optional:    true,
																	Description: `Kind of the referenced resource. Not Null; must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"Mesh",
																			"MeshSubset",
																			"MeshGateway",
																			"MeshService",
																			"MeshExternalService",
																			"MeshMultiZoneService",
																			"MeshServiceSubset",
																			"MeshHTTPRoute",
																			"Dataplane",
																		),
																	},
																},
																"labels": schema.MapAttribute{
																	Optional:    true,
																	ElementType: types.StringType,
																	MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
																		`Name and Namespace can be used.`,
																},
																"mesh": schema.StringAttribute{
																	Optional:    true,
																	Description: `Mesh is reserved for future use to identify cross mesh resources.`,
																},
																"name": schema.StringAttribute{
																	Optional: true,
																	MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
																		`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
																},
																"namespace": schema.StringAttribute{
																	Optional: true,
																	MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
																		`will be targeted.`,
																},
																"port": schema.Int64Attribute{
																	Optional:    true,
																	Description: `Port is only supported when this ref refers to a real MeshService object`,
																},
																"proxy_types": schema.ListAttribute{
																	Computed: true,
																	Optional: true,
																	PlanModifiers: []planmodifier.List{
																		custom_listplanmodifier.SupressZeroNullModifier(),
																	},
																	ElementType: types.StringType,
																	MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
																		`all data plane types are targeted by the policy.`,
																},
																"section_name": schema.StringAttribute{
																	Optional: true,
																	MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
																		`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
																},
																"tags": schema.MapAttribute{
																	Optional:    true,
																	ElementType: types.StringType,
																	MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
																		`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
																},
																"weight": schema.Int64Attribute{
																	Computed:    true,
																	Optional:    true,
																	Default:     int64default.StaticInt64(1),
																	Description: `Default: 1`,
																},
															},
														},
													},
													"filters": schema.ListNestedAttribute{
														Computed: true,
														Optional: true,
														PlanModifiers: []planmodifier.List{
															custom_listplanmodifier.SupressZeroNullModifier(),
														},
														NestedObject: schema.NestedAttributeObject{
															Validators: []validator.Object{
																speakeasy_objectvalidators.NotNull(),
															},
															Attributes: map[string]schema.Attribute{
																"request_header_modifier": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"add": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"remove": schema.ListAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			ElementType: types.StringType,
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"set": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																	},
																	MarkdownDescription: `Only one action is supported per header name.` + "\n" +
																		`Configuration to set or add multiple values for a header must use RFC 7230` + "\n" +
																		`header value formatting, separating each value with a comma.`,
																},
																"request_mirror": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"backend_ref": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"kind": schema.StringAttribute{
																					Optional:    true,
																					Description: `Kind of the referenced resource. Not Null; must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf(
																							"Mesh",
																							"MeshSubset",
																							"MeshGateway",
																							"MeshService",
																							"MeshExternalService",
																							"MeshMultiZoneService",
																							"MeshServiceSubset",
																							"MeshHTTPRoute",
																							"Dataplane",
																						),
																					},
																				},
																				"labels": schema.MapAttribute{
																					Optional:    true,
																					ElementType: types.StringType,
																					MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
																						`Name and Namespace can be used.`,
																				},
																				"mesh": schema.StringAttribute{
																					Optional:    true,
																					Description: `Mesh is reserved for future use to identify cross mesh resources.`,
																				},
																				"name": schema.StringAttribute{
																					Optional: true,
																					MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
																						`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
																				},
																				"namespace": schema.StringAttribute{
																					Optional: true,
																					MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
																						`will be targeted.`,
																				},
																				"port": schema.Int64Attribute{
																					Optional:    true,
																					Description: `Port is only supported when this ref refers to a real MeshService object`,
																				},
																				"proxy_types": schema.ListAttribute{
																					Computed: true,
																					Optional: true,
																					PlanModifiers: []planmodifier.List{
																						custom_listplanmodifier.SupressZeroNullModifier(),
																					},
																					ElementType: types.StringType,
																					MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
																						`all data plane types are targeted by the policy.`,
																				},
																				"section_name": schema.StringAttribute{
																					Optional: true,
																					MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
																						`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
																				},
																				"tags": schema.MapAttribute{
																					Optional:    true,
																					ElementType: types.StringType,
																					MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
																						`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
																				},
																				"weight": schema.Int64Attribute{
																					Computed:    true,
																					Optional:    true,
																					Default:     int64default.StaticInt64(1),
																					Description: `Default: 1`,
																				},
																			},
																			Description: `BackendRef defines where to forward traffic. Not Null`,
																			Validators: []validator.Object{
																				speakeasy_objectvalidators.NotNull(),
																			},
																		},
																		"percentage": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"integer": schema.Int64Attribute{
																					Optional: true,
																					Validators: []validator.Int64{
																						int64validator.ConflictsWith(path.Expressions{
																							path.MatchRelative().AtParent().AtName("str"),
																						}...),
																					},
																				},
																				"str": schema.StringAttribute{
																					Optional: true,
																					Validators: []validator.String{
																						stringvalidator.ConflictsWith(path.Expressions{
																							path.MatchRelative().AtParent().AtName("integer"),
																						}...),
																					},
																				},
																			},
																			MarkdownDescription: `Percentage of requests to mirror. If not specified, all requests` + "\n" +
																				`to the target cluster will be mirrored.`,
																		},
																	},
																},
																"request_redirect": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"hostname": schema.StringAttribute{
																			Optional: true,
																			MarkdownDescription: `PreciseHostname is the fully qualified domain name of a network host. This` + "\n" +
																				`matches the RFC 1123 definition of a hostname with 1 notable exception that` + "\n" +
																				`numeric IP addresses are not allowed.` + "\n" +
																				`` + "\n" +
																				`Note that as per RFC1035 and RFC1123, a *label* must consist of lower case` + "\n" +
																				`alphanumeric characters or '-', and must start and end with an alphanumeric` + "\n" +
																				`character. No other punctuation is allowed.`,
																			Validators: []validator.String{
																				stringvalidator.UTF8LengthBetween(1, 253),
																				stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`).String()),
																			},
																		},
																		"path": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"replace_full_path": schema.StringAttribute{
																					Optional: true,
																				},
																				"replace_prefix_match": schema.StringAttribute{
																					Optional: true,
																				},
																				"type": schema.StringAttribute{
																					Optional:    true,
																					Description: `Not Null; must be one of ["ReplaceFullPath", "ReplacePrefixMatch"]`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf(
																							"ReplaceFullPath",
																							"ReplacePrefixMatch",
																						),
																					},
																				},
																			},
																			MarkdownDescription: `Path defines parameters used to modify the path of the incoming request.` + "\n" +
																				`The modified path is then used to construct the location header.` + "\n" +
																				`When empty, the request path is used as-is.`,
																		},
																		"port": schema.Int64Attribute{
																			Optional: true,
																			MarkdownDescription: `Port is the port to be used in the value of the ` + "`" + `Location` + "`" + `` + "\n" +
																				`header in the response.` + "\n" +
																				`When empty, port (if specified) of the request is used.`,
																			Validators: []validator.Int64{
																				int64validator.Between(1, 65535),
																			},
																		},
																		"scheme": schema.StringAttribute{
																			Optional:    true,
																			Description: `must be one of ["http", "https"]`,
																			Validators: []validator.String{
																				stringvalidator.OneOf(
																					"http",
																					"https",
																				),
																			},
																		},
																		"status_code": schema.Int64Attribute{
																			Computed:    true,
																			Optional:    true,
																			Default:     int64default.StaticInt64(302),
																			Description: `StatusCode is the HTTP status code to be used in response. Default: 302; must be one of ["301", "302", "303", "307", "308"]`,
																			Validators: []validator.Int64{
																				int64validator.OneOf(
																					301,
																					302,
																					303,
																					307,
																					308,
																				),
																			},
																		},
																	},
																},
																"response_header_modifier": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"add": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"remove": schema.ListAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			ElementType: types.StringType,
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																		"set": schema.ListNestedAttribute{
																			Computed: true,
																			Optional: true,
																			PlanModifiers: []planmodifier.List{
																				custom_listplanmodifier.SupressZeroNullModifier(),
																			},
																			NestedObject: schema.NestedAttributeObject{
																				Validators: []validator.Object{
																					speakeasy_objectvalidators.NotNull(),
																				},
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																							stringvalidator.UTF8LengthBetween(1, 256),
																							stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																						},
																					},
																					"value": schema.StringAttribute{
																						Optional:    true,
																						Description: `Not Null`,
																						Validators: []validator.String{
																							speakeasy_stringvalidators.NotNull(),
																						},
																					},
																				},
																			},
																			Validators: []validator.List{
																				listvalidator.SizeAtMost(16),
																			},
																		},
																	},
																	MarkdownDescription: `Only one action is supported per header name.` + "\n" +
																		`Configuration to set or add multiple values for a header must use RFC 7230` + "\n" +
																		`header value formatting, separating each value with a comma.`,
																},
																"type": schema.StringAttribute{
																	Optional:    true,
																	Description: `Not Null; must be one of ["RequestHeaderModifier", "ResponseHeaderModifier", "RequestRedirect", "URLRewrite", "RequestMirror"]`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"RequestHeaderModifier",
																			"ResponseHeaderModifier",
																			"RequestRedirect",
																			"URLRewrite",
																			"RequestMirror",
																		),
																	},
																},
																"url_rewrite": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"host_to_backend_hostname": schema.BoolAttribute{
																			Optional: true,
																			PlanModifiers: []planmodifier.Bool{
																				custom_boolplanmodifier.SupressZeroNullModifier(),
																			},
																			MarkdownDescription: `HostToBackendHostname rewrites the hostname to the hostname of the` + "\n" +
																				`upstream host. This option is only available when targeting MeshGateways.`,
																		},
																		"hostname": schema.StringAttribute{
																			Optional:    true,
																			Description: `Hostname is the value to be used to replace the host header value during forwarding.`,
																			Validators: []validator.String{
																				stringvalidator.UTF8LengthBetween(1, 253),
																				stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$`).String()),
																			},
																		},
																		"path": schema.SingleNestedAttribute{
																			Optional: true,
																			Attributes: map[string]schema.Attribute{
																				"replace_full_path": schema.StringAttribute{
																					Optional: true,
																				},
																				"replace_prefix_match": schema.StringAttribute{
																					Optional: true,
																				},
																				"type": schema.StringAttribute{
																					Optional:    true,
																					Description: `Not Null; must be one of ["ReplaceFullPath", "ReplacePrefixMatch"]`,
																					Validators: []validator.String{
																						speakeasy_stringvalidators.NotNull(),
																						stringvalidator.OneOf(
																							"ReplaceFullPath",
																							"ReplacePrefixMatch",
																						),
																					},
																				},
																			},
																			Description: `Path defines a path rewrite.`,
																		},
																	},
																},
															},
														},
													},
												},
												MarkdownDescription: `Default holds routing rules that can be merged with rules from other` + "\n" +
													`policies.` + "\n" +
													`Not Null`,
												Validators: []validator.Object{
													speakeasy_objectvalidators.NotNull(),
												},
											},
											"matches": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.List{
													custom_listplanmodifier.SupressZeroNullModifier(),
												},
												NestedObject: schema.NestedAttributeObject{
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
													Attributes: map[string]schema.Attribute{
														"headers": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																custom_listplanmodifier.SupressZeroNullModifier(),
															},
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"name": schema.StringAttribute{
																		Optional: true,
																		MarkdownDescription: `Name is the name of the HTTP Header to be matched. Name MUST be lower case` + "\n" +
																			`as they will be handled with case insensitivity (See https://tools.ietf.org/html/rfc7230#section-3.2).` + "\n" +
																			`Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.UTF8LengthBetween(1, 256),
																			stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																		},
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Default:     stringdefault.StaticString("Exact"),
																		Description: `Type specifies how to match against the value of the header. Default: "Exact"; must be one of ["Exact", "Present", "RegularExpression", "Absent", "Prefix"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"Exact",
																				"Present",
																				"RegularExpression",
																				"Absent",
																				"Prefix",
																			),
																		},
																	},
																	"value": schema.StringAttribute{
																		Optional:    true,
																		Description: `Value is the value of HTTP Header to be matched.`,
																	},
																},
															},
														},
														"method": schema.StringAttribute{
															Optional:    true,
															Description: `must be one of ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"CONNECT",
																	"DELETE",
																	"GET",
																	"HEAD",
																	"OPTIONS",
																	"PATCH",
																	"POST",
																	"PUT",
																	"TRACE",
																),
															},
														},
														"path": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"type": schema.StringAttribute{
																	Optional:    true,
																	Description: `Not Null; must be one of ["Exact", "PathPrefix", "RegularExpression"]`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.OneOf(
																			"Exact",
																			"PathPrefix",
																			"RegularExpression",
																		),
																	},
																},
																"value": schema.StringAttribute{
																	Optional: true,
																	MarkdownDescription: `Exact or prefix matches must be an absolute path. A prefix matches only` + "\n" +
																		`if separated by a slash or the entire path.` + "\n" +
																		`Not Null`,
																	Validators: []validator.String{
																		speakeasy_stringvalidators.NotNull(),
																		stringvalidator.UTF8LengthAtLeast(1),
																	},
																},
															},
														},
														"query_params": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																custom_listplanmodifier.SupressZeroNullModifier(),
															},
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"name": schema.StringAttribute{
																		Optional:    true,
																		Description: `Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.UTF8LengthAtLeast(1),
																		},
																	},
																	"type": schema.StringAttribute{
																		Optional:    true,
																		Description: `Not Null; must be one of ["Exact", "RegularExpression"]`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.OneOf(
																				"Exact",
																				"RegularExpression",
																			),
																		},
																	},
																	"value": schema.StringAttribute{
																		Optional:    true,
																		Description: `Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																},
															},
															MarkdownDescription: `QueryParams matches based on HTTP URL query parameters. Multiple matches` + "\n" +
																`are ANDed together such that all listed matches must succeed.`,
														},
													},
												},
												MarkdownDescription: `Matches describes how to match HTTP requests this rule should be applied` + "\n" +
													`to.` + "\n" +
													`Not Null`,
												Validators: []validator.List{
													speakeasy_listvalidators.NotNull(),
													listvalidator.SizeAtLeast(1),
												},
											},
										},
									},
									MarkdownDescription: `Rules contains the routing rules applies to a combination of top-level` + "\n" +
										`targetRef and the targetRef in this entry.` + "\n" +
										`Not Null`,
									Validators: []validator.List{
										speakeasy_listvalidators.NotNull(),
									},
								},
								"target_ref": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Optional:    true,
											Description: `Kind of the referenced resource. Not Null; must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.OneOf(
													"Mesh",
													"MeshSubset",
													"MeshGateway",
													"MeshService",
													"MeshExternalService",
													"MeshMultiZoneService",
													"MeshServiceSubset",
													"MeshHTTPRoute",
													"Dataplane",
												),
											},
										},
										"labels": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Optional:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												custom_listplanmodifier.SupressZeroNullModifier(),
											},
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
										},
										"section_name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
										`request destinations.` + "\n" +
										`Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
							},
						},
						Description: `To matches destination services of requests and holds configuration.`,
					},
				},
				Description: `Spec is the specification of the Kuma MeshHTTPRoute resource.`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `the type of the resource. must be "MeshHTTPRoute"`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"MeshHTTPRoute",
					),
				},
			},
			"warnings": schema.ListAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					custom_listplanmodifier.SupressZeroNullModifier(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				MarkdownDescription: `warnings is a list of warning messages to return to the requesting Kuma API clients.` + "\n" +
					`Warning messages describe a problem the client making the API request should correct or be aware of.`,
			},
		},
	}
}

func (r *MeshHTTPRouteResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshHTTPRouteResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *MeshHTTPRouteResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshHTTPRouteItem := *data.ToSharedMeshHTTPRouteItemInput()
	request := operations.CreateMeshHTTPRouteRequest{
		CpID:              cpID,
		Mesh:              mesh,
		Name:              name,
		MeshHTTPRouteItem: meshHTTPRouteItem,
	}
	res, err := r.client.MeshHTTPRoute.CreateMeshHTTPRoute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshHTTPRouteCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshHTTPRouteCreateOrUpdateSuccessResponse(res.MeshHTTPRouteCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshHTTPRouteRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshHTTPRoute.GetMeshHTTPRoute(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshHTTPRouteItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshHTTPRouteItem(res1.MeshHTTPRouteItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshHTTPRouteResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *MeshHTTPRouteResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.GetMeshHTTPRouteRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshHTTPRoute.GetMeshHTTPRoute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshHTTPRouteItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshHTTPRouteItem(res.MeshHTTPRouteItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshHTTPRouteResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *MeshHTTPRouteResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshHTTPRouteItem := *data.ToSharedMeshHTTPRouteItemInput()
	request := operations.UpdateMeshHTTPRouteRequest{
		CpID:              cpID,
		Mesh:              mesh,
		Name:              name,
		MeshHTTPRouteItem: meshHTTPRouteItem,
	}
	res, err := r.client.MeshHTTPRoute.UpdateMeshHTTPRoute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshHTTPRouteCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshHTTPRouteCreateOrUpdateSuccessResponse(res.MeshHTTPRouteCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshHTTPRouteRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshHTTPRoute.GetMeshHTTPRoute(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshHTTPRouteItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshHTTPRouteItem(res1.MeshHTTPRouteItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshHTTPRouteResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *MeshHTTPRouteResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.DeleteMeshHTTPRouteRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshHTTPRoute.DeleteMeshHTTPRoute(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *MeshHTTPRouteResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		CpID string `json:"cp_id"`
		Mesh string `json:"mesh"`
		Name string `json:"name"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The ID is not valid. It's expected to be a JSON object alike '{ "cp_id": "bf138ba2-c9b1-4229-b268-04d9d8a6410b",  "mesh": "",  "name": ""}': `+err.Error())
		return
	}

	if len(data.CpID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field cp_id is required but was not found in the json encoded ID. It's expected to be a value alike '"bf138ba2-c9b1-4229-b268-04d9d8a6410b"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("cp_id"), data.CpID)...)
	if len(data.Mesh) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field mesh is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("mesh"), data.Mesh)...)
	if len(data.Name) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field name is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), data.Name)...)

}
