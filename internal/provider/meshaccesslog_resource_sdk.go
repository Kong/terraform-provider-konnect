// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshAccessLogResourceModel) ToSharedMeshAccessLogItemInput() *shared.MeshAccessLogItemInput {
	typeVar := shared.MeshAccessLogItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var from []shared.From = []shared.From{}
	for _, fromItem := range r.Spec.From {
		var backends []shared.MeshAccessLogItemBackends = []shared.MeshAccessLogItemBackends{}
		for _, backendsItem := range fromItem.Default.Backends {
			var file *shared.File
			if backendsItem.File != nil {
				var format *shared.Format
				if backendsItem.File.Format != nil {
					var json []shared.JSON = []shared.JSON{}
					for _, jsonItem := range backendsItem.File.Format.JSON {
						var key string
						key = jsonItem.Key.ValueString()

						var value string
						value = jsonItem.Value.ValueString()

						json = append(json, shared.JSON{
							Key:   key,
							Value: value,
						})
					}
					omitEmptyValues := new(bool)
					if !backendsItem.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem.File.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues = backendsItem.File.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues = nil
					}
					plain := new(string)
					if !backendsItem.File.Format.Plain.IsUnknown() && !backendsItem.File.Format.Plain.IsNull() {
						*plain = backendsItem.File.Format.Plain.ValueString()
					} else {
						plain = nil
					}
					typeVar1 := shared.MeshAccessLogItemSpecFromDefaultType(backendsItem.File.Format.Type.ValueString())
					format = &shared.Format{
						JSON:            json,
						OmitEmptyValues: omitEmptyValues,
						Plain:           plain,
						Type:            typeVar1,
					}
				}
				var path string
				path = backendsItem.File.Path.ValueString()

				file = &shared.File{
					Format: format,
					Path:   path,
				}
			}
			var openTelemetry *shared.MeshAccessLogItemSpecFromOpenTelemetry
			if backendsItem.OpenTelemetry != nil {
				var attributes []shared.Attributes = []shared.Attributes{}
				for _, attributesItem := range backendsItem.OpenTelemetry.Attributes {
					var key1 string
					key1 = attributesItem.Key.ValueString()

					var value1 string
					value1 = attributesItem.Value.ValueString()

					attributes = append(attributes, shared.Attributes{
						Key:   key1,
						Value: value1,
					})
				}
				var body interface{}
				if !backendsItem.OpenTelemetry.Body.IsUnknown() && !backendsItem.OpenTelemetry.Body.IsNull() {
					_ = json.Unmarshal([]byte(backendsItem.OpenTelemetry.Body.ValueString()), &body)
				}
				var endpoint string
				endpoint = backendsItem.OpenTelemetry.Endpoint.ValueString()

				openTelemetry = &shared.MeshAccessLogItemSpecFromOpenTelemetry{
					Attributes: attributes,
					Body:       body,
					Endpoint:   endpoint,
				}
			}
			var tcp *shared.MeshAccessLogItemSpecFromTCP
			if backendsItem.TCP != nil {
				var address string
				address = backendsItem.TCP.Address.ValueString()

				var format1 *shared.MeshAccessLogItemFormat
				if backendsItem.TCP.Format != nil {
					var json1 []shared.MeshAccessLogItemJSON = []shared.MeshAccessLogItemJSON{}
					for _, jsonItem1 := range backendsItem.TCP.Format.JSON {
						var key2 string
						key2 = jsonItem1.Key.ValueString()

						var value2 string
						value2 = jsonItem1.Value.ValueString()

						json1 = append(json1, shared.MeshAccessLogItemJSON{
							Key:   key2,
							Value: value2,
						})
					}
					omitEmptyValues1 := new(bool)
					if !backendsItem.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem.TCP.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues1 = backendsItem.TCP.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues1 = nil
					}
					plain1 := new(string)
					if !backendsItem.TCP.Format.Plain.IsUnknown() && !backendsItem.TCP.Format.Plain.IsNull() {
						*plain1 = backendsItem.TCP.Format.Plain.ValueString()
					} else {
						plain1 = nil
					}
					typeVar2 := shared.MeshAccessLogItemSpecFromType(backendsItem.TCP.Format.Type.ValueString())
					format1 = &shared.MeshAccessLogItemFormat{
						JSON:            json1,
						OmitEmptyValues: omitEmptyValues1,
						Plain:           plain1,
						Type:            typeVar2,
					}
				}
				tcp = &shared.MeshAccessLogItemSpecFromTCP{
					Address: address,
					Format:  format1,
				}
			}
			type1 := shared.MeshAccessLogItemSpecType(backendsItem.Type.ValueString())
			backends = append(backends, shared.MeshAccessLogItemBackends{
				File:          file,
				OpenTelemetry: openTelemetry,
				TCP:           tcp,
				Type:          type1,
			})
		}
		defaultVar := shared.MeshAccessLogItemSpecFromDefault{
			Backends: backends,
		}
		kind := new(shared.MeshAccessLogItemSpecFromKind)
		if !fromItem.TargetRef.Kind.IsUnknown() && !fromItem.TargetRef.Kind.IsNull() {
			*kind = shared.MeshAccessLogItemSpecFromKind(fromItem.TargetRef.Kind.ValueString())
		} else {
			kind = nil
		}
		labels1 := make(map[string]string)
		for labelsKey1, labelsValue1 := range fromItem.TargetRef.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels1[labelsKey1] = labelsInst1
		}
		mesh1 := new(string)
		if !fromItem.TargetRef.Mesh.IsUnknown() && !fromItem.TargetRef.Mesh.IsNull() {
			*mesh1 = fromItem.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name1 := new(string)
		if !fromItem.TargetRef.Name.IsUnknown() && !fromItem.TargetRef.Name.IsNull() {
			*name1 = fromItem.TargetRef.Name.ValueString()
		} else {
			name1 = nil
		}
		namespace := new(string)
		if !fromItem.TargetRef.Namespace.IsUnknown() && !fromItem.TargetRef.Namespace.IsNull() {
			*namespace = fromItem.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		var proxyTypes []shared.MeshAccessLogItemProxyTypes = []shared.MeshAccessLogItemProxyTypes{}
		for _, proxyTypesItem := range fromItem.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshAccessLogItemProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !fromItem.TargetRef.SectionName.IsUnknown() && !fromItem.TargetRef.SectionName.IsNull() {
			*sectionName = fromItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags := make(map[string]string)
		for tagsKey, tagsValue := range fromItem.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags[tagsKey] = tagsInst
		}
		targetRef := shared.MeshAccessLogItemTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name1,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags,
		}
		from = append(from, shared.From{
			Default:   defaultVar,
			TargetRef: targetRef,
		})
	}
	var rules []shared.Rules = []shared.Rules{}
	for _, rulesItem := range r.Spec.Rules {
		var backends1 []shared.MeshAccessLogItemSpecBackends = []shared.MeshAccessLogItemSpecBackends{}
		for _, backendsItem1 := range rulesItem.Default.Backends {
			var file1 *shared.MeshAccessLogItemFile
			if backendsItem1.File != nil {
				var format2 *shared.MeshAccessLogItemSpecFormat
				if backendsItem1.File.Format != nil {
					var json2 []shared.MeshAccessLogItemSpecJSON = []shared.MeshAccessLogItemSpecJSON{}
					for _, jsonItem2 := range backendsItem1.File.Format.JSON {
						var key3 string
						key3 = jsonItem2.Key.ValueString()

						var value3 string
						value3 = jsonItem2.Value.ValueString()

						json2 = append(json2, shared.MeshAccessLogItemSpecJSON{
							Key:   key3,
							Value: value3,
						})
					}
					omitEmptyValues2 := new(bool)
					if !backendsItem1.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem1.File.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues2 = backendsItem1.File.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues2 = nil
					}
					plain2 := new(string)
					if !backendsItem1.File.Format.Plain.IsUnknown() && !backendsItem1.File.Format.Plain.IsNull() {
						*plain2 = backendsItem1.File.Format.Plain.ValueString()
					} else {
						plain2 = nil
					}
					typeVar3 := shared.MeshAccessLogItemSpecRulesDefaultBackendsType(backendsItem1.File.Format.Type.ValueString())
					format2 = &shared.MeshAccessLogItemSpecFormat{
						JSON:            json2,
						OmitEmptyValues: omitEmptyValues2,
						Plain:           plain2,
						Type:            typeVar3,
					}
				}
				var path1 string
				path1 = backendsItem1.File.Path.ValueString()

				file1 = &shared.MeshAccessLogItemFile{
					Format: format2,
					Path:   path1,
				}
			}
			var openTelemetry1 *shared.MeshAccessLogItemOpenTelemetry
			if backendsItem1.OpenTelemetry != nil {
				var attributes1 []shared.MeshAccessLogItemAttributes = []shared.MeshAccessLogItemAttributes{}
				for _, attributesItem1 := range backendsItem1.OpenTelemetry.Attributes {
					var key4 string
					key4 = attributesItem1.Key.ValueString()

					var value4 string
					value4 = attributesItem1.Value.ValueString()

					attributes1 = append(attributes1, shared.MeshAccessLogItemAttributes{
						Key:   key4,
						Value: value4,
					})
				}
				var body1 interface{}
				if !backendsItem1.OpenTelemetry.Body.IsUnknown() && !backendsItem1.OpenTelemetry.Body.IsNull() {
					_ = json.Unmarshal([]byte(backendsItem1.OpenTelemetry.Body.ValueString()), &body1)
				}
				var endpoint1 string
				endpoint1 = backendsItem1.OpenTelemetry.Endpoint.ValueString()

				openTelemetry1 = &shared.MeshAccessLogItemOpenTelemetry{
					Attributes: attributes1,
					Body:       body1,
					Endpoint:   endpoint1,
				}
			}
			var tcp1 *shared.MeshAccessLogItemTCP
			if backendsItem1.TCP != nil {
				var address1 string
				address1 = backendsItem1.TCP.Address.ValueString()

				var format3 *shared.MeshAccessLogItemSpecRulesFormat
				if backendsItem1.TCP.Format != nil {
					var json3 []shared.MeshAccessLogItemSpecRulesJSON = []shared.MeshAccessLogItemSpecRulesJSON{}
					for _, jsonItem3 := range backendsItem1.TCP.Format.JSON {
						var key5 string
						key5 = jsonItem3.Key.ValueString()

						var value5 string
						value5 = jsonItem3.Value.ValueString()

						json3 = append(json3, shared.MeshAccessLogItemSpecRulesJSON{
							Key:   key5,
							Value: value5,
						})
					}
					omitEmptyValues3 := new(bool)
					if !backendsItem1.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem1.TCP.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues3 = backendsItem1.TCP.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues3 = nil
					}
					plain3 := new(string)
					if !backendsItem1.TCP.Format.Plain.IsUnknown() && !backendsItem1.TCP.Format.Plain.IsNull() {
						*plain3 = backendsItem1.TCP.Format.Plain.ValueString()
					} else {
						plain3 = nil
					}
					typeVar4 := shared.MeshAccessLogItemSpecRulesDefaultType(backendsItem1.TCP.Format.Type.ValueString())
					format3 = &shared.MeshAccessLogItemSpecRulesFormat{
						JSON:            json3,
						OmitEmptyValues: omitEmptyValues3,
						Plain:           plain3,
						Type:            typeVar4,
					}
				}
				tcp1 = &shared.MeshAccessLogItemTCP{
					Address: address1,
					Format:  format3,
				}
			}
			type2 := shared.MeshAccessLogItemSpecRulesType(backendsItem1.Type.ValueString())
			backends1 = append(backends1, shared.MeshAccessLogItemSpecBackends{
				File:          file1,
				OpenTelemetry: openTelemetry1,
				TCP:           tcp1,
				Type:          type2,
			})
		}
		default1 := shared.MeshAccessLogItemDefault{
			Backends: backends1,
		}
		rules = append(rules, shared.Rules{
			Default: default1,
		})
	}
	var targetRef1 *shared.TargetRef
	if r.Spec.TargetRef != nil {
		kind1 := new(shared.MeshAccessLogItemKind)
		if !r.Spec.TargetRef.Kind.IsUnknown() && !r.Spec.TargetRef.Kind.IsNull() {
			*kind1 = shared.MeshAccessLogItemKind(r.Spec.TargetRef.Kind.ValueString())
		} else {
			kind1 = nil
		}
		labels2 := make(map[string]string)
		for labelsKey2, labelsValue2 := range r.Spec.TargetRef.Labels {
			var labelsInst2 string
			labelsInst2 = labelsValue2.ValueString()

			labels2[labelsKey2] = labelsInst2
		}
		mesh2 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh2 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh2 = nil
		}
		name2 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name2 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name2 = nil
		}
		namespace1 := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace1 = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace1 = nil
		}
		var proxyTypes1 []shared.ProxyTypes = []shared.ProxyTypes{}
		for _, proxyTypesItem1 := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes1 = append(proxyTypes1, shared.ProxyTypes(proxyTypesItem1.ValueString()))
		}
		sectionName1 := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName1 = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName1 = nil
		}
		tags1 := make(map[string]string)
		for tagsKey1, tagsValue1 := range r.Spec.TargetRef.Tags {
			var tagsInst1 string
			tagsInst1 = tagsValue1.ValueString()

			tags1[tagsKey1] = tagsInst1
		}
		targetRef1 = &shared.TargetRef{
			Kind:        kind1,
			Labels:      labels2,
			Mesh:        mesh2,
			Name:        name2,
			Namespace:   namespace1,
			ProxyTypes:  proxyTypes1,
			SectionName: sectionName1,
			Tags:        tags1,
		}
	}
	var to []shared.To = []shared.To{}
	for _, toItem := range r.Spec.To {
		var backends2 []shared.MeshAccessLogItemSpecToBackends = []shared.MeshAccessLogItemSpecToBackends{}
		for _, backendsItem2 := range toItem.Default.Backends {
			var file2 *shared.MeshAccessLogItemSpecFile
			if backendsItem2.File != nil {
				var format4 *shared.MeshAccessLogItemSpecToFormat
				if backendsItem2.File.Format != nil {
					var json4 []shared.MeshAccessLogItemSpecToJSON = []shared.MeshAccessLogItemSpecToJSON{}
					for _, jsonItem4 := range backendsItem2.File.Format.JSON {
						var key6 string
						key6 = jsonItem4.Key.ValueString()

						var value6 string
						value6 = jsonItem4.Value.ValueString()

						json4 = append(json4, shared.MeshAccessLogItemSpecToJSON{
							Key:   key6,
							Value: value6,
						})
					}
					omitEmptyValues4 := new(bool)
					if !backendsItem2.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem2.File.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues4 = backendsItem2.File.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues4 = nil
					}
					plain4 := new(string)
					if !backendsItem2.File.Format.Plain.IsUnknown() && !backendsItem2.File.Format.Plain.IsNull() {
						*plain4 = backendsItem2.File.Format.Plain.ValueString()
					} else {
						plain4 = nil
					}
					typeVar5 := shared.MeshAccessLogItemSpecToDefaultBackendsType(backendsItem2.File.Format.Type.ValueString())
					format4 = &shared.MeshAccessLogItemSpecToFormat{
						JSON:            json4,
						OmitEmptyValues: omitEmptyValues4,
						Plain:           plain4,
						Type:            typeVar5,
					}
				}
				var path2 string
				path2 = backendsItem2.File.Path.ValueString()

				file2 = &shared.MeshAccessLogItemSpecFile{
					Format: format4,
					Path:   path2,
				}
			}
			var openTelemetry2 *shared.MeshAccessLogItemSpecOpenTelemetry
			if backendsItem2.OpenTelemetry != nil {
				var attributes2 []shared.MeshAccessLogItemSpecAttributes = []shared.MeshAccessLogItemSpecAttributes{}
				for _, attributesItem2 := range backendsItem2.OpenTelemetry.Attributes {
					var key7 string
					key7 = attributesItem2.Key.ValueString()

					var value7 string
					value7 = attributesItem2.Value.ValueString()

					attributes2 = append(attributes2, shared.MeshAccessLogItemSpecAttributes{
						Key:   key7,
						Value: value7,
					})
				}
				var body2 interface{}
				if !backendsItem2.OpenTelemetry.Body.IsUnknown() && !backendsItem2.OpenTelemetry.Body.IsNull() {
					_ = json.Unmarshal([]byte(backendsItem2.OpenTelemetry.Body.ValueString()), &body2)
				}
				var endpoint2 string
				endpoint2 = backendsItem2.OpenTelemetry.Endpoint.ValueString()

				openTelemetry2 = &shared.MeshAccessLogItemSpecOpenTelemetry{
					Attributes: attributes2,
					Body:       body2,
					Endpoint:   endpoint2,
				}
			}
			var tcp2 *shared.MeshAccessLogItemSpecTCP
			if backendsItem2.TCP != nil {
				var address2 string
				address2 = backendsItem2.TCP.Address.ValueString()

				var format5 *shared.MeshAccessLogItemSpecToDefaultFormat
				if backendsItem2.TCP.Format != nil {
					var json5 []shared.MeshAccessLogItemSpecToDefaultJSON = []shared.MeshAccessLogItemSpecToDefaultJSON{}
					for _, jsonItem5 := range backendsItem2.TCP.Format.JSON {
						var key8 string
						key8 = jsonItem5.Key.ValueString()

						var value8 string
						value8 = jsonItem5.Value.ValueString()

						json5 = append(json5, shared.MeshAccessLogItemSpecToDefaultJSON{
							Key:   key8,
							Value: value8,
						})
					}
					omitEmptyValues5 := new(bool)
					if !backendsItem2.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem2.TCP.Format.OmitEmptyValues.IsNull() {
						*omitEmptyValues5 = backendsItem2.TCP.Format.OmitEmptyValues.ValueBool()
					} else {
						omitEmptyValues5 = nil
					}
					plain5 := new(string)
					if !backendsItem2.TCP.Format.Plain.IsUnknown() && !backendsItem2.TCP.Format.Plain.IsNull() {
						*plain5 = backendsItem2.TCP.Format.Plain.ValueString()
					} else {
						plain5 = nil
					}
					typeVar6 := shared.MeshAccessLogItemSpecToDefaultType(backendsItem2.TCP.Format.Type.ValueString())
					format5 = &shared.MeshAccessLogItemSpecToDefaultFormat{
						JSON:            json5,
						OmitEmptyValues: omitEmptyValues5,
						Plain:           plain5,
						Type:            typeVar6,
					}
				}
				tcp2 = &shared.MeshAccessLogItemSpecTCP{
					Address: address2,
					Format:  format5,
				}
			}
			type3 := shared.MeshAccessLogItemSpecToType(backendsItem2.Type.ValueString())
			backends2 = append(backends2, shared.MeshAccessLogItemSpecToBackends{
				File:          file2,
				OpenTelemetry: openTelemetry2,
				TCP:           tcp2,
				Type:          type3,
			})
		}
		default2 := shared.MeshAccessLogItemSpecDefault{
			Backends: backends2,
		}
		kind2 := new(shared.MeshAccessLogItemSpecKind)
		if !toItem.TargetRef.Kind.IsUnknown() && !toItem.TargetRef.Kind.IsNull() {
			*kind2 = shared.MeshAccessLogItemSpecKind(toItem.TargetRef.Kind.ValueString())
		} else {
			kind2 = nil
		}
		labels3 := make(map[string]string)
		for labelsKey3, labelsValue3 := range toItem.TargetRef.Labels {
			var labelsInst3 string
			labelsInst3 = labelsValue3.ValueString()

			labels3[labelsKey3] = labelsInst3
		}
		mesh3 := new(string)
		if !toItem.TargetRef.Mesh.IsUnknown() && !toItem.TargetRef.Mesh.IsNull() {
			*mesh3 = toItem.TargetRef.Mesh.ValueString()
		} else {
			mesh3 = nil
		}
		name3 := new(string)
		if !toItem.TargetRef.Name.IsUnknown() && !toItem.TargetRef.Name.IsNull() {
			*name3 = toItem.TargetRef.Name.ValueString()
		} else {
			name3 = nil
		}
		namespace2 := new(string)
		if !toItem.TargetRef.Namespace.IsUnknown() && !toItem.TargetRef.Namespace.IsNull() {
			*namespace2 = toItem.TargetRef.Namespace.ValueString()
		} else {
			namespace2 = nil
		}
		var proxyTypes2 []shared.MeshAccessLogItemSpecProxyTypes = []shared.MeshAccessLogItemSpecProxyTypes{}
		for _, proxyTypesItem2 := range toItem.TargetRef.ProxyTypes {
			proxyTypes2 = append(proxyTypes2, shared.MeshAccessLogItemSpecProxyTypes(proxyTypesItem2.ValueString()))
		}
		sectionName2 := new(string)
		if !toItem.TargetRef.SectionName.IsUnknown() && !toItem.TargetRef.SectionName.IsNull() {
			*sectionName2 = toItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName2 = nil
		}
		tags2 := make(map[string]string)
		for tagsKey2, tagsValue2 := range toItem.TargetRef.Tags {
			var tagsInst2 string
			tagsInst2 = tagsValue2.ValueString()

			tags2[tagsKey2] = tagsInst2
		}
		targetRef2 := shared.MeshAccessLogItemSpecTargetRef{
			Kind:        kind2,
			Labels:      labels3,
			Mesh:        mesh3,
			Name:        name3,
			Namespace:   namespace2,
			ProxyTypes:  proxyTypes2,
			SectionName: sectionName2,
			Tags:        tags2,
		}
		to = append(to, shared.To{
			Default:   default2,
			TargetRef: targetRef2,
		})
	}
	spec := shared.MeshAccessLogItemSpec{
		From:      from,
		Rules:     rules,
		TargetRef: targetRef1,
		To:        to,
	}
	out := shared.MeshAccessLogItemInput{
		Type:   typeVar,
		Mesh:   mesh,
		Name:   name,
		Labels: labels,
		Spec:   spec,
	}
	return &out
}

func (r *MeshAccessLogResourceModel) RefreshFromSharedMeshAccessLogCreateOrUpdateSuccessResponse(resp *shared.MeshAccessLogCreateOrUpdateSuccessResponse) {
	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}
}

func (r *MeshAccessLogResourceModel) RefreshFromSharedMeshAccessLogItem(resp *shared.MeshAccessLogItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.From{}
		if len(r.Spec.From) > len(resp.Spec.From) {
			r.Spec.From = r.Spec.From[:len(resp.Spec.From)]
		}
		for fromCount, fromItem := range resp.Spec.From {
			var from1 tfTypes.From
			from1.Default.Backends = []tfTypes.MeshAccessLogItemBackends{}
			for backendsCount, backendsItem := range fromItem.Default.Backends {
				var backends1 tfTypes.MeshAccessLogItemBackends
				if backendsItem.File == nil {
					backends1.File = nil
				} else {
					backends1.File = &tfTypes.File{}
					if backendsItem.File.Format == nil {
						backends1.File.Format = nil
					} else {
						backends1.File.Format = &tfTypes.Format{}
						backends1.File.Format.JSON = []tfTypes.JSON{}
						for jsonCount, jsonItem := range backendsItem.File.Format.JSON {
							var json1 tfTypes.JSON
							json1.Key = types.StringValue(jsonItem.Key)
							json1.Value = types.StringValue(jsonItem.Value)
							if jsonCount+1 > len(backends1.File.Format.JSON) {
								backends1.File.Format.JSON = append(backends1.File.Format.JSON, json1)
							} else {
								backends1.File.Format.JSON[jsonCount].Key = json1.Key
								backends1.File.Format.JSON[jsonCount].Value = json1.Value
							}
						}
						backends1.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem.File.Format.OmitEmptyValues)
						backends1.File.Format.Plain = types.StringPointerValue(backendsItem.File.Format.Plain)
						backends1.File.Format.Type = types.StringValue(string(backendsItem.File.Format.Type))
					}
					backends1.File.Path = types.StringValue(backendsItem.File.Path)
				}
				if backendsItem.OpenTelemetry == nil {
					backends1.OpenTelemetry = nil
				} else {
					backends1.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecFromOpenTelemetry{}
					backends1.OpenTelemetry.Attributes = []tfTypes.JSON{}
					for attributesCount, attributesItem := range backendsItem.OpenTelemetry.Attributes {
						var attributes1 tfTypes.JSON
						attributes1.Key = types.StringValue(attributesItem.Key)
						attributes1.Value = types.StringValue(attributesItem.Value)
						if attributesCount+1 > len(backends1.OpenTelemetry.Attributes) {
							backends1.OpenTelemetry.Attributes = append(backends1.OpenTelemetry.Attributes, attributes1)
						} else {
							backends1.OpenTelemetry.Attributes[attributesCount].Key = attributes1.Key
							backends1.OpenTelemetry.Attributes[attributesCount].Value = attributes1.Value
						}
					}
					if backendsItem.OpenTelemetry.Body == nil {
						backends1.OpenTelemetry.Body = types.StringNull()
					} else {
						bodyResult, _ := json.Marshal(backendsItem.OpenTelemetry.Body)
						backends1.OpenTelemetry.Body = types.StringValue(string(bodyResult))
					}
					backends1.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
				}
				if backendsItem.TCP == nil {
					backends1.TCP = nil
				} else {
					backends1.TCP = &tfTypes.MeshAccessLogItemSpecFromTCP{}
					backends1.TCP.Address = types.StringValue(backendsItem.TCP.Address)
					if backendsItem.TCP.Format == nil {
						backends1.TCP.Format = nil
					} else {
						backends1.TCP.Format = &tfTypes.Format{}
						backends1.TCP.Format.JSON = []tfTypes.JSON{}
						for jsonCount1, jsonItem1 := range backendsItem.TCP.Format.JSON {
							var json3 tfTypes.JSON
							json3.Key = types.StringValue(jsonItem1.Key)
							json3.Value = types.StringValue(jsonItem1.Value)
							if jsonCount1+1 > len(backends1.TCP.Format.JSON) {
								backends1.TCP.Format.JSON = append(backends1.TCP.Format.JSON, json3)
							} else {
								backends1.TCP.Format.JSON[jsonCount1].Key = json3.Key
								backends1.TCP.Format.JSON[jsonCount1].Value = json3.Value
							}
						}
						backends1.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem.TCP.Format.OmitEmptyValues)
						backends1.TCP.Format.Plain = types.StringPointerValue(backendsItem.TCP.Format.Plain)
						backends1.TCP.Format.Type = types.StringValue(string(backendsItem.TCP.Format.Type))
					}
				}
				backends1.Type = types.StringValue(string(backendsItem.Type))
				if backendsCount+1 > len(from1.Default.Backends) {
					from1.Default.Backends = append(from1.Default.Backends, backends1)
				} else {
					from1.Default.Backends[backendsCount].File = backends1.File
					from1.Default.Backends[backendsCount].OpenTelemetry = backends1.OpenTelemetry
					from1.Default.Backends[backendsCount].TCP = backends1.TCP
					from1.Default.Backends[backendsCount].Type = backends1.Type
				}
			}
			if fromItem.TargetRef.Kind != nil {
				from1.TargetRef.Kind = types.StringValue(string(*fromItem.TargetRef.Kind))
			} else {
				from1.TargetRef.Kind = types.StringNull()
			}
			if len(fromItem.TargetRef.Labels) > 0 {
				from1.TargetRef.Labels = make(map[string]types.String)
				for key4, value4 := range fromItem.TargetRef.Labels {
					from1.TargetRef.Labels[key4] = types.StringValue(value4)
				}
			}
			from1.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from1.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from1.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from1.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from1.TargetRef.ProxyTypes = append(from1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from1.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from1.TargetRef.Tags = make(map[string]types.String)
				for key5, value5 := range fromItem.TargetRef.Tags {
					from1.TargetRef.Tags[key5] = types.StringValue(value5)
				}
			}
			if fromCount+1 > len(r.Spec.From) {
				r.Spec.From = append(r.Spec.From, from1)
			} else {
				r.Spec.From[fromCount].Default = from1.Default
				r.Spec.From[fromCount].TargetRef = from1.TargetRef
			}
		}
		r.Spec.Rules = []tfTypes.Rules{}
		if len(r.Spec.Rules) > len(resp.Spec.Rules) {
			r.Spec.Rules = r.Spec.Rules[:len(resp.Spec.Rules)]
		}
		for rulesCount, rulesItem := range resp.Spec.Rules {
			var rules1 tfTypes.Rules
			rules1.Default.Backends = []tfTypes.MeshAccessLogItemBackends{}
			for backendsCount1, backendsItem1 := range rulesItem.Default.Backends {
				var backends3 tfTypes.MeshAccessLogItemBackends
				if backendsItem1.File == nil {
					backends3.File = nil
				} else {
					backends3.File = &tfTypes.File{}
					if backendsItem1.File.Format == nil {
						backends3.File.Format = nil
					} else {
						backends3.File.Format = &tfTypes.Format{}
						backends3.File.Format.JSON = []tfTypes.JSON{}
						for jsonCount2, jsonItem2 := range backendsItem1.File.Format.JSON {
							var json5 tfTypes.JSON
							json5.Key = types.StringValue(jsonItem2.Key)
							json5.Value = types.StringValue(jsonItem2.Value)
							if jsonCount2+1 > len(backends3.File.Format.JSON) {
								backends3.File.Format.JSON = append(backends3.File.Format.JSON, json5)
							} else {
								backends3.File.Format.JSON[jsonCount2].Key = json5.Key
								backends3.File.Format.JSON[jsonCount2].Value = json5.Value
							}
						}
						backends3.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem1.File.Format.OmitEmptyValues)
						backends3.File.Format.Plain = types.StringPointerValue(backendsItem1.File.Format.Plain)
						backends3.File.Format.Type = types.StringValue(string(backendsItem1.File.Format.Type))
					}
					backends3.File.Path = types.StringValue(backendsItem1.File.Path)
				}
				if backendsItem1.OpenTelemetry == nil {
					backends3.OpenTelemetry = nil
				} else {
					backends3.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecFromOpenTelemetry{}
					backends3.OpenTelemetry.Attributes = []tfTypes.JSON{}
					for attributesCount1, attributesItem1 := range backendsItem1.OpenTelemetry.Attributes {
						var attributes3 tfTypes.JSON
						attributes3.Key = types.StringValue(attributesItem1.Key)
						attributes3.Value = types.StringValue(attributesItem1.Value)
						if attributesCount1+1 > len(backends3.OpenTelemetry.Attributes) {
							backends3.OpenTelemetry.Attributes = append(backends3.OpenTelemetry.Attributes, attributes3)
						} else {
							backends3.OpenTelemetry.Attributes[attributesCount1].Key = attributes3.Key
							backends3.OpenTelemetry.Attributes[attributesCount1].Value = attributes3.Value
						}
					}
					if backendsItem1.OpenTelemetry.Body == nil {
						backends3.OpenTelemetry.Body = types.StringNull()
					} else {
						bodyResult1, _ := json.Marshal(backendsItem1.OpenTelemetry.Body)
						backends3.OpenTelemetry.Body = types.StringValue(string(bodyResult1))
					}
					backends3.OpenTelemetry.Endpoint = types.StringValue(backendsItem1.OpenTelemetry.Endpoint)
				}
				if backendsItem1.TCP == nil {
					backends3.TCP = nil
				} else {
					backends3.TCP = &tfTypes.MeshAccessLogItemSpecFromTCP{}
					backends3.TCP.Address = types.StringValue(backendsItem1.TCP.Address)
					if backendsItem1.TCP.Format == nil {
						backends3.TCP.Format = nil
					} else {
						backends3.TCP.Format = &tfTypes.Format{}
						backends3.TCP.Format.JSON = []tfTypes.JSON{}
						for jsonCount3, jsonItem3 := range backendsItem1.TCP.Format.JSON {
							var json7 tfTypes.JSON
							json7.Key = types.StringValue(jsonItem3.Key)
							json7.Value = types.StringValue(jsonItem3.Value)
							if jsonCount3+1 > len(backends3.TCP.Format.JSON) {
								backends3.TCP.Format.JSON = append(backends3.TCP.Format.JSON, json7)
							} else {
								backends3.TCP.Format.JSON[jsonCount3].Key = json7.Key
								backends3.TCP.Format.JSON[jsonCount3].Value = json7.Value
							}
						}
						backends3.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem1.TCP.Format.OmitEmptyValues)
						backends3.TCP.Format.Plain = types.StringPointerValue(backendsItem1.TCP.Format.Plain)
						backends3.TCP.Format.Type = types.StringValue(string(backendsItem1.TCP.Format.Type))
					}
				}
				backends3.Type = types.StringValue(string(backendsItem1.Type))
				if backendsCount1+1 > len(rules1.Default.Backends) {
					rules1.Default.Backends = append(rules1.Default.Backends, backends3)
				} else {
					rules1.Default.Backends[backendsCount1].File = backends3.File
					rules1.Default.Backends[backendsCount1].OpenTelemetry = backends3.OpenTelemetry
					rules1.Default.Backends[backendsCount1].TCP = backends3.TCP
					rules1.Default.Backends[backendsCount1].Type = backends3.Type
				}
			}
			if rulesCount+1 > len(r.Spec.Rules) {
				r.Spec.Rules = append(r.Spec.Rules, rules1)
			} else {
				r.Spec.Rules[rulesCount].Default = rules1.Default
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			if resp.Spec.TargetRef.Kind != nil {
				r.Spec.TargetRef.Kind = types.StringValue(string(*resp.Spec.TargetRef.Kind))
			} else {
				r.Spec.TargetRef.Kind = types.StringNull()
			}
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key9, value9 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key9] = types.StringValue(value9)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key10, value10 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key10] = types.StringValue(value10)
				}
			}
		}
		r.Spec.To = []tfTypes.From{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to1 tfTypes.From
			to1.Default.Backends = []tfTypes.MeshAccessLogItemBackends{}
			for backendsCount2, backendsItem2 := range toItem.Default.Backends {
				var backends5 tfTypes.MeshAccessLogItemBackends
				if backendsItem2.File == nil {
					backends5.File = nil
				} else {
					backends5.File = &tfTypes.File{}
					if backendsItem2.File.Format == nil {
						backends5.File.Format = nil
					} else {
						backends5.File.Format = &tfTypes.Format{}
						backends5.File.Format.JSON = []tfTypes.JSON{}
						for jsonCount4, jsonItem4 := range backendsItem2.File.Format.JSON {
							var json9 tfTypes.JSON
							json9.Key = types.StringValue(jsonItem4.Key)
							json9.Value = types.StringValue(jsonItem4.Value)
							if jsonCount4+1 > len(backends5.File.Format.JSON) {
								backends5.File.Format.JSON = append(backends5.File.Format.JSON, json9)
							} else {
								backends5.File.Format.JSON[jsonCount4].Key = json9.Key
								backends5.File.Format.JSON[jsonCount4].Value = json9.Value
							}
						}
						backends5.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem2.File.Format.OmitEmptyValues)
						backends5.File.Format.Plain = types.StringPointerValue(backendsItem2.File.Format.Plain)
						backends5.File.Format.Type = types.StringValue(string(backendsItem2.File.Format.Type))
					}
					backends5.File.Path = types.StringValue(backendsItem2.File.Path)
				}
				if backendsItem2.OpenTelemetry == nil {
					backends5.OpenTelemetry = nil
				} else {
					backends5.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecFromOpenTelemetry{}
					backends5.OpenTelemetry.Attributes = []tfTypes.JSON{}
					for attributesCount2, attributesItem2 := range backendsItem2.OpenTelemetry.Attributes {
						var attributes5 tfTypes.JSON
						attributes5.Key = types.StringValue(attributesItem2.Key)
						attributes5.Value = types.StringValue(attributesItem2.Value)
						if attributesCount2+1 > len(backends5.OpenTelemetry.Attributes) {
							backends5.OpenTelemetry.Attributes = append(backends5.OpenTelemetry.Attributes, attributes5)
						} else {
							backends5.OpenTelemetry.Attributes[attributesCount2].Key = attributes5.Key
							backends5.OpenTelemetry.Attributes[attributesCount2].Value = attributes5.Value
						}
					}
					if backendsItem2.OpenTelemetry.Body == nil {
						backends5.OpenTelemetry.Body = types.StringNull()
					} else {
						bodyResult2, _ := json.Marshal(backendsItem2.OpenTelemetry.Body)
						backends5.OpenTelemetry.Body = types.StringValue(string(bodyResult2))
					}
					backends5.OpenTelemetry.Endpoint = types.StringValue(backendsItem2.OpenTelemetry.Endpoint)
				}
				if backendsItem2.TCP == nil {
					backends5.TCP = nil
				} else {
					backends5.TCP = &tfTypes.MeshAccessLogItemSpecFromTCP{}
					backends5.TCP.Address = types.StringValue(backendsItem2.TCP.Address)
					if backendsItem2.TCP.Format == nil {
						backends5.TCP.Format = nil
					} else {
						backends5.TCP.Format = &tfTypes.Format{}
						backends5.TCP.Format.JSON = []tfTypes.JSON{}
						for jsonCount5, jsonItem5 := range backendsItem2.TCP.Format.JSON {
							var json11 tfTypes.JSON
							json11.Key = types.StringValue(jsonItem5.Key)
							json11.Value = types.StringValue(jsonItem5.Value)
							if jsonCount5+1 > len(backends5.TCP.Format.JSON) {
								backends5.TCP.Format.JSON = append(backends5.TCP.Format.JSON, json11)
							} else {
								backends5.TCP.Format.JSON[jsonCount5].Key = json11.Key
								backends5.TCP.Format.JSON[jsonCount5].Value = json11.Value
							}
						}
						backends5.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem2.TCP.Format.OmitEmptyValues)
						backends5.TCP.Format.Plain = types.StringPointerValue(backendsItem2.TCP.Format.Plain)
						backends5.TCP.Format.Type = types.StringValue(string(backendsItem2.TCP.Format.Type))
					}
				}
				backends5.Type = types.StringValue(string(backendsItem2.Type))
				if backendsCount2+1 > len(to1.Default.Backends) {
					to1.Default.Backends = append(to1.Default.Backends, backends5)
				} else {
					to1.Default.Backends[backendsCount2].File = backends5.File
					to1.Default.Backends[backendsCount2].OpenTelemetry = backends5.OpenTelemetry
					to1.Default.Backends[backendsCount2].TCP = backends5.TCP
					to1.Default.Backends[backendsCount2].Type = backends5.Type
				}
			}
			if toItem.TargetRef.Kind != nil {
				to1.TargetRef.Kind = types.StringValue(string(*toItem.TargetRef.Kind))
			} else {
				to1.TargetRef.Kind = types.StringNull()
			}
			if len(toItem.TargetRef.Labels) > 0 {
				to1.TargetRef.Labels = make(map[string]types.String)
				for key14, value14 := range toItem.TargetRef.Labels {
					to1.TargetRef.Labels[key14] = types.StringValue(value14)
				}
			}
			to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to1.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to1.TargetRef.Tags = make(map[string]types.String)
				for key15, value15 := range toItem.TargetRef.Tags {
					to1.TargetRef.Tags[key15] = types.StringValue(value15)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to1)
			} else {
				r.Spec.To[toCount].Default = to1.Default
				r.Spec.To[toCount].TargetRef = to1.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
