// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshAccessLogResourceModel) ToSharedMeshAccessLogItem() *shared.MeshAccessLogItem {
	typeVar := shared.MeshAccessLogItemType(r.Type.ValueString())
	mesh := new(string)
	if !r.Mesh.IsUnknown() && !r.Mesh.IsNull() {
		*mesh = r.Mesh.ValueString()
	} else {
		mesh = nil
	}
	var name string
	name = r.Name.ValueString()

	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var from []shared.From = []shared.From{}
	for _, fromItem := range r.Spec.From {
		var defaultVar *shared.MeshAccessLogItemSpecDefault
		if fromItem.Default != nil {
			var backends []shared.MeshAccessLogItemBackends = []shared.MeshAccessLogItemBackends{}
			for _, backendsItem := range fromItem.Default.Backends {
				var file *shared.File
				if backendsItem.File != nil {
					var format *shared.Format
					if backendsItem.File.Format != nil {
						var json []shared.JSON = []shared.JSON{}
						for _, jsonItem := range backendsItem.File.Format.JSON {
							key := new(string)
							if !jsonItem.Key.IsUnknown() && !jsonItem.Key.IsNull() {
								*key = jsonItem.Key.ValueString()
							} else {
								key = nil
							}
							value := new(string)
							if !jsonItem.Value.IsUnknown() && !jsonItem.Value.IsNull() {
								*value = jsonItem.Value.ValueString()
							} else {
								value = nil
							}
							json = append(json, shared.JSON{
								Key:   key,
								Value: value,
							})
						}
						omitEmptyValues := new(bool)
						if !backendsItem.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem.File.Format.OmitEmptyValues.IsNull() {
							*omitEmptyValues = backendsItem.File.Format.OmitEmptyValues.ValueBool()
						} else {
							omitEmptyValues = nil
						}
						plain := new(string)
						if !backendsItem.File.Format.Plain.IsUnknown() && !backendsItem.File.Format.Plain.IsNull() {
							*plain = backendsItem.File.Format.Plain.ValueString()
						} else {
							plain = nil
						}
						typeVar1 := shared.MeshAccessLogItemSpecFromDefaultType(backendsItem.File.Format.Type.ValueString())
						format = &shared.Format{
							JSON:            json,
							OmitEmptyValues: omitEmptyValues,
							Plain:           plain,
							Type:            typeVar1,
						}
					}
					var path string
					path = backendsItem.File.Path.ValueString()

					file = &shared.File{
						Format: format,
						Path:   path,
					}
				}
				var openTelemetry *shared.MeshAccessLogItemSpecOpenTelemetry
				if backendsItem.OpenTelemetry != nil {
					var attributes []shared.Attributes = []shared.Attributes{}
					for _, attributesItem := range backendsItem.OpenTelemetry.Attributes {
						key1 := new(string)
						if !attributesItem.Key.IsUnknown() && !attributesItem.Key.IsNull() {
							*key1 = attributesItem.Key.ValueString()
						} else {
							key1 = nil
						}
						value1 := new(string)
						if !attributesItem.Value.IsUnknown() && !attributesItem.Value.IsNull() {
							*value1 = attributesItem.Value.ValueString()
						} else {
							value1 = nil
						}
						attributes = append(attributes, shared.Attributes{
							Key:   key1,
							Value: value1,
						})
					}
					var body interface{}
					if !backendsItem.OpenTelemetry.Body.IsUnknown() && !backendsItem.OpenTelemetry.Body.IsNull() {
						_ = json.Unmarshal([]byte(backendsItem.OpenTelemetry.Body.ValueString()), &body)
					}
					var endpoint string
					endpoint = backendsItem.OpenTelemetry.Endpoint.ValueString()

					openTelemetry = &shared.MeshAccessLogItemSpecOpenTelemetry{
						Attributes: attributes,
						Body:       body,
						Endpoint:   endpoint,
					}
				}
				var tcp *shared.MeshAccessLogItemSpecTCP
				if backendsItem.TCP != nil {
					var address string
					address = backendsItem.TCP.Address.ValueString()

					var format1 *shared.MeshAccessLogItemFormat
					if backendsItem.TCP.Format != nil {
						var json1 []shared.MeshAccessLogItemJSON = []shared.MeshAccessLogItemJSON{}
						for _, jsonItem1 := range backendsItem.TCP.Format.JSON {
							key2 := new(string)
							if !jsonItem1.Key.IsUnknown() && !jsonItem1.Key.IsNull() {
								*key2 = jsonItem1.Key.ValueString()
							} else {
								key2 = nil
							}
							value2 := new(string)
							if !jsonItem1.Value.IsUnknown() && !jsonItem1.Value.IsNull() {
								*value2 = jsonItem1.Value.ValueString()
							} else {
								value2 = nil
							}
							json1 = append(json1, shared.MeshAccessLogItemJSON{
								Key:   key2,
								Value: value2,
							})
						}
						omitEmptyValues1 := new(bool)
						if !backendsItem.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem.TCP.Format.OmitEmptyValues.IsNull() {
							*omitEmptyValues1 = backendsItem.TCP.Format.OmitEmptyValues.ValueBool()
						} else {
							omitEmptyValues1 = nil
						}
						plain1 := new(string)
						if !backendsItem.TCP.Format.Plain.IsUnknown() && !backendsItem.TCP.Format.Plain.IsNull() {
							*plain1 = backendsItem.TCP.Format.Plain.ValueString()
						} else {
							plain1 = nil
						}
						typeVar2 := shared.MeshAccessLogItemSpecFromType(backendsItem.TCP.Format.Type.ValueString())
						format1 = &shared.MeshAccessLogItemFormat{
							JSON:            json1,
							OmitEmptyValues: omitEmptyValues1,
							Plain:           plain1,
							Type:            typeVar2,
						}
					}
					tcp = &shared.MeshAccessLogItemSpecTCP{
						Address: address,
						Format:  format1,
					}
				}
				type1 := shared.MeshAccessLogItemSpecType(backendsItem.Type.ValueString())
				backends = append(backends, shared.MeshAccessLogItemBackends{
					File:          file,
					OpenTelemetry: openTelemetry,
					TCP:           tcp,
					Type:          type1,
				})
			}
			defaultVar = &shared.MeshAccessLogItemSpecDefault{
				Backends: backends,
			}
		}
		kind := new(shared.MeshAccessLogItemSpecFromKind)
		if !fromItem.TargetRef.Kind.IsUnknown() && !fromItem.TargetRef.Kind.IsNull() {
			*kind = shared.MeshAccessLogItemSpecFromKind(fromItem.TargetRef.Kind.ValueString())
		} else {
			kind = nil
		}
		labels1 := make(map[string]string)
		for labelsKey1, labelsValue1 := range fromItem.TargetRef.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels1[labelsKey1] = labelsInst1
		}
		mesh1 := new(string)
		if !fromItem.TargetRef.Mesh.IsUnknown() && !fromItem.TargetRef.Mesh.IsNull() {
			*mesh1 = fromItem.TargetRef.Mesh.ValueString()
		} else {
			mesh1 = nil
		}
		name1 := new(string)
		if !fromItem.TargetRef.Name.IsUnknown() && !fromItem.TargetRef.Name.IsNull() {
			*name1 = fromItem.TargetRef.Name.ValueString()
		} else {
			name1 = nil
		}
		namespace := new(string)
		if !fromItem.TargetRef.Namespace.IsUnknown() && !fromItem.TargetRef.Namespace.IsNull() {
			*namespace = fromItem.TargetRef.Namespace.ValueString()
		} else {
			namespace = nil
		}
		var proxyTypes []shared.MeshAccessLogItemProxyTypes = []shared.MeshAccessLogItemProxyTypes{}
		for _, proxyTypesItem := range fromItem.TargetRef.ProxyTypes {
			proxyTypes = append(proxyTypes, shared.MeshAccessLogItemProxyTypes(proxyTypesItem.ValueString()))
		}
		sectionName := new(string)
		if !fromItem.TargetRef.SectionName.IsUnknown() && !fromItem.TargetRef.SectionName.IsNull() {
			*sectionName = fromItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName = nil
		}
		tags := make(map[string]string)
		for tagsKey, tagsValue := range fromItem.TargetRef.Tags {
			var tagsInst string
			tagsInst = tagsValue.ValueString()

			tags[tagsKey] = tagsInst
		}
		targetRef := shared.MeshAccessLogItemTargetRef{
			Kind:        kind,
			Labels:      labels1,
			Mesh:        mesh1,
			Name:        name1,
			Namespace:   namespace,
			ProxyTypes:  proxyTypes,
			SectionName: sectionName,
			Tags:        tags,
		}
		from = append(from, shared.From{
			Default:   defaultVar,
			TargetRef: targetRef,
		})
	}
	var targetRef1 *shared.TargetRef
	if r.Spec.TargetRef != nil {
		kind1 := new(shared.MeshAccessLogItemKind)
		if !r.Spec.TargetRef.Kind.IsUnknown() && !r.Spec.TargetRef.Kind.IsNull() {
			*kind1 = shared.MeshAccessLogItemKind(r.Spec.TargetRef.Kind.ValueString())
		} else {
			kind1 = nil
		}
		labels2 := make(map[string]string)
		for labelsKey2, labelsValue2 := range r.Spec.TargetRef.Labels {
			var labelsInst2 string
			labelsInst2 = labelsValue2.ValueString()

			labels2[labelsKey2] = labelsInst2
		}
		mesh2 := new(string)
		if !r.Spec.TargetRef.Mesh.IsUnknown() && !r.Spec.TargetRef.Mesh.IsNull() {
			*mesh2 = r.Spec.TargetRef.Mesh.ValueString()
		} else {
			mesh2 = nil
		}
		name2 := new(string)
		if !r.Spec.TargetRef.Name.IsUnknown() && !r.Spec.TargetRef.Name.IsNull() {
			*name2 = r.Spec.TargetRef.Name.ValueString()
		} else {
			name2 = nil
		}
		namespace1 := new(string)
		if !r.Spec.TargetRef.Namespace.IsUnknown() && !r.Spec.TargetRef.Namespace.IsNull() {
			*namespace1 = r.Spec.TargetRef.Namespace.ValueString()
		} else {
			namespace1 = nil
		}
		var proxyTypes1 []shared.ProxyTypes = []shared.ProxyTypes{}
		for _, proxyTypesItem1 := range r.Spec.TargetRef.ProxyTypes {
			proxyTypes1 = append(proxyTypes1, shared.ProxyTypes(proxyTypesItem1.ValueString()))
		}
		sectionName1 := new(string)
		if !r.Spec.TargetRef.SectionName.IsUnknown() && !r.Spec.TargetRef.SectionName.IsNull() {
			*sectionName1 = r.Spec.TargetRef.SectionName.ValueString()
		} else {
			sectionName1 = nil
		}
		tags1 := make(map[string]string)
		for tagsKey1, tagsValue1 := range r.Spec.TargetRef.Tags {
			var tagsInst1 string
			tagsInst1 = tagsValue1.ValueString()

			tags1[tagsKey1] = tagsInst1
		}
		targetRef1 = &shared.TargetRef{
			Kind:        kind1,
			Labels:      labels2,
			Mesh:        mesh2,
			Name:        name2,
			Namespace:   namespace1,
			ProxyTypes:  proxyTypes1,
			SectionName: sectionName1,
			Tags:        tags1,
		}
	}
	var to []shared.To = []shared.To{}
	for _, toItem := range r.Spec.To {
		var default1 *shared.MeshAccessLogItemDefault
		if toItem.Default != nil {
			var backends1 []shared.MeshAccessLogItemSpecBackends = []shared.MeshAccessLogItemSpecBackends{}
			for _, backendsItem1 := range toItem.Default.Backends {
				var file1 *shared.MeshAccessLogItemFile
				if backendsItem1.File != nil {
					var format2 *shared.MeshAccessLogItemSpecFormat
					if backendsItem1.File.Format != nil {
						var json2 []shared.MeshAccessLogItemSpecJSON = []shared.MeshAccessLogItemSpecJSON{}
						for _, jsonItem2 := range backendsItem1.File.Format.JSON {
							key3 := new(string)
							if !jsonItem2.Key.IsUnknown() && !jsonItem2.Key.IsNull() {
								*key3 = jsonItem2.Key.ValueString()
							} else {
								key3 = nil
							}
							value3 := new(string)
							if !jsonItem2.Value.IsUnknown() && !jsonItem2.Value.IsNull() {
								*value3 = jsonItem2.Value.ValueString()
							} else {
								value3 = nil
							}
							json2 = append(json2, shared.MeshAccessLogItemSpecJSON{
								Key:   key3,
								Value: value3,
							})
						}
						omitEmptyValues2 := new(bool)
						if !backendsItem1.File.Format.OmitEmptyValues.IsUnknown() && !backendsItem1.File.Format.OmitEmptyValues.IsNull() {
							*omitEmptyValues2 = backendsItem1.File.Format.OmitEmptyValues.ValueBool()
						} else {
							omitEmptyValues2 = nil
						}
						plain2 := new(string)
						if !backendsItem1.File.Format.Plain.IsUnknown() && !backendsItem1.File.Format.Plain.IsNull() {
							*plain2 = backendsItem1.File.Format.Plain.ValueString()
						} else {
							plain2 = nil
						}
						typeVar3 := shared.MeshAccessLogItemSpecToDefaultBackendsType(backendsItem1.File.Format.Type.ValueString())
						format2 = &shared.MeshAccessLogItemSpecFormat{
							JSON:            json2,
							OmitEmptyValues: omitEmptyValues2,
							Plain:           plain2,
							Type:            typeVar3,
						}
					}
					var path1 string
					path1 = backendsItem1.File.Path.ValueString()

					file1 = &shared.MeshAccessLogItemFile{
						Format: format2,
						Path:   path1,
					}
				}
				var openTelemetry1 *shared.MeshAccessLogItemOpenTelemetry
				if backendsItem1.OpenTelemetry != nil {
					var attributes1 []shared.MeshAccessLogItemAttributes = []shared.MeshAccessLogItemAttributes{}
					for _, attributesItem1 := range backendsItem1.OpenTelemetry.Attributes {
						key4 := new(string)
						if !attributesItem1.Key.IsUnknown() && !attributesItem1.Key.IsNull() {
							*key4 = attributesItem1.Key.ValueString()
						} else {
							key4 = nil
						}
						value4 := new(string)
						if !attributesItem1.Value.IsUnknown() && !attributesItem1.Value.IsNull() {
							*value4 = attributesItem1.Value.ValueString()
						} else {
							value4 = nil
						}
						attributes1 = append(attributes1, shared.MeshAccessLogItemAttributes{
							Key:   key4,
							Value: value4,
						})
					}
					var body1 interface{}
					if !backendsItem1.OpenTelemetry.Body.IsUnknown() && !backendsItem1.OpenTelemetry.Body.IsNull() {
						_ = json.Unmarshal([]byte(backendsItem1.OpenTelemetry.Body.ValueString()), &body1)
					}
					var endpoint1 string
					endpoint1 = backendsItem1.OpenTelemetry.Endpoint.ValueString()

					openTelemetry1 = &shared.MeshAccessLogItemOpenTelemetry{
						Attributes: attributes1,
						Body:       body1,
						Endpoint:   endpoint1,
					}
				}
				var tcp1 *shared.MeshAccessLogItemTCP
				if backendsItem1.TCP != nil {
					var address1 string
					address1 = backendsItem1.TCP.Address.ValueString()

					var format3 *shared.MeshAccessLogItemSpecToFormat
					if backendsItem1.TCP.Format != nil {
						var json3 []shared.MeshAccessLogItemSpecToJSON = []shared.MeshAccessLogItemSpecToJSON{}
						for _, jsonItem3 := range backendsItem1.TCP.Format.JSON {
							key5 := new(string)
							if !jsonItem3.Key.IsUnknown() && !jsonItem3.Key.IsNull() {
								*key5 = jsonItem3.Key.ValueString()
							} else {
								key5 = nil
							}
							value5 := new(string)
							if !jsonItem3.Value.IsUnknown() && !jsonItem3.Value.IsNull() {
								*value5 = jsonItem3.Value.ValueString()
							} else {
								value5 = nil
							}
							json3 = append(json3, shared.MeshAccessLogItemSpecToJSON{
								Key:   key5,
								Value: value5,
							})
						}
						omitEmptyValues3 := new(bool)
						if !backendsItem1.TCP.Format.OmitEmptyValues.IsUnknown() && !backendsItem1.TCP.Format.OmitEmptyValues.IsNull() {
							*omitEmptyValues3 = backendsItem1.TCP.Format.OmitEmptyValues.ValueBool()
						} else {
							omitEmptyValues3 = nil
						}
						plain3 := new(string)
						if !backendsItem1.TCP.Format.Plain.IsUnknown() && !backendsItem1.TCP.Format.Plain.IsNull() {
							*plain3 = backendsItem1.TCP.Format.Plain.ValueString()
						} else {
							plain3 = nil
						}
						typeVar4 := shared.MeshAccessLogItemSpecToDefaultType(backendsItem1.TCP.Format.Type.ValueString())
						format3 = &shared.MeshAccessLogItemSpecToFormat{
							JSON:            json3,
							OmitEmptyValues: omitEmptyValues3,
							Plain:           plain3,
							Type:            typeVar4,
						}
					}
					tcp1 = &shared.MeshAccessLogItemTCP{
						Address: address1,
						Format:  format3,
					}
				}
				type2 := shared.MeshAccessLogItemSpecToType(backendsItem1.Type.ValueString())
				backends1 = append(backends1, shared.MeshAccessLogItemSpecBackends{
					File:          file1,
					OpenTelemetry: openTelemetry1,
					TCP:           tcp1,
					Type:          type2,
				})
			}
			default1 = &shared.MeshAccessLogItemDefault{
				Backends: backends1,
			}
		}
		kind2 := new(shared.MeshAccessLogItemSpecKind)
		if !toItem.TargetRef.Kind.IsUnknown() && !toItem.TargetRef.Kind.IsNull() {
			*kind2 = shared.MeshAccessLogItemSpecKind(toItem.TargetRef.Kind.ValueString())
		} else {
			kind2 = nil
		}
		labels3 := make(map[string]string)
		for labelsKey3, labelsValue3 := range toItem.TargetRef.Labels {
			var labelsInst3 string
			labelsInst3 = labelsValue3.ValueString()

			labels3[labelsKey3] = labelsInst3
		}
		mesh3 := new(string)
		if !toItem.TargetRef.Mesh.IsUnknown() && !toItem.TargetRef.Mesh.IsNull() {
			*mesh3 = toItem.TargetRef.Mesh.ValueString()
		} else {
			mesh3 = nil
		}
		name3 := new(string)
		if !toItem.TargetRef.Name.IsUnknown() && !toItem.TargetRef.Name.IsNull() {
			*name3 = toItem.TargetRef.Name.ValueString()
		} else {
			name3 = nil
		}
		namespace2 := new(string)
		if !toItem.TargetRef.Namespace.IsUnknown() && !toItem.TargetRef.Namespace.IsNull() {
			*namespace2 = toItem.TargetRef.Namespace.ValueString()
		} else {
			namespace2 = nil
		}
		var proxyTypes2 []shared.MeshAccessLogItemSpecProxyTypes = []shared.MeshAccessLogItemSpecProxyTypes{}
		for _, proxyTypesItem2 := range toItem.TargetRef.ProxyTypes {
			proxyTypes2 = append(proxyTypes2, shared.MeshAccessLogItemSpecProxyTypes(proxyTypesItem2.ValueString()))
		}
		sectionName2 := new(string)
		if !toItem.TargetRef.SectionName.IsUnknown() && !toItem.TargetRef.SectionName.IsNull() {
			*sectionName2 = toItem.TargetRef.SectionName.ValueString()
		} else {
			sectionName2 = nil
		}
		tags2 := make(map[string]string)
		for tagsKey2, tagsValue2 := range toItem.TargetRef.Tags {
			var tagsInst2 string
			tagsInst2 = tagsValue2.ValueString()

			tags2[tagsKey2] = tagsInst2
		}
		targetRef2 := shared.MeshAccessLogItemSpecTargetRef{
			Kind:        kind2,
			Labels:      labels3,
			Mesh:        mesh3,
			Name:        name3,
			Namespace:   namespace2,
			ProxyTypes:  proxyTypes2,
			SectionName: sectionName2,
			Tags:        tags2,
		}
		to = append(to, shared.To{
			Default:   default1,
			TargetRef: targetRef2,
		})
	}
	spec := shared.MeshAccessLogItemSpec{
		From:      from,
		TargetRef: targetRef1,
		To:        to,
	}
	creationTime := new(time.Time)
	if !r.CreationTime.IsUnknown() && !r.CreationTime.IsNull() {
		*creationTime, _ = time.Parse(time.RFC3339Nano, r.CreationTime.ValueString())
	} else {
		creationTime = nil
	}
	modificationTime := new(time.Time)
	if !r.ModificationTime.IsUnknown() && !r.ModificationTime.IsNull() {
		*modificationTime, _ = time.Parse(time.RFC3339Nano, r.ModificationTime.ValueString())
	} else {
		modificationTime = nil
	}
	out := shared.MeshAccessLogItem{
		Type:             typeVar,
		Mesh:             mesh,
		Name:             name,
		Labels:           labels,
		Spec:             spec,
		CreationTime:     creationTime,
		ModificationTime: modificationTime,
	}
	return &out
}

func (r *MeshAccessLogResourceModel) RefreshFromSharedMeshAccessLogCreateOrUpdateSuccessResponse(resp *shared.MeshAccessLogCreateOrUpdateSuccessResponse) {
	if resp != nil {
		r.Warnings = []types.String{}
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}
}

func (r *MeshAccessLogResourceModel) RefreshFromSharedMeshAccessLogItem(resp *shared.MeshAccessLogItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.From{}
		if len(r.Spec.From) > len(resp.Spec.From) {
			r.Spec.From = r.Spec.From[:len(resp.Spec.From)]
		}
		for fromCount, fromItem := range resp.Spec.From {
			var from1 tfTypes.From
			if fromItem.Default == nil {
				from1.Default = nil
			} else {
				from1.Default = &tfTypes.MeshAccessLogItemSpecDefault{}
				from1.Default.Backends = []tfTypes.MeshAccessLogItemBackends{}
				for backendsCount, backendsItem := range fromItem.Default.Backends {
					var backends1 tfTypes.MeshAccessLogItemBackends
					if backendsItem.File == nil {
						backends1.File = nil
					} else {
						backends1.File = &tfTypes.File{}
						if backendsItem.File.Format == nil {
							backends1.File.Format = nil
						} else {
							backends1.File.Format = &tfTypes.Format{}
							backends1.File.Format.JSON = []tfTypes.JSON{}
							for jsonCount, jsonItem := range backendsItem.File.Format.JSON {
								var json1 tfTypes.JSON
								json1.Key = types.StringPointerValue(jsonItem.Key)
								json1.Value = types.StringPointerValue(jsonItem.Value)
								if jsonCount+1 > len(backends1.File.Format.JSON) {
									backends1.File.Format.JSON = append(backends1.File.Format.JSON, json1)
								} else {
									backends1.File.Format.JSON[jsonCount].Key = json1.Key
									backends1.File.Format.JSON[jsonCount].Value = json1.Value
								}
							}
							backends1.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem.File.Format.OmitEmptyValues)
							backends1.File.Format.Plain = types.StringPointerValue(backendsItem.File.Format.Plain)
							backends1.File.Format.Type = types.StringValue(string(backendsItem.File.Format.Type))
						}
						backends1.File.Path = types.StringValue(backendsItem.File.Path)
					}
					if backendsItem.OpenTelemetry == nil {
						backends1.OpenTelemetry = nil
					} else {
						backends1.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecOpenTelemetry{}
						backends1.OpenTelemetry.Attributes = []tfTypes.JSON{}
						for attributesCount, attributesItem := range backendsItem.OpenTelemetry.Attributes {
							var attributes1 tfTypes.JSON
							attributes1.Key = types.StringPointerValue(attributesItem.Key)
							attributes1.Value = types.StringPointerValue(attributesItem.Value)
							if attributesCount+1 > len(backends1.OpenTelemetry.Attributes) {
								backends1.OpenTelemetry.Attributes = append(backends1.OpenTelemetry.Attributes, attributes1)
							} else {
								backends1.OpenTelemetry.Attributes[attributesCount].Key = attributes1.Key
								backends1.OpenTelemetry.Attributes[attributesCount].Value = attributes1.Value
							}
						}
						if backendsItem.OpenTelemetry.Body == nil {
							backends1.OpenTelemetry.Body = types.StringNull()
						} else {
							bodyResult, _ := json.Marshal(backendsItem.OpenTelemetry.Body)
							backends1.OpenTelemetry.Body = types.StringValue(string(bodyResult))
						}
						backends1.OpenTelemetry.Endpoint = types.StringValue(backendsItem.OpenTelemetry.Endpoint)
					}
					if backendsItem.TCP == nil {
						backends1.TCP = nil
					} else {
						backends1.TCP = &tfTypes.MeshAccessLogItemSpecTCP{}
						backends1.TCP.Address = types.StringValue(backendsItem.TCP.Address)
						if backendsItem.TCP.Format == nil {
							backends1.TCP.Format = nil
						} else {
							backends1.TCP.Format = &tfTypes.Format{}
							backends1.TCP.Format.JSON = []tfTypes.JSON{}
							for jsonCount1, jsonItem1 := range backendsItem.TCP.Format.JSON {
								var json3 tfTypes.JSON
								json3.Key = types.StringPointerValue(jsonItem1.Key)
								json3.Value = types.StringPointerValue(jsonItem1.Value)
								if jsonCount1+1 > len(backends1.TCP.Format.JSON) {
									backends1.TCP.Format.JSON = append(backends1.TCP.Format.JSON, json3)
								} else {
									backends1.TCP.Format.JSON[jsonCount1].Key = json3.Key
									backends1.TCP.Format.JSON[jsonCount1].Value = json3.Value
								}
							}
							backends1.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem.TCP.Format.OmitEmptyValues)
							backends1.TCP.Format.Plain = types.StringPointerValue(backendsItem.TCP.Format.Plain)
							backends1.TCP.Format.Type = types.StringValue(string(backendsItem.TCP.Format.Type))
						}
					}
					backends1.Type = types.StringValue(string(backendsItem.Type))
					if backendsCount+1 > len(from1.Default.Backends) {
						from1.Default.Backends = append(from1.Default.Backends, backends1)
					} else {
						from1.Default.Backends[backendsCount].File = backends1.File
						from1.Default.Backends[backendsCount].OpenTelemetry = backends1.OpenTelemetry
						from1.Default.Backends[backendsCount].TCP = backends1.TCP
						from1.Default.Backends[backendsCount].Type = backends1.Type
					}
				}
			}
			if fromItem.TargetRef.Kind != nil {
				from1.TargetRef.Kind = types.StringValue(string(*fromItem.TargetRef.Kind))
			} else {
				from1.TargetRef.Kind = types.StringNull()
			}
			if len(fromItem.TargetRef.Labels) > 0 {
				from1.TargetRef.Labels = make(map[string]types.String)
				for key4, value4 := range fromItem.TargetRef.Labels {
					from1.TargetRef.Labels[key4] = types.StringValue(value4)
				}
			}
			from1.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from1.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from1.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from1.TargetRef.ProxyTypes = []types.String{}
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from1.TargetRef.ProxyTypes = append(from1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from1.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from1.TargetRef.Tags = make(map[string]types.String)
				for key5, value5 := range fromItem.TargetRef.Tags {
					from1.TargetRef.Tags[key5] = types.StringValue(value5)
				}
			}
			if fromCount+1 > len(r.Spec.From) {
				r.Spec.From = append(r.Spec.From, from1)
			} else {
				r.Spec.From[fromCount].Default = from1.Default
				r.Spec.From[fromCount].TargetRef = from1.TargetRef
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			if resp.Spec.TargetRef.Kind != nil {
				r.Spec.TargetRef.Kind = types.StringValue(string(*resp.Spec.TargetRef.Kind))
			} else {
				r.Spec.TargetRef.Kind = types.StringNull()
			}
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key6, value6 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key6] = types.StringValue(value6)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = []types.String{}
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key7, value7 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key7] = types.StringValue(value7)
				}
			}
		}
		r.Spec.To = []tfTypes.From{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to1 tfTypes.From
			if toItem.Default == nil {
				to1.Default = nil
			} else {
				to1.Default = &tfTypes.MeshAccessLogItemSpecDefault{}
				to1.Default.Backends = []tfTypes.MeshAccessLogItemBackends{}
				for backendsCount1, backendsItem1 := range toItem.Default.Backends {
					var backends3 tfTypes.MeshAccessLogItemBackends
					if backendsItem1.File == nil {
						backends3.File = nil
					} else {
						backends3.File = &tfTypes.File{}
						if backendsItem1.File.Format == nil {
							backends3.File.Format = nil
						} else {
							backends3.File.Format = &tfTypes.Format{}
							backends3.File.Format.JSON = []tfTypes.JSON{}
							for jsonCount2, jsonItem2 := range backendsItem1.File.Format.JSON {
								var json5 tfTypes.JSON
								json5.Key = types.StringPointerValue(jsonItem2.Key)
								json5.Value = types.StringPointerValue(jsonItem2.Value)
								if jsonCount2+1 > len(backends3.File.Format.JSON) {
									backends3.File.Format.JSON = append(backends3.File.Format.JSON, json5)
								} else {
									backends3.File.Format.JSON[jsonCount2].Key = json5.Key
									backends3.File.Format.JSON[jsonCount2].Value = json5.Value
								}
							}
							backends3.File.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem1.File.Format.OmitEmptyValues)
							backends3.File.Format.Plain = types.StringPointerValue(backendsItem1.File.Format.Plain)
							backends3.File.Format.Type = types.StringValue(string(backendsItem1.File.Format.Type))
						}
						backends3.File.Path = types.StringValue(backendsItem1.File.Path)
					}
					if backendsItem1.OpenTelemetry == nil {
						backends3.OpenTelemetry = nil
					} else {
						backends3.OpenTelemetry = &tfTypes.MeshAccessLogItemSpecOpenTelemetry{}
						backends3.OpenTelemetry.Attributes = []tfTypes.JSON{}
						for attributesCount1, attributesItem1 := range backendsItem1.OpenTelemetry.Attributes {
							var attributes3 tfTypes.JSON
							attributes3.Key = types.StringPointerValue(attributesItem1.Key)
							attributes3.Value = types.StringPointerValue(attributesItem1.Value)
							if attributesCount1+1 > len(backends3.OpenTelemetry.Attributes) {
								backends3.OpenTelemetry.Attributes = append(backends3.OpenTelemetry.Attributes, attributes3)
							} else {
								backends3.OpenTelemetry.Attributes[attributesCount1].Key = attributes3.Key
								backends3.OpenTelemetry.Attributes[attributesCount1].Value = attributes3.Value
							}
						}
						if backendsItem1.OpenTelemetry.Body == nil {
							backends3.OpenTelemetry.Body = types.StringNull()
						} else {
							bodyResult1, _ := json.Marshal(backendsItem1.OpenTelemetry.Body)
							backends3.OpenTelemetry.Body = types.StringValue(string(bodyResult1))
						}
						backends3.OpenTelemetry.Endpoint = types.StringValue(backendsItem1.OpenTelemetry.Endpoint)
					}
					if backendsItem1.TCP == nil {
						backends3.TCP = nil
					} else {
						backends3.TCP = &tfTypes.MeshAccessLogItemSpecTCP{}
						backends3.TCP.Address = types.StringValue(backendsItem1.TCP.Address)
						if backendsItem1.TCP.Format == nil {
							backends3.TCP.Format = nil
						} else {
							backends3.TCP.Format = &tfTypes.Format{}
							backends3.TCP.Format.JSON = []tfTypes.JSON{}
							for jsonCount3, jsonItem3 := range backendsItem1.TCP.Format.JSON {
								var json7 tfTypes.JSON
								json7.Key = types.StringPointerValue(jsonItem3.Key)
								json7.Value = types.StringPointerValue(jsonItem3.Value)
								if jsonCount3+1 > len(backends3.TCP.Format.JSON) {
									backends3.TCP.Format.JSON = append(backends3.TCP.Format.JSON, json7)
								} else {
									backends3.TCP.Format.JSON[jsonCount3].Key = json7.Key
									backends3.TCP.Format.JSON[jsonCount3].Value = json7.Value
								}
							}
							backends3.TCP.Format.OmitEmptyValues = types.BoolPointerValue(backendsItem1.TCP.Format.OmitEmptyValues)
							backends3.TCP.Format.Plain = types.StringPointerValue(backendsItem1.TCP.Format.Plain)
							backends3.TCP.Format.Type = types.StringValue(string(backendsItem1.TCP.Format.Type))
						}
					}
					backends3.Type = types.StringValue(string(backendsItem1.Type))
					if backendsCount1+1 > len(to1.Default.Backends) {
						to1.Default.Backends = append(to1.Default.Backends, backends3)
					} else {
						to1.Default.Backends[backendsCount1].File = backends3.File
						to1.Default.Backends[backendsCount1].OpenTelemetry = backends3.OpenTelemetry
						to1.Default.Backends[backendsCount1].TCP = backends3.TCP
						to1.Default.Backends[backendsCount1].Type = backends3.Type
					}
				}
			}
			if toItem.TargetRef.Kind != nil {
				to1.TargetRef.Kind = types.StringValue(string(*toItem.TargetRef.Kind))
			} else {
				to1.TargetRef.Kind = types.StringNull()
			}
			if len(toItem.TargetRef.Labels) > 0 {
				to1.TargetRef.Labels = make(map[string]types.String)
				for key11, value11 := range toItem.TargetRef.Labels {
					to1.TargetRef.Labels[key11] = types.StringValue(value11)
				}
			}
			to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to1.TargetRef.ProxyTypes = []types.String{}
			for _, v := range toItem.TargetRef.ProxyTypes {
				to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to1.TargetRef.Tags = make(map[string]types.String)
				for key12, value12 := range toItem.TargetRef.Tags {
					to1.TargetRef.Tags[key12] = types.StringValue(value12)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to1)
			} else {
				r.Spec.To[toCount].Default = to1.Default
				r.Spec.To[toCount].TargetRef = to1.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
