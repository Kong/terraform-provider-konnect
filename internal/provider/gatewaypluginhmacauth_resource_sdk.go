// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginHmacAuthResourceModel) RefreshFromSharedHmacAuthPlugin(ctx context.Context, resp *shared.HmacAuthPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.HmacAuthPluginConfig{}
			r.Config.Algorithms = make([]types.String, 0, len(resp.Config.Algorithms))
			for _, v := range resp.Config.Algorithms {
				r.Config.Algorithms = append(r.Config.Algorithms, types.StringValue(string(v)))
			}
			r.Config.Anonymous = types.StringPointerValue(resp.Config.Anonymous)
			r.Config.ClockSkew = types.Float64PointerValue(resp.Config.ClockSkew)
			r.Config.EnforceHeaders = make([]types.String, 0, len(resp.Config.EnforceHeaders))
			for _, v := range resp.Config.EnforceHeaders {
				r.Config.EnforceHeaders = append(r.Config.EnforceHeaders, types.StringValue(v))
			}
			r.Config.HideCredentials = types.BoolPointerValue(resp.Config.HideCredentials)
			r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
			r.Config.ValidateRequestBody = types.BoolPointerValue(resp.Config.ValidateRequestBody)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginHmacAuthResourceModel) ToOperationsCreateHmacauthPluginRequest(ctx context.Context) (*operations.CreateHmacauthPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	hmacAuthPlugin, hmacAuthPluginDiags := r.ToSharedHmacAuthPlugin(ctx)
	diags.Append(hmacAuthPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateHmacauthPluginRequest{
		ControlPlaneID: controlPlaneID,
		HmacAuthPlugin: *hmacAuthPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginHmacAuthResourceModel) ToOperationsDeleteHmacauthPluginRequest(ctx context.Context) (*operations.DeleteHmacauthPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteHmacauthPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginHmacAuthResourceModel) ToOperationsGetHmacauthPluginRequest(ctx context.Context) (*operations.GetHmacauthPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetHmacauthPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginHmacAuthResourceModel) ToOperationsUpdateHmacauthPluginRequest(ctx context.Context) (*operations.UpdateHmacauthPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	hmacAuthPlugin, hmacAuthPluginDiags := r.ToSharedHmacAuthPlugin(ctx)
	diags.Append(hmacAuthPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateHmacauthPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
		HmacAuthPlugin: *hmacAuthPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginHmacAuthResourceModel) ToSharedHmacAuthPlugin(ctx context.Context) (*shared.HmacAuthPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.HmacAuthPluginOrdering
	if r.Ordering != nil {
		var after *shared.HmacAuthPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.HmacAuthPluginAfter{
				Access: access,
			}
		}
		var before *shared.HmacAuthPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.HmacAuthPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.HmacAuthPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.HmacAuthPluginPartials
	if r.Partials != nil {
		partials = make([]shared.HmacAuthPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.HmacAuthPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.HmacAuthPluginConfig
	if r.Config != nil {
		algorithms := make([]shared.Algorithms, 0, len(r.Config.Algorithms))
		for _, algorithmsItem := range r.Config.Algorithms {
			algorithms = append(algorithms, shared.Algorithms(algorithmsItem.ValueString()))
		}
		anonymous := new(string)
		if !r.Config.Anonymous.IsUnknown() && !r.Config.Anonymous.IsNull() {
			*anonymous = r.Config.Anonymous.ValueString()
		} else {
			anonymous = nil
		}
		clockSkew := new(float64)
		if !r.Config.ClockSkew.IsUnknown() && !r.Config.ClockSkew.IsNull() {
			*clockSkew = r.Config.ClockSkew.ValueFloat64()
		} else {
			clockSkew = nil
		}
		enforceHeaders := make([]string, 0, len(r.Config.EnforceHeaders))
		for _, enforceHeadersItem := range r.Config.EnforceHeaders {
			enforceHeaders = append(enforceHeaders, enforceHeadersItem.ValueString())
		}
		hideCredentials := new(bool)
		if !r.Config.HideCredentials.IsUnknown() && !r.Config.HideCredentials.IsNull() {
			*hideCredentials = r.Config.HideCredentials.ValueBool()
		} else {
			hideCredentials = nil
		}
		realm := new(string)
		if !r.Config.Realm.IsUnknown() && !r.Config.Realm.IsNull() {
			*realm = r.Config.Realm.ValueString()
		} else {
			realm = nil
		}
		validateRequestBody := new(bool)
		if !r.Config.ValidateRequestBody.IsUnknown() && !r.Config.ValidateRequestBody.IsNull() {
			*validateRequestBody = r.Config.ValidateRequestBody.ValueBool()
		} else {
			validateRequestBody = nil
		}
		config = &shared.HmacAuthPluginConfig{
			Algorithms:          algorithms,
			Anonymous:           anonymous,
			ClockSkew:           clockSkew,
			EnforceHeaders:      enforceHeaders,
			HideCredentials:     hideCredentials,
			Realm:               realm,
			ValidateRequestBody: validateRequestBody,
		}
	}
	protocols := make([]shared.HmacAuthPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.HmacAuthPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.HmacAuthPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.HmacAuthPluginRoute{
			ID: id2,
		}
	}
	var service *shared.HmacAuthPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.HmacAuthPluginService{
			ID: id3,
		}
	}
	out := shared.HmacAuthPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
