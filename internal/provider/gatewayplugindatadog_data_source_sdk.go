// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginDatadogDataSourceModel) ToOperationsGetDatadogPluginRequest(ctx context.Context) (*operations.GetDatadogPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetDatadogPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginDatadogDataSourceModel) RefreshFromSharedDatadogPlugin(ctx context.Context, resp *shared.DatadogPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.DatadogPluginConfig{}
			r.Config.ConsumerTag = types.StringPointerValue(resp.Config.ConsumerTag)
			r.Config.FlushTimeout = types.Float64PointerValue(resp.Config.FlushTimeout)
			r.Config.Host = types.StringPointerValue(resp.Config.Host)
			r.Config.Metrics = []tfTypes.Metrics{}
			if len(r.Config.Metrics) > len(resp.Config.Metrics) {
				r.Config.Metrics = r.Config.Metrics[:len(resp.Config.Metrics)]
			}
			for metricsCount, metricsItem := range resp.Config.Metrics {
				var metrics tfTypes.Metrics
				if metricsItem.ConsumerIdentifier != nil {
					metrics.ConsumerIdentifier = types.StringValue(string(*metricsItem.ConsumerIdentifier))
				} else {
					metrics.ConsumerIdentifier = types.StringNull()
				}
				metrics.Name = types.StringValue(string(metricsItem.Name))
				metrics.SampleRate = types.Float64PointerValue(metricsItem.SampleRate)
				metrics.StatType = types.StringValue(string(metricsItem.StatType))
				metrics.Tags = make([]types.String, 0, len(metricsItem.Tags))
				for _, v := range metricsItem.Tags {
					metrics.Tags = append(metrics.Tags, types.StringValue(v))
				}
				if metricsCount+1 > len(r.Config.Metrics) {
					r.Config.Metrics = append(r.Config.Metrics, metrics)
				} else {
					r.Config.Metrics[metricsCount].ConsumerIdentifier = metrics.ConsumerIdentifier
					r.Config.Metrics[metricsCount].Name = metrics.Name
					r.Config.Metrics[metricsCount].SampleRate = metrics.SampleRate
					r.Config.Metrics[metricsCount].StatType = metrics.StatType
					r.Config.Metrics[metricsCount].Tags = metrics.Tags
				}
			}
			r.Config.Port = types.Int64PointerValue(resp.Config.Port)
			r.Config.Prefix = types.StringPointerValue(resp.Config.Prefix)
			if resp.Config.Queue == nil {
				r.Config.Queue = nil
			} else {
				r.Config.Queue = &tfTypes.Queue{}
				if resp.Config.Queue.ConcurrencyLimit != nil {
					r.Config.Queue.ConcurrencyLimit = types.Int64Value(int64(*resp.Config.Queue.ConcurrencyLimit))
				} else {
					r.Config.Queue.ConcurrencyLimit = types.Int64Null()
				}
				r.Config.Queue.InitialRetryDelay = types.Float64PointerValue(resp.Config.Queue.InitialRetryDelay)
				r.Config.Queue.MaxBatchSize = types.Int64PointerValue(resp.Config.Queue.MaxBatchSize)
				r.Config.Queue.MaxBytes = types.Int64PointerValue(resp.Config.Queue.MaxBytes)
				r.Config.Queue.MaxCoalescingDelay = types.Float64PointerValue(resp.Config.Queue.MaxCoalescingDelay)
				r.Config.Queue.MaxEntries = types.Int64PointerValue(resp.Config.Queue.MaxEntries)
				r.Config.Queue.MaxRetryDelay = types.Float64PointerValue(resp.Config.Queue.MaxRetryDelay)
				r.Config.Queue.MaxRetryTime = types.Float64PointerValue(resp.Config.Queue.MaxRetryTime)
			}
			r.Config.QueueSize = types.Int64PointerValue(resp.Config.QueueSize)
			r.Config.RetryCount = types.Int64PointerValue(resp.Config.RetryCount)
			r.Config.ServiceNameTag = types.StringPointerValue(resp.Config.ServiceNameTag)
			r.Config.StatusTag = types.StringPointerValue(resp.Config.StatusTag)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
