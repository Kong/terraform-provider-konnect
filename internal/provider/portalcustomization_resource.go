// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	speakeasy_boolvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/boolvalidators"
	speakeasy_listvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PortalCustomizationResource{}
var _ resource.ResourceWithImportState = &PortalCustomizationResource{}

func NewPortalCustomizationResource() resource.Resource {
	return &PortalCustomizationResource{}
}

// PortalCustomizationResource defines the resource implementation.
type PortalCustomizationResource struct {
	// Provider configured SDK client.
	client *sdk.Konnect
}

// PortalCustomizationResourceModel describes the resource data model.
type PortalCustomizationResourceModel struct {
	CSS          types.String          `tfsdk:"css"`
	Layout       types.String          `tfsdk:"layout"`
	Menu         *tfTypes.Menu         `tfsdk:"menu"`
	PortalID     types.String          `tfsdk:"portal_id"`
	Robots       types.String          `tfsdk:"robots"`
	SpecRenderer *tfTypes.SpecRenderer `tfsdk:"spec_renderer"`
	Theme        *tfTypes.Theme        `tfsdk:"theme"`
}

func (r *PortalCustomizationResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_customization"
}

func (r *PortalCustomizationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalCustomization Resource",
		Attributes: map[string]schema.Attribute{
			"css": schema.StringAttribute{
				Optional: true,
			},
			"layout": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"menu": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"footer_bottom": schema.ListNestedAttribute{
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"external": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `When clicked, open the link in a new window. Not Null`,
									Validators: []validator.Bool{
										speakeasy_boolvalidators.NotNull(),
									},
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The absolute path of a page in a portal with a leading slash. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtMost(512),
									},
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The link display text. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"visibility": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Whether a menu item is public or private. Private menu items are only accessible to authenticated users. Not Null; must be one of ["public", "private"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"public",
											"private",
										),
									},
								},
							},
						},
					},
					"footer_sections": schema.ListNestedAttribute{
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"items": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
										Attributes: map[string]schema.Attribute{
											"external": schema.BoolAttribute{
												Computed:    true,
												Optional:    true,
												Description: `When clicked, open the link in a new window. Not Null`,
												Validators: []validator.Bool{
													speakeasy_boolvalidators.NotNull(),
												},
											},
											"path": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The absolute path of a page in a portal with a leading slash. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"title": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `The link display text. Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
												},
											},
											"visibility": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Whether a menu item is public or private. Private menu items are only accessible to authenticated users. Not Null; must be one of ["public", "private"]`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.OneOf(
														"public",
														"private",
													),
												},
											},
										},
									},
									Description: `Not Null`,
									Validators: []validator.List{
										speakeasy_listvalidators.NotNull(),
									},
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The footer menu section title. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtMost(512),
									},
								},
							},
						},
					},
					"main": schema.ListNestedAttribute{
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"external": schema.BoolAttribute{
									Computed:    true,
									Optional:    true,
									Description: `When clicked, open the link in a new window. Not Null`,
									Validators: []validator.Bool{
										speakeasy_boolvalidators.NotNull(),
									},
								},
								"path": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The absolute path of a page in a portal with a leading slash. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.UTF8LengthAtMost(512),
									},
								},
								"title": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The link display text. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"visibility": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `Whether a menu item is public or private. Private menu items are only accessible to authenticated users. Not Null; must be one of ["public", "private"]`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
										stringvalidator.OneOf(
											"public",
											"private",
										),
									},
								},
							},
						},
					},
				},
			},
			"portal_id": schema.StringAttribute{
				Required:    true,
				Description: `The Portal identifier`,
			},
			"robots": schema.StringAttribute{
				Optional: true,
			},
			"spec_renderer": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"hide_deprecated": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Default: false`,
					},
					"hide_internal": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Default: false`,
					},
					"infinite_scroll": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Default: true`,
					},
					"show_schemas": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Default: true`,
					},
					"try_it_insomnia": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Default: true`,
					},
					"try_it_ui": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(true),
						Description: `Default: true`,
					},
				},
			},
			"theme": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"colors": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`primary`: types.StringType,
						},
					},
					"mode": types.StringType,
					"name": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"colors": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
							"primary": types.StringType,
						})),
						Attributes: map[string]schema.Attribute{
							"primary": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.RegexMatches(regexp.MustCompile(`^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$`), "must match pattern "+regexp.MustCompile(`^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$`).String()),
								},
							},
						},
					},
					"mode": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `must be one of ["light", "dark", "system"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"light",
								"dark",
								"system",
							),
						},
					},
					"name": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
			},
		},
	}
}

func (r *PortalCustomizationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalCustomizationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PortalCustomizationResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsReplacePortalCustomizationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.PortalCustomization.ReplacePortalCustomization(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalCustomization != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalCustomization(ctx, res.PortalCustomization)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalCustomizationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PortalCustomizationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPortalCustomizationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.PortalCustomization.GetPortalCustomization(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalCustomization != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalCustomization(ctx, res.PortalCustomization)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalCustomizationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PortalCustomizationResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsReplacePortalCustomizationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.PortalCustomization.ReplacePortalCustomization(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalCustomization != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalCustomization(ctx, res.PortalCustomization)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalCustomizationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PortalCustomizationResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *PortalCustomizationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("portal_id"), req.ID)...)
}
