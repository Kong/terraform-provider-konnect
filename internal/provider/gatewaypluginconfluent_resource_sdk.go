// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginConfluentResourceModel) RefreshFromSharedConfluentPlugin(ctx context.Context, resp *shared.ConfluentPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.AllowedTopics = make([]types.String, 0, len(resp.Config.AllowedTopics))
		for _, v := range resp.Config.AllowedTopics {
			r.Config.AllowedTopics = append(r.Config.AllowedTopics, types.StringValue(v))
		}
		r.Config.BootstrapServers = []tfTypes.BootstrapServers{}
		if len(r.Config.BootstrapServers) > len(resp.Config.BootstrapServers) {
			r.Config.BootstrapServers = r.Config.BootstrapServers[:len(resp.Config.BootstrapServers)]
		}
		for bootstrapServersCount, bootstrapServersItem := range resp.Config.BootstrapServers {
			var bootstrapServers tfTypes.BootstrapServers
			bootstrapServers.Host = types.StringValue(bootstrapServersItem.Host)
			bootstrapServers.Port = types.Int64Value(bootstrapServersItem.Port)
			if bootstrapServersCount+1 > len(r.Config.BootstrapServers) {
				r.Config.BootstrapServers = append(r.Config.BootstrapServers, bootstrapServers)
			} else {
				r.Config.BootstrapServers[bootstrapServersCount].Host = bootstrapServers.Host
				r.Config.BootstrapServers[bootstrapServersCount].Port = bootstrapServers.Port
			}
		}
		r.Config.ClusterAPIKey = types.StringValue(resp.Config.ClusterAPIKey)
		r.Config.ClusterAPISecret = types.StringValue(resp.Config.ClusterAPISecret)
		r.Config.ClusterName = types.StringPointerValue(resp.Config.ClusterName)
		r.Config.ConfluentCloudAPIKey = types.StringPointerValue(resp.Config.ConfluentCloudAPIKey)
		r.Config.ConfluentCloudAPISecret = types.StringPointerValue(resp.Config.ConfluentCloudAPISecret)
		r.Config.ForwardBody = types.BoolPointerValue(resp.Config.ForwardBody)
		r.Config.ForwardHeaders = types.BoolPointerValue(resp.Config.ForwardHeaders)
		r.Config.ForwardMethod = types.BoolPointerValue(resp.Config.ForwardMethod)
		r.Config.ForwardURI = types.BoolPointerValue(resp.Config.ForwardURI)
		r.Config.Keepalive = types.Int64PointerValue(resp.Config.Keepalive)
		r.Config.KeepaliveEnabled = types.BoolPointerValue(resp.Config.KeepaliveEnabled)
		r.Config.KeyQueryArg = types.StringPointerValue(resp.Config.KeyQueryArg)
		r.Config.MessageByLuaFunctions = make([]types.String, 0, len(resp.Config.MessageByLuaFunctions))
		for _, v := range resp.Config.MessageByLuaFunctions {
			r.Config.MessageByLuaFunctions = append(r.Config.MessageByLuaFunctions, types.StringValue(v))
		}
		r.Config.ProducerAsync = types.BoolPointerValue(resp.Config.ProducerAsync)
		r.Config.ProducerAsyncBufferingLimitsMessagesInMemory = types.Int64PointerValue(resp.Config.ProducerAsyncBufferingLimitsMessagesInMemory)
		r.Config.ProducerAsyncFlushTimeout = types.Int64PointerValue(resp.Config.ProducerAsyncFlushTimeout)
		if resp.Config.ProducerRequestAcks != nil {
			r.Config.ProducerRequestAcks = types.Int64Value(int64(*resp.Config.ProducerRequestAcks))
		} else {
			r.Config.ProducerRequestAcks = types.Int64Null()
		}
		r.Config.ProducerRequestLimitsBytesPerRequest = types.Int64PointerValue(resp.Config.ProducerRequestLimitsBytesPerRequest)
		r.Config.ProducerRequestLimitsMessagesPerRequest = types.Int64PointerValue(resp.Config.ProducerRequestLimitsMessagesPerRequest)
		r.Config.ProducerRequestRetriesBackoffTimeout = types.Int64PointerValue(resp.Config.ProducerRequestRetriesBackoffTimeout)
		r.Config.ProducerRequestRetriesMaxAttempts = types.Int64PointerValue(resp.Config.ProducerRequestRetriesMaxAttempts)
		r.Config.ProducerRequestTimeout = types.Int64PointerValue(resp.Config.ProducerRequestTimeout)
		if resp.Config.SchemaRegistry == nil {
			r.Config.SchemaRegistry = nil
		} else {
			r.Config.SchemaRegistry = &tfTypes.SchemaRegistry{}
			if resp.Config.SchemaRegistry.Confluent == nil {
				r.Config.SchemaRegistry.Confluent = nil
			} else {
				r.Config.SchemaRegistry.Confluent = &tfTypes.Confluent{}
				if resp.Config.SchemaRegistry.Confluent.Authentication.Basic == nil {
					r.Config.SchemaRegistry.Confluent.Authentication.Basic = nil
				} else {
					r.Config.SchemaRegistry.Confluent.Authentication.Basic = &tfTypes.Basic{}
					r.Config.SchemaRegistry.Confluent.Authentication.Basic.Password = types.StringValue(resp.Config.SchemaRegistry.Confluent.Authentication.Basic.Password)
					r.Config.SchemaRegistry.Confluent.Authentication.Basic.Username = types.StringValue(resp.Config.SchemaRegistry.Confluent.Authentication.Basic.Username)
				}
				if resp.Config.SchemaRegistry.Confluent.Authentication.Mode != nil {
					r.Config.SchemaRegistry.Confluent.Authentication.Mode = types.StringValue(string(*resp.Config.SchemaRegistry.Confluent.Authentication.Mode))
				} else {
					r.Config.SchemaRegistry.Confluent.Authentication.Mode = types.StringNull()
				}
				if resp.Config.SchemaRegistry.Confluent.KeySchema == nil {
					r.Config.SchemaRegistry.Confluent.KeySchema = nil
				} else {
					r.Config.SchemaRegistry.Confluent.KeySchema = &tfTypes.KeySchema{}
					r.Config.SchemaRegistry.Confluent.KeySchema.SchemaVersion = types.StringPointerValue(resp.Config.SchemaRegistry.Confluent.KeySchema.SchemaVersion)
					r.Config.SchemaRegistry.Confluent.KeySchema.SubjectName = types.StringPointerValue(resp.Config.SchemaRegistry.Confluent.KeySchema.SubjectName)
				}
				r.Config.SchemaRegistry.Confluent.SslVerify = types.BoolPointerValue(resp.Config.SchemaRegistry.Confluent.SslVerify)
				r.Config.SchemaRegistry.Confluent.TTL = types.Float64PointerValue(resp.Config.SchemaRegistry.Confluent.TTL)
				r.Config.SchemaRegistry.Confluent.URL = types.StringPointerValue(resp.Config.SchemaRegistry.Confluent.URL)
				if resp.Config.SchemaRegistry.Confluent.ValueSchema == nil {
					r.Config.SchemaRegistry.Confluent.ValueSchema = nil
				} else {
					r.Config.SchemaRegistry.Confluent.ValueSchema = &tfTypes.KeySchema{}
					r.Config.SchemaRegistry.Confluent.ValueSchema.SchemaVersion = types.StringPointerValue(resp.Config.SchemaRegistry.Confluent.ValueSchema.SchemaVersion)
					r.Config.SchemaRegistry.Confluent.ValueSchema.SubjectName = types.StringPointerValue(resp.Config.SchemaRegistry.Confluent.ValueSchema.SubjectName)
				}
			}
		}
		r.Config.Timeout = types.Int64PointerValue(resp.Config.Timeout)
		r.Config.Topic = types.StringValue(resp.Config.Topic)
		r.Config.TopicsQueryArg = types.StringPointerValue(resp.Config.TopicsQueryArg)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginConfluentResourceModel) ToOperationsCreateConfluentPluginRequest(ctx context.Context) (*operations.CreateConfluentPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	confluentPlugin, confluentPluginDiags := r.ToSharedConfluentPlugin(ctx)
	diags.Append(confluentPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateConfluentPluginRequest{
		ControlPlaneID:  controlPlaneID,
		ConfluentPlugin: *confluentPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentResourceModel) ToOperationsDeleteConfluentPluginRequest(ctx context.Context) (*operations.DeleteConfluentPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteConfluentPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentResourceModel) ToOperationsGetConfluentPluginRequest(ctx context.Context) (*operations.GetConfluentPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetConfluentPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentResourceModel) ToOperationsUpdateConfluentPluginRequest(ctx context.Context) (*operations.UpdateConfluentPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	confluentPlugin, confluentPluginDiags := r.ToSharedConfluentPlugin(ctx)
	diags.Append(confluentPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateConfluentPluginRequest{
		PluginID:        pluginID,
		ControlPlaneID:  controlPlaneID,
		ConfluentPlugin: *confluentPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentResourceModel) ToSharedConfluentPlugin(ctx context.Context) (*shared.ConfluentPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.ConfluentPluginOrdering
	if r.Ordering != nil {
		var after *shared.ConfluentPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.ConfluentPluginAfter{
				Access: access,
			}
		}
		var before *shared.ConfluentPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.ConfluentPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.ConfluentPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.ConfluentPluginPartials
	if r.Partials != nil {
		partials = make([]shared.ConfluentPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.ConfluentPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	allowedTopics := make([]string, 0, len(r.Config.AllowedTopics))
	for _, allowedTopicsItem := range r.Config.AllowedTopics {
		allowedTopics = append(allowedTopics, allowedTopicsItem.ValueString())
	}
	bootstrapServers := make([]shared.BootstrapServers, 0, len(r.Config.BootstrapServers))
	for _, bootstrapServersItem := range r.Config.BootstrapServers {
		var host string
		host = bootstrapServersItem.Host.ValueString()

		var port int64
		port = bootstrapServersItem.Port.ValueInt64()

		bootstrapServers = append(bootstrapServers, shared.BootstrapServers{
			Host: host,
			Port: port,
		})
	}
	var clusterAPIKey string
	clusterAPIKey = r.Config.ClusterAPIKey.ValueString()

	var clusterAPISecret string
	clusterAPISecret = r.Config.ClusterAPISecret.ValueString()

	clusterName := new(string)
	if !r.Config.ClusterName.IsUnknown() && !r.Config.ClusterName.IsNull() {
		*clusterName = r.Config.ClusterName.ValueString()
	} else {
		clusterName = nil
	}
	confluentCloudAPIKey := new(string)
	if !r.Config.ConfluentCloudAPIKey.IsUnknown() && !r.Config.ConfluentCloudAPIKey.IsNull() {
		*confluentCloudAPIKey = r.Config.ConfluentCloudAPIKey.ValueString()
	} else {
		confluentCloudAPIKey = nil
	}
	confluentCloudAPISecret := new(string)
	if !r.Config.ConfluentCloudAPISecret.IsUnknown() && !r.Config.ConfluentCloudAPISecret.IsNull() {
		*confluentCloudAPISecret = r.Config.ConfluentCloudAPISecret.ValueString()
	} else {
		confluentCloudAPISecret = nil
	}
	forwardBody := new(bool)
	if !r.Config.ForwardBody.IsUnknown() && !r.Config.ForwardBody.IsNull() {
		*forwardBody = r.Config.ForwardBody.ValueBool()
	} else {
		forwardBody = nil
	}
	forwardHeaders := new(bool)
	if !r.Config.ForwardHeaders.IsUnknown() && !r.Config.ForwardHeaders.IsNull() {
		*forwardHeaders = r.Config.ForwardHeaders.ValueBool()
	} else {
		forwardHeaders = nil
	}
	forwardMethod := new(bool)
	if !r.Config.ForwardMethod.IsUnknown() && !r.Config.ForwardMethod.IsNull() {
		*forwardMethod = r.Config.ForwardMethod.ValueBool()
	} else {
		forwardMethod = nil
	}
	forwardURI := new(bool)
	if !r.Config.ForwardURI.IsUnknown() && !r.Config.ForwardURI.IsNull() {
		*forwardURI = r.Config.ForwardURI.ValueBool()
	} else {
		forwardURI = nil
	}
	keepalive := new(int64)
	if !r.Config.Keepalive.IsUnknown() && !r.Config.Keepalive.IsNull() {
		*keepalive = r.Config.Keepalive.ValueInt64()
	} else {
		keepalive = nil
	}
	keepaliveEnabled := new(bool)
	if !r.Config.KeepaliveEnabled.IsUnknown() && !r.Config.KeepaliveEnabled.IsNull() {
		*keepaliveEnabled = r.Config.KeepaliveEnabled.ValueBool()
	} else {
		keepaliveEnabled = nil
	}
	keyQueryArg := new(string)
	if !r.Config.KeyQueryArg.IsUnknown() && !r.Config.KeyQueryArg.IsNull() {
		*keyQueryArg = r.Config.KeyQueryArg.ValueString()
	} else {
		keyQueryArg = nil
	}
	messageByLuaFunctions := make([]string, 0, len(r.Config.MessageByLuaFunctions))
	for _, messageByLuaFunctionsItem := range r.Config.MessageByLuaFunctions {
		messageByLuaFunctions = append(messageByLuaFunctions, messageByLuaFunctionsItem.ValueString())
	}
	producerAsync := new(bool)
	if !r.Config.ProducerAsync.IsUnknown() && !r.Config.ProducerAsync.IsNull() {
		*producerAsync = r.Config.ProducerAsync.ValueBool()
	} else {
		producerAsync = nil
	}
	producerAsyncBufferingLimitsMessagesInMemory := new(int64)
	if !r.Config.ProducerAsyncBufferingLimitsMessagesInMemory.IsUnknown() && !r.Config.ProducerAsyncBufferingLimitsMessagesInMemory.IsNull() {
		*producerAsyncBufferingLimitsMessagesInMemory = r.Config.ProducerAsyncBufferingLimitsMessagesInMemory.ValueInt64()
	} else {
		producerAsyncBufferingLimitsMessagesInMemory = nil
	}
	producerAsyncFlushTimeout := new(int64)
	if !r.Config.ProducerAsyncFlushTimeout.IsUnknown() && !r.Config.ProducerAsyncFlushTimeout.IsNull() {
		*producerAsyncFlushTimeout = r.Config.ProducerAsyncFlushTimeout.ValueInt64()
	} else {
		producerAsyncFlushTimeout = nil
	}
	producerRequestAcks := new(shared.ProducerRequestAcks)
	if !r.Config.ProducerRequestAcks.IsUnknown() && !r.Config.ProducerRequestAcks.IsNull() {
		*producerRequestAcks = shared.ProducerRequestAcks(r.Config.ProducerRequestAcks.ValueInt64())
	} else {
		producerRequestAcks = nil
	}
	producerRequestLimitsBytesPerRequest := new(int64)
	if !r.Config.ProducerRequestLimitsBytesPerRequest.IsUnknown() && !r.Config.ProducerRequestLimitsBytesPerRequest.IsNull() {
		*producerRequestLimitsBytesPerRequest = r.Config.ProducerRequestLimitsBytesPerRequest.ValueInt64()
	} else {
		producerRequestLimitsBytesPerRequest = nil
	}
	producerRequestLimitsMessagesPerRequest := new(int64)
	if !r.Config.ProducerRequestLimitsMessagesPerRequest.IsUnknown() && !r.Config.ProducerRequestLimitsMessagesPerRequest.IsNull() {
		*producerRequestLimitsMessagesPerRequest = r.Config.ProducerRequestLimitsMessagesPerRequest.ValueInt64()
	} else {
		producerRequestLimitsMessagesPerRequest = nil
	}
	producerRequestRetriesBackoffTimeout := new(int64)
	if !r.Config.ProducerRequestRetriesBackoffTimeout.IsUnknown() && !r.Config.ProducerRequestRetriesBackoffTimeout.IsNull() {
		*producerRequestRetriesBackoffTimeout = r.Config.ProducerRequestRetriesBackoffTimeout.ValueInt64()
	} else {
		producerRequestRetriesBackoffTimeout = nil
	}
	producerRequestRetriesMaxAttempts := new(int64)
	if !r.Config.ProducerRequestRetriesMaxAttempts.IsUnknown() && !r.Config.ProducerRequestRetriesMaxAttempts.IsNull() {
		*producerRequestRetriesMaxAttempts = r.Config.ProducerRequestRetriesMaxAttempts.ValueInt64()
	} else {
		producerRequestRetriesMaxAttempts = nil
	}
	producerRequestTimeout := new(int64)
	if !r.Config.ProducerRequestTimeout.IsUnknown() && !r.Config.ProducerRequestTimeout.IsNull() {
		*producerRequestTimeout = r.Config.ProducerRequestTimeout.ValueInt64()
	} else {
		producerRequestTimeout = nil
	}
	var schemaRegistry *shared.SchemaRegistry
	if r.Config.SchemaRegistry != nil {
		var confluent *shared.Confluent
		if r.Config.SchemaRegistry.Confluent != nil {
			var basic *shared.Basic
			if r.Config.SchemaRegistry.Confluent.Authentication.Basic != nil {
				var password string
				password = r.Config.SchemaRegistry.Confluent.Authentication.Basic.Password.ValueString()

				var username string
				username = r.Config.SchemaRegistry.Confluent.Authentication.Basic.Username.ValueString()

				basic = &shared.Basic{
					Password: password,
					Username: username,
				}
			}
			mode := new(shared.ConfluentPluginMode)
			if !r.Config.SchemaRegistry.Confluent.Authentication.Mode.IsUnknown() && !r.Config.SchemaRegistry.Confluent.Authentication.Mode.IsNull() {
				*mode = shared.ConfluentPluginMode(r.Config.SchemaRegistry.Confluent.Authentication.Mode.ValueString())
			} else {
				mode = nil
			}
			authentication := shared.ConfluentPluginAuthentication{
				Basic: basic,
				Mode:  mode,
			}
			var keySchema *shared.KeySchema
			if r.Config.SchemaRegistry.Confluent.KeySchema != nil {
				schemaVersion := new(string)
				if !r.Config.SchemaRegistry.Confluent.KeySchema.SchemaVersion.IsUnknown() && !r.Config.SchemaRegistry.Confluent.KeySchema.SchemaVersion.IsNull() {
					*schemaVersion = r.Config.SchemaRegistry.Confluent.KeySchema.SchemaVersion.ValueString()
				} else {
					schemaVersion = nil
				}
				subjectName := new(string)
				if !r.Config.SchemaRegistry.Confluent.KeySchema.SubjectName.IsUnknown() && !r.Config.SchemaRegistry.Confluent.KeySchema.SubjectName.IsNull() {
					*subjectName = r.Config.SchemaRegistry.Confluent.KeySchema.SubjectName.ValueString()
				} else {
					subjectName = nil
				}
				keySchema = &shared.KeySchema{
					SchemaVersion: schemaVersion,
					SubjectName:   subjectName,
				}
			}
			sslVerify := new(bool)
			if !r.Config.SchemaRegistry.Confluent.SslVerify.IsUnknown() && !r.Config.SchemaRegistry.Confluent.SslVerify.IsNull() {
				*sslVerify = r.Config.SchemaRegistry.Confluent.SslVerify.ValueBool()
			} else {
				sslVerify = nil
			}
			ttl := new(float64)
			if !r.Config.SchemaRegistry.Confluent.TTL.IsUnknown() && !r.Config.SchemaRegistry.Confluent.TTL.IsNull() {
				*ttl = r.Config.SchemaRegistry.Confluent.TTL.ValueFloat64()
			} else {
				ttl = nil
			}
			url := new(string)
			if !r.Config.SchemaRegistry.Confluent.URL.IsUnknown() && !r.Config.SchemaRegistry.Confluent.URL.IsNull() {
				*url = r.Config.SchemaRegistry.Confluent.URL.ValueString()
			} else {
				url = nil
			}
			var valueSchema *shared.ValueSchema
			if r.Config.SchemaRegistry.Confluent.ValueSchema != nil {
				schemaVersion1 := new(string)
				if !r.Config.SchemaRegistry.Confluent.ValueSchema.SchemaVersion.IsUnknown() && !r.Config.SchemaRegistry.Confluent.ValueSchema.SchemaVersion.IsNull() {
					*schemaVersion1 = r.Config.SchemaRegistry.Confluent.ValueSchema.SchemaVersion.ValueString()
				} else {
					schemaVersion1 = nil
				}
				subjectName1 := new(string)
				if !r.Config.SchemaRegistry.Confluent.ValueSchema.SubjectName.IsUnknown() && !r.Config.SchemaRegistry.Confluent.ValueSchema.SubjectName.IsNull() {
					*subjectName1 = r.Config.SchemaRegistry.Confluent.ValueSchema.SubjectName.ValueString()
				} else {
					subjectName1 = nil
				}
				valueSchema = &shared.ValueSchema{
					SchemaVersion: schemaVersion1,
					SubjectName:   subjectName1,
				}
			}
			confluent = &shared.Confluent{
				Authentication: authentication,
				KeySchema:      keySchema,
				SslVerify:      sslVerify,
				TTL:            ttl,
				URL:            url,
				ValueSchema:    valueSchema,
			}
		}
		schemaRegistry = &shared.SchemaRegistry{
			Confluent: confluent,
		}
	}
	timeout := new(int64)
	if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
		*timeout = r.Config.Timeout.ValueInt64()
	} else {
		timeout = nil
	}
	var topic string
	topic = r.Config.Topic.ValueString()

	topicsQueryArg := new(string)
	if !r.Config.TopicsQueryArg.IsUnknown() && !r.Config.TopicsQueryArg.IsNull() {
		*topicsQueryArg = r.Config.TopicsQueryArg.ValueString()
	} else {
		topicsQueryArg = nil
	}
	config := shared.ConfluentPluginConfig{
		AllowedTopics:           allowedTopics,
		BootstrapServers:        bootstrapServers,
		ClusterAPIKey:           clusterAPIKey,
		ClusterAPISecret:        clusterAPISecret,
		ClusterName:             clusterName,
		ConfluentCloudAPIKey:    confluentCloudAPIKey,
		ConfluentCloudAPISecret: confluentCloudAPISecret,
		ForwardBody:             forwardBody,
		ForwardHeaders:          forwardHeaders,
		ForwardMethod:           forwardMethod,
		ForwardURI:              forwardURI,
		Keepalive:               keepalive,
		KeepaliveEnabled:        keepaliveEnabled,
		KeyQueryArg:             keyQueryArg,
		MessageByLuaFunctions:   messageByLuaFunctions,
		ProducerAsync:           producerAsync,
		ProducerAsyncBufferingLimitsMessagesInMemory: producerAsyncBufferingLimitsMessagesInMemory,
		ProducerAsyncFlushTimeout:                    producerAsyncFlushTimeout,
		ProducerRequestAcks:                          producerRequestAcks,
		ProducerRequestLimitsBytesPerRequest:         producerRequestLimitsBytesPerRequest,
		ProducerRequestLimitsMessagesPerRequest:      producerRequestLimitsMessagesPerRequest,
		ProducerRequestRetriesBackoffTimeout:         producerRequestRetriesBackoffTimeout,
		ProducerRequestRetriesMaxAttempts:            producerRequestRetriesMaxAttempts,
		ProducerRequestTimeout:                       producerRequestTimeout,
		SchemaRegistry:                               schemaRegistry,
		Timeout:                                      timeout,
		Topic:                                        topic,
		TopicsQueryArg:                               topicsQueryArg,
	}
	var consumer *shared.ConfluentPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.ConfluentPluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.ConfluentPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.ConfluentPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.ConfluentPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.ConfluentPluginRoute{
			ID: id3,
		}
	}
	var service *shared.ConfluentPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.ConfluentPluginService{
			ID: id4,
		}
	}
	out := shared.ConfluentPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
