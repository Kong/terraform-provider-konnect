// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginJWTSignerDataSourceModel) RefreshFromSharedJWTSignerPlugin(resp *shared.JWTSignerPlugin) {
	if resp != nil {
		r.Config.AccessTokenConsumerBy = []types.String{}
		for _, v := range resp.Config.AccessTokenConsumerBy {
			r.Config.AccessTokenConsumerBy = append(r.Config.AccessTokenConsumerBy, types.StringValue(string(v)))
		}
		r.Config.AccessTokenConsumerClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenConsumerClaim {
			r.Config.AccessTokenConsumerClaim = append(r.Config.AccessTokenConsumerClaim, types.StringValue(v))
		}
		r.Config.AccessTokenIntrospectionAuthorization = types.StringPointerValue(resp.Config.AccessTokenIntrospectionAuthorization)
		r.Config.AccessTokenIntrospectionBodyArgs = types.StringPointerValue(resp.Config.AccessTokenIntrospectionBodyArgs)
		r.Config.AccessTokenIntrospectionConsumerBy = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionConsumerBy {
			r.Config.AccessTokenIntrospectionConsumerBy = append(r.Config.AccessTokenIntrospectionConsumerBy, types.StringValue(string(v)))
		}
		r.Config.AccessTokenIntrospectionConsumerClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionConsumerClaim {
			r.Config.AccessTokenIntrospectionConsumerClaim = append(r.Config.AccessTokenIntrospectionConsumerClaim, types.StringValue(v))
		}
		r.Config.AccessTokenIntrospectionEndpoint = types.StringPointerValue(resp.Config.AccessTokenIntrospectionEndpoint)
		r.Config.AccessTokenIntrospectionHint = types.StringPointerValue(resp.Config.AccessTokenIntrospectionHint)
		r.Config.AccessTokenIntrospectionJwtClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionJwtClaim {
			r.Config.AccessTokenIntrospectionJwtClaim = append(r.Config.AccessTokenIntrospectionJwtClaim, types.StringValue(v))
		}
		if resp.Config.AccessTokenIntrospectionLeeway != nil {
			r.Config.AccessTokenIntrospectionLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenIntrospectionLeeway)))
		} else {
			r.Config.AccessTokenIntrospectionLeeway = types.NumberNull()
		}
		r.Config.AccessTokenIntrospectionScopesClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionScopesClaim {
			r.Config.AccessTokenIntrospectionScopesClaim = append(r.Config.AccessTokenIntrospectionScopesClaim, types.StringValue(v))
		}
		r.Config.AccessTokenIntrospectionScopesRequired = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionScopesRequired {
			r.Config.AccessTokenIntrospectionScopesRequired = append(r.Config.AccessTokenIntrospectionScopesRequired, types.StringValue(v))
		}
		if resp.Config.AccessTokenIntrospectionTimeout != nil {
			r.Config.AccessTokenIntrospectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenIntrospectionTimeout)))
		} else {
			r.Config.AccessTokenIntrospectionTimeout = types.NumberNull()
		}
		r.Config.AccessTokenIssuer = types.StringPointerValue(resp.Config.AccessTokenIssuer)
		r.Config.AccessTokenJwksURI = types.StringPointerValue(resp.Config.AccessTokenJwksURI)
		r.Config.AccessTokenKeyset = types.StringPointerValue(resp.Config.AccessTokenKeyset)
		if resp.Config.AccessTokenLeeway != nil {
			r.Config.AccessTokenLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenLeeway)))
		} else {
			r.Config.AccessTokenLeeway = types.NumberNull()
		}
		r.Config.AccessTokenOptional = types.BoolPointerValue(resp.Config.AccessTokenOptional)
		r.Config.AccessTokenRequestHeader = types.StringPointerValue(resp.Config.AccessTokenRequestHeader)
		r.Config.AccessTokenScopesClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenScopesClaim {
			r.Config.AccessTokenScopesClaim = append(r.Config.AccessTokenScopesClaim, types.StringValue(v))
		}
		r.Config.AccessTokenScopesRequired = []types.String{}
		for _, v := range resp.Config.AccessTokenScopesRequired {
			r.Config.AccessTokenScopesRequired = append(r.Config.AccessTokenScopesRequired, types.StringValue(v))
		}
		if resp.Config.AccessTokenSigningAlgorithm != nil {
			r.Config.AccessTokenSigningAlgorithm = types.StringValue(string(*resp.Config.AccessTokenSigningAlgorithm))
		} else {
			r.Config.AccessTokenSigningAlgorithm = types.StringNull()
		}
		r.Config.AccessTokenUpstreamHeader = types.StringPointerValue(resp.Config.AccessTokenUpstreamHeader)
		if resp.Config.AccessTokenUpstreamLeeway != nil {
			r.Config.AccessTokenUpstreamLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenUpstreamLeeway)))
		} else {
			r.Config.AccessTokenUpstreamLeeway = types.NumberNull()
		}
		if len(resp.Config.AddClaims) > 0 {
			r.Config.AddClaims = make(map[string]types.String)
			for key, value := range resp.Config.AddClaims {
				result, _ := json.Marshal(value)
				r.Config.AddClaims[key] = types.StringValue(string(result))
			}
		}
		r.Config.CacheAccessTokenIntrospection = types.BoolPointerValue(resp.Config.CacheAccessTokenIntrospection)
		r.Config.CacheChannelTokenIntrospection = types.BoolPointerValue(resp.Config.CacheChannelTokenIntrospection)
		r.Config.ChannelTokenConsumerBy = []types.String{}
		for _, v := range resp.Config.ChannelTokenConsumerBy {
			r.Config.ChannelTokenConsumerBy = append(r.Config.ChannelTokenConsumerBy, types.StringValue(string(v)))
		}
		r.Config.ChannelTokenConsumerClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenConsumerClaim {
			r.Config.ChannelTokenConsumerClaim = append(r.Config.ChannelTokenConsumerClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenIntrospectionAuthorization = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionAuthorization)
		r.Config.ChannelTokenIntrospectionBodyArgs = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionBodyArgs)
		r.Config.ChannelTokenIntrospectionConsumerBy = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionConsumerBy {
			r.Config.ChannelTokenIntrospectionConsumerBy = append(r.Config.ChannelTokenIntrospectionConsumerBy, types.StringValue(string(v)))
		}
		r.Config.ChannelTokenIntrospectionConsumerClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionConsumerClaim {
			r.Config.ChannelTokenIntrospectionConsumerClaim = append(r.Config.ChannelTokenIntrospectionConsumerClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenIntrospectionEndpoint = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionEndpoint)
		r.Config.ChannelTokenIntrospectionHint = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionHint)
		r.Config.ChannelTokenIntrospectionJwtClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionJwtClaim {
			r.Config.ChannelTokenIntrospectionJwtClaim = append(r.Config.ChannelTokenIntrospectionJwtClaim, types.StringValue(v))
		}
		if resp.Config.ChannelTokenIntrospectionLeeway != nil {
			r.Config.ChannelTokenIntrospectionLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenIntrospectionLeeway)))
		} else {
			r.Config.ChannelTokenIntrospectionLeeway = types.NumberNull()
		}
		r.Config.ChannelTokenIntrospectionScopesClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionScopesClaim {
			r.Config.ChannelTokenIntrospectionScopesClaim = append(r.Config.ChannelTokenIntrospectionScopesClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenIntrospectionScopesRequired = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionScopesRequired {
			r.Config.ChannelTokenIntrospectionScopesRequired = append(r.Config.ChannelTokenIntrospectionScopesRequired, types.StringValue(v))
		}
		if resp.Config.ChannelTokenIntrospectionTimeout != nil {
			r.Config.ChannelTokenIntrospectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenIntrospectionTimeout)))
		} else {
			r.Config.ChannelTokenIntrospectionTimeout = types.NumberNull()
		}
		r.Config.ChannelTokenIssuer = types.StringPointerValue(resp.Config.ChannelTokenIssuer)
		r.Config.ChannelTokenJwksURI = types.StringPointerValue(resp.Config.ChannelTokenJwksURI)
		r.Config.ChannelTokenKeyset = types.StringPointerValue(resp.Config.ChannelTokenKeyset)
		if resp.Config.ChannelTokenLeeway != nil {
			r.Config.ChannelTokenLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenLeeway)))
		} else {
			r.Config.ChannelTokenLeeway = types.NumberNull()
		}
		r.Config.ChannelTokenOptional = types.BoolPointerValue(resp.Config.ChannelTokenOptional)
		r.Config.ChannelTokenRequestHeader = types.StringPointerValue(resp.Config.ChannelTokenRequestHeader)
		r.Config.ChannelTokenScopesClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenScopesClaim {
			r.Config.ChannelTokenScopesClaim = append(r.Config.ChannelTokenScopesClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenScopesRequired = []types.String{}
		for _, v := range resp.Config.ChannelTokenScopesRequired {
			r.Config.ChannelTokenScopesRequired = append(r.Config.ChannelTokenScopesRequired, types.StringValue(v))
		}
		if resp.Config.ChannelTokenSigningAlgorithm != nil {
			r.Config.ChannelTokenSigningAlgorithm = types.StringValue(string(*resp.Config.ChannelTokenSigningAlgorithm))
		} else {
			r.Config.ChannelTokenSigningAlgorithm = types.StringNull()
		}
		r.Config.ChannelTokenUpstreamHeader = types.StringPointerValue(resp.Config.ChannelTokenUpstreamHeader)
		if resp.Config.ChannelTokenUpstreamLeeway != nil {
			r.Config.ChannelTokenUpstreamLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenUpstreamLeeway)))
		} else {
			r.Config.ChannelTokenUpstreamLeeway = types.NumberNull()
		}
		r.Config.EnableAccessTokenIntrospection = types.BoolPointerValue(resp.Config.EnableAccessTokenIntrospection)
		r.Config.EnableChannelTokenIntrospection = types.BoolPointerValue(resp.Config.EnableChannelTokenIntrospection)
		r.Config.EnableHsSignatures = types.BoolPointerValue(resp.Config.EnableHsSignatures)
		r.Config.EnableInstrumentation = types.BoolPointerValue(resp.Config.EnableInstrumentation)
		r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
		if len(resp.Config.SetClaims) > 0 {
			r.Config.SetClaims = make(map[string]types.String)
			for key1, value1 := range resp.Config.SetClaims {
				result1, _ := json.Marshal(value1)
				r.Config.SetClaims[key1] = types.StringValue(string(result1))
			}
		}
		r.Config.TrustAccessTokenIntrospection = types.BoolPointerValue(resp.Config.TrustAccessTokenIntrospection)
		r.Config.TrustChannelTokenIntrospection = types.BoolPointerValue(resp.Config.TrustChannelTokenIntrospection)
		r.Config.VerifyAccessTokenExpiry = types.BoolPointerValue(resp.Config.VerifyAccessTokenExpiry)
		r.Config.VerifyAccessTokenIntrospectionExpiry = types.BoolPointerValue(resp.Config.VerifyAccessTokenIntrospectionExpiry)
		r.Config.VerifyAccessTokenIntrospectionScopes = types.BoolPointerValue(resp.Config.VerifyAccessTokenIntrospectionScopes)
		r.Config.VerifyAccessTokenScopes = types.BoolPointerValue(resp.Config.VerifyAccessTokenScopes)
		r.Config.VerifyAccessTokenSignature = types.BoolPointerValue(resp.Config.VerifyAccessTokenSignature)
		r.Config.VerifyChannelTokenExpiry = types.BoolPointerValue(resp.Config.VerifyChannelTokenExpiry)
		r.Config.VerifyChannelTokenIntrospectionExpiry = types.BoolPointerValue(resp.Config.VerifyChannelTokenIntrospectionExpiry)
		r.Config.VerifyChannelTokenIntrospectionScopes = types.BoolPointerValue(resp.Config.VerifyChannelTokenIntrospectionScopes)
		r.Config.VerifyChannelTokenScopes = types.BoolPointerValue(resp.Config.VerifyChannelTokenScopes)
		r.Config.VerifyChannelTokenSignature = types.BoolPointerValue(resp.Config.VerifyChannelTokenSignature)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}
}
