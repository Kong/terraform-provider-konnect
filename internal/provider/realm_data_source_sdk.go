// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *RealmDataSourceModel) ToOperationsGetRealmRequest(ctx context.Context) (*operations.GetRealmRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var realmID string
	realmID = r.ID.ValueString()

	out := operations.GetRealmRequest{
		RealmID: realmID,
	}

	return &out, diags
}

func (r *RealmDataSourceModel) RefreshFromSharedConsumerRealm(ctx context.Context, resp *shared.ConsumerRealm) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AllowAllControlPlanes = types.BoolValue(resp.AllowAllControlPlanes)
		r.AllowedControlPlanes = make([]types.String, 0, len(resp.AllowedControlPlanes))
		for _, v := range resp.AllowedControlPlanes {
			r.AllowedControlPlanes = append(r.AllowedControlPlanes, types.StringValue(v))
		}
		r.ConsumerGroups = make([]types.String, 0, len(resp.ConsumerGroups))
		for _, v := range resp.ConsumerGroups {
			r.ConsumerGroups = append(r.ConsumerGroups, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.NegativeTTL = types.Int64PointerValue(resp.NegativeTTL)
		r.TTL = types.Int64PointerValue(resp.TTL)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
