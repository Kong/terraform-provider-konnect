// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
	"time"
)

func (r *MeshMultiZoneServiceListDataSourceModel) RefreshFromSharedMeshMultiZoneServiceList(resp *shared.MeshMultiZoneServiceList) {
	if resp != nil {
		r.Items = []tfTypes.MeshMultiZoneServiceItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items1 tfTypes.MeshMultiZoneServiceItem
			if itemsItem.CreationTime != nil {
				items1.CreationTime = types.StringValue(itemsItem.CreationTime.Format(time.RFC3339Nano))
			} else {
				items1.CreationTime = types.StringNull()
			}
			if len(itemsItem.Labels) > 0 {
				items1.Labels = make(map[string]types.String)
				for key, value := range itemsItem.Labels {
					items1.Labels[key] = types.StringValue(value)
				}
			}
			items1.Mesh = types.StringPointerValue(itemsItem.Mesh)
			if itemsItem.ModificationTime != nil {
				items1.ModificationTime = types.StringValue(itemsItem.ModificationTime.Format(time.RFC3339Nano))
			} else {
				items1.ModificationTime = types.StringNull()
			}
			items1.Name = types.StringValue(itemsItem.Name)
			items1.Spec.Ports = []tfTypes.Ports{}
			for portsCount, portsItem := range itemsItem.Spec.Ports {
				var ports1 tfTypes.Ports
				ports1.AppProtocol = types.StringPointerValue(portsItem.AppProtocol)
				ports1.Name = types.StringPointerValue(portsItem.Name)
				ports1.Port = types.Int64Value(int64(portsItem.Port))
				if portsCount+1 > len(items1.Spec.Ports) {
					items1.Spec.Ports = append(items1.Spec.Ports, ports1)
				} else {
					items1.Spec.Ports[portsCount].AppProtocol = ports1.AppProtocol
					items1.Spec.Ports[portsCount].Name = ports1.Name
					items1.Spec.Ports[portsCount].Port = ports1.Port
				}
			}
			if len(itemsItem.Spec.Selector.MeshService.MatchLabels) > 0 {
				items1.Spec.Selector.MeshService.MatchLabels = make(map[string]types.String)
				for key1, value1 := range itemsItem.Spec.Selector.MeshService.MatchLabels {
					items1.Spec.Selector.MeshService.MatchLabels[key1] = types.StringValue(value1)
				}
			}
			if itemsItem.Status == nil {
				items1.Status = nil
			} else {
				items1.Status = &tfTypes.MeshMultiZoneServiceItemStatus{}
				items1.Status.Addresses = []tfTypes.Addresses{}
				for addressesCount, addressesItem := range itemsItem.Status.Addresses {
					var addresses1 tfTypes.Addresses
					addresses1.Hostname = types.StringPointerValue(addressesItem.Hostname)
					if addressesItem.HostnameGeneratorRef == nil {
						addresses1.HostnameGeneratorRef = nil
					} else {
						addresses1.HostnameGeneratorRef = &tfTypes.HostnameGeneratorRef{}
						addresses1.HostnameGeneratorRef.CoreName = types.StringValue(addressesItem.HostnameGeneratorRef.CoreName)
					}
					addresses1.Origin = types.StringPointerValue(addressesItem.Origin)
					if addressesCount+1 > len(items1.Status.Addresses) {
						items1.Status.Addresses = append(items1.Status.Addresses, addresses1)
					} else {
						items1.Status.Addresses[addressesCount].Hostname = addresses1.Hostname
						items1.Status.Addresses[addressesCount].HostnameGeneratorRef = addresses1.HostnameGeneratorRef
						items1.Status.Addresses[addressesCount].Origin = addresses1.Origin
					}
				}
				items1.Status.HostnameGenerators = []tfTypes.HostnameGenerators{}
				for hostnameGeneratorsCount, hostnameGeneratorsItem := range itemsItem.Status.HostnameGenerators {
					var hostnameGenerators1 tfTypes.HostnameGenerators
					hostnameGenerators1.Conditions = []tfTypes.Conditions{}
					for conditionsCount, conditionsItem := range hostnameGeneratorsItem.Conditions {
						var conditions1 tfTypes.Conditions
						conditions1.Message = types.StringValue(conditionsItem.Message)
						conditions1.Reason = types.StringValue(conditionsItem.Reason)
						conditions1.Status = types.StringValue(string(conditionsItem.Status))
						conditions1.Type = types.StringValue(conditionsItem.Type)
						if conditionsCount+1 > len(hostnameGenerators1.Conditions) {
							hostnameGenerators1.Conditions = append(hostnameGenerators1.Conditions, conditions1)
						} else {
							hostnameGenerators1.Conditions[conditionsCount].Message = conditions1.Message
							hostnameGenerators1.Conditions[conditionsCount].Reason = conditions1.Reason
							hostnameGenerators1.Conditions[conditionsCount].Status = conditions1.Status
							hostnameGenerators1.Conditions[conditionsCount].Type = conditions1.Type
						}
					}
					hostnameGenerators1.HostnameGeneratorRef.CoreName = types.StringValue(hostnameGeneratorsItem.HostnameGeneratorRef.CoreName)
					if hostnameGeneratorsCount+1 > len(items1.Status.HostnameGenerators) {
						items1.Status.HostnameGenerators = append(items1.Status.HostnameGenerators, hostnameGenerators1)
					} else {
						items1.Status.HostnameGenerators[hostnameGeneratorsCount].Conditions = hostnameGenerators1.Conditions
						items1.Status.HostnameGenerators[hostnameGeneratorsCount].HostnameGeneratorRef = hostnameGenerators1.HostnameGeneratorRef
					}
				}
				items1.Status.MeshServices = []tfTypes.MeshMultiZoneServiceItemMeshServices{}
				for meshServicesCount, meshServicesItem := range itemsItem.Status.MeshServices {
					var meshServices1 tfTypes.MeshMultiZoneServiceItemMeshServices
					meshServices1.Mesh = types.StringValue(meshServicesItem.Mesh)
					meshServices1.Name = types.StringValue(meshServicesItem.Name)
					meshServices1.Namespace = types.StringValue(meshServicesItem.Namespace)
					meshServices1.Zone = types.StringValue(meshServicesItem.Zone)
					if meshServicesCount+1 > len(items1.Status.MeshServices) {
						items1.Status.MeshServices = append(items1.Status.MeshServices, meshServices1)
					} else {
						items1.Status.MeshServices[meshServicesCount].Mesh = meshServices1.Mesh
						items1.Status.MeshServices[meshServicesCount].Name = meshServices1.Name
						items1.Status.MeshServices[meshServicesCount].Namespace = meshServices1.Namespace
						items1.Status.MeshServices[meshServicesCount].Zone = meshServices1.Zone
					}
				}
				items1.Status.Vips = []tfTypes.Vip{}
				for vipsCount, vipsItem := range itemsItem.Status.Vips {
					var vips1 tfTypes.Vip
					vips1.IP = types.StringPointerValue(vipsItem.IP)
					if vipsCount+1 > len(items1.Status.Vips) {
						items1.Status.Vips = append(items1.Status.Vips, vips1)
					} else {
						items1.Status.Vips[vipsCount].IP = vips1.IP
					}
				}
			}
			items1.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items1)
			} else {
				r.Items[itemsCount].CreationTime = items1.CreationTime
				r.Items[itemsCount].Labels = items1.Labels
				r.Items[itemsCount].Mesh = items1.Mesh
				r.Items[itemsCount].ModificationTime = items1.ModificationTime
				r.Items[itemsCount].Name = items1.Name
				r.Items[itemsCount].Spec = items1.Spec
				r.Items[itemsCount].Status = items1.Status
				r.Items[itemsCount].Type = items1.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		if resp.Total != nil {
			r.Total = types.NumberValue(big.NewFloat(float64(*resp.Total)))
		} else {
			r.Total = types.NumberNull()
		}
	}
}
