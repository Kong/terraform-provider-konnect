// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginRequestTransformerResourceModel) RefreshFromSharedRequestTransformerPlugin(ctx context.Context, resp *shared.RequestTransformerPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.RequestTransformerPluginConfig{}
			if resp.Config.Add == nil {
				r.Config.Add = nil
			} else {
				r.Config.Add = &tfTypes.Add{}
				r.Config.Add.Body = make([]types.String, 0, len(resp.Config.Add.Body))
				for _, v := range resp.Config.Add.Body {
					r.Config.Add.Body = append(r.Config.Add.Body, types.StringValue(v))
				}
				r.Config.Add.Headers = make([]types.String, 0, len(resp.Config.Add.Headers))
				for _, v := range resp.Config.Add.Headers {
					r.Config.Add.Headers = append(r.Config.Add.Headers, types.StringValue(v))
				}
				r.Config.Add.Querystring = make([]types.String, 0, len(resp.Config.Add.Querystring))
				for _, v := range resp.Config.Add.Querystring {
					r.Config.Add.Querystring = append(r.Config.Add.Querystring, types.StringValue(v))
				}
			}
			if resp.Config.Append == nil {
				r.Config.Append = nil
			} else {
				r.Config.Append = &tfTypes.Add{}
				r.Config.Append.Body = make([]types.String, 0, len(resp.Config.Append.Body))
				for _, v := range resp.Config.Append.Body {
					r.Config.Append.Body = append(r.Config.Append.Body, types.StringValue(v))
				}
				r.Config.Append.Headers = make([]types.String, 0, len(resp.Config.Append.Headers))
				for _, v := range resp.Config.Append.Headers {
					r.Config.Append.Headers = append(r.Config.Append.Headers, types.StringValue(v))
				}
				r.Config.Append.Querystring = make([]types.String, 0, len(resp.Config.Append.Querystring))
				for _, v := range resp.Config.Append.Querystring {
					r.Config.Append.Querystring = append(r.Config.Append.Querystring, types.StringValue(v))
				}
			}
			r.Config.HTTPMethod = types.StringPointerValue(resp.Config.HTTPMethod)
			if resp.Config.Remove == nil {
				r.Config.Remove = nil
			} else {
				r.Config.Remove = &tfTypes.Add{}
				r.Config.Remove.Body = make([]types.String, 0, len(resp.Config.Remove.Body))
				for _, v := range resp.Config.Remove.Body {
					r.Config.Remove.Body = append(r.Config.Remove.Body, types.StringValue(v))
				}
				r.Config.Remove.Headers = make([]types.String, 0, len(resp.Config.Remove.Headers))
				for _, v := range resp.Config.Remove.Headers {
					r.Config.Remove.Headers = append(r.Config.Remove.Headers, types.StringValue(v))
				}
				r.Config.Remove.Querystring = make([]types.String, 0, len(resp.Config.Remove.Querystring))
				for _, v := range resp.Config.Remove.Querystring {
					r.Config.Remove.Querystring = append(r.Config.Remove.Querystring, types.StringValue(v))
				}
			}
			if resp.Config.Rename == nil {
				r.Config.Rename = nil
			} else {
				r.Config.Rename = &tfTypes.Add{}
				r.Config.Rename.Body = make([]types.String, 0, len(resp.Config.Rename.Body))
				for _, v := range resp.Config.Rename.Body {
					r.Config.Rename.Body = append(r.Config.Rename.Body, types.StringValue(v))
				}
				r.Config.Rename.Headers = make([]types.String, 0, len(resp.Config.Rename.Headers))
				for _, v := range resp.Config.Rename.Headers {
					r.Config.Rename.Headers = append(r.Config.Rename.Headers, types.StringValue(v))
				}
				r.Config.Rename.Querystring = make([]types.String, 0, len(resp.Config.Rename.Querystring))
				for _, v := range resp.Config.Rename.Querystring {
					r.Config.Rename.Querystring = append(r.Config.Rename.Querystring, types.StringValue(v))
				}
			}
			if resp.Config.Replace == nil {
				r.Config.Replace = nil
			} else {
				r.Config.Replace = &tfTypes.Replace{}
				r.Config.Replace.Body = make([]types.String, 0, len(resp.Config.Replace.Body))
				for _, v := range resp.Config.Replace.Body {
					r.Config.Replace.Body = append(r.Config.Replace.Body, types.StringValue(v))
				}
				r.Config.Replace.Headers = make([]types.String, 0, len(resp.Config.Replace.Headers))
				for _, v := range resp.Config.Replace.Headers {
					r.Config.Replace.Headers = append(r.Config.Replace.Headers, types.StringValue(v))
				}
				r.Config.Replace.Querystring = make([]types.String, 0, len(resp.Config.Replace.Querystring))
				for _, v := range resp.Config.Replace.Querystring {
					r.Config.Replace.Querystring = append(r.Config.Replace.Querystring, types.StringValue(v))
				}
				r.Config.Replace.URI = types.StringPointerValue(resp.Config.Replace.URI)
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginRequestTransformerResourceModel) ToOperationsCreateRequesttransformerPluginRequest(ctx context.Context) (*operations.CreateRequesttransformerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	requestTransformerPlugin, requestTransformerPluginDiags := r.ToSharedRequestTransformerPlugin(ctx)
	diags.Append(requestTransformerPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateRequesttransformerPluginRequest{
		ControlPlaneID:           controlPlaneID,
		RequestTransformerPlugin: *requestTransformerPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTransformerResourceModel) ToOperationsDeleteRequesttransformerPluginRequest(ctx context.Context) (*operations.DeleteRequesttransformerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteRequesttransformerPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTransformerResourceModel) ToOperationsGetRequesttransformerPluginRequest(ctx context.Context) (*operations.GetRequesttransformerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetRequesttransformerPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTransformerResourceModel) ToOperationsUpdateRequesttransformerPluginRequest(ctx context.Context) (*operations.UpdateRequesttransformerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	requestTransformerPlugin, requestTransformerPluginDiags := r.ToSharedRequestTransformerPlugin(ctx)
	diags.Append(requestTransformerPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateRequesttransformerPluginRequest{
		PluginID:                 pluginID,
		ControlPlaneID:           controlPlaneID,
		RequestTransformerPlugin: *requestTransformerPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginRequestTransformerResourceModel) ToSharedRequestTransformerPlugin(ctx context.Context) (*shared.RequestTransformerPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.RequestTransformerPluginOrdering
	if r.Ordering != nil {
		var after *shared.RequestTransformerPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.RequestTransformerPluginAfter{
				Access: access,
			}
		}
		var before *shared.RequestTransformerPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.RequestTransformerPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.RequestTransformerPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.RequestTransformerPluginPartials
	if r.Partials != nil {
		partials = make([]shared.RequestTransformerPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.RequestTransformerPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.RequestTransformerPluginConfig
	if r.Config != nil {
		var add *shared.Add
		if r.Config.Add != nil {
			body := make([]string, 0, len(r.Config.Add.Body))
			for _, bodyItem := range r.Config.Add.Body {
				body = append(body, bodyItem.ValueString())
			}
			headers := make([]string, 0, len(r.Config.Add.Headers))
			for _, headersItem := range r.Config.Add.Headers {
				headers = append(headers, headersItem.ValueString())
			}
			querystring := make([]string, 0, len(r.Config.Add.Querystring))
			for _, querystringItem := range r.Config.Add.Querystring {
				querystring = append(querystring, querystringItem.ValueString())
			}
			add = &shared.Add{
				Body:        body,
				Headers:     headers,
				Querystring: querystring,
			}
		}
		var append1 *shared.Append
		if r.Config.Append != nil {
			body1 := make([]string, 0, len(r.Config.Append.Body))
			for _, bodyItem1 := range r.Config.Append.Body {
				body1 = append(body1, bodyItem1.ValueString())
			}
			headers1 := make([]string, 0, len(r.Config.Append.Headers))
			for _, headersItem1 := range r.Config.Append.Headers {
				headers1 = append(headers1, headersItem1.ValueString())
			}
			querystring1 := make([]string, 0, len(r.Config.Append.Querystring))
			for _, querystringItem1 := range r.Config.Append.Querystring {
				querystring1 = append(querystring1, querystringItem1.ValueString())
			}
			append1 = &shared.Append{
				Body:        body1,
				Headers:     headers1,
				Querystring: querystring1,
			}
		}
		httpMethod := new(string)
		if !r.Config.HTTPMethod.IsUnknown() && !r.Config.HTTPMethod.IsNull() {
			*httpMethod = r.Config.HTTPMethod.ValueString()
		} else {
			httpMethod = nil
		}
		var remove *shared.Remove
		if r.Config.Remove != nil {
			body2 := make([]string, 0, len(r.Config.Remove.Body))
			for _, bodyItem2 := range r.Config.Remove.Body {
				body2 = append(body2, bodyItem2.ValueString())
			}
			headers2 := make([]string, 0, len(r.Config.Remove.Headers))
			for _, headersItem2 := range r.Config.Remove.Headers {
				headers2 = append(headers2, headersItem2.ValueString())
			}
			querystring2 := make([]string, 0, len(r.Config.Remove.Querystring))
			for _, querystringItem2 := range r.Config.Remove.Querystring {
				querystring2 = append(querystring2, querystringItem2.ValueString())
			}
			remove = &shared.Remove{
				Body:        body2,
				Headers:     headers2,
				Querystring: querystring2,
			}
		}
		var rename *shared.Rename
		if r.Config.Rename != nil {
			body3 := make([]string, 0, len(r.Config.Rename.Body))
			for _, bodyItem3 := range r.Config.Rename.Body {
				body3 = append(body3, bodyItem3.ValueString())
			}
			headers3 := make([]string, 0, len(r.Config.Rename.Headers))
			for _, headersItem3 := range r.Config.Rename.Headers {
				headers3 = append(headers3, headersItem3.ValueString())
			}
			querystring3 := make([]string, 0, len(r.Config.Rename.Querystring))
			for _, querystringItem3 := range r.Config.Rename.Querystring {
				querystring3 = append(querystring3, querystringItem3.ValueString())
			}
			rename = &shared.Rename{
				Body:        body3,
				Headers:     headers3,
				Querystring: querystring3,
			}
		}
		var replace *shared.Replace
		if r.Config.Replace != nil {
			body4 := make([]string, 0, len(r.Config.Replace.Body))
			for _, bodyItem4 := range r.Config.Replace.Body {
				body4 = append(body4, bodyItem4.ValueString())
			}
			headers4 := make([]string, 0, len(r.Config.Replace.Headers))
			for _, headersItem4 := range r.Config.Replace.Headers {
				headers4 = append(headers4, headersItem4.ValueString())
			}
			querystring4 := make([]string, 0, len(r.Config.Replace.Querystring))
			for _, querystringItem4 := range r.Config.Replace.Querystring {
				querystring4 = append(querystring4, querystringItem4.ValueString())
			}
			uri := new(string)
			if !r.Config.Replace.URI.IsUnknown() && !r.Config.Replace.URI.IsNull() {
				*uri = r.Config.Replace.URI.ValueString()
			} else {
				uri = nil
			}
			replace = &shared.Replace{
				Body:        body4,
				Headers:     headers4,
				Querystring: querystring4,
				URI:         uri,
			}
		}
		config = &shared.RequestTransformerPluginConfig{
			Add:        add,
			Append:     append1,
			HTTPMethod: httpMethod,
			Remove:     remove,
			Rename:     rename,
			Replace:    replace,
		}
	}
	var consumer *shared.RequestTransformerPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.RequestTransformerPluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.RequestTransformerPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.RequestTransformerPluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.RequestTransformerPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.RequestTransformerPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.RequestTransformerPluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.RequestTransformerPluginRoute{
			ID: id4,
		}
	}
	var service *shared.RequestTransformerPluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.RequestTransformerPluginService{
			ID: id5,
		}
	}
	out := shared.RequestTransformerPlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}
