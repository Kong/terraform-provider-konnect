// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginRateLimitingDataSourceModel) RefreshFromSharedRateLimitingPlugin(resp *shared.RateLimitingPlugin) {
	if resp != nil {
		if resp.Config.Day != nil {
			r.Config.Day = types.NumberValue(big.NewFloat(float64(*resp.Config.Day)))
		} else {
			r.Config.Day = types.NumberNull()
		}
		if resp.Config.ErrorCode != nil {
			r.Config.ErrorCode = types.NumberValue(big.NewFloat(float64(*resp.Config.ErrorCode)))
		} else {
			r.Config.ErrorCode = types.NumberNull()
		}
		r.Config.ErrorMessage = types.StringPointerValue(resp.Config.ErrorMessage)
		r.Config.FaultTolerant = types.BoolPointerValue(resp.Config.FaultTolerant)
		r.Config.HeaderName = types.StringPointerValue(resp.Config.HeaderName)
		r.Config.HideClientHeaders = types.BoolPointerValue(resp.Config.HideClientHeaders)
		if resp.Config.Hour != nil {
			r.Config.Hour = types.NumberValue(big.NewFloat(float64(*resp.Config.Hour)))
		} else {
			r.Config.Hour = types.NumberNull()
		}
		if resp.Config.LimitBy != nil {
			r.Config.LimitBy = types.StringValue(string(*resp.Config.LimitBy))
		} else {
			r.Config.LimitBy = types.StringNull()
		}
		if resp.Config.Minute != nil {
			r.Config.Minute = types.NumberValue(big.NewFloat(float64(*resp.Config.Minute)))
		} else {
			r.Config.Minute = types.NumberNull()
		}
		if resp.Config.Month != nil {
			r.Config.Month = types.NumberValue(big.NewFloat(float64(*resp.Config.Month)))
		} else {
			r.Config.Month = types.NumberNull()
		}
		r.Config.Path = types.StringPointerValue(resp.Config.Path)
		if resp.Config.Policy != nil {
			r.Config.Policy = types.StringValue(string(*resp.Config.Policy))
		} else {
			r.Config.Policy = types.StringNull()
		}
		r.Config.RedisDatabase = types.Int64PointerValue(resp.Config.RedisDatabase)
		r.Config.RedisHost = types.StringPointerValue(resp.Config.RedisHost)
		r.Config.RedisPassword = types.StringPointerValue(resp.Config.RedisPassword)
		r.Config.RedisPort = types.Int64PointerValue(resp.Config.RedisPort)
		r.Config.RedisServerName = types.StringPointerValue(resp.Config.RedisServerName)
		r.Config.RedisSsl = types.BoolPointerValue(resp.Config.RedisSsl)
		r.Config.RedisSslVerify = types.BoolPointerValue(resp.Config.RedisSslVerify)
		if resp.Config.RedisTimeout != nil {
			r.Config.RedisTimeout = types.NumberValue(big.NewFloat(float64(*resp.Config.RedisTimeout)))
		} else {
			r.Config.RedisTimeout = types.NumberNull()
		}
		r.Config.RedisUsername = types.StringPointerValue(resp.Config.RedisUsername)
		if resp.Config.Second != nil {
			r.Config.Second = types.NumberValue(big.NewFloat(float64(*resp.Config.Second)))
		} else {
			r.Config.Second = types.NumberNull()
		}
		if resp.Config.SyncRate != nil {
			r.Config.SyncRate = types.NumberValue(big.NewFloat(float64(*resp.Config.SyncRate)))
		} else {
			r.Config.SyncRate = types.NumberNull()
		}
		if resp.Config.Year != nil {
			r.Config.Year = types.NumberValue(big.NewFloat(float64(*resp.Config.Year)))
		} else {
			r.Config.Year = types.NumberNull()
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}
}
