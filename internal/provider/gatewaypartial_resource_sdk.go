// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPartialResourceModel) ToSharedPartial(ctx context.Context) (*shared.Partial, diag.Diagnostics) {
	var diags diag.Diagnostics

	var config interface{}
	_ = json.Unmarshal([]byte(r.Config.ValueString()), &config)
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var typeVar string
	typeVar = r.Type.ValueString()

	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	out := shared.Partial{
		Config:    config,
		CreatedAt: createdAt,
		ID:        id,
		Name:      name,
		Tags:      tags,
		Type:      typeVar,
		UpdatedAt: updatedAt,
	}

	return &out, diags
}

func (r *GatewayPartialResourceModel) ToOperationsCreatePartialRequest(ctx context.Context) (*operations.CreatePartialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	partial, partialDiags := r.ToSharedPartial(ctx)
	diags.Append(partialDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePartialRequest{
		ControlPlaneID: controlPlaneID,
		Partial:        *partial,
	}

	return &out, diags
}

func (r *GatewayPartialResourceModel) ToOperationsUpsertPartialRequest(ctx context.Context) (*operations.UpsertPartialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var partialID string
	partialID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	partial, partialDiags := r.ToSharedPartial(ctx)
	diags.Append(partialDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpsertPartialRequest{
		PartialID:      partialID,
		ControlPlaneID: controlPlaneID,
		Partial:        *partial,
	}

	return &out, diags
}

func (r *GatewayPartialResourceModel) ToOperationsGetPartialRequest(ctx context.Context) (*operations.GetPartialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var partialID string
	partialID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetPartialRequest{
		PartialID:      partialID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPartialResourceModel) ToOperationsDeletePartialRequest(ctx context.Context) (*operations.DeletePartialRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var partialID string
	partialID = r.ID.ValueString()

	out := operations.DeletePartialRequest{
		ControlPlaneID: controlPlaneID,
		PartialID:      partialID,
	}

	return &out, diags
}

func (r *GatewayPartialResourceModel) RefreshFromSharedPartial(ctx context.Context, resp *shared.Partial) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		configResult, _ := json.Marshal(resp.Config)
		r.Config = types.StringValue(string(configResult))
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.Type = types.StringValue(resp.Type)
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
