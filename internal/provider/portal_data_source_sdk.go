// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *PortalDataSourceModel) RefreshFromSharedPortal(ctx context.Context, resp *shared.Portal) diag.Diagnostics {
	var diags diag.Diagnostics

	r.AuthenticationEnabled = types.BoolPointerValue(resp.AuthenticationEnabled)
	r.AutoApproveApplications = types.BoolPointerValue(resp.AutoApproveApplications)
	r.AutoApproveDevelopers = types.BoolPointerValue(resp.AutoApproveDevelopers)
	r.CanonicalDomain = types.StringValue(resp.CanonicalDomain)
	r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
	r.DefaultAPIVisibility = types.StringValue(string(resp.DefaultAPIVisibility))
	r.DefaultApplicationAuthStrategyID = types.StringPointerValue(resp.DefaultApplicationAuthStrategyID)
	r.DefaultDomain = types.StringValue(resp.DefaultDomain)
	r.DefaultPageVisibility = types.StringValue(string(resp.DefaultPageVisibility))
	r.Description = types.StringPointerValue(resp.Description)
	r.DisplayName = types.StringValue(resp.DisplayName)
	r.ID = types.StringValue(resp.ID)
	if len(resp.Labels) > 0 {
		r.Labels = make(map[string]types.String, len(resp.Labels))
		for key, value := range resp.Labels {
			r.Labels[key] = types.StringPointerValue(value)
		}
	}
	r.Name = types.StringValue(resp.Name)
	r.RbacEnabled = types.BoolPointerValue(resp.RbacEnabled)
	r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))

	return diags
}

func (r *PortalDataSourceModel) ToOperationsListPortalsRequest(ctx context.Context) (*operations.ListPortalsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	pageNumber := new(int64)
	if !r.PageNumber.IsUnknown() && !r.PageNumber.IsNull() {
		*pageNumber = r.PageNumber.ValueInt64()
	} else {
		pageNumber = nil
	}
	sort := new(string)
	if !r.Sort.IsUnknown() && !r.Sort.IsNull() {
		*sort = r.Sort.ValueString()
	} else {
		sort = nil
	}
	var filter *shared.PortalFilterParameters
	if r.Filter != nil {
		var id *shared.UUIDFieldFilter
		if r.Filter.ID != nil {
			eq := new(string)
			if !r.Filter.ID.Eq.IsUnknown() && !r.Filter.ID.Eq.IsNull() {
				*eq = r.Filter.ID.Eq.ValueString()
			} else {
				eq = nil
			}
			oeq := new(string)
			if !r.Filter.ID.Oeq.IsUnknown() && !r.Filter.ID.Oeq.IsNull() {
				*oeq = r.Filter.ID.Oeq.ValueString()
			} else {
				oeq = nil
			}
			neq := new(string)
			if !r.Filter.ID.Neq.IsUnknown() && !r.Filter.ID.Neq.IsNull() {
				*neq = r.Filter.ID.Neq.ValueString()
			} else {
				neq = nil
			}
			id = &shared.UUIDFieldFilter{
				Eq:  eq,
				Oeq: oeq,
				Neq: neq,
			}
		}
		var name *shared.StringFieldFilter
		if r.Filter.Name != nil {
			eq1 := new(string)
			if !r.Filter.Name.Eq.IsUnknown() && !r.Filter.Name.Eq.IsNull() {
				*eq1 = r.Filter.Name.Eq.ValueString()
			} else {
				eq1 = nil
			}
			contains := new(string)
			if !r.Filter.Name.Contains.IsUnknown() && !r.Filter.Name.Contains.IsNull() {
				*contains = r.Filter.Name.Contains.ValueString()
			} else {
				contains = nil
			}
			ocontains := new(string)
			if !r.Filter.Name.Ocontains.IsUnknown() && !r.Filter.Name.Ocontains.IsNull() {
				*ocontains = r.Filter.Name.Ocontains.ValueString()
			} else {
				ocontains = nil
			}
			oeq1 := new(string)
			if !r.Filter.Name.Oeq.IsUnknown() && !r.Filter.Name.Oeq.IsNull() {
				*oeq1 = r.Filter.Name.Oeq.ValueString()
			} else {
				oeq1 = nil
			}
			neq1 := new(string)
			if !r.Filter.Name.Neq.IsUnknown() && !r.Filter.Name.Neq.IsNull() {
				*neq1 = r.Filter.Name.Neq.ValueString()
			} else {
				neq1 = nil
			}
			name = &shared.StringFieldFilter{
				Eq:        eq1,
				Contains:  contains,
				Ocontains: ocontains,
				Oeq:       oeq1,
				Neq:       neq1,
			}
		}
		var description *shared.StringFieldFilter
		if r.Filter.Description != nil {
			eq2 := new(string)
			if !r.Filter.Description.Eq.IsUnknown() && !r.Filter.Description.Eq.IsNull() {
				*eq2 = r.Filter.Description.Eq.ValueString()
			} else {
				eq2 = nil
			}
			contains1 := new(string)
			if !r.Filter.Description.Contains.IsUnknown() && !r.Filter.Description.Contains.IsNull() {
				*contains1 = r.Filter.Description.Contains.ValueString()
			} else {
				contains1 = nil
			}
			ocontains1 := new(string)
			if !r.Filter.Description.Ocontains.IsUnknown() && !r.Filter.Description.Ocontains.IsNull() {
				*ocontains1 = r.Filter.Description.Ocontains.ValueString()
			} else {
				ocontains1 = nil
			}
			oeq2 := new(string)
			if !r.Filter.Description.Oeq.IsUnknown() && !r.Filter.Description.Oeq.IsNull() {
				*oeq2 = r.Filter.Description.Oeq.ValueString()
			} else {
				oeq2 = nil
			}
			neq2 := new(string)
			if !r.Filter.Description.Neq.IsUnknown() && !r.Filter.Description.Neq.IsNull() {
				*neq2 = r.Filter.Description.Neq.ValueString()
			} else {
				neq2 = nil
			}
			description = &shared.StringFieldFilter{
				Eq:        eq2,
				Contains:  contains1,
				Ocontains: ocontains1,
				Oeq:       oeq2,
				Neq:       neq2,
			}
		}
		authenticationEnabled := new(bool)
		if !r.Filter.AuthenticationEnabled.IsUnknown() && !r.Filter.AuthenticationEnabled.IsNull() {
			*authenticationEnabled = r.Filter.AuthenticationEnabled.ValueBool()
		} else {
			authenticationEnabled = nil
		}
		rbacEnabled := new(bool)
		if !r.Filter.RbacEnabled.IsUnknown() && !r.Filter.RbacEnabled.IsNull() {
			*rbacEnabled = r.Filter.RbacEnabled.ValueBool()
		} else {
			rbacEnabled = nil
		}
		var defaultAPIVisibility *shared.StringFieldFilter
		if r.Filter.DefaultAPIVisibility != nil {
			eq3 := new(string)
			if !r.Filter.DefaultAPIVisibility.Eq.IsUnknown() && !r.Filter.DefaultAPIVisibility.Eq.IsNull() {
				*eq3 = r.Filter.DefaultAPIVisibility.Eq.ValueString()
			} else {
				eq3 = nil
			}
			contains2 := new(string)
			if !r.Filter.DefaultAPIVisibility.Contains.IsUnknown() && !r.Filter.DefaultAPIVisibility.Contains.IsNull() {
				*contains2 = r.Filter.DefaultAPIVisibility.Contains.ValueString()
			} else {
				contains2 = nil
			}
			ocontains2 := new(string)
			if !r.Filter.DefaultAPIVisibility.Ocontains.IsUnknown() && !r.Filter.DefaultAPIVisibility.Ocontains.IsNull() {
				*ocontains2 = r.Filter.DefaultAPIVisibility.Ocontains.ValueString()
			} else {
				ocontains2 = nil
			}
			oeq3 := new(string)
			if !r.Filter.DefaultAPIVisibility.Oeq.IsUnknown() && !r.Filter.DefaultAPIVisibility.Oeq.IsNull() {
				*oeq3 = r.Filter.DefaultAPIVisibility.Oeq.ValueString()
			} else {
				oeq3 = nil
			}
			neq3 := new(string)
			if !r.Filter.DefaultAPIVisibility.Neq.IsUnknown() && !r.Filter.DefaultAPIVisibility.Neq.IsNull() {
				*neq3 = r.Filter.DefaultAPIVisibility.Neq.ValueString()
			} else {
				neq3 = nil
			}
			defaultAPIVisibility = &shared.StringFieldFilter{
				Eq:        eq3,
				Contains:  contains2,
				Ocontains: ocontains2,
				Oeq:       oeq3,
				Neq:       neq3,
			}
		}
		var defaultPageVisibility *shared.StringFieldFilter
		if r.Filter.DefaultPageVisibility != nil {
			eq4 := new(string)
			if !r.Filter.DefaultPageVisibility.Eq.IsUnknown() && !r.Filter.DefaultPageVisibility.Eq.IsNull() {
				*eq4 = r.Filter.DefaultPageVisibility.Eq.ValueString()
			} else {
				eq4 = nil
			}
			contains3 := new(string)
			if !r.Filter.DefaultPageVisibility.Contains.IsUnknown() && !r.Filter.DefaultPageVisibility.Contains.IsNull() {
				*contains3 = r.Filter.DefaultPageVisibility.Contains.ValueString()
			} else {
				contains3 = nil
			}
			ocontains3 := new(string)
			if !r.Filter.DefaultPageVisibility.Ocontains.IsUnknown() && !r.Filter.DefaultPageVisibility.Ocontains.IsNull() {
				*ocontains3 = r.Filter.DefaultPageVisibility.Ocontains.ValueString()
			} else {
				ocontains3 = nil
			}
			oeq4 := new(string)
			if !r.Filter.DefaultPageVisibility.Oeq.IsUnknown() && !r.Filter.DefaultPageVisibility.Oeq.IsNull() {
				*oeq4 = r.Filter.DefaultPageVisibility.Oeq.ValueString()
			} else {
				oeq4 = nil
			}
			neq4 := new(string)
			if !r.Filter.DefaultPageVisibility.Neq.IsUnknown() && !r.Filter.DefaultPageVisibility.Neq.IsNull() {
				*neq4 = r.Filter.DefaultPageVisibility.Neq.ValueString()
			} else {
				neq4 = nil
			}
			defaultPageVisibility = &shared.StringFieldFilter{
				Eq:        eq4,
				Contains:  contains3,
				Ocontains: ocontains3,
				Oeq:       oeq4,
				Neq:       neq4,
			}
		}
		var defaultApplicationAuthStrategyID *shared.UUIDFieldFilter
		if r.Filter.DefaultApplicationAuthStrategyID != nil {
			eq5 := new(string)
			if !r.Filter.DefaultApplicationAuthStrategyID.Eq.IsUnknown() && !r.Filter.DefaultApplicationAuthStrategyID.Eq.IsNull() {
				*eq5 = r.Filter.DefaultApplicationAuthStrategyID.Eq.ValueString()
			} else {
				eq5 = nil
			}
			oeq5 := new(string)
			if !r.Filter.DefaultApplicationAuthStrategyID.Oeq.IsUnknown() && !r.Filter.DefaultApplicationAuthStrategyID.Oeq.IsNull() {
				*oeq5 = r.Filter.DefaultApplicationAuthStrategyID.Oeq.ValueString()
			} else {
				oeq5 = nil
			}
			neq5 := new(string)
			if !r.Filter.DefaultApplicationAuthStrategyID.Neq.IsUnknown() && !r.Filter.DefaultApplicationAuthStrategyID.Neq.IsNull() {
				*neq5 = r.Filter.DefaultApplicationAuthStrategyID.Neq.ValueString()
			} else {
				neq5 = nil
			}
			defaultApplicationAuthStrategyID = &shared.UUIDFieldFilter{
				Eq:  eq5,
				Oeq: oeq5,
				Neq: neq5,
			}
		}
		autoApproveDevelopers := new(bool)
		if !r.Filter.AutoApproveDevelopers.IsUnknown() && !r.Filter.AutoApproveDevelopers.IsNull() {
			*autoApproveDevelopers = r.Filter.AutoApproveDevelopers.ValueBool()
		} else {
			autoApproveDevelopers = nil
		}
		autoApproveApplications := new(bool)
		if !r.Filter.AutoApproveApplications.IsUnknown() && !r.Filter.AutoApproveApplications.IsNull() {
			*autoApproveApplications = r.Filter.AutoApproveApplications.ValueBool()
		} else {
			autoApproveApplications = nil
		}
		var defaultDomain *shared.StringFieldFilter
		if r.Filter.DefaultDomain != nil {
			eq6 := new(string)
			if !r.Filter.DefaultDomain.Eq.IsUnknown() && !r.Filter.DefaultDomain.Eq.IsNull() {
				*eq6 = r.Filter.DefaultDomain.Eq.ValueString()
			} else {
				eq6 = nil
			}
			contains4 := new(string)
			if !r.Filter.DefaultDomain.Contains.IsUnknown() && !r.Filter.DefaultDomain.Contains.IsNull() {
				*contains4 = r.Filter.DefaultDomain.Contains.ValueString()
			} else {
				contains4 = nil
			}
			ocontains4 := new(string)
			if !r.Filter.DefaultDomain.Ocontains.IsUnknown() && !r.Filter.DefaultDomain.Ocontains.IsNull() {
				*ocontains4 = r.Filter.DefaultDomain.Ocontains.ValueString()
			} else {
				ocontains4 = nil
			}
			oeq6 := new(string)
			if !r.Filter.DefaultDomain.Oeq.IsUnknown() && !r.Filter.DefaultDomain.Oeq.IsNull() {
				*oeq6 = r.Filter.DefaultDomain.Oeq.ValueString()
			} else {
				oeq6 = nil
			}
			neq6 := new(string)
			if !r.Filter.DefaultDomain.Neq.IsUnknown() && !r.Filter.DefaultDomain.Neq.IsNull() {
				*neq6 = r.Filter.DefaultDomain.Neq.ValueString()
			} else {
				neq6 = nil
			}
			defaultDomain = &shared.StringFieldFilter{
				Eq:        eq6,
				Contains:  contains4,
				Ocontains: ocontains4,
				Oeq:       oeq6,
				Neq:       neq6,
			}
		}
		var canonicalDomain *shared.StringFieldFilter
		if r.Filter.CanonicalDomain != nil {
			eq7 := new(string)
			if !r.Filter.CanonicalDomain.Eq.IsUnknown() && !r.Filter.CanonicalDomain.Eq.IsNull() {
				*eq7 = r.Filter.CanonicalDomain.Eq.ValueString()
			} else {
				eq7 = nil
			}
			contains5 := new(string)
			if !r.Filter.CanonicalDomain.Contains.IsUnknown() && !r.Filter.CanonicalDomain.Contains.IsNull() {
				*contains5 = r.Filter.CanonicalDomain.Contains.ValueString()
			} else {
				contains5 = nil
			}
			ocontains5 := new(string)
			if !r.Filter.CanonicalDomain.Ocontains.IsUnknown() && !r.Filter.CanonicalDomain.Ocontains.IsNull() {
				*ocontains5 = r.Filter.CanonicalDomain.Ocontains.ValueString()
			} else {
				ocontains5 = nil
			}
			oeq7 := new(string)
			if !r.Filter.CanonicalDomain.Oeq.IsUnknown() && !r.Filter.CanonicalDomain.Oeq.IsNull() {
				*oeq7 = r.Filter.CanonicalDomain.Oeq.ValueString()
			} else {
				oeq7 = nil
			}
			neq7 := new(string)
			if !r.Filter.CanonicalDomain.Neq.IsUnknown() && !r.Filter.CanonicalDomain.Neq.IsNull() {
				*neq7 = r.Filter.CanonicalDomain.Neq.ValueString()
			} else {
				neq7 = nil
			}
			canonicalDomain = &shared.StringFieldFilter{
				Eq:        eq7,
				Contains:  contains5,
				Ocontains: ocontains5,
				Oeq:       oeq7,
				Neq:       neq7,
			}
		}
		filter = &shared.PortalFilterParameters{
			ID:                               id,
			Name:                             name,
			Description:                      description,
			AuthenticationEnabled:            authenticationEnabled,
			RbacEnabled:                      rbacEnabled,
			DefaultAPIVisibility:             defaultAPIVisibility,
			DefaultPageVisibility:            defaultPageVisibility,
			DefaultApplicationAuthStrategyID: defaultApplicationAuthStrategyID,
			AutoApproveDevelopers:            autoApproveDevelopers,
			AutoApproveApplications:          autoApproveApplications,
			DefaultDomain:                    defaultDomain,
			CanonicalDomain:                  canonicalDomain,
		}
	}
	out := operations.ListPortalsRequest{
		PageSize:   pageSize,
		PageNumber: pageNumber,
		Sort:       sort,
		Filter:     filter,
	}

	return &out, diags
}
