// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *PlatformIPAddressesDataSourceModel) RefreshFromSharedIPAddressesResponse(ctx context.Context, resp *shared.IPAddressesResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if len(resp.EgressIps) > 0 {
			r.EgressIps = make(map[string][]types.String, len(resp.EgressIps))
			for egressIpsKey, egressIpsValue := range resp.EgressIps {
				var egressIpsResult []types.String
				egressIpsResult = make([]types.String, 0, len(egressIpsValue))
				for _, v := range egressIpsValue {
					egressIpsResult = append(egressIpsResult, types.StringValue(v))
				}

				r.EgressIps[egressIpsKey] = egressIpsResult
			}
		}
		if len(resp.IngressIps) > 0 {
			r.IngressIps = make(map[string][]types.String, len(resp.IngressIps))
			for ingressIpsKey, ingressIpsValue := range resp.IngressIps {
				var ingressIpsResult []types.String
				ingressIpsResult = make([]types.String, 0, len(ingressIpsValue))
				for _, v := range ingressIpsValue {
					ingressIpsResult = append(ingressIpsResult, types.StringValue(v))
				}

				r.IngressIps[ingressIpsKey] = ingressIpsResult
			}
		}
		if len(resp.Regions) > 0 {
			r.Regions = make(map[string]map[string][]types.String, len(resp.Regions))
			for regionsKey, regionsValue := range resp.Regions {
				var regionsResult map[string][]types.String
				if len(regionsValue) > 0 {
					regionsResult = make(map[string][]types.String, len(regionsValue))
					for regionsResultKey, regionsResultValue := range regionsValue {
						var regionsResultResult []types.String
						regionsResultResult = make([]types.String, 0, len(regionsResultValue))
						for _, v := range regionsResultValue {
							regionsResultResult = append(regionsResultResult, types.StringValue(v))
						}

						regionsResult[regionsResultKey] = regionsResultResult
					}
				}

				r.Regions[regionsKey] = regionsResult
			}
		}
		r.UpdateDate = types.StringValue(resp.UpdateDate)
	}

	return diags
}
