// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginAiSanitizerDataSourceModel) RefreshFromSharedAiSanitizerPlugin(ctx context.Context, resp *shared.AiSanitizerPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.AiSanitizerPluginConfig{}
			r.Config.Anonymize = make([]types.String, 0, len(resp.Config.Anonymize))
			for _, v := range resp.Config.Anonymize {
				r.Config.Anonymize = append(r.Config.Anonymize, types.StringValue(string(v)))
			}
			r.Config.CustomPatterns = []tfTypes.CustomPatterns{}
			if len(r.Config.CustomPatterns) > len(resp.Config.CustomPatterns) {
				r.Config.CustomPatterns = r.Config.CustomPatterns[:len(resp.Config.CustomPatterns)]
			}
			for customPatternsCount, customPatternsItem := range resp.Config.CustomPatterns {
				var customPatterns tfTypes.CustomPatterns
				customPatterns.Name = types.StringValue(customPatternsItem.Name)
				customPatterns.Regex = types.StringValue(customPatternsItem.Regex)
				customPatterns.Score = types.Float64PointerValue(customPatternsItem.Score)
				if customPatternsCount+1 > len(r.Config.CustomPatterns) {
					r.Config.CustomPatterns = append(r.Config.CustomPatterns, customPatterns)
				} else {
					r.Config.CustomPatterns[customPatternsCount].Name = customPatterns.Name
					r.Config.CustomPatterns[customPatternsCount].Regex = customPatterns.Regex
					r.Config.CustomPatterns[customPatternsCount].Score = customPatterns.Score
				}
			}
			r.Config.Host = types.StringPointerValue(resp.Config.Host)
			r.Config.KeepaliveTimeout = types.Float64PointerValue(resp.Config.KeepaliveTimeout)
			r.Config.Port = types.Float64PointerValue(resp.Config.Port)
			r.Config.RecoverRedacted = types.BoolPointerValue(resp.Config.RecoverRedacted)
			if resp.Config.RedactType != nil {
				r.Config.RedactType = types.StringValue(string(*resp.Config.RedactType))
			} else {
				r.Config.RedactType = types.StringNull()
			}
			r.Config.Scheme = types.StringPointerValue(resp.Config.Scheme)
			r.Config.StopOnError = types.BoolPointerValue(resp.Config.StopOnError)
			r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
