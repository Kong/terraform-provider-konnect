// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *DcrProviderResourceModel) ToSharedCreateDcrProviderRequest() *shared.CreateDcrProviderRequest {
	var out shared.CreateDcrProviderRequest
	var createDcrProviderRequestAuth0 *shared.CreateDcrProviderRequestAuth0
	if r.Auth0 != nil {
		providerType := shared.CreateDcrProviderRequestAuth0ProviderType(r.Auth0.ProviderType.ValueString())
		var initialClientID string
		initialClientID = r.Auth0.DcrConfig.InitialClientID.ValueString()

		var initialClientSecret string
		initialClientSecret = r.Auth0.DcrConfig.InitialClientSecret.ValueString()

		initialClientAudience := new(string)
		if !r.Auth0.DcrConfig.InitialClientAudience.IsUnknown() && !r.Auth0.DcrConfig.InitialClientAudience.IsNull() {
			*initialClientAudience = r.Auth0.DcrConfig.InitialClientAudience.ValueString()
		} else {
			initialClientAudience = nil
		}
		useDeveloperManagedScopes := new(bool)
		if !r.Auth0.DcrConfig.UseDeveloperManagedScopes.IsUnknown() && !r.Auth0.DcrConfig.UseDeveloperManagedScopes.IsNull() {
			*useDeveloperManagedScopes = r.Auth0.DcrConfig.UseDeveloperManagedScopes.ValueBool()
		} else {
			useDeveloperManagedScopes = nil
		}
		dcrConfig := shared.CreateDcrConfigAuth0InRequest{
			InitialClientID:           initialClientID,
			InitialClientSecret:       initialClientSecret,
			InitialClientAudience:     initialClientAudience,
			UseDeveloperManagedScopes: useDeveloperManagedScopes,
		}
		var name string
		name = r.Auth0.Name.ValueString()

		displayName := new(string)
		if !r.Auth0.DisplayName.IsUnknown() && !r.Auth0.DisplayName.IsNull() {
			*displayName = r.Auth0.DisplayName.ValueString()
		} else {
			displayName = nil
		}
		var issuer string
		issuer = r.Auth0.Issuer.ValueString()

		labels := make(map[string]string)
		for labelsKey, labelsValue := range r.Auth0.Labels {
			var labelsInst string
			labelsInst = labelsValue.ValueString()

			labels[labelsKey] = labelsInst
		}
		createDcrProviderRequestAuth0 = &shared.CreateDcrProviderRequestAuth0{
			ProviderType: providerType,
			DcrConfig:    dcrConfig,
			Name:         name,
			DisplayName:  displayName,
			Issuer:       issuer,
			Labels:       labels,
		}
	}
	if createDcrProviderRequestAuth0 != nil {
		out = shared.CreateDcrProviderRequest{
			CreateDcrProviderRequestAuth0: createDcrProviderRequestAuth0,
		}
	}
	var createDcrProviderRequestAzureAd *shared.CreateDcrProviderRequestAzureAd
	if r.AzureAd != nil {
		providerType1 := shared.CreateDcrProviderRequestAzureAdProviderType(r.AzureAd.ProviderType.ValueString())
		var initialClientId1 string
		initialClientId1 = r.AzureAd.DcrConfig.InitialClientID.ValueString()

		var initialClientSecret1 string
		initialClientSecret1 = r.AzureAd.DcrConfig.InitialClientSecret.ValueString()

		dcrConfig1 := shared.CreateDcrConfigAzureAdInRequest{
			InitialClientID:     initialClientId1,
			InitialClientSecret: initialClientSecret1,
		}
		var name1 string
		name1 = r.AzureAd.Name.ValueString()

		displayName1 := new(string)
		if !r.AzureAd.DisplayName.IsUnknown() && !r.AzureAd.DisplayName.IsNull() {
			*displayName1 = r.AzureAd.DisplayName.ValueString()
		} else {
			displayName1 = nil
		}
		var issuer1 string
		issuer1 = r.AzureAd.Issuer.ValueString()

		labels1 := make(map[string]string)
		for labelsKey1, labelsValue1 := range r.AzureAd.Labels {
			var labelsInst1 string
			labelsInst1 = labelsValue1.ValueString()

			labels1[labelsKey1] = labelsInst1
		}
		createDcrProviderRequestAzureAd = &shared.CreateDcrProviderRequestAzureAd{
			ProviderType: providerType1,
			DcrConfig:    dcrConfig1,
			Name:         name1,
			DisplayName:  displayName1,
			Issuer:       issuer1,
			Labels:       labels1,
		}
	}
	if createDcrProviderRequestAzureAd != nil {
		out = shared.CreateDcrProviderRequest{
			CreateDcrProviderRequestAzureAd: createDcrProviderRequestAzureAd,
		}
	}
	var createDcrProviderRequestCurity *shared.CreateDcrProviderRequestCurity
	if r.Curity != nil {
		providerType2 := shared.CreateDcrProviderRequestCurityProviderType(r.Curity.ProviderType.ValueString())
		var initialClientId2 string
		initialClientId2 = r.Curity.DcrConfig.InitialClientID.ValueString()

		var initialClientSecret2 string
		initialClientSecret2 = r.Curity.DcrConfig.InitialClientSecret.ValueString()

		dcrConfig2 := shared.CreateDcrConfigCurityInRequest{
			InitialClientID:     initialClientId2,
			InitialClientSecret: initialClientSecret2,
		}
		var name2 string
		name2 = r.Curity.Name.ValueString()

		displayName2 := new(string)
		if !r.Curity.DisplayName.IsUnknown() && !r.Curity.DisplayName.IsNull() {
			*displayName2 = r.Curity.DisplayName.ValueString()
		} else {
			displayName2 = nil
		}
		var issuer2 string
		issuer2 = r.Curity.Issuer.ValueString()

		labels2 := make(map[string]string)
		for labelsKey2, labelsValue2 := range r.Curity.Labels {
			var labelsInst2 string
			labelsInst2 = labelsValue2.ValueString()

			labels2[labelsKey2] = labelsInst2
		}
		createDcrProviderRequestCurity = &shared.CreateDcrProviderRequestCurity{
			ProviderType: providerType2,
			DcrConfig:    dcrConfig2,
			Name:         name2,
			DisplayName:  displayName2,
			Issuer:       issuer2,
			Labels:       labels2,
		}
	}
	if createDcrProviderRequestCurity != nil {
		out = shared.CreateDcrProviderRequest{
			CreateDcrProviderRequestCurity: createDcrProviderRequestCurity,
		}
	}
	var createDcrProviderRequestOkta *shared.CreateDcrProviderRequestOkta
	if r.Okta != nil {
		providerType3 := shared.CreateDcrProviderRequestOktaProviderType(r.Okta.ProviderType.ValueString())
		var dcrToken string
		dcrToken = r.Okta.DcrConfig.DcrToken.ValueString()

		dcrConfig3 := shared.CreateDcrConfigOktaInRequest{
			DcrToken: dcrToken,
		}
		var name3 string
		name3 = r.Okta.Name.ValueString()

		displayName3 := new(string)
		if !r.Okta.DisplayName.IsUnknown() && !r.Okta.DisplayName.IsNull() {
			*displayName3 = r.Okta.DisplayName.ValueString()
		} else {
			displayName3 = nil
		}
		var issuer3 string
		issuer3 = r.Okta.Issuer.ValueString()

		labels3 := make(map[string]string)
		for labelsKey3, labelsValue3 := range r.Okta.Labels {
			var labelsInst3 string
			labelsInst3 = labelsValue3.ValueString()

			labels3[labelsKey3] = labelsInst3
		}
		createDcrProviderRequestOkta = &shared.CreateDcrProviderRequestOkta{
			ProviderType: providerType3,
			DcrConfig:    dcrConfig3,
			Name:         name3,
			DisplayName:  displayName3,
			Issuer:       issuer3,
			Labels:       labels3,
		}
	}
	if createDcrProviderRequestOkta != nil {
		out = shared.CreateDcrProviderRequest{
			CreateDcrProviderRequestOkta: createDcrProviderRequestOkta,
		}
	}
	var createDcrProviderRequestHTTP *shared.CreateDcrProviderRequestHTTP
	if r.HTTP != nil {
		providerType4 := shared.CreateDcrProviderRequestHTTPProviderType(r.HTTP.ProviderType.ValueString())
		var dcrBaseURL string
		dcrBaseURL = r.HTTP.DcrConfig.DcrBaseURL.ValueString()

		var apiKey string
		apiKey = r.HTTP.DcrConfig.APIKey.ValueString()

		disableEventHooks := new(bool)
		if !r.HTTP.DcrConfig.DisableEventHooks.IsUnknown() && !r.HTTP.DcrConfig.DisableEventHooks.IsNull() {
			*disableEventHooks = r.HTTP.DcrConfig.DisableEventHooks.ValueBool()
		} else {
			disableEventHooks = nil
		}
		disableRefreshSecret := new(bool)
		if !r.HTTP.DcrConfig.DisableRefreshSecret.IsUnknown() && !r.HTTP.DcrConfig.DisableRefreshSecret.IsNull() {
			*disableRefreshSecret = r.HTTP.DcrConfig.DisableRefreshSecret.ValueBool()
		} else {
			disableRefreshSecret = nil
		}
		dcrConfig4 := shared.CreateDcrConfigHTTPInRequest{
			DcrBaseURL:           dcrBaseURL,
			APIKey:               apiKey,
			DisableEventHooks:    disableEventHooks,
			DisableRefreshSecret: disableRefreshSecret,
		}
		var name4 string
		name4 = r.HTTP.Name.ValueString()

		displayName4 := new(string)
		if !r.HTTP.DisplayName.IsUnknown() && !r.HTTP.DisplayName.IsNull() {
			*displayName4 = r.HTTP.DisplayName.ValueString()
		} else {
			displayName4 = nil
		}
		var issuer4 string
		issuer4 = r.HTTP.Issuer.ValueString()

		labels4 := make(map[string]string)
		for labelsKey4, labelsValue4 := range r.HTTP.Labels {
			var labelsInst4 string
			labelsInst4 = labelsValue4.ValueString()

			labels4[labelsKey4] = labelsInst4
		}
		createDcrProviderRequestHTTP = &shared.CreateDcrProviderRequestHTTP{
			ProviderType: providerType4,
			DcrConfig:    dcrConfig4,
			Name:         name4,
			DisplayName:  displayName4,
			Issuer:       issuer4,
			Labels:       labels4,
		}
	}
	if createDcrProviderRequestHTTP != nil {
		out = shared.CreateDcrProviderRequest{
			CreateDcrProviderRequestHTTP: createDcrProviderRequestHTTP,
		}
	}
	return &out
}

func (r *DcrProviderResourceModel) RefreshFromSharedCreateDcrProviderResponse(resp *shared.CreateDcrProviderResponse) {
	if resp == nil {
	} else {
		if resp.DcrProviderAuth0 != nil {
			r.Auth0 = &tfTypes.DcrProviderAuth0{}
			r.Auth0.Active = types.BoolPointerValue(resp.DcrProviderAuth0.Active)
			r.Active = r.Auth0.Active
			r.Auth0.DcrConfig.InitialClientAudience = types.StringPointerValue(resp.DcrProviderAuth0.DcrConfig.InitialClientAudience)
			r.Auth0.DcrConfig.InitialClientID = types.StringValue(resp.DcrProviderAuth0.DcrConfig.InitialClientID)
			r.Auth0.DcrConfig.UseDeveloperManagedScopes = types.BoolValue(resp.DcrProviderAuth0.DcrConfig.UseDeveloperManagedScopes)
			r.Auth0.DisplayName = types.StringPointerValue(resp.DcrProviderAuth0.DisplayName)
			r.DisplayName = r.Auth0.DisplayName
			r.Auth0.ID = types.StringPointerValue(resp.DcrProviderAuth0.ID)
			r.ID = r.Auth0.ID
			r.Auth0.Issuer = types.StringPointerValue(resp.DcrProviderAuth0.Issuer)
			r.Issuer = r.Auth0.Issuer
			r.Auth0.Name = types.StringPointerValue(resp.DcrProviderAuth0.Name)
			r.Name = r.Auth0.Name
			r.Auth0.ProviderType = types.StringValue(string(resp.DcrProviderAuth0.ProviderType))
		}
		if resp.DcrProviderAzureAd != nil {
			r.AzureAd = &tfTypes.DcrProviderAzureAd{}
			r.AzureAd.Active = types.BoolPointerValue(resp.DcrProviderAzureAd.Active)
			r.Active = r.AzureAd.Active
			r.AzureAd.DcrConfig.InitialClientID = types.StringValue(resp.DcrProviderAzureAd.DcrConfig.InitialClientID)
			r.AzureAd.DisplayName = types.StringPointerValue(resp.DcrProviderAzureAd.DisplayName)
			r.DisplayName = r.AzureAd.DisplayName
			r.AzureAd.ID = types.StringPointerValue(resp.DcrProviderAzureAd.ID)
			r.ID = r.AzureAd.ID
			r.AzureAd.Issuer = types.StringPointerValue(resp.DcrProviderAzureAd.Issuer)
			r.Issuer = r.AzureAd.Issuer
			r.AzureAd.Name = types.StringPointerValue(resp.DcrProviderAzureAd.Name)
			r.Name = r.AzureAd.Name
			r.AzureAd.ProviderType = types.StringValue(string(resp.DcrProviderAzureAd.ProviderType))
		}
		if resp.DcrProviderCurity != nil {
			r.Curity = &tfTypes.DcrProviderAzureAd{}
			r.Curity.Active = types.BoolPointerValue(resp.DcrProviderCurity.Active)
			r.Active = r.Curity.Active
			r.Curity.DcrConfig.InitialClientID = types.StringValue(resp.DcrProviderCurity.DcrConfig.InitialClientID)
			r.Curity.DisplayName = types.StringPointerValue(resp.DcrProviderCurity.DisplayName)
			r.DisplayName = r.Curity.DisplayName
			r.Curity.ID = types.StringPointerValue(resp.DcrProviderCurity.ID)
			r.ID = r.Curity.ID
			r.Curity.Issuer = types.StringPointerValue(resp.DcrProviderCurity.Issuer)
			r.Issuer = r.Curity.Issuer
			r.Curity.Name = types.StringPointerValue(resp.DcrProviderCurity.Name)
			r.Name = r.Curity.Name
			r.Curity.ProviderType = types.StringValue(string(resp.DcrProviderCurity.ProviderType))
		}
		if resp.DcrProviderHTTP != nil {
			r.HTTP = &tfTypes.DcrProviderHTTP{}
			r.HTTP.Active = types.BoolPointerValue(resp.DcrProviderHTTP.Active)
			r.Active = r.HTTP.Active
			r.HTTP.DcrConfig.DcrBaseURL = types.StringValue(resp.DcrProviderHTTP.DcrConfig.DcrBaseURL)
			r.HTTP.DcrConfig.DisableEventHooks = types.BoolPointerValue(resp.DcrProviderHTTP.DcrConfig.DisableEventHooks)
			r.HTTP.DcrConfig.DisableRefreshSecret = types.BoolPointerValue(resp.DcrProviderHTTP.DcrConfig.DisableRefreshSecret)
			r.HTTP.DisplayName = types.StringPointerValue(resp.DcrProviderHTTP.DisplayName)
			r.DisplayName = r.HTTP.DisplayName
			r.HTTP.ID = types.StringPointerValue(resp.DcrProviderHTTP.ID)
			r.ID = r.HTTP.ID
			r.HTTP.Issuer = types.StringPointerValue(resp.DcrProviderHTTP.Issuer)
			r.Issuer = r.HTTP.Issuer
			r.HTTP.Name = types.StringPointerValue(resp.DcrProviderHTTP.Name)
			r.Name = r.HTTP.Name
			r.HTTP.ProviderType = types.StringValue(string(resp.DcrProviderHTTP.ProviderType))
		}
		if resp.DcrProviderOkta != nil {
			r.Okta = &tfTypes.DcrProviderOkta{}
			r.Okta.Active = types.BoolPointerValue(resp.DcrProviderOkta.Active)
			r.Active = r.Okta.Active
			r.Okta.DisplayName = types.StringPointerValue(resp.DcrProviderOkta.DisplayName)
			r.DisplayName = r.Okta.DisplayName
			r.Okta.ID = types.StringPointerValue(resp.DcrProviderOkta.ID)
			r.ID = r.Okta.ID
			r.Okta.Issuer = types.StringPointerValue(resp.DcrProviderOkta.Issuer)
			r.Issuer = r.Okta.Issuer
			r.Okta.Name = types.StringPointerValue(resp.DcrProviderOkta.Name)
			r.Name = r.Okta.Name
			r.Okta.ProviderType = types.StringValue(string(resp.DcrProviderOkta.ProviderType))
		}
	}
}

func (r *DcrProviderResourceModel) RefreshFromSharedDcrProviderResponse(resp *shared.DcrProviderResponse) {
	if resp == nil {
	} else {
		if resp.DcrProviderAuth0 != nil {
			r.Auth0 = &tfTypes.DcrProviderAuth0{}
			r.Auth0.Active = types.BoolPointerValue(resp.DcrProviderAuth0.Active)
			r.Active = r.Auth0.Active
			r.Auth0.DcrConfig.InitialClientAudience = types.StringPointerValue(resp.DcrProviderAuth0.DcrConfig.InitialClientAudience)
			r.Auth0.DcrConfig.InitialClientID = types.StringValue(resp.DcrProviderAuth0.DcrConfig.InitialClientID)
			r.Auth0.DcrConfig.UseDeveloperManagedScopes = types.BoolValue(resp.DcrProviderAuth0.DcrConfig.UseDeveloperManagedScopes)
			r.Auth0.DisplayName = types.StringPointerValue(resp.DcrProviderAuth0.DisplayName)
			r.DisplayName = r.Auth0.DisplayName
			r.Auth0.ID = types.StringPointerValue(resp.DcrProviderAuth0.ID)
			r.ID = r.Auth0.ID
			r.Auth0.Issuer = types.StringPointerValue(resp.DcrProviderAuth0.Issuer)
			r.Issuer = r.Auth0.Issuer
			r.Auth0.Name = types.StringPointerValue(resp.DcrProviderAuth0.Name)
			r.Name = r.Auth0.Name
			r.Auth0.ProviderType = types.StringValue(string(resp.DcrProviderAuth0.ProviderType))
		}
		if resp.DcrProviderAzureAd != nil {
			r.AzureAd = &tfTypes.DcrProviderAzureAd{}
			r.AzureAd.Active = types.BoolPointerValue(resp.DcrProviderAzureAd.Active)
			r.Active = r.AzureAd.Active
			r.AzureAd.DcrConfig.InitialClientID = types.StringValue(resp.DcrProviderAzureAd.DcrConfig.InitialClientID)
			r.AzureAd.DisplayName = types.StringPointerValue(resp.DcrProviderAzureAd.DisplayName)
			r.DisplayName = r.AzureAd.DisplayName
			r.AzureAd.ID = types.StringPointerValue(resp.DcrProviderAzureAd.ID)
			r.ID = r.AzureAd.ID
			r.AzureAd.Issuer = types.StringPointerValue(resp.DcrProviderAzureAd.Issuer)
			r.Issuer = r.AzureAd.Issuer
			r.AzureAd.Name = types.StringPointerValue(resp.DcrProviderAzureAd.Name)
			r.Name = r.AzureAd.Name
			r.AzureAd.ProviderType = types.StringValue(string(resp.DcrProviderAzureAd.ProviderType))
		}
		if resp.DcrProviderCurity != nil {
			r.Curity = &tfTypes.DcrProviderAzureAd{}
			r.Curity.Active = types.BoolPointerValue(resp.DcrProviderCurity.Active)
			r.Active = r.Curity.Active
			r.Curity.DcrConfig.InitialClientID = types.StringValue(resp.DcrProviderCurity.DcrConfig.InitialClientID)
			r.Curity.DisplayName = types.StringPointerValue(resp.DcrProviderCurity.DisplayName)
			r.DisplayName = r.Curity.DisplayName
			r.Curity.ID = types.StringPointerValue(resp.DcrProviderCurity.ID)
			r.ID = r.Curity.ID
			r.Curity.Issuer = types.StringPointerValue(resp.DcrProviderCurity.Issuer)
			r.Issuer = r.Curity.Issuer
			r.Curity.Name = types.StringPointerValue(resp.DcrProviderCurity.Name)
			r.Name = r.Curity.Name
			r.Curity.ProviderType = types.StringValue(string(resp.DcrProviderCurity.ProviderType))
		}
		if resp.DcrProviderHTTP != nil {
			r.HTTP = &tfTypes.DcrProviderHTTP{}
			r.HTTP.Active = types.BoolPointerValue(resp.DcrProviderHTTP.Active)
			r.Active = r.HTTP.Active
			r.HTTP.DcrConfig.DcrBaseURL = types.StringValue(resp.DcrProviderHTTP.DcrConfig.DcrBaseURL)
			r.HTTP.DcrConfig.DisableEventHooks = types.BoolPointerValue(resp.DcrProviderHTTP.DcrConfig.DisableEventHooks)
			r.HTTP.DcrConfig.DisableRefreshSecret = types.BoolPointerValue(resp.DcrProviderHTTP.DcrConfig.DisableRefreshSecret)
			r.HTTP.DisplayName = types.StringPointerValue(resp.DcrProviderHTTP.DisplayName)
			r.DisplayName = r.HTTP.DisplayName
			r.HTTP.ID = types.StringPointerValue(resp.DcrProviderHTTP.ID)
			r.ID = r.HTTP.ID
			r.HTTP.Issuer = types.StringPointerValue(resp.DcrProviderHTTP.Issuer)
			r.Issuer = r.HTTP.Issuer
			r.HTTP.Name = types.StringPointerValue(resp.DcrProviderHTTP.Name)
			r.Name = r.HTTP.Name
			r.HTTP.ProviderType = types.StringValue(string(resp.DcrProviderHTTP.ProviderType))
		}
		if resp.DcrProviderOkta != nil {
			r.Okta = &tfTypes.DcrProviderOkta{}
			r.Okta.Active = types.BoolPointerValue(resp.DcrProviderOkta.Active)
			r.Active = r.Okta.Active
			r.Okta.DisplayName = types.StringPointerValue(resp.DcrProviderOkta.DisplayName)
			r.DisplayName = r.Okta.DisplayName
			r.Okta.ID = types.StringPointerValue(resp.DcrProviderOkta.ID)
			r.ID = r.Okta.ID
			r.Okta.Issuer = types.StringPointerValue(resp.DcrProviderOkta.Issuer)
			r.Issuer = r.Okta.Issuer
			r.Okta.Name = types.StringPointerValue(resp.DcrProviderOkta.Name)
			r.Name = r.Okta.Name
			r.Okta.ProviderType = types.StringValue(string(resp.DcrProviderOkta.ProviderType))
		}
	}
}

func (r *DcrProviderResourceModel) ToSharedUpdateDcrProviderRequest() *shared.UpdateDcrProviderRequest {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	issuer := new(string)
	if !r.Issuer.IsUnknown() && !r.Issuer.IsNull() {
		*issuer = r.Issuer.ValueString()
	} else {
		issuer = nil
	}
	out := shared.UpdateDcrProviderRequest{
		Name:        name,
		DisplayName: displayName,
		Issuer:      issuer,
	}
	return &out
}
