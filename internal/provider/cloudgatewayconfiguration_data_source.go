// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CloudGatewayConfigurationDataSource{}
var _ datasource.DataSourceWithConfigure = &CloudGatewayConfigurationDataSource{}

func NewCloudGatewayConfigurationDataSource() datasource.DataSource {
	return &CloudGatewayConfigurationDataSource{}
}

// CloudGatewayConfigurationDataSource is the data source implementation.
type CloudGatewayConfigurationDataSource struct {
	client *sdk.Konnect
}

// CloudGatewayConfigurationDataSourceModel describes the data model.
type CloudGatewayConfigurationDataSourceModel struct {
	APIAccess            types.String                                `tfsdk:"api_access"`
	ControlPlaneGeo      types.String                                `tfsdk:"control_plane_geo"`
	ControlPlaneID       types.String                                `tfsdk:"control_plane_id"`
	CreatedAt            types.String                                `tfsdk:"created_at"`
	DataplaneGroupConfig []tfTypes.ConfigurationDataPlaneGroupConfig `tfsdk:"dataplane_group_config"`
	DataplaneGroups      []tfTypes.ConfigurationDataPlaneGroup       `tfsdk:"dataplane_groups"`
	EntityVersion        types.Number                                `tfsdk:"entity_version"`
	ID                   types.String                                `tfsdk:"id"`
	UpdatedAt            types.String                                `tfsdk:"updated_at"`
	Version              types.String                                `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (r *CloudGatewayConfigurationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cloud_gateway_configuration"
}

// Schema defines the schema for the data source.
func (r *CloudGatewayConfigurationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CloudGatewayConfiguration DataSource",

		Attributes: map[string]schema.Attribute{
			"api_access": schema.StringAttribute{
				Computed:    true,
				Description: `Type of API access data-plane groups will support for a configuration.`,
			},
			"control_plane_geo": schema.StringAttribute{
				Computed:    true,
				Description: `Set of control-plane geos supported for deploying cloud-gateways configurations.`,
			},
			"control_plane_id": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `An RFC-3339 timestamp representation of configuration creation date.`,
			},
			"dataplane_group_config": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"autoscale": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration_data_plane_group_autoscale_autopilot": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"base_rps": schema.Int64Attribute{
											Computed:    true,
											Description: `Base number of requests per second that the deployment target should support.`,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"max_rps": schema.Int64Attribute{
											Computed:    true,
											Description: `Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.`,
										},
									},
									Description: `Object that describes the autopilot autoscaling strategy.`,
								},
								"configuration_data_plane_group_autoscale_static": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"instance_type": schema.StringAttribute{
											Computed:    true,
											Description: `Instance type name to indicate capacity.`,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"requested_instances": schema.Int64Attribute{
											Computed:    true,
											Description: `Number of data-planes the deployment target will contain.`,
										},
									},
									Description: `Object that describes the static autoscaling strategy.`,
								},
							},
						},
						"cloud_gateway_network_id": schema.StringAttribute{
							Computed: true,
						},
						"environment": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the environment variable field to set for the data-plane group. Must be prefixed by KONG_.`,
									},
									"value": schema.StringAttribute{
										Computed:    true,
										Description: `Value assigned to the environment variable field for the data-plane group.`,
									},
								},
							},
							Description: `Array of environment variables to set for a data-plane group.`,
						},
						"provider": schema.StringAttribute{
							Computed:    true,
							Description: `Name of cloud provider.`,
						},
						"region": schema.StringAttribute{
							Computed:    true,
							Description: `Region ID for cloud provider region.`,
						},
					},
				},
				Description: `Object that describes where data-planes will be deployed to, along with how many instances.`,
			},
			"dataplane_groups": schema.SetNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"autoscale": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"configuration_data_plane_group_autoscale_autopilot": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"base_rps": schema.Int64Attribute{
											Computed:    true,
											Description: `Base number of requests per second that the deployment target should support.`,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"max_rps": schema.Int64Attribute{
											Computed:    true,
											Description: `Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.`,
										},
									},
									Description: `Object that describes the autopilot autoscaling strategy.`,
								},
								"configuration_data_plane_group_autoscale_static": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"instance_type": schema.StringAttribute{
											Computed:    true,
											Description: `Instance type name to indicate capacity.`,
										},
										"kind": schema.StringAttribute{
											Computed: true,
										},
										"requested_instances": schema.Int64Attribute{
											Computed:    true,
											Description: `Number of data-planes the deployment target will contain.`,
										},
									},
									Description: `Object that describes the static autoscaling strategy.`,
								},
							},
						},
						"cloud_gateway_network_id": schema.StringAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed:    true,
							Description: `An RFC-3339 timestamp representation of data-plane group creation date.`,
						},
						"egress_ip_addresses": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `List of egress IP addresses for the network that this data-plane group runs on.`,
						},
						"environment": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the environment variable field to set for the data-plane group. Must be prefixed by KONG_.`,
									},
									"value": schema.StringAttribute{
										Computed:    true,
										Description: `Value assigned to the environment variable field for the data-plane group.`,
									},
								},
							},
							Description: `Array of environment variables to set for a data-plane group.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `ID of the data-plane group that represents a deployment target for a set of data-planes.`,
						},
						"private_ip_addresses": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `List of private IP addresses of the internal load balancer that proxies traffic to this data-plane group.`,
						},
						"provider": schema.StringAttribute{
							Computed:    true,
							Description: `Name of cloud provider.`,
						},
						"region": schema.StringAttribute{
							Computed:    true,
							Description: `Region ID for cloud provider region.`,
						},
						"state": schema.StringAttribute{
							Computed:    true,
							Description: `State of the data-plane group.`,
						},
						"updated_at": schema.StringAttribute{
							Computed:    true,
							Description: `An RFC-3339 timestamp representation of data-plane group update date.`,
						},
					},
				},
				MarkdownDescription: `List of data-plane groups that describe where data-planes will be deployed to, along with how many` + "\n" +
					`instances.`,
			},
			"entity_version": schema.NumberAttribute{
				Computed:    true,
				Description: `Positive, monotonically increasing version integer, to serialize configuration changes.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `An RFC-3339 timestamp representation of configuration update date.`,
			},
			"version": schema.StringAttribute{
				Computed:    true,
				Description: `Supported gateway version.`,
			},
		},
	}
}

func (r *CloudGatewayConfigurationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CloudGatewayConfigurationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CloudGatewayConfigurationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var configurationID string
	configurationID = data.ID.ValueString()

	request := operations.GetConfigurationRequest{
		ConfigurationID: configurationID,
	}
	res, err := r.client.DataPlaneGroupConfigurations.GetConfiguration(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ConfigurationManifest != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedConfigurationManifest(res.ConfigurationManifest)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
