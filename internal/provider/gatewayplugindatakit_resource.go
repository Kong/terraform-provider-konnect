// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v3/internal/validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &GatewayPluginDatakitResource{}
var _ resource.ResourceWithImportState = &GatewayPluginDatakitResource{}

func NewGatewayPluginDatakitResource() resource.Resource {
	return &GatewayPluginDatakitResource{}
}

// GatewayPluginDatakitResource defines the resource implementation.
type GatewayPluginDatakitResource struct {
	// Provider configured SDK client.
	client *sdk.Konnect
}

// GatewayPluginDatakitResourceModel describes the resource data model.
type GatewayPluginDatakitResourceModel struct {
	Config         tfTypes.DatakitPluginConfig `tfsdk:"config"`
	Consumer       *tfTypes.Set                `tfsdk:"consumer"`
	ConsumerGroup  *tfTypes.Set                `tfsdk:"consumer_group"`
	ControlPlaneID types.String                `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64                 `tfsdk:"created_at"`
	Enabled        types.Bool                  `tfsdk:"enabled"`
	ID             types.String                `tfsdk:"id"`
	InstanceName   types.String                `tfsdk:"instance_name"`
	Ordering       *tfTypes.ACLPluginOrdering  `tfsdk:"ordering"`
	Partials       []tfTypes.Partials          `tfsdk:"partials"`
	Protocols      []types.String              `tfsdk:"protocols"`
	Route          *tfTypes.Set                `tfsdk:"route"`
	Service        *tfTypes.Set                `tfsdk:"service"`
	Tags           []types.String              `tfsdk:"tags"`
	UpdatedAt      types.Int64                 `tfsdk:"updated_at"`
}

func (r *GatewayPluginDatakitResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_plugin_datakit"
}

func (r *GatewayPluginDatakitResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayPluginDatakit Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"debug": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Default:     booldefault.StaticBool(false),
						Description: `Default: false`,
					},
					"nodes": schema.ListNestedAttribute{
						Required: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"call": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"input": schema.StringAttribute{
											Optional:    true,
											Description: `call node input`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"inputs": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
												"body":    types.StringType,
												"headers": types.StringType,
												"query":   types.StringType,
											})),
											Attributes: map[string]schema.Attribute{
												"body": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP request body`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
												"headers": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP request headers`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
												"query": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP request query`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
											},
											Description: `call node inputs`,
										},
										"method": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Default:     stringdefault.StaticString(`GET`),
											Description: `A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters. Default: "GET"`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 32),
											},
										},
										"name": schema.StringAttribute{
											Optional:    true,
											Description: `A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid ` + "`" + `snake_case` + "`" + ` or ` + "`" + `kebab-case` + "`" + `.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"output": schema.StringAttribute{
											Optional:    true,
											Description: `call node output`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"outputs": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
												"body":    types.StringType,
												"headers": types.StringType,
												"status":  types.StringType,
											})),
											Attributes: map[string]schema.Attribute{
												"body": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP response body`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
												"headers": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP response headers`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
												"status": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP response status code`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
											},
											Description: `call node outputs`,
										},
										"ssl_server_name": schema.StringAttribute{
											Optional:    true,
											Description: `A string representing an SNI (server name indication) value for TLS.`,
										},
										"timeout": schema.Int64Attribute{
											Optional:    true,
											Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.`,
											Validators: []validator.Int64{
												int64validator.AtMost(2147483646),
											},
										},
										"url": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `A string representing a URL, such as https://example.com/path/to/resource?q=search. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
									},
									Description: `Make an external HTTP request`,
									Validators: []validator.Object{
										objectvalidator.ConflictsWith(path.Expressions{
											path.MatchRelative().AtParent().AtName("exit"),
											path.MatchRelative().AtParent().AtName("jq"),
											path.MatchRelative().AtParent().AtName("property"),
											path.MatchRelative().AtParent().AtName("static"),
										}...),
									},
								},
								"exit": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"input": schema.StringAttribute{
											Optional:    true,
											Description: `exit node input`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"inputs": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
												"body":    types.StringType,
												"headers": types.StringType,
											})),
											Attributes: map[string]schema.Attribute{
												"body": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP response body`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
												"headers": schema.StringAttribute{
													Optional:    true,
													Description: `HTTP response headers`,
													Validators: []validator.String{
														stringvalidator.UTF8LengthBetween(1, 255),
													},
												},
											},
											Description: `exit node inputs`,
										},
										"name": schema.StringAttribute{
											Optional:    true,
											Description: `A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid ` + "`" + `snake_case` + "`" + ` or ` + "`" + `kebab-case` + "`" + `.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"status": schema.Int64Attribute{
											Computed:    true,
											Optional:    true,
											Default:     int64default.StaticInt64(200),
											Description: `HTTP status code. Default: 200`,
											Validators: []validator.Int64{
												int64validator.Between(200, 599),
											},
										},
										"warn_headers_sent": schema.BoolAttribute{
											Optional: true,
										},
									},
									Description: `Terminate the request and send a response to the client`,
									Validators: []validator.Object{
										objectvalidator.ConflictsWith(path.Expressions{
											path.MatchRelative().AtParent().AtName("call"),
											path.MatchRelative().AtParent().AtName("jq"),
											path.MatchRelative().AtParent().AtName("property"),
											path.MatchRelative().AtParent().AtName("static"),
										}...),
									},
								},
								"jq": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"input": schema.StringAttribute{
											Optional:    true,
											Description: `filter input(s)`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"inputs": schema.MapAttribute{
											Optional:    true,
											ElementType: jsontypes.NormalizedType{},
											Description: `filter input(s)`,
											Validators: []validator.Map{
												mapvalidator.ValueStringsAre(validators.IsValidJSON()),
											},
										},
										"jq": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The jq filter text. Refer to https://jqlang.org/manual/ for full documentation. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.UTF8LengthBetween(1, 10240),
											},
										},
										"name": schema.StringAttribute{
											Optional:    true,
											Description: `A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid ` + "`" + `snake_case` + "`" + ` or ` + "`" + `kebab-case` + "`" + `.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"output": schema.StringAttribute{
											Optional:    true,
											Description: `filter output(s)`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
									},
									Description: `Process data using ` + "`" + `jq` + "`" + ` syntax`,
									Validators: []validator.Object{
										objectvalidator.ConflictsWith(path.Expressions{
											path.MatchRelative().AtParent().AtName("call"),
											path.MatchRelative().AtParent().AtName("exit"),
											path.MatchRelative().AtParent().AtName("property"),
											path.MatchRelative().AtParent().AtName("static"),
										}...),
									},
								},
								"property": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"content_type": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The expected mime type of the property value. When set to ` + "`" + `application/json` + "`" + `, SET operations will JSON-encode input data before writing it, and GET operations will JSON-decode output data after reading it. Otherwise, this setting has no effect. must be one of ["application/json", "application/octet-stream", "text/plain"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"application/json",
													"application/octet-stream",
													"text/plain",
												),
											},
										},
										"input": schema.StringAttribute{
											Optional:    true,
											Description: `Property input source. When connected, this node operates in SET mode and writes input data to the property. Otherwise, the node operates in GET mode and reads the property.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"name": schema.StringAttribute{
											Optional:    true,
											Description: `A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid ` + "`" + `snake_case` + "`" + ` or ` + "`" + `kebab-case` + "`" + `.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"output": schema.StringAttribute{
											Optional:    true,
											Description: `Property output. This can be connected regardless of whether the node is operating in GET mode or SET mode.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"property": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The property name to get/set. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
									},
									Description: `Get or set a property`,
									Validators: []validator.Object{
										objectvalidator.ConflictsWith(path.Expressions{
											path.MatchRelative().AtParent().AtName("call"),
											path.MatchRelative().AtParent().AtName("exit"),
											path.MatchRelative().AtParent().AtName("jq"),
											path.MatchRelative().AtParent().AtName("static"),
										}...),
									},
								},
								"static": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Optional:    true,
											Description: `A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid ` + "`" + `snake_case` + "`" + ` or ` + "`" + `kebab-case` + "`" + `.`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"output": schema.StringAttribute{
											Optional:    true,
											Description: `The entire ` + "`" + `.values` + "`" + ` map`,
											Validators: []validator.String{
												stringvalidator.UTF8LengthBetween(1, 255),
											},
										},
										"outputs": schema.MapAttribute{
											Optional:    true,
											ElementType: jsontypes.NormalizedType{},
											Description: `Individual items from ` + "`" + `.values` + "`" + `, referenced by key`,
											Validators: []validator.Map{
												mapvalidator.ValueStringsAre(validators.IsValidJSON()),
											},
										},
										"values": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `An object with string keys and freeform values. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
									},
									Description: `Produce reusable outputs from statically-configured values`,
									Validators: []validator.Object{
										objectvalidator.ConflictsWith(path.Expressions{
											path.MatchRelative().AtParent().AtName("call"),
											path.MatchRelative().AtParent().AtName("exit"),
											path.MatchRelative().AtParent().AtName("jq"),
											path.MatchRelative().AtParent().AtName("property"),
										}...),
									},
								},
							},
						},
					},
				},
			},
			"consumer": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.`,
			},
			"consumer_group": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups`,
			},
			"control_plane_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the plugin is applied. Default: true`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string representing a UUID (universally unique identifier).`,
				Validators: []validator.String{
					stringvalidator.UTF8LengthAtLeast(1),
				},
			},
			"instance_name": schema.StringAttribute{
				Optional:    true,
				Description: `A unique string representing a UTF-8 encoded name.`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"after": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
					"before": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
				})),
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A string representing a UUID (universally unique identifier).`,
							Validators: []validator.String{
								stringvalidator.UTF8LengthAtLeast(1),
							},
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A unique string representing a UTF-8 encoded name.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
				Description: `A list of partials to be used by the plugin.`,
			},
			"protocols": schema.SetAttribute{
				Computed: true,
				Optional: true,
				Default: setdefault.StaticValue(types.SetValueMust(types.StringType, []attr.Value{
					types.StringValue("grpc"),
					types.StringValue("grpcs"),
					types.StringValue("http"),
					types.StringValue("https"),
				})),
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols. Default: ["grpc","grpcs","http","https"]`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
		},
	}
}

func (r *GatewayPluginDatakitResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayPluginDatakitResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *GatewayPluginDatakitResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateDatakitPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.CreateDatakitPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DatakitPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDatakitPlugin(ctx, res.DatakitPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginDatakitResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *GatewayPluginDatakitResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetDatakitPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetDatakitPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DatakitPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDatakitPlugin(ctx, res.DatakitPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginDatakitResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *GatewayPluginDatakitResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateDatakitPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.UpdateDatakitPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DatakitPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDatakitPlugin(ctx, res.DatakitPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginDatakitResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *GatewayPluginDatakitResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteDatakitPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.DeleteDatakitPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *GatewayPluginDatakitResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ControlPlaneID string `json:"control_plane_id"`
		ID             string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"control_plane_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": "3473c251-5b6c-4f45-b1ff-7ede735a366d"}': `+err.Error())
		return
	}

	if len(data.ControlPlaneID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field control_plane_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("control_plane_id"), data.ControlPlaneID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"3473c251-5b6c-4f45-b1ff-7ede735a366d"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}
