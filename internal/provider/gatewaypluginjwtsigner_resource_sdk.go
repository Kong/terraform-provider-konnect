// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginJwtSignerResourceModel) ToSharedJwtSignerPluginInput() *shared.JwtSignerPluginInput {
	var accessTokenConsumerBy []shared.AccessTokenConsumerBy = []shared.AccessTokenConsumerBy{}
	for _, accessTokenConsumerByItem := range r.Config.AccessTokenConsumerBy {
		accessTokenConsumerBy = append(accessTokenConsumerBy, shared.AccessTokenConsumerBy(accessTokenConsumerByItem.ValueString()))
	}
	var accessTokenConsumerClaim []string = []string{}
	for _, accessTokenConsumerClaimItem := range r.Config.AccessTokenConsumerClaim {
		accessTokenConsumerClaim = append(accessTokenConsumerClaim, accessTokenConsumerClaimItem.ValueString())
	}
	accessTokenIntrospectionAuthorization := new(string)
	if !r.Config.AccessTokenIntrospectionAuthorization.IsUnknown() && !r.Config.AccessTokenIntrospectionAuthorization.IsNull() {
		*accessTokenIntrospectionAuthorization = r.Config.AccessTokenIntrospectionAuthorization.ValueString()
	} else {
		accessTokenIntrospectionAuthorization = nil
	}
	accessTokenIntrospectionBodyArgs := new(string)
	if !r.Config.AccessTokenIntrospectionBodyArgs.IsUnknown() && !r.Config.AccessTokenIntrospectionBodyArgs.IsNull() {
		*accessTokenIntrospectionBodyArgs = r.Config.AccessTokenIntrospectionBodyArgs.ValueString()
	} else {
		accessTokenIntrospectionBodyArgs = nil
	}
	var accessTokenIntrospectionConsumerBy []shared.AccessTokenIntrospectionConsumerBy = []shared.AccessTokenIntrospectionConsumerBy{}
	for _, accessTokenIntrospectionConsumerByItem := range r.Config.AccessTokenIntrospectionConsumerBy {
		accessTokenIntrospectionConsumerBy = append(accessTokenIntrospectionConsumerBy, shared.AccessTokenIntrospectionConsumerBy(accessTokenIntrospectionConsumerByItem.ValueString()))
	}
	var accessTokenIntrospectionConsumerClaim []string = []string{}
	for _, accessTokenIntrospectionConsumerClaimItem := range r.Config.AccessTokenIntrospectionConsumerClaim {
		accessTokenIntrospectionConsumerClaim = append(accessTokenIntrospectionConsumerClaim, accessTokenIntrospectionConsumerClaimItem.ValueString())
	}
	accessTokenIntrospectionEndpoint := new(string)
	if !r.Config.AccessTokenIntrospectionEndpoint.IsUnknown() && !r.Config.AccessTokenIntrospectionEndpoint.IsNull() {
		*accessTokenIntrospectionEndpoint = r.Config.AccessTokenIntrospectionEndpoint.ValueString()
	} else {
		accessTokenIntrospectionEndpoint = nil
	}
	accessTokenIntrospectionHint := new(string)
	if !r.Config.AccessTokenIntrospectionHint.IsUnknown() && !r.Config.AccessTokenIntrospectionHint.IsNull() {
		*accessTokenIntrospectionHint = r.Config.AccessTokenIntrospectionHint.ValueString()
	} else {
		accessTokenIntrospectionHint = nil
	}
	var accessTokenIntrospectionJwtClaim []string = []string{}
	for _, accessTokenIntrospectionJwtClaimItem := range r.Config.AccessTokenIntrospectionJwtClaim {
		accessTokenIntrospectionJwtClaim = append(accessTokenIntrospectionJwtClaim, accessTokenIntrospectionJwtClaimItem.ValueString())
	}
	accessTokenIntrospectionLeeway := new(float64)
	if !r.Config.AccessTokenIntrospectionLeeway.IsUnknown() && !r.Config.AccessTokenIntrospectionLeeway.IsNull() {
		*accessTokenIntrospectionLeeway, _ = r.Config.AccessTokenIntrospectionLeeway.ValueBigFloat().Float64()
	} else {
		accessTokenIntrospectionLeeway = nil
	}
	var accessTokenIntrospectionScopesClaim []string = []string{}
	for _, accessTokenIntrospectionScopesClaimItem := range r.Config.AccessTokenIntrospectionScopesClaim {
		accessTokenIntrospectionScopesClaim = append(accessTokenIntrospectionScopesClaim, accessTokenIntrospectionScopesClaimItem.ValueString())
	}
	var accessTokenIntrospectionScopesRequired []string = []string{}
	for _, accessTokenIntrospectionScopesRequiredItem := range r.Config.AccessTokenIntrospectionScopesRequired {
		accessTokenIntrospectionScopesRequired = append(accessTokenIntrospectionScopesRequired, accessTokenIntrospectionScopesRequiredItem.ValueString())
	}
	accessTokenIntrospectionTimeout := new(float64)
	if !r.Config.AccessTokenIntrospectionTimeout.IsUnknown() && !r.Config.AccessTokenIntrospectionTimeout.IsNull() {
		*accessTokenIntrospectionTimeout, _ = r.Config.AccessTokenIntrospectionTimeout.ValueBigFloat().Float64()
	} else {
		accessTokenIntrospectionTimeout = nil
	}
	accessTokenIssuer := new(string)
	if !r.Config.AccessTokenIssuer.IsUnknown() && !r.Config.AccessTokenIssuer.IsNull() {
		*accessTokenIssuer = r.Config.AccessTokenIssuer.ValueString()
	} else {
		accessTokenIssuer = nil
	}
	accessTokenJwksURI := new(string)
	if !r.Config.AccessTokenJwksURI.IsUnknown() && !r.Config.AccessTokenJwksURI.IsNull() {
		*accessTokenJwksURI = r.Config.AccessTokenJwksURI.ValueString()
	} else {
		accessTokenJwksURI = nil
	}
	accessTokenJwksURIClientCertificate := new(string)
	if !r.Config.AccessTokenJwksURIClientCertificate.IsUnknown() && !r.Config.AccessTokenJwksURIClientCertificate.IsNull() {
		*accessTokenJwksURIClientCertificate = r.Config.AccessTokenJwksURIClientCertificate.ValueString()
	} else {
		accessTokenJwksURIClientCertificate = nil
	}
	accessTokenJwksURIClientPassword := new(string)
	if !r.Config.AccessTokenJwksURIClientPassword.IsUnknown() && !r.Config.AccessTokenJwksURIClientPassword.IsNull() {
		*accessTokenJwksURIClientPassword = r.Config.AccessTokenJwksURIClientPassword.ValueString()
	} else {
		accessTokenJwksURIClientPassword = nil
	}
	accessTokenJwksURIClientUsername := new(string)
	if !r.Config.AccessTokenJwksURIClientUsername.IsUnknown() && !r.Config.AccessTokenJwksURIClientUsername.IsNull() {
		*accessTokenJwksURIClientUsername = r.Config.AccessTokenJwksURIClientUsername.ValueString()
	} else {
		accessTokenJwksURIClientUsername = nil
	}
	accessTokenJwksURIRotatePeriod := new(float64)
	if !r.Config.AccessTokenJwksURIRotatePeriod.IsUnknown() && !r.Config.AccessTokenJwksURIRotatePeriod.IsNull() {
		*accessTokenJwksURIRotatePeriod, _ = r.Config.AccessTokenJwksURIRotatePeriod.ValueBigFloat().Float64()
	} else {
		accessTokenJwksURIRotatePeriod = nil
	}
	accessTokenKeyset := new(string)
	if !r.Config.AccessTokenKeyset.IsUnknown() && !r.Config.AccessTokenKeyset.IsNull() {
		*accessTokenKeyset = r.Config.AccessTokenKeyset.ValueString()
	} else {
		accessTokenKeyset = nil
	}
	accessTokenKeysetClientCertificate := new(string)
	if !r.Config.AccessTokenKeysetClientCertificate.IsUnknown() && !r.Config.AccessTokenKeysetClientCertificate.IsNull() {
		*accessTokenKeysetClientCertificate = r.Config.AccessTokenKeysetClientCertificate.ValueString()
	} else {
		accessTokenKeysetClientCertificate = nil
	}
	accessTokenKeysetClientPassword := new(string)
	if !r.Config.AccessTokenKeysetClientPassword.IsUnknown() && !r.Config.AccessTokenKeysetClientPassword.IsNull() {
		*accessTokenKeysetClientPassword = r.Config.AccessTokenKeysetClientPassword.ValueString()
	} else {
		accessTokenKeysetClientPassword = nil
	}
	accessTokenKeysetClientUsername := new(string)
	if !r.Config.AccessTokenKeysetClientUsername.IsUnknown() && !r.Config.AccessTokenKeysetClientUsername.IsNull() {
		*accessTokenKeysetClientUsername = r.Config.AccessTokenKeysetClientUsername.ValueString()
	} else {
		accessTokenKeysetClientUsername = nil
	}
	accessTokenKeysetRotatePeriod := new(float64)
	if !r.Config.AccessTokenKeysetRotatePeriod.IsUnknown() && !r.Config.AccessTokenKeysetRotatePeriod.IsNull() {
		*accessTokenKeysetRotatePeriod, _ = r.Config.AccessTokenKeysetRotatePeriod.ValueBigFloat().Float64()
	} else {
		accessTokenKeysetRotatePeriod = nil
	}
	accessTokenLeeway := new(float64)
	if !r.Config.AccessTokenLeeway.IsUnknown() && !r.Config.AccessTokenLeeway.IsNull() {
		*accessTokenLeeway, _ = r.Config.AccessTokenLeeway.ValueBigFloat().Float64()
	} else {
		accessTokenLeeway = nil
	}
	accessTokenOptional := new(bool)
	if !r.Config.AccessTokenOptional.IsUnknown() && !r.Config.AccessTokenOptional.IsNull() {
		*accessTokenOptional = r.Config.AccessTokenOptional.ValueBool()
	} else {
		accessTokenOptional = nil
	}
	accessTokenRequestHeader := new(string)
	if !r.Config.AccessTokenRequestHeader.IsUnknown() && !r.Config.AccessTokenRequestHeader.IsNull() {
		*accessTokenRequestHeader = r.Config.AccessTokenRequestHeader.ValueString()
	} else {
		accessTokenRequestHeader = nil
	}
	var accessTokenScopesClaim []string = []string{}
	for _, accessTokenScopesClaimItem := range r.Config.AccessTokenScopesClaim {
		accessTokenScopesClaim = append(accessTokenScopesClaim, accessTokenScopesClaimItem.ValueString())
	}
	var accessTokenScopesRequired []string = []string{}
	for _, accessTokenScopesRequiredItem := range r.Config.AccessTokenScopesRequired {
		accessTokenScopesRequired = append(accessTokenScopesRequired, accessTokenScopesRequiredItem.ValueString())
	}
	accessTokenSigningAlgorithm := new(shared.AccessTokenSigningAlgorithm)
	if !r.Config.AccessTokenSigningAlgorithm.IsUnknown() && !r.Config.AccessTokenSigningAlgorithm.IsNull() {
		*accessTokenSigningAlgorithm = shared.AccessTokenSigningAlgorithm(r.Config.AccessTokenSigningAlgorithm.ValueString())
	} else {
		accessTokenSigningAlgorithm = nil
	}
	accessTokenUpstreamHeader := new(string)
	if !r.Config.AccessTokenUpstreamHeader.IsUnknown() && !r.Config.AccessTokenUpstreamHeader.IsNull() {
		*accessTokenUpstreamHeader = r.Config.AccessTokenUpstreamHeader.ValueString()
	} else {
		accessTokenUpstreamHeader = nil
	}
	accessTokenUpstreamLeeway := new(float64)
	if !r.Config.AccessTokenUpstreamLeeway.IsUnknown() && !r.Config.AccessTokenUpstreamLeeway.IsNull() {
		*accessTokenUpstreamLeeway, _ = r.Config.AccessTokenUpstreamLeeway.ValueBigFloat().Float64()
	} else {
		accessTokenUpstreamLeeway = nil
	}
	addAccessTokenClaims := make(map[string]interface{})
	for addAccessTokenClaimsKey, addAccessTokenClaimsValue := range r.Config.AddAccessTokenClaims {
		var addAccessTokenClaimsInst interface{}
		_ = json.Unmarshal([]byte(addAccessTokenClaimsValue.ValueString()), &addAccessTokenClaimsInst)
		addAccessTokenClaims[addAccessTokenClaimsKey] = addAccessTokenClaimsInst
	}
	addChannelTokenClaims := make(map[string]interface{})
	for addChannelTokenClaimsKey, addChannelTokenClaimsValue := range r.Config.AddChannelTokenClaims {
		var addChannelTokenClaimsInst interface{}
		_ = json.Unmarshal([]byte(addChannelTokenClaimsValue.ValueString()), &addChannelTokenClaimsInst)
		addChannelTokenClaims[addChannelTokenClaimsKey] = addChannelTokenClaimsInst
	}
	addClaims := make(map[string]interface{})
	for addClaimsKey, addClaimsValue := range r.Config.AddClaims {
		var addClaimsInst interface{}
		_ = json.Unmarshal([]byte(addClaimsValue.ValueString()), &addClaimsInst)
		addClaims[addClaimsKey] = addClaimsInst
	}
	cacheAccessTokenIntrospection := new(bool)
	if !r.Config.CacheAccessTokenIntrospection.IsUnknown() && !r.Config.CacheAccessTokenIntrospection.IsNull() {
		*cacheAccessTokenIntrospection = r.Config.CacheAccessTokenIntrospection.ValueBool()
	} else {
		cacheAccessTokenIntrospection = nil
	}
	cacheChannelTokenIntrospection := new(bool)
	if !r.Config.CacheChannelTokenIntrospection.IsUnknown() && !r.Config.CacheChannelTokenIntrospection.IsNull() {
		*cacheChannelTokenIntrospection = r.Config.CacheChannelTokenIntrospection.ValueBool()
	} else {
		cacheChannelTokenIntrospection = nil
	}
	var channelTokenConsumerBy []shared.ChannelTokenConsumerBy = []shared.ChannelTokenConsumerBy{}
	for _, channelTokenConsumerByItem := range r.Config.ChannelTokenConsumerBy {
		channelTokenConsumerBy = append(channelTokenConsumerBy, shared.ChannelTokenConsumerBy(channelTokenConsumerByItem.ValueString()))
	}
	var channelTokenConsumerClaim []string = []string{}
	for _, channelTokenConsumerClaimItem := range r.Config.ChannelTokenConsumerClaim {
		channelTokenConsumerClaim = append(channelTokenConsumerClaim, channelTokenConsumerClaimItem.ValueString())
	}
	channelTokenIntrospectionAuthorization := new(string)
	if !r.Config.ChannelTokenIntrospectionAuthorization.IsUnknown() && !r.Config.ChannelTokenIntrospectionAuthorization.IsNull() {
		*channelTokenIntrospectionAuthorization = r.Config.ChannelTokenIntrospectionAuthorization.ValueString()
	} else {
		channelTokenIntrospectionAuthorization = nil
	}
	channelTokenIntrospectionBodyArgs := new(string)
	if !r.Config.ChannelTokenIntrospectionBodyArgs.IsUnknown() && !r.Config.ChannelTokenIntrospectionBodyArgs.IsNull() {
		*channelTokenIntrospectionBodyArgs = r.Config.ChannelTokenIntrospectionBodyArgs.ValueString()
	} else {
		channelTokenIntrospectionBodyArgs = nil
	}
	var channelTokenIntrospectionConsumerBy []shared.ChannelTokenIntrospectionConsumerBy = []shared.ChannelTokenIntrospectionConsumerBy{}
	for _, channelTokenIntrospectionConsumerByItem := range r.Config.ChannelTokenIntrospectionConsumerBy {
		channelTokenIntrospectionConsumerBy = append(channelTokenIntrospectionConsumerBy, shared.ChannelTokenIntrospectionConsumerBy(channelTokenIntrospectionConsumerByItem.ValueString()))
	}
	var channelTokenIntrospectionConsumerClaim []string = []string{}
	for _, channelTokenIntrospectionConsumerClaimItem := range r.Config.ChannelTokenIntrospectionConsumerClaim {
		channelTokenIntrospectionConsumerClaim = append(channelTokenIntrospectionConsumerClaim, channelTokenIntrospectionConsumerClaimItem.ValueString())
	}
	channelTokenIntrospectionEndpoint := new(string)
	if !r.Config.ChannelTokenIntrospectionEndpoint.IsUnknown() && !r.Config.ChannelTokenIntrospectionEndpoint.IsNull() {
		*channelTokenIntrospectionEndpoint = r.Config.ChannelTokenIntrospectionEndpoint.ValueString()
	} else {
		channelTokenIntrospectionEndpoint = nil
	}
	channelTokenIntrospectionHint := new(string)
	if !r.Config.ChannelTokenIntrospectionHint.IsUnknown() && !r.Config.ChannelTokenIntrospectionHint.IsNull() {
		*channelTokenIntrospectionHint = r.Config.ChannelTokenIntrospectionHint.ValueString()
	} else {
		channelTokenIntrospectionHint = nil
	}
	var channelTokenIntrospectionJwtClaim []string = []string{}
	for _, channelTokenIntrospectionJwtClaimItem := range r.Config.ChannelTokenIntrospectionJwtClaim {
		channelTokenIntrospectionJwtClaim = append(channelTokenIntrospectionJwtClaim, channelTokenIntrospectionJwtClaimItem.ValueString())
	}
	channelTokenIntrospectionLeeway := new(float64)
	if !r.Config.ChannelTokenIntrospectionLeeway.IsUnknown() && !r.Config.ChannelTokenIntrospectionLeeway.IsNull() {
		*channelTokenIntrospectionLeeway, _ = r.Config.ChannelTokenIntrospectionLeeway.ValueBigFloat().Float64()
	} else {
		channelTokenIntrospectionLeeway = nil
	}
	var channelTokenIntrospectionScopesClaim []string = []string{}
	for _, channelTokenIntrospectionScopesClaimItem := range r.Config.ChannelTokenIntrospectionScopesClaim {
		channelTokenIntrospectionScopesClaim = append(channelTokenIntrospectionScopesClaim, channelTokenIntrospectionScopesClaimItem.ValueString())
	}
	var channelTokenIntrospectionScopesRequired []string = []string{}
	for _, channelTokenIntrospectionScopesRequiredItem := range r.Config.ChannelTokenIntrospectionScopesRequired {
		channelTokenIntrospectionScopesRequired = append(channelTokenIntrospectionScopesRequired, channelTokenIntrospectionScopesRequiredItem.ValueString())
	}
	channelTokenIntrospectionTimeout := new(float64)
	if !r.Config.ChannelTokenIntrospectionTimeout.IsUnknown() && !r.Config.ChannelTokenIntrospectionTimeout.IsNull() {
		*channelTokenIntrospectionTimeout, _ = r.Config.ChannelTokenIntrospectionTimeout.ValueBigFloat().Float64()
	} else {
		channelTokenIntrospectionTimeout = nil
	}
	channelTokenIssuer := new(string)
	if !r.Config.ChannelTokenIssuer.IsUnknown() && !r.Config.ChannelTokenIssuer.IsNull() {
		*channelTokenIssuer = r.Config.ChannelTokenIssuer.ValueString()
	} else {
		channelTokenIssuer = nil
	}
	channelTokenJwksURI := new(string)
	if !r.Config.ChannelTokenJwksURI.IsUnknown() && !r.Config.ChannelTokenJwksURI.IsNull() {
		*channelTokenJwksURI = r.Config.ChannelTokenJwksURI.ValueString()
	} else {
		channelTokenJwksURI = nil
	}
	channelTokenJwksURIClientCertificate := new(string)
	if !r.Config.ChannelTokenJwksURIClientCertificate.IsUnknown() && !r.Config.ChannelTokenJwksURIClientCertificate.IsNull() {
		*channelTokenJwksURIClientCertificate = r.Config.ChannelTokenJwksURIClientCertificate.ValueString()
	} else {
		channelTokenJwksURIClientCertificate = nil
	}
	channelTokenJwksURIClientPassword := new(string)
	if !r.Config.ChannelTokenJwksURIClientPassword.IsUnknown() && !r.Config.ChannelTokenJwksURIClientPassword.IsNull() {
		*channelTokenJwksURIClientPassword = r.Config.ChannelTokenJwksURIClientPassword.ValueString()
	} else {
		channelTokenJwksURIClientPassword = nil
	}
	channelTokenJwksURIClientUsername := new(string)
	if !r.Config.ChannelTokenJwksURIClientUsername.IsUnknown() && !r.Config.ChannelTokenJwksURIClientUsername.IsNull() {
		*channelTokenJwksURIClientUsername = r.Config.ChannelTokenJwksURIClientUsername.ValueString()
	} else {
		channelTokenJwksURIClientUsername = nil
	}
	channelTokenJwksURIRotatePeriod := new(float64)
	if !r.Config.ChannelTokenJwksURIRotatePeriod.IsUnknown() && !r.Config.ChannelTokenJwksURIRotatePeriod.IsNull() {
		*channelTokenJwksURIRotatePeriod, _ = r.Config.ChannelTokenJwksURIRotatePeriod.ValueBigFloat().Float64()
	} else {
		channelTokenJwksURIRotatePeriod = nil
	}
	channelTokenKeyset := new(string)
	if !r.Config.ChannelTokenKeyset.IsUnknown() && !r.Config.ChannelTokenKeyset.IsNull() {
		*channelTokenKeyset = r.Config.ChannelTokenKeyset.ValueString()
	} else {
		channelTokenKeyset = nil
	}
	channelTokenKeysetClientCertificate := new(string)
	if !r.Config.ChannelTokenKeysetClientCertificate.IsUnknown() && !r.Config.ChannelTokenKeysetClientCertificate.IsNull() {
		*channelTokenKeysetClientCertificate = r.Config.ChannelTokenKeysetClientCertificate.ValueString()
	} else {
		channelTokenKeysetClientCertificate = nil
	}
	channelTokenKeysetClientPassword := new(string)
	if !r.Config.ChannelTokenKeysetClientPassword.IsUnknown() && !r.Config.ChannelTokenKeysetClientPassword.IsNull() {
		*channelTokenKeysetClientPassword = r.Config.ChannelTokenKeysetClientPassword.ValueString()
	} else {
		channelTokenKeysetClientPassword = nil
	}
	channelTokenKeysetClientUsername := new(string)
	if !r.Config.ChannelTokenKeysetClientUsername.IsUnknown() && !r.Config.ChannelTokenKeysetClientUsername.IsNull() {
		*channelTokenKeysetClientUsername = r.Config.ChannelTokenKeysetClientUsername.ValueString()
	} else {
		channelTokenKeysetClientUsername = nil
	}
	channelTokenKeysetRotatePeriod := new(float64)
	if !r.Config.ChannelTokenKeysetRotatePeriod.IsUnknown() && !r.Config.ChannelTokenKeysetRotatePeriod.IsNull() {
		*channelTokenKeysetRotatePeriod, _ = r.Config.ChannelTokenKeysetRotatePeriod.ValueBigFloat().Float64()
	} else {
		channelTokenKeysetRotatePeriod = nil
	}
	channelTokenLeeway := new(float64)
	if !r.Config.ChannelTokenLeeway.IsUnknown() && !r.Config.ChannelTokenLeeway.IsNull() {
		*channelTokenLeeway, _ = r.Config.ChannelTokenLeeway.ValueBigFloat().Float64()
	} else {
		channelTokenLeeway = nil
	}
	channelTokenOptional := new(bool)
	if !r.Config.ChannelTokenOptional.IsUnknown() && !r.Config.ChannelTokenOptional.IsNull() {
		*channelTokenOptional = r.Config.ChannelTokenOptional.ValueBool()
	} else {
		channelTokenOptional = nil
	}
	channelTokenRequestHeader := new(string)
	if !r.Config.ChannelTokenRequestHeader.IsUnknown() && !r.Config.ChannelTokenRequestHeader.IsNull() {
		*channelTokenRequestHeader = r.Config.ChannelTokenRequestHeader.ValueString()
	} else {
		channelTokenRequestHeader = nil
	}
	var channelTokenScopesClaim []string = []string{}
	for _, channelTokenScopesClaimItem := range r.Config.ChannelTokenScopesClaim {
		channelTokenScopesClaim = append(channelTokenScopesClaim, channelTokenScopesClaimItem.ValueString())
	}
	var channelTokenScopesRequired []string = []string{}
	for _, channelTokenScopesRequiredItem := range r.Config.ChannelTokenScopesRequired {
		channelTokenScopesRequired = append(channelTokenScopesRequired, channelTokenScopesRequiredItem.ValueString())
	}
	channelTokenSigningAlgorithm := new(shared.ChannelTokenSigningAlgorithm)
	if !r.Config.ChannelTokenSigningAlgorithm.IsUnknown() && !r.Config.ChannelTokenSigningAlgorithm.IsNull() {
		*channelTokenSigningAlgorithm = shared.ChannelTokenSigningAlgorithm(r.Config.ChannelTokenSigningAlgorithm.ValueString())
	} else {
		channelTokenSigningAlgorithm = nil
	}
	channelTokenUpstreamHeader := new(string)
	if !r.Config.ChannelTokenUpstreamHeader.IsUnknown() && !r.Config.ChannelTokenUpstreamHeader.IsNull() {
		*channelTokenUpstreamHeader = r.Config.ChannelTokenUpstreamHeader.ValueString()
	} else {
		channelTokenUpstreamHeader = nil
	}
	channelTokenUpstreamLeeway := new(float64)
	if !r.Config.ChannelTokenUpstreamLeeway.IsUnknown() && !r.Config.ChannelTokenUpstreamLeeway.IsNull() {
		*channelTokenUpstreamLeeway, _ = r.Config.ChannelTokenUpstreamLeeway.ValueBigFloat().Float64()
	} else {
		channelTokenUpstreamLeeway = nil
	}
	enableAccessTokenIntrospection := new(bool)
	if !r.Config.EnableAccessTokenIntrospection.IsUnknown() && !r.Config.EnableAccessTokenIntrospection.IsNull() {
		*enableAccessTokenIntrospection = r.Config.EnableAccessTokenIntrospection.ValueBool()
	} else {
		enableAccessTokenIntrospection = nil
	}
	enableChannelTokenIntrospection := new(bool)
	if !r.Config.EnableChannelTokenIntrospection.IsUnknown() && !r.Config.EnableChannelTokenIntrospection.IsNull() {
		*enableChannelTokenIntrospection = r.Config.EnableChannelTokenIntrospection.ValueBool()
	} else {
		enableChannelTokenIntrospection = nil
	}
	enableHsSignatures := new(bool)
	if !r.Config.EnableHsSignatures.IsUnknown() && !r.Config.EnableHsSignatures.IsNull() {
		*enableHsSignatures = r.Config.EnableHsSignatures.ValueBool()
	} else {
		enableHsSignatures = nil
	}
	enableInstrumentation := new(bool)
	if !r.Config.EnableInstrumentation.IsUnknown() && !r.Config.EnableInstrumentation.IsNull() {
		*enableInstrumentation = r.Config.EnableInstrumentation.ValueBool()
	} else {
		enableInstrumentation = nil
	}
	originalAccessTokenUpstreamHeader := new(string)
	if !r.Config.OriginalAccessTokenUpstreamHeader.IsUnknown() && !r.Config.OriginalAccessTokenUpstreamHeader.IsNull() {
		*originalAccessTokenUpstreamHeader = r.Config.OriginalAccessTokenUpstreamHeader.ValueString()
	} else {
		originalAccessTokenUpstreamHeader = nil
	}
	originalChannelTokenUpstreamHeader := new(string)
	if !r.Config.OriginalChannelTokenUpstreamHeader.IsUnknown() && !r.Config.OriginalChannelTokenUpstreamHeader.IsNull() {
		*originalChannelTokenUpstreamHeader = r.Config.OriginalChannelTokenUpstreamHeader.ValueString()
	} else {
		originalChannelTokenUpstreamHeader = nil
	}
	realm := new(string)
	if !r.Config.Realm.IsUnknown() && !r.Config.Realm.IsNull() {
		*realm = r.Config.Realm.ValueString()
	} else {
		realm = nil
	}
	var removeAccessTokenClaims []string = []string{}
	for _, removeAccessTokenClaimsItem := range r.Config.RemoveAccessTokenClaims {
		removeAccessTokenClaims = append(removeAccessTokenClaims, removeAccessTokenClaimsItem.ValueString())
	}
	var removeChannelTokenClaims []string = []string{}
	for _, removeChannelTokenClaimsItem := range r.Config.RemoveChannelTokenClaims {
		removeChannelTokenClaims = append(removeChannelTokenClaims, removeChannelTokenClaimsItem.ValueString())
	}
	setAccessTokenClaims := make(map[string]interface{})
	for setAccessTokenClaimsKey, setAccessTokenClaimsValue := range r.Config.SetAccessTokenClaims {
		var setAccessTokenClaimsInst interface{}
		_ = json.Unmarshal([]byte(setAccessTokenClaimsValue.ValueString()), &setAccessTokenClaimsInst)
		setAccessTokenClaims[setAccessTokenClaimsKey] = setAccessTokenClaimsInst
	}
	setChannelTokenClaims := make(map[string]interface{})
	for setChannelTokenClaimsKey, setChannelTokenClaimsValue := range r.Config.SetChannelTokenClaims {
		var setChannelTokenClaimsInst interface{}
		_ = json.Unmarshal([]byte(setChannelTokenClaimsValue.ValueString()), &setChannelTokenClaimsInst)
		setChannelTokenClaims[setChannelTokenClaimsKey] = setChannelTokenClaimsInst
	}
	setClaims := make(map[string]interface{})
	for setClaimsKey, setClaimsValue := range r.Config.SetClaims {
		var setClaimsInst interface{}
		_ = json.Unmarshal([]byte(setClaimsValue.ValueString()), &setClaimsInst)
		setClaims[setClaimsKey] = setClaimsInst
	}
	trustAccessTokenIntrospection := new(bool)
	if !r.Config.TrustAccessTokenIntrospection.IsUnknown() && !r.Config.TrustAccessTokenIntrospection.IsNull() {
		*trustAccessTokenIntrospection = r.Config.TrustAccessTokenIntrospection.ValueBool()
	} else {
		trustAccessTokenIntrospection = nil
	}
	trustChannelTokenIntrospection := new(bool)
	if !r.Config.TrustChannelTokenIntrospection.IsUnknown() && !r.Config.TrustChannelTokenIntrospection.IsNull() {
		*trustChannelTokenIntrospection = r.Config.TrustChannelTokenIntrospection.ValueBool()
	} else {
		trustChannelTokenIntrospection = nil
	}
	verifyAccessTokenExpiry := new(bool)
	if !r.Config.VerifyAccessTokenExpiry.IsUnknown() && !r.Config.VerifyAccessTokenExpiry.IsNull() {
		*verifyAccessTokenExpiry = r.Config.VerifyAccessTokenExpiry.ValueBool()
	} else {
		verifyAccessTokenExpiry = nil
	}
	verifyAccessTokenIntrospectionExpiry := new(bool)
	if !r.Config.VerifyAccessTokenIntrospectionExpiry.IsUnknown() && !r.Config.VerifyAccessTokenIntrospectionExpiry.IsNull() {
		*verifyAccessTokenIntrospectionExpiry = r.Config.VerifyAccessTokenIntrospectionExpiry.ValueBool()
	} else {
		verifyAccessTokenIntrospectionExpiry = nil
	}
	verifyAccessTokenIntrospectionScopes := new(bool)
	if !r.Config.VerifyAccessTokenIntrospectionScopes.IsUnknown() && !r.Config.VerifyAccessTokenIntrospectionScopes.IsNull() {
		*verifyAccessTokenIntrospectionScopes = r.Config.VerifyAccessTokenIntrospectionScopes.ValueBool()
	} else {
		verifyAccessTokenIntrospectionScopes = nil
	}
	verifyAccessTokenScopes := new(bool)
	if !r.Config.VerifyAccessTokenScopes.IsUnknown() && !r.Config.VerifyAccessTokenScopes.IsNull() {
		*verifyAccessTokenScopes = r.Config.VerifyAccessTokenScopes.ValueBool()
	} else {
		verifyAccessTokenScopes = nil
	}
	verifyAccessTokenSignature := new(bool)
	if !r.Config.VerifyAccessTokenSignature.IsUnknown() && !r.Config.VerifyAccessTokenSignature.IsNull() {
		*verifyAccessTokenSignature = r.Config.VerifyAccessTokenSignature.ValueBool()
	} else {
		verifyAccessTokenSignature = nil
	}
	verifyChannelTokenExpiry := new(bool)
	if !r.Config.VerifyChannelTokenExpiry.IsUnknown() && !r.Config.VerifyChannelTokenExpiry.IsNull() {
		*verifyChannelTokenExpiry = r.Config.VerifyChannelTokenExpiry.ValueBool()
	} else {
		verifyChannelTokenExpiry = nil
	}
	verifyChannelTokenIntrospectionExpiry := new(bool)
	if !r.Config.VerifyChannelTokenIntrospectionExpiry.IsUnknown() && !r.Config.VerifyChannelTokenIntrospectionExpiry.IsNull() {
		*verifyChannelTokenIntrospectionExpiry = r.Config.VerifyChannelTokenIntrospectionExpiry.ValueBool()
	} else {
		verifyChannelTokenIntrospectionExpiry = nil
	}
	verifyChannelTokenIntrospectionScopes := new(bool)
	if !r.Config.VerifyChannelTokenIntrospectionScopes.IsUnknown() && !r.Config.VerifyChannelTokenIntrospectionScopes.IsNull() {
		*verifyChannelTokenIntrospectionScopes = r.Config.VerifyChannelTokenIntrospectionScopes.ValueBool()
	} else {
		verifyChannelTokenIntrospectionScopes = nil
	}
	verifyChannelTokenScopes := new(bool)
	if !r.Config.VerifyChannelTokenScopes.IsUnknown() && !r.Config.VerifyChannelTokenScopes.IsNull() {
		*verifyChannelTokenScopes = r.Config.VerifyChannelTokenScopes.ValueBool()
	} else {
		verifyChannelTokenScopes = nil
	}
	verifyChannelTokenSignature := new(bool)
	if !r.Config.VerifyChannelTokenSignature.IsUnknown() && !r.Config.VerifyChannelTokenSignature.IsNull() {
		*verifyChannelTokenSignature = r.Config.VerifyChannelTokenSignature.ValueBool()
	} else {
		verifyChannelTokenSignature = nil
	}
	config := shared.JwtSignerPluginConfig{
		AccessTokenConsumerBy:                   accessTokenConsumerBy,
		AccessTokenConsumerClaim:                accessTokenConsumerClaim,
		AccessTokenIntrospectionAuthorization:   accessTokenIntrospectionAuthorization,
		AccessTokenIntrospectionBodyArgs:        accessTokenIntrospectionBodyArgs,
		AccessTokenIntrospectionConsumerBy:      accessTokenIntrospectionConsumerBy,
		AccessTokenIntrospectionConsumerClaim:   accessTokenIntrospectionConsumerClaim,
		AccessTokenIntrospectionEndpoint:        accessTokenIntrospectionEndpoint,
		AccessTokenIntrospectionHint:            accessTokenIntrospectionHint,
		AccessTokenIntrospectionJwtClaim:        accessTokenIntrospectionJwtClaim,
		AccessTokenIntrospectionLeeway:          accessTokenIntrospectionLeeway,
		AccessTokenIntrospectionScopesClaim:     accessTokenIntrospectionScopesClaim,
		AccessTokenIntrospectionScopesRequired:  accessTokenIntrospectionScopesRequired,
		AccessTokenIntrospectionTimeout:         accessTokenIntrospectionTimeout,
		AccessTokenIssuer:                       accessTokenIssuer,
		AccessTokenJwksURI:                      accessTokenJwksURI,
		AccessTokenJwksURIClientCertificate:     accessTokenJwksURIClientCertificate,
		AccessTokenJwksURIClientPassword:        accessTokenJwksURIClientPassword,
		AccessTokenJwksURIClientUsername:        accessTokenJwksURIClientUsername,
		AccessTokenJwksURIRotatePeriod:          accessTokenJwksURIRotatePeriod,
		AccessTokenKeyset:                       accessTokenKeyset,
		AccessTokenKeysetClientCertificate:      accessTokenKeysetClientCertificate,
		AccessTokenKeysetClientPassword:         accessTokenKeysetClientPassword,
		AccessTokenKeysetClientUsername:         accessTokenKeysetClientUsername,
		AccessTokenKeysetRotatePeriod:           accessTokenKeysetRotatePeriod,
		AccessTokenLeeway:                       accessTokenLeeway,
		AccessTokenOptional:                     accessTokenOptional,
		AccessTokenRequestHeader:                accessTokenRequestHeader,
		AccessTokenScopesClaim:                  accessTokenScopesClaim,
		AccessTokenScopesRequired:               accessTokenScopesRequired,
		AccessTokenSigningAlgorithm:             accessTokenSigningAlgorithm,
		AccessTokenUpstreamHeader:               accessTokenUpstreamHeader,
		AccessTokenUpstreamLeeway:               accessTokenUpstreamLeeway,
		AddAccessTokenClaims:                    addAccessTokenClaims,
		AddChannelTokenClaims:                   addChannelTokenClaims,
		AddClaims:                               addClaims,
		CacheAccessTokenIntrospection:           cacheAccessTokenIntrospection,
		CacheChannelTokenIntrospection:          cacheChannelTokenIntrospection,
		ChannelTokenConsumerBy:                  channelTokenConsumerBy,
		ChannelTokenConsumerClaim:               channelTokenConsumerClaim,
		ChannelTokenIntrospectionAuthorization:  channelTokenIntrospectionAuthorization,
		ChannelTokenIntrospectionBodyArgs:       channelTokenIntrospectionBodyArgs,
		ChannelTokenIntrospectionConsumerBy:     channelTokenIntrospectionConsumerBy,
		ChannelTokenIntrospectionConsumerClaim:  channelTokenIntrospectionConsumerClaim,
		ChannelTokenIntrospectionEndpoint:       channelTokenIntrospectionEndpoint,
		ChannelTokenIntrospectionHint:           channelTokenIntrospectionHint,
		ChannelTokenIntrospectionJwtClaim:       channelTokenIntrospectionJwtClaim,
		ChannelTokenIntrospectionLeeway:         channelTokenIntrospectionLeeway,
		ChannelTokenIntrospectionScopesClaim:    channelTokenIntrospectionScopesClaim,
		ChannelTokenIntrospectionScopesRequired: channelTokenIntrospectionScopesRequired,
		ChannelTokenIntrospectionTimeout:        channelTokenIntrospectionTimeout,
		ChannelTokenIssuer:                      channelTokenIssuer,
		ChannelTokenJwksURI:                     channelTokenJwksURI,
		ChannelTokenJwksURIClientCertificate:    channelTokenJwksURIClientCertificate,
		ChannelTokenJwksURIClientPassword:       channelTokenJwksURIClientPassword,
		ChannelTokenJwksURIClientUsername:       channelTokenJwksURIClientUsername,
		ChannelTokenJwksURIRotatePeriod:         channelTokenJwksURIRotatePeriod,
		ChannelTokenKeyset:                      channelTokenKeyset,
		ChannelTokenKeysetClientCertificate:     channelTokenKeysetClientCertificate,
		ChannelTokenKeysetClientPassword:        channelTokenKeysetClientPassword,
		ChannelTokenKeysetClientUsername:        channelTokenKeysetClientUsername,
		ChannelTokenKeysetRotatePeriod:          channelTokenKeysetRotatePeriod,
		ChannelTokenLeeway:                      channelTokenLeeway,
		ChannelTokenOptional:                    channelTokenOptional,
		ChannelTokenRequestHeader:               channelTokenRequestHeader,
		ChannelTokenScopesClaim:                 channelTokenScopesClaim,
		ChannelTokenScopesRequired:              channelTokenScopesRequired,
		ChannelTokenSigningAlgorithm:            channelTokenSigningAlgorithm,
		ChannelTokenUpstreamHeader:              channelTokenUpstreamHeader,
		ChannelTokenUpstreamLeeway:              channelTokenUpstreamLeeway,
		EnableAccessTokenIntrospection:          enableAccessTokenIntrospection,
		EnableChannelTokenIntrospection:         enableChannelTokenIntrospection,
		EnableHsSignatures:                      enableHsSignatures,
		EnableInstrumentation:                   enableInstrumentation,
		OriginalAccessTokenUpstreamHeader:       originalAccessTokenUpstreamHeader,
		OriginalChannelTokenUpstreamHeader:      originalChannelTokenUpstreamHeader,
		Realm:                                   realm,
		RemoveAccessTokenClaims:                 removeAccessTokenClaims,
		RemoveChannelTokenClaims:                removeChannelTokenClaims,
		SetAccessTokenClaims:                    setAccessTokenClaims,
		SetChannelTokenClaims:                   setChannelTokenClaims,
		SetClaims:                               setClaims,
		TrustAccessTokenIntrospection:           trustAccessTokenIntrospection,
		TrustChannelTokenIntrospection:          trustChannelTokenIntrospection,
		VerifyAccessTokenExpiry:                 verifyAccessTokenExpiry,
		VerifyAccessTokenIntrospectionExpiry:    verifyAccessTokenIntrospectionExpiry,
		VerifyAccessTokenIntrospectionScopes:    verifyAccessTokenIntrospectionScopes,
		VerifyAccessTokenScopes:                 verifyAccessTokenScopes,
		VerifyAccessTokenSignature:              verifyAccessTokenSignature,
		VerifyChannelTokenExpiry:                verifyChannelTokenExpiry,
		VerifyChannelTokenIntrospectionExpiry:   verifyChannelTokenIntrospectionExpiry,
		VerifyChannelTokenIntrospectionScopes:   verifyChannelTokenIntrospectionScopes,
		VerifyChannelTokenScopes:                verifyChannelTokenScopes,
		VerifyChannelTokenSignature:             verifyChannelTokenSignature,
	}
	var consumer *shared.JwtSignerPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.JwtSignerPluginConsumer{
			ID: id,
		}
	}
	var consumerGroup *shared.JwtSignerPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id1 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id1 = r.ConsumerGroup.ID.ValueString()
		} else {
			id1 = nil
		}
		consumerGroup = &shared.JwtSignerPluginConsumerGroup{
			ID: id1,
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id2 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id2 = r.ID.ValueString()
	} else {
		id2 = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.JwtSignerPluginOrdering
	if r.Ordering != nil {
		var after *shared.JwtSignerPluginAfter
		if r.Ordering.After != nil {
			var access []string = []string{}
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.JwtSignerPluginAfter{
				Access: access,
			}
		}
		var before *shared.JwtSignerPluginBefore
		if r.Ordering.Before != nil {
			var access1 []string = []string{}
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.JwtSignerPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.JwtSignerPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var protocols []shared.JwtSignerPluginProtocols = []shared.JwtSignerPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.JwtSignerPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.JwtSignerPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.JwtSignerPluginRoute{
			ID: id3,
		}
	}
	var service *shared.JwtSignerPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.JwtSignerPluginService{
			ID: id4,
		}
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.JwtSignerPluginInput{
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Enabled:       enabled,
		ID:            id2,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
		Tags:          tags,
	}
	return &out
}

func (r *GatewayPluginJwtSignerResourceModel) RefreshFromSharedJwtSignerPlugin(resp *shared.JwtSignerPlugin) {
	if resp != nil {
		r.Config.AccessTokenConsumerBy = []types.String{}
		for _, v := range resp.Config.AccessTokenConsumerBy {
			r.Config.AccessTokenConsumerBy = append(r.Config.AccessTokenConsumerBy, types.StringValue(string(v)))
		}
		r.Config.AccessTokenConsumerClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenConsumerClaim {
			r.Config.AccessTokenConsumerClaim = append(r.Config.AccessTokenConsumerClaim, types.StringValue(v))
		}
		r.Config.AccessTokenIntrospectionAuthorization = types.StringPointerValue(resp.Config.AccessTokenIntrospectionAuthorization)
		r.Config.AccessTokenIntrospectionBodyArgs = types.StringPointerValue(resp.Config.AccessTokenIntrospectionBodyArgs)
		r.Config.AccessTokenIntrospectionConsumerBy = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionConsumerBy {
			r.Config.AccessTokenIntrospectionConsumerBy = append(r.Config.AccessTokenIntrospectionConsumerBy, types.StringValue(string(v)))
		}
		r.Config.AccessTokenIntrospectionConsumerClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionConsumerClaim {
			r.Config.AccessTokenIntrospectionConsumerClaim = append(r.Config.AccessTokenIntrospectionConsumerClaim, types.StringValue(v))
		}
		r.Config.AccessTokenIntrospectionEndpoint = types.StringPointerValue(resp.Config.AccessTokenIntrospectionEndpoint)
		r.Config.AccessTokenIntrospectionHint = types.StringPointerValue(resp.Config.AccessTokenIntrospectionHint)
		r.Config.AccessTokenIntrospectionJwtClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionJwtClaim {
			r.Config.AccessTokenIntrospectionJwtClaim = append(r.Config.AccessTokenIntrospectionJwtClaim, types.StringValue(v))
		}
		if resp.Config.AccessTokenIntrospectionLeeway != nil {
			r.Config.AccessTokenIntrospectionLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenIntrospectionLeeway)))
		} else {
			r.Config.AccessTokenIntrospectionLeeway = types.NumberNull()
		}
		r.Config.AccessTokenIntrospectionScopesClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionScopesClaim {
			r.Config.AccessTokenIntrospectionScopesClaim = append(r.Config.AccessTokenIntrospectionScopesClaim, types.StringValue(v))
		}
		r.Config.AccessTokenIntrospectionScopesRequired = []types.String{}
		for _, v := range resp.Config.AccessTokenIntrospectionScopesRequired {
			r.Config.AccessTokenIntrospectionScopesRequired = append(r.Config.AccessTokenIntrospectionScopesRequired, types.StringValue(v))
		}
		if resp.Config.AccessTokenIntrospectionTimeout != nil {
			r.Config.AccessTokenIntrospectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenIntrospectionTimeout)))
		} else {
			r.Config.AccessTokenIntrospectionTimeout = types.NumberNull()
		}
		r.Config.AccessTokenIssuer = types.StringPointerValue(resp.Config.AccessTokenIssuer)
		r.Config.AccessTokenJwksURI = types.StringPointerValue(resp.Config.AccessTokenJwksURI)
		r.Config.AccessTokenJwksURIClientCertificate = types.StringPointerValue(resp.Config.AccessTokenJwksURIClientCertificate)
		r.Config.AccessTokenJwksURIClientPassword = types.StringPointerValue(resp.Config.AccessTokenJwksURIClientPassword)
		r.Config.AccessTokenJwksURIClientUsername = types.StringPointerValue(resp.Config.AccessTokenJwksURIClientUsername)
		if resp.Config.AccessTokenJwksURIRotatePeriod != nil {
			r.Config.AccessTokenJwksURIRotatePeriod = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenJwksURIRotatePeriod)))
		} else {
			r.Config.AccessTokenJwksURIRotatePeriod = types.NumberNull()
		}
		r.Config.AccessTokenKeyset = types.StringPointerValue(resp.Config.AccessTokenKeyset)
		r.Config.AccessTokenKeysetClientCertificate = types.StringPointerValue(resp.Config.AccessTokenKeysetClientCertificate)
		r.Config.AccessTokenKeysetClientPassword = types.StringPointerValue(resp.Config.AccessTokenKeysetClientPassword)
		r.Config.AccessTokenKeysetClientUsername = types.StringPointerValue(resp.Config.AccessTokenKeysetClientUsername)
		if resp.Config.AccessTokenKeysetRotatePeriod != nil {
			r.Config.AccessTokenKeysetRotatePeriod = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenKeysetRotatePeriod)))
		} else {
			r.Config.AccessTokenKeysetRotatePeriod = types.NumberNull()
		}
		if resp.Config.AccessTokenLeeway != nil {
			r.Config.AccessTokenLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenLeeway)))
		} else {
			r.Config.AccessTokenLeeway = types.NumberNull()
		}
		r.Config.AccessTokenOptional = types.BoolPointerValue(resp.Config.AccessTokenOptional)
		r.Config.AccessTokenRequestHeader = types.StringPointerValue(resp.Config.AccessTokenRequestHeader)
		r.Config.AccessTokenScopesClaim = []types.String{}
		for _, v := range resp.Config.AccessTokenScopesClaim {
			r.Config.AccessTokenScopesClaim = append(r.Config.AccessTokenScopesClaim, types.StringValue(v))
		}
		r.Config.AccessTokenScopesRequired = []types.String{}
		for _, v := range resp.Config.AccessTokenScopesRequired {
			r.Config.AccessTokenScopesRequired = append(r.Config.AccessTokenScopesRequired, types.StringValue(v))
		}
		if resp.Config.AccessTokenSigningAlgorithm != nil {
			r.Config.AccessTokenSigningAlgorithm = types.StringValue(string(*resp.Config.AccessTokenSigningAlgorithm))
		} else {
			r.Config.AccessTokenSigningAlgorithm = types.StringNull()
		}
		r.Config.AccessTokenUpstreamHeader = types.StringPointerValue(resp.Config.AccessTokenUpstreamHeader)
		if resp.Config.AccessTokenUpstreamLeeway != nil {
			r.Config.AccessTokenUpstreamLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.AccessTokenUpstreamLeeway)))
		} else {
			r.Config.AccessTokenUpstreamLeeway = types.NumberNull()
		}
		if len(resp.Config.AddAccessTokenClaims) > 0 {
			r.Config.AddAccessTokenClaims = make(map[string]types.String)
			for key, value := range resp.Config.AddAccessTokenClaims {
				result, _ := json.Marshal(value)
				r.Config.AddAccessTokenClaims[key] = types.StringValue(string(result))
			}
		}
		if len(resp.Config.AddChannelTokenClaims) > 0 {
			r.Config.AddChannelTokenClaims = make(map[string]types.String)
			for key1, value1 := range resp.Config.AddChannelTokenClaims {
				result1, _ := json.Marshal(value1)
				r.Config.AddChannelTokenClaims[key1] = types.StringValue(string(result1))
			}
		}
		if len(resp.Config.AddClaims) > 0 {
			r.Config.AddClaims = make(map[string]types.String)
			for key2, value2 := range resp.Config.AddClaims {
				result2, _ := json.Marshal(value2)
				r.Config.AddClaims[key2] = types.StringValue(string(result2))
			}
		}
		r.Config.CacheAccessTokenIntrospection = types.BoolPointerValue(resp.Config.CacheAccessTokenIntrospection)
		r.Config.CacheChannelTokenIntrospection = types.BoolPointerValue(resp.Config.CacheChannelTokenIntrospection)
		r.Config.ChannelTokenConsumerBy = []types.String{}
		for _, v := range resp.Config.ChannelTokenConsumerBy {
			r.Config.ChannelTokenConsumerBy = append(r.Config.ChannelTokenConsumerBy, types.StringValue(string(v)))
		}
		r.Config.ChannelTokenConsumerClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenConsumerClaim {
			r.Config.ChannelTokenConsumerClaim = append(r.Config.ChannelTokenConsumerClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenIntrospectionAuthorization = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionAuthorization)
		r.Config.ChannelTokenIntrospectionBodyArgs = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionBodyArgs)
		r.Config.ChannelTokenIntrospectionConsumerBy = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionConsumerBy {
			r.Config.ChannelTokenIntrospectionConsumerBy = append(r.Config.ChannelTokenIntrospectionConsumerBy, types.StringValue(string(v)))
		}
		r.Config.ChannelTokenIntrospectionConsumerClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionConsumerClaim {
			r.Config.ChannelTokenIntrospectionConsumerClaim = append(r.Config.ChannelTokenIntrospectionConsumerClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenIntrospectionEndpoint = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionEndpoint)
		r.Config.ChannelTokenIntrospectionHint = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionHint)
		r.Config.ChannelTokenIntrospectionJwtClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionJwtClaim {
			r.Config.ChannelTokenIntrospectionJwtClaim = append(r.Config.ChannelTokenIntrospectionJwtClaim, types.StringValue(v))
		}
		if resp.Config.ChannelTokenIntrospectionLeeway != nil {
			r.Config.ChannelTokenIntrospectionLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenIntrospectionLeeway)))
		} else {
			r.Config.ChannelTokenIntrospectionLeeway = types.NumberNull()
		}
		r.Config.ChannelTokenIntrospectionScopesClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionScopesClaim {
			r.Config.ChannelTokenIntrospectionScopesClaim = append(r.Config.ChannelTokenIntrospectionScopesClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenIntrospectionScopesRequired = []types.String{}
		for _, v := range resp.Config.ChannelTokenIntrospectionScopesRequired {
			r.Config.ChannelTokenIntrospectionScopesRequired = append(r.Config.ChannelTokenIntrospectionScopesRequired, types.StringValue(v))
		}
		if resp.Config.ChannelTokenIntrospectionTimeout != nil {
			r.Config.ChannelTokenIntrospectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenIntrospectionTimeout)))
		} else {
			r.Config.ChannelTokenIntrospectionTimeout = types.NumberNull()
		}
		r.Config.ChannelTokenIssuer = types.StringPointerValue(resp.Config.ChannelTokenIssuer)
		r.Config.ChannelTokenJwksURI = types.StringPointerValue(resp.Config.ChannelTokenJwksURI)
		r.Config.ChannelTokenJwksURIClientCertificate = types.StringPointerValue(resp.Config.ChannelTokenJwksURIClientCertificate)
		r.Config.ChannelTokenJwksURIClientPassword = types.StringPointerValue(resp.Config.ChannelTokenJwksURIClientPassword)
		r.Config.ChannelTokenJwksURIClientUsername = types.StringPointerValue(resp.Config.ChannelTokenJwksURIClientUsername)
		if resp.Config.ChannelTokenJwksURIRotatePeriod != nil {
			r.Config.ChannelTokenJwksURIRotatePeriod = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenJwksURIRotatePeriod)))
		} else {
			r.Config.ChannelTokenJwksURIRotatePeriod = types.NumberNull()
		}
		r.Config.ChannelTokenKeyset = types.StringPointerValue(resp.Config.ChannelTokenKeyset)
		r.Config.ChannelTokenKeysetClientCertificate = types.StringPointerValue(resp.Config.ChannelTokenKeysetClientCertificate)
		r.Config.ChannelTokenKeysetClientPassword = types.StringPointerValue(resp.Config.ChannelTokenKeysetClientPassword)
		r.Config.ChannelTokenKeysetClientUsername = types.StringPointerValue(resp.Config.ChannelTokenKeysetClientUsername)
		if resp.Config.ChannelTokenKeysetRotatePeriod != nil {
			r.Config.ChannelTokenKeysetRotatePeriod = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenKeysetRotatePeriod)))
		} else {
			r.Config.ChannelTokenKeysetRotatePeriod = types.NumberNull()
		}
		if resp.Config.ChannelTokenLeeway != nil {
			r.Config.ChannelTokenLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenLeeway)))
		} else {
			r.Config.ChannelTokenLeeway = types.NumberNull()
		}
		r.Config.ChannelTokenOptional = types.BoolPointerValue(resp.Config.ChannelTokenOptional)
		r.Config.ChannelTokenRequestHeader = types.StringPointerValue(resp.Config.ChannelTokenRequestHeader)
		r.Config.ChannelTokenScopesClaim = []types.String{}
		for _, v := range resp.Config.ChannelTokenScopesClaim {
			r.Config.ChannelTokenScopesClaim = append(r.Config.ChannelTokenScopesClaim, types.StringValue(v))
		}
		r.Config.ChannelTokenScopesRequired = []types.String{}
		for _, v := range resp.Config.ChannelTokenScopesRequired {
			r.Config.ChannelTokenScopesRequired = append(r.Config.ChannelTokenScopesRequired, types.StringValue(v))
		}
		if resp.Config.ChannelTokenSigningAlgorithm != nil {
			r.Config.ChannelTokenSigningAlgorithm = types.StringValue(string(*resp.Config.ChannelTokenSigningAlgorithm))
		} else {
			r.Config.ChannelTokenSigningAlgorithm = types.StringNull()
		}
		r.Config.ChannelTokenUpstreamHeader = types.StringPointerValue(resp.Config.ChannelTokenUpstreamHeader)
		if resp.Config.ChannelTokenUpstreamLeeway != nil {
			r.Config.ChannelTokenUpstreamLeeway = types.NumberValue(big.NewFloat(float64(*resp.Config.ChannelTokenUpstreamLeeway)))
		} else {
			r.Config.ChannelTokenUpstreamLeeway = types.NumberNull()
		}
		r.Config.EnableAccessTokenIntrospection = types.BoolPointerValue(resp.Config.EnableAccessTokenIntrospection)
		r.Config.EnableChannelTokenIntrospection = types.BoolPointerValue(resp.Config.EnableChannelTokenIntrospection)
		r.Config.EnableHsSignatures = types.BoolPointerValue(resp.Config.EnableHsSignatures)
		r.Config.EnableInstrumentation = types.BoolPointerValue(resp.Config.EnableInstrumentation)
		r.Config.OriginalAccessTokenUpstreamHeader = types.StringPointerValue(resp.Config.OriginalAccessTokenUpstreamHeader)
		r.Config.OriginalChannelTokenUpstreamHeader = types.StringPointerValue(resp.Config.OriginalChannelTokenUpstreamHeader)
		r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
		r.Config.RemoveAccessTokenClaims = []types.String{}
		for _, v := range resp.Config.RemoveAccessTokenClaims {
			r.Config.RemoveAccessTokenClaims = append(r.Config.RemoveAccessTokenClaims, types.StringValue(v))
		}
		r.Config.RemoveChannelTokenClaims = []types.String{}
		for _, v := range resp.Config.RemoveChannelTokenClaims {
			r.Config.RemoveChannelTokenClaims = append(r.Config.RemoveChannelTokenClaims, types.StringValue(v))
		}
		if len(resp.Config.SetAccessTokenClaims) > 0 {
			r.Config.SetAccessTokenClaims = make(map[string]types.String)
			for key3, value3 := range resp.Config.SetAccessTokenClaims {
				result3, _ := json.Marshal(value3)
				r.Config.SetAccessTokenClaims[key3] = types.StringValue(string(result3))
			}
		}
		if len(resp.Config.SetChannelTokenClaims) > 0 {
			r.Config.SetChannelTokenClaims = make(map[string]types.String)
			for key4, value4 := range resp.Config.SetChannelTokenClaims {
				result4, _ := json.Marshal(value4)
				r.Config.SetChannelTokenClaims[key4] = types.StringValue(string(result4))
			}
		}
		if len(resp.Config.SetClaims) > 0 {
			r.Config.SetClaims = make(map[string]types.String)
			for key5, value5 := range resp.Config.SetClaims {
				result5, _ := json.Marshal(value5)
				r.Config.SetClaims[key5] = types.StringValue(string(result5))
			}
		}
		r.Config.TrustAccessTokenIntrospection = types.BoolPointerValue(resp.Config.TrustAccessTokenIntrospection)
		r.Config.TrustChannelTokenIntrospection = types.BoolPointerValue(resp.Config.TrustChannelTokenIntrospection)
		r.Config.VerifyAccessTokenExpiry = types.BoolPointerValue(resp.Config.VerifyAccessTokenExpiry)
		r.Config.VerifyAccessTokenIntrospectionExpiry = types.BoolPointerValue(resp.Config.VerifyAccessTokenIntrospectionExpiry)
		r.Config.VerifyAccessTokenIntrospectionScopes = types.BoolPointerValue(resp.Config.VerifyAccessTokenIntrospectionScopes)
		r.Config.VerifyAccessTokenScopes = types.BoolPointerValue(resp.Config.VerifyAccessTokenScopes)
		r.Config.VerifyAccessTokenSignature = types.BoolPointerValue(resp.Config.VerifyAccessTokenSignature)
		r.Config.VerifyChannelTokenExpiry = types.BoolPointerValue(resp.Config.VerifyChannelTokenExpiry)
		r.Config.VerifyChannelTokenIntrospectionExpiry = types.BoolPointerValue(resp.Config.VerifyChannelTokenIntrospectionExpiry)
		r.Config.VerifyChannelTokenIntrospectionScopes = types.BoolPointerValue(resp.Config.VerifyChannelTokenIntrospectionScopes)
		r.Config.VerifyChannelTokenScopes = types.BoolPointerValue(resp.Config.VerifyChannelTokenScopes)
		r.Config.VerifyChannelTokenSignature = types.BoolPointerValue(resp.Config.VerifyChannelTokenSignature)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = []types.String{}
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = []types.String{}
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
