// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginJwtSignerResourceModel) RefreshFromSharedJwtSignerPlugin(ctx context.Context, resp *shared.JwtSignerPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.JwtSignerPluginConfig{}
			r.Config.AccessTokenConsumerBy = make([]types.String, 0, len(resp.Config.AccessTokenConsumerBy))
			for _, v := range resp.Config.AccessTokenConsumerBy {
				r.Config.AccessTokenConsumerBy = append(r.Config.AccessTokenConsumerBy, types.StringValue(string(v)))
			}
			if resp.Config.AccessTokenConsumerClaim != nil {
				r.Config.AccessTokenConsumerClaim = make([]types.String, 0, len(resp.Config.AccessTokenConsumerClaim))
				for _, v := range resp.Config.AccessTokenConsumerClaim {
					r.Config.AccessTokenConsumerClaim = append(r.Config.AccessTokenConsumerClaim, types.StringValue(v))
				}
			}
			r.Config.AccessTokenIntrospectionAuthorization = types.StringPointerValue(resp.Config.AccessTokenIntrospectionAuthorization)
			r.Config.AccessTokenIntrospectionBodyArgs = types.StringPointerValue(resp.Config.AccessTokenIntrospectionBodyArgs)
			r.Config.AccessTokenIntrospectionConsumerBy = make([]types.String, 0, len(resp.Config.AccessTokenIntrospectionConsumerBy))
			for _, v := range resp.Config.AccessTokenIntrospectionConsumerBy {
				r.Config.AccessTokenIntrospectionConsumerBy = append(r.Config.AccessTokenIntrospectionConsumerBy, types.StringValue(string(v)))
			}
			if resp.Config.AccessTokenIntrospectionConsumerClaim != nil {
				r.Config.AccessTokenIntrospectionConsumerClaim = make([]types.String, 0, len(resp.Config.AccessTokenIntrospectionConsumerClaim))
				for _, v := range resp.Config.AccessTokenIntrospectionConsumerClaim {
					r.Config.AccessTokenIntrospectionConsumerClaim = append(r.Config.AccessTokenIntrospectionConsumerClaim, types.StringValue(v))
				}
			}
			r.Config.AccessTokenIntrospectionEndpoint = types.StringPointerValue(resp.Config.AccessTokenIntrospectionEndpoint)
			r.Config.AccessTokenIntrospectionHint = types.StringPointerValue(resp.Config.AccessTokenIntrospectionHint)
			if resp.Config.AccessTokenIntrospectionJwtClaim != nil {
				r.Config.AccessTokenIntrospectionJwtClaim = make([]types.String, 0, len(resp.Config.AccessTokenIntrospectionJwtClaim))
				for _, v := range resp.Config.AccessTokenIntrospectionJwtClaim {
					r.Config.AccessTokenIntrospectionJwtClaim = append(r.Config.AccessTokenIntrospectionJwtClaim, types.StringValue(v))
				}
			}
			r.Config.AccessTokenIntrospectionLeeway = types.Float64PointerValue(resp.Config.AccessTokenIntrospectionLeeway)
			r.Config.AccessTokenIntrospectionScopesClaim = make([]types.String, 0, len(resp.Config.AccessTokenIntrospectionScopesClaim))
			for _, v := range resp.Config.AccessTokenIntrospectionScopesClaim {
				r.Config.AccessTokenIntrospectionScopesClaim = append(r.Config.AccessTokenIntrospectionScopesClaim, types.StringValue(v))
			}
			if resp.Config.AccessTokenIntrospectionScopesRequired != nil {
				r.Config.AccessTokenIntrospectionScopesRequired = make([]types.String, 0, len(resp.Config.AccessTokenIntrospectionScopesRequired))
				for _, v := range resp.Config.AccessTokenIntrospectionScopesRequired {
					r.Config.AccessTokenIntrospectionScopesRequired = append(r.Config.AccessTokenIntrospectionScopesRequired, types.StringValue(v))
				}
			}
			r.Config.AccessTokenIntrospectionTimeout = types.Float64PointerValue(resp.Config.AccessTokenIntrospectionTimeout)
			r.Config.AccessTokenIssuer = types.StringPointerValue(resp.Config.AccessTokenIssuer)
			r.Config.AccessTokenJwksURI = types.StringPointerValue(resp.Config.AccessTokenJwksURI)
			if resp.Config.AccessTokenJwksURIClientCertificate == nil {
				r.Config.AccessTokenJwksURIClientCertificate = nil
			} else {
				r.Config.AccessTokenJwksURIClientCertificate = &tfTypes.Set{}
				r.Config.AccessTokenJwksURIClientCertificate.ID = types.StringPointerValue(resp.Config.AccessTokenJwksURIClientCertificate.ID)
			}
			r.Config.AccessTokenJwksURIClientPassword = types.StringPointerValue(resp.Config.AccessTokenJwksURIClientPassword)
			r.Config.AccessTokenJwksURIClientUsername = types.StringPointerValue(resp.Config.AccessTokenJwksURIClientUsername)
			r.Config.AccessTokenJwksURIRotatePeriod = types.Float64PointerValue(resp.Config.AccessTokenJwksURIRotatePeriod)
			r.Config.AccessTokenKeyset = types.StringPointerValue(resp.Config.AccessTokenKeyset)
			if resp.Config.AccessTokenKeysetClientCertificate == nil {
				r.Config.AccessTokenKeysetClientCertificate = nil
			} else {
				r.Config.AccessTokenKeysetClientCertificate = &tfTypes.Set{}
				r.Config.AccessTokenKeysetClientCertificate.ID = types.StringPointerValue(resp.Config.AccessTokenKeysetClientCertificate.ID)
			}
			r.Config.AccessTokenKeysetClientPassword = types.StringPointerValue(resp.Config.AccessTokenKeysetClientPassword)
			r.Config.AccessTokenKeysetClientUsername = types.StringPointerValue(resp.Config.AccessTokenKeysetClientUsername)
			r.Config.AccessTokenKeysetRotatePeriod = types.Float64PointerValue(resp.Config.AccessTokenKeysetRotatePeriod)
			r.Config.AccessTokenLeeway = types.Float64PointerValue(resp.Config.AccessTokenLeeway)
			r.Config.AccessTokenOptional = types.BoolPointerValue(resp.Config.AccessTokenOptional)
			r.Config.AccessTokenRequestHeader = types.StringPointerValue(resp.Config.AccessTokenRequestHeader)
			r.Config.AccessTokenScopesClaim = make([]types.String, 0, len(resp.Config.AccessTokenScopesClaim))
			for _, v := range resp.Config.AccessTokenScopesClaim {
				r.Config.AccessTokenScopesClaim = append(r.Config.AccessTokenScopesClaim, types.StringValue(v))
			}
			if resp.Config.AccessTokenScopesRequired != nil {
				r.Config.AccessTokenScopesRequired = make([]types.String, 0, len(resp.Config.AccessTokenScopesRequired))
				for _, v := range resp.Config.AccessTokenScopesRequired {
					r.Config.AccessTokenScopesRequired = append(r.Config.AccessTokenScopesRequired, types.StringValue(v))
				}
			}
			if resp.Config.AccessTokenSigningAlgorithm != nil {
				r.Config.AccessTokenSigningAlgorithm = types.StringValue(string(*resp.Config.AccessTokenSigningAlgorithm))
			} else {
				r.Config.AccessTokenSigningAlgorithm = types.StringNull()
			}
			r.Config.AccessTokenUpstreamHeader = types.StringPointerValue(resp.Config.AccessTokenUpstreamHeader)
			r.Config.AccessTokenUpstreamLeeway = types.Float64PointerValue(resp.Config.AccessTokenUpstreamLeeway)
			if resp.Config.AddAccessTokenClaims != nil {
				r.Config.AddAccessTokenClaims = make(map[string]jsontypes.Normalized, len(resp.Config.AddAccessTokenClaims))
				for key, value := range resp.Config.AddAccessTokenClaims {
					result, _ := json.Marshal(value)
					r.Config.AddAccessTokenClaims[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			if resp.Config.AddChannelTokenClaims != nil {
				r.Config.AddChannelTokenClaims = make(map[string]jsontypes.Normalized, len(resp.Config.AddChannelTokenClaims))
				for key1, value1 := range resp.Config.AddChannelTokenClaims {
					result1, _ := json.Marshal(value1)
					r.Config.AddChannelTokenClaims[key1] = jsontypes.NewNormalizedValue(string(result1))
				}
			}
			if resp.Config.AddClaims != nil {
				r.Config.AddClaims = make(map[string]jsontypes.Normalized, len(resp.Config.AddClaims))
				for key2, value2 := range resp.Config.AddClaims {
					result2, _ := json.Marshal(value2)
					r.Config.AddClaims[key2] = jsontypes.NewNormalizedValue(string(result2))
				}
			}
			r.Config.CacheAccessTokenIntrospection = types.BoolPointerValue(resp.Config.CacheAccessTokenIntrospection)
			r.Config.CacheChannelTokenIntrospection = types.BoolPointerValue(resp.Config.CacheChannelTokenIntrospection)
			r.Config.ChannelTokenConsumerBy = make([]types.String, 0, len(resp.Config.ChannelTokenConsumerBy))
			for _, v := range resp.Config.ChannelTokenConsumerBy {
				r.Config.ChannelTokenConsumerBy = append(r.Config.ChannelTokenConsumerBy, types.StringValue(string(v)))
			}
			if resp.Config.ChannelTokenConsumerClaim != nil {
				r.Config.ChannelTokenConsumerClaim = make([]types.String, 0, len(resp.Config.ChannelTokenConsumerClaim))
				for _, v := range resp.Config.ChannelTokenConsumerClaim {
					r.Config.ChannelTokenConsumerClaim = append(r.Config.ChannelTokenConsumerClaim, types.StringValue(v))
				}
			}
			r.Config.ChannelTokenIntrospectionAuthorization = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionAuthorization)
			r.Config.ChannelTokenIntrospectionBodyArgs = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionBodyArgs)
			r.Config.ChannelTokenIntrospectionConsumerBy = make([]types.String, 0, len(resp.Config.ChannelTokenIntrospectionConsumerBy))
			for _, v := range resp.Config.ChannelTokenIntrospectionConsumerBy {
				r.Config.ChannelTokenIntrospectionConsumerBy = append(r.Config.ChannelTokenIntrospectionConsumerBy, types.StringValue(string(v)))
			}
			if resp.Config.ChannelTokenIntrospectionConsumerClaim != nil {
				r.Config.ChannelTokenIntrospectionConsumerClaim = make([]types.String, 0, len(resp.Config.ChannelTokenIntrospectionConsumerClaim))
				for _, v := range resp.Config.ChannelTokenIntrospectionConsumerClaim {
					r.Config.ChannelTokenIntrospectionConsumerClaim = append(r.Config.ChannelTokenIntrospectionConsumerClaim, types.StringValue(v))
				}
			}
			r.Config.ChannelTokenIntrospectionEndpoint = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionEndpoint)
			r.Config.ChannelTokenIntrospectionHint = types.StringPointerValue(resp.Config.ChannelTokenIntrospectionHint)
			if resp.Config.ChannelTokenIntrospectionJwtClaim != nil {
				r.Config.ChannelTokenIntrospectionJwtClaim = make([]types.String, 0, len(resp.Config.ChannelTokenIntrospectionJwtClaim))
				for _, v := range resp.Config.ChannelTokenIntrospectionJwtClaim {
					r.Config.ChannelTokenIntrospectionJwtClaim = append(r.Config.ChannelTokenIntrospectionJwtClaim, types.StringValue(v))
				}
			}
			r.Config.ChannelTokenIntrospectionLeeway = types.Float64PointerValue(resp.Config.ChannelTokenIntrospectionLeeway)
			r.Config.ChannelTokenIntrospectionScopesClaim = make([]types.String, 0, len(resp.Config.ChannelTokenIntrospectionScopesClaim))
			for _, v := range resp.Config.ChannelTokenIntrospectionScopesClaim {
				r.Config.ChannelTokenIntrospectionScopesClaim = append(r.Config.ChannelTokenIntrospectionScopesClaim, types.StringValue(v))
			}
			if resp.Config.ChannelTokenIntrospectionScopesRequired != nil {
				r.Config.ChannelTokenIntrospectionScopesRequired = make([]types.String, 0, len(resp.Config.ChannelTokenIntrospectionScopesRequired))
				for _, v := range resp.Config.ChannelTokenIntrospectionScopesRequired {
					r.Config.ChannelTokenIntrospectionScopesRequired = append(r.Config.ChannelTokenIntrospectionScopesRequired, types.StringValue(v))
				}
			}
			r.Config.ChannelTokenIntrospectionTimeout = types.Float64PointerValue(resp.Config.ChannelTokenIntrospectionTimeout)
			r.Config.ChannelTokenIssuer = types.StringPointerValue(resp.Config.ChannelTokenIssuer)
			r.Config.ChannelTokenJwksURI = types.StringPointerValue(resp.Config.ChannelTokenJwksURI)
			if resp.Config.ChannelTokenJwksURIClientCertificate == nil {
				r.Config.ChannelTokenJwksURIClientCertificate = nil
			} else {
				r.Config.ChannelTokenJwksURIClientCertificate = &tfTypes.Set{}
				r.Config.ChannelTokenJwksURIClientCertificate.ID = types.StringPointerValue(resp.Config.ChannelTokenJwksURIClientCertificate.ID)
			}
			r.Config.ChannelTokenJwksURIClientPassword = types.StringPointerValue(resp.Config.ChannelTokenJwksURIClientPassword)
			r.Config.ChannelTokenJwksURIClientUsername = types.StringPointerValue(resp.Config.ChannelTokenJwksURIClientUsername)
			r.Config.ChannelTokenJwksURIRotatePeriod = types.Float64PointerValue(resp.Config.ChannelTokenJwksURIRotatePeriod)
			r.Config.ChannelTokenKeyset = types.StringPointerValue(resp.Config.ChannelTokenKeyset)
			if resp.Config.ChannelTokenKeysetClientCertificate == nil {
				r.Config.ChannelTokenKeysetClientCertificate = nil
			} else {
				r.Config.ChannelTokenKeysetClientCertificate = &tfTypes.Set{}
				r.Config.ChannelTokenKeysetClientCertificate.ID = types.StringPointerValue(resp.Config.ChannelTokenKeysetClientCertificate.ID)
			}
			r.Config.ChannelTokenKeysetClientPassword = types.StringPointerValue(resp.Config.ChannelTokenKeysetClientPassword)
			r.Config.ChannelTokenKeysetClientUsername = types.StringPointerValue(resp.Config.ChannelTokenKeysetClientUsername)
			r.Config.ChannelTokenKeysetRotatePeriod = types.Float64PointerValue(resp.Config.ChannelTokenKeysetRotatePeriod)
			r.Config.ChannelTokenLeeway = types.Float64PointerValue(resp.Config.ChannelTokenLeeway)
			r.Config.ChannelTokenOptional = types.BoolPointerValue(resp.Config.ChannelTokenOptional)
			r.Config.ChannelTokenRequestHeader = types.StringPointerValue(resp.Config.ChannelTokenRequestHeader)
			r.Config.ChannelTokenScopesClaim = make([]types.String, 0, len(resp.Config.ChannelTokenScopesClaim))
			for _, v := range resp.Config.ChannelTokenScopesClaim {
				r.Config.ChannelTokenScopesClaim = append(r.Config.ChannelTokenScopesClaim, types.StringValue(v))
			}
			if resp.Config.ChannelTokenScopesRequired != nil {
				r.Config.ChannelTokenScopesRequired = make([]types.String, 0, len(resp.Config.ChannelTokenScopesRequired))
				for _, v := range resp.Config.ChannelTokenScopesRequired {
					r.Config.ChannelTokenScopesRequired = append(r.Config.ChannelTokenScopesRequired, types.StringValue(v))
				}
			}
			if resp.Config.ChannelTokenSigningAlgorithm != nil {
				r.Config.ChannelTokenSigningAlgorithm = types.StringValue(string(*resp.Config.ChannelTokenSigningAlgorithm))
			} else {
				r.Config.ChannelTokenSigningAlgorithm = types.StringNull()
			}
			r.Config.ChannelTokenUpstreamHeader = types.StringPointerValue(resp.Config.ChannelTokenUpstreamHeader)
			r.Config.ChannelTokenUpstreamLeeway = types.Float64PointerValue(resp.Config.ChannelTokenUpstreamLeeway)
			r.Config.EnableAccessTokenIntrospection = types.BoolPointerValue(resp.Config.EnableAccessTokenIntrospection)
			r.Config.EnableChannelTokenIntrospection = types.BoolPointerValue(resp.Config.EnableChannelTokenIntrospection)
			r.Config.EnableHsSignatures = types.BoolPointerValue(resp.Config.EnableHsSignatures)
			r.Config.EnableInstrumentation = types.BoolPointerValue(resp.Config.EnableInstrumentation)
			r.Config.OriginalAccessTokenUpstreamHeader = types.StringPointerValue(resp.Config.OriginalAccessTokenUpstreamHeader)
			r.Config.OriginalChannelTokenUpstreamHeader = types.StringPointerValue(resp.Config.OriginalChannelTokenUpstreamHeader)
			r.Config.Realm = types.StringPointerValue(resp.Config.Realm)
			r.Config.RemoveAccessTokenClaims = make([]types.String, 0, len(resp.Config.RemoveAccessTokenClaims))
			for _, v := range resp.Config.RemoveAccessTokenClaims {
				r.Config.RemoveAccessTokenClaims = append(r.Config.RemoveAccessTokenClaims, types.StringValue(v))
			}
			r.Config.RemoveChannelTokenClaims = make([]types.String, 0, len(resp.Config.RemoveChannelTokenClaims))
			for _, v := range resp.Config.RemoveChannelTokenClaims {
				r.Config.RemoveChannelTokenClaims = append(r.Config.RemoveChannelTokenClaims, types.StringValue(v))
			}
			if resp.Config.SetAccessTokenClaims != nil {
				r.Config.SetAccessTokenClaims = make(map[string]jsontypes.Normalized, len(resp.Config.SetAccessTokenClaims))
				for key3, value3 := range resp.Config.SetAccessTokenClaims {
					result3, _ := json.Marshal(value3)
					r.Config.SetAccessTokenClaims[key3] = jsontypes.NewNormalizedValue(string(result3))
				}
			}
			if resp.Config.SetChannelTokenClaims != nil {
				r.Config.SetChannelTokenClaims = make(map[string]jsontypes.Normalized, len(resp.Config.SetChannelTokenClaims))
				for key4, value4 := range resp.Config.SetChannelTokenClaims {
					result4, _ := json.Marshal(value4)
					r.Config.SetChannelTokenClaims[key4] = jsontypes.NewNormalizedValue(string(result4))
				}
			}
			if resp.Config.SetClaims != nil {
				r.Config.SetClaims = make(map[string]jsontypes.Normalized, len(resp.Config.SetClaims))
				for key5, value5 := range resp.Config.SetClaims {
					result5, _ := json.Marshal(value5)
					r.Config.SetClaims[key5] = jsontypes.NewNormalizedValue(string(result5))
				}
			}
			r.Config.TrustAccessTokenIntrospection = types.BoolPointerValue(resp.Config.TrustAccessTokenIntrospection)
			r.Config.TrustChannelTokenIntrospection = types.BoolPointerValue(resp.Config.TrustChannelTokenIntrospection)
			r.Config.VerifyAccessTokenExpiry = types.BoolPointerValue(resp.Config.VerifyAccessTokenExpiry)
			r.Config.VerifyAccessTokenIntrospectionExpiry = types.BoolPointerValue(resp.Config.VerifyAccessTokenIntrospectionExpiry)
			r.Config.VerifyAccessTokenIntrospectionScopes = types.BoolPointerValue(resp.Config.VerifyAccessTokenIntrospectionScopes)
			r.Config.VerifyAccessTokenScopes = types.BoolPointerValue(resp.Config.VerifyAccessTokenScopes)
			r.Config.VerifyAccessTokenSignature = types.BoolPointerValue(resp.Config.VerifyAccessTokenSignature)
			r.Config.VerifyChannelTokenExpiry = types.BoolPointerValue(resp.Config.VerifyChannelTokenExpiry)
			r.Config.VerifyChannelTokenIntrospectionExpiry = types.BoolPointerValue(resp.Config.VerifyChannelTokenIntrospectionExpiry)
			r.Config.VerifyChannelTokenIntrospectionScopes = types.BoolPointerValue(resp.Config.VerifyChannelTokenIntrospectionScopes)
			r.Config.VerifyChannelTokenScopes = types.BoolPointerValue(resp.Config.VerifyChannelTokenScopes)
			r.Config.VerifyChannelTokenSignature = types.BoolPointerValue(resp.Config.VerifyChannelTokenSignature)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginJwtSignerResourceModel) ToOperationsCreateJwtsignerPluginRequest(ctx context.Context) (*operations.CreateJwtsignerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	jwtSignerPlugin, jwtSignerPluginDiags := r.ToSharedJwtSignerPlugin(ctx)
	diags.Append(jwtSignerPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateJwtsignerPluginRequest{
		ControlPlaneID:  controlPlaneID,
		JwtSignerPlugin: *jwtSignerPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginJwtSignerResourceModel) ToOperationsDeleteJwtsignerPluginRequest(ctx context.Context) (*operations.DeleteJwtsignerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteJwtsignerPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginJwtSignerResourceModel) ToOperationsGetJwtsignerPluginRequest(ctx context.Context) (*operations.GetJwtsignerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetJwtsignerPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginJwtSignerResourceModel) ToOperationsUpdateJwtsignerPluginRequest(ctx context.Context) (*operations.UpdateJwtsignerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	jwtSignerPlugin, jwtSignerPluginDiags := r.ToSharedJwtSignerPlugin(ctx)
	diags.Append(jwtSignerPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateJwtsignerPluginRequest{
		PluginID:        pluginID,
		ControlPlaneID:  controlPlaneID,
		JwtSignerPlugin: *jwtSignerPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginJwtSignerResourceModel) ToSharedJwtSignerPlugin(ctx context.Context) (*shared.JwtSignerPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.JwtSignerPluginOrdering
	if r.Ordering != nil {
		var after *shared.JwtSignerPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.JwtSignerPluginAfter{
				Access: access,
			}
		}
		var before *shared.JwtSignerPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.JwtSignerPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.JwtSignerPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.JwtSignerPluginPartials
	if r.Partials != nil {
		partials = make([]shared.JwtSignerPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.JwtSignerPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.JwtSignerPluginConfig
	if r.Config != nil {
		accessTokenConsumerBy := make([]shared.AccessTokenConsumerBy, 0, len(r.Config.AccessTokenConsumerBy))
		for _, accessTokenConsumerByItem := range r.Config.AccessTokenConsumerBy {
			accessTokenConsumerBy = append(accessTokenConsumerBy, shared.AccessTokenConsumerBy(accessTokenConsumerByItem.ValueString()))
		}
		var accessTokenConsumerClaim []string
		if r.Config.AccessTokenConsumerClaim != nil {
			accessTokenConsumerClaim = make([]string, 0, len(r.Config.AccessTokenConsumerClaim))
			for _, accessTokenConsumerClaimItem := range r.Config.AccessTokenConsumerClaim {
				accessTokenConsumerClaim = append(accessTokenConsumerClaim, accessTokenConsumerClaimItem.ValueString())
			}
		}
		accessTokenIntrospectionAuthorization := new(string)
		if !r.Config.AccessTokenIntrospectionAuthorization.IsUnknown() && !r.Config.AccessTokenIntrospectionAuthorization.IsNull() {
			*accessTokenIntrospectionAuthorization = r.Config.AccessTokenIntrospectionAuthorization.ValueString()
		} else {
			accessTokenIntrospectionAuthorization = nil
		}
		accessTokenIntrospectionBodyArgs := new(string)
		if !r.Config.AccessTokenIntrospectionBodyArgs.IsUnknown() && !r.Config.AccessTokenIntrospectionBodyArgs.IsNull() {
			*accessTokenIntrospectionBodyArgs = r.Config.AccessTokenIntrospectionBodyArgs.ValueString()
		} else {
			accessTokenIntrospectionBodyArgs = nil
		}
		accessTokenIntrospectionConsumerBy := make([]shared.AccessTokenIntrospectionConsumerBy, 0, len(r.Config.AccessTokenIntrospectionConsumerBy))
		for _, accessTokenIntrospectionConsumerByItem := range r.Config.AccessTokenIntrospectionConsumerBy {
			accessTokenIntrospectionConsumerBy = append(accessTokenIntrospectionConsumerBy, shared.AccessTokenIntrospectionConsumerBy(accessTokenIntrospectionConsumerByItem.ValueString()))
		}
		var accessTokenIntrospectionConsumerClaim []string
		if r.Config.AccessTokenIntrospectionConsumerClaim != nil {
			accessTokenIntrospectionConsumerClaim = make([]string, 0, len(r.Config.AccessTokenIntrospectionConsumerClaim))
			for _, accessTokenIntrospectionConsumerClaimItem := range r.Config.AccessTokenIntrospectionConsumerClaim {
				accessTokenIntrospectionConsumerClaim = append(accessTokenIntrospectionConsumerClaim, accessTokenIntrospectionConsumerClaimItem.ValueString())
			}
		}
		accessTokenIntrospectionEndpoint := new(string)
		if !r.Config.AccessTokenIntrospectionEndpoint.IsUnknown() && !r.Config.AccessTokenIntrospectionEndpoint.IsNull() {
			*accessTokenIntrospectionEndpoint = r.Config.AccessTokenIntrospectionEndpoint.ValueString()
		} else {
			accessTokenIntrospectionEndpoint = nil
		}
		accessTokenIntrospectionHint := new(string)
		if !r.Config.AccessTokenIntrospectionHint.IsUnknown() && !r.Config.AccessTokenIntrospectionHint.IsNull() {
			*accessTokenIntrospectionHint = r.Config.AccessTokenIntrospectionHint.ValueString()
		} else {
			accessTokenIntrospectionHint = nil
		}
		var accessTokenIntrospectionJwtClaim []string
		if r.Config.AccessTokenIntrospectionJwtClaim != nil {
			accessTokenIntrospectionJwtClaim = make([]string, 0, len(r.Config.AccessTokenIntrospectionJwtClaim))
			for _, accessTokenIntrospectionJwtClaimItem := range r.Config.AccessTokenIntrospectionJwtClaim {
				accessTokenIntrospectionJwtClaim = append(accessTokenIntrospectionJwtClaim, accessTokenIntrospectionJwtClaimItem.ValueString())
			}
		}
		accessTokenIntrospectionLeeway := new(float64)
		if !r.Config.AccessTokenIntrospectionLeeway.IsUnknown() && !r.Config.AccessTokenIntrospectionLeeway.IsNull() {
			*accessTokenIntrospectionLeeway = r.Config.AccessTokenIntrospectionLeeway.ValueFloat64()
		} else {
			accessTokenIntrospectionLeeway = nil
		}
		accessTokenIntrospectionScopesClaim := make([]string, 0, len(r.Config.AccessTokenIntrospectionScopesClaim))
		for _, accessTokenIntrospectionScopesClaimItem := range r.Config.AccessTokenIntrospectionScopesClaim {
			accessTokenIntrospectionScopesClaim = append(accessTokenIntrospectionScopesClaim, accessTokenIntrospectionScopesClaimItem.ValueString())
		}
		var accessTokenIntrospectionScopesRequired []string
		if r.Config.AccessTokenIntrospectionScopesRequired != nil {
			accessTokenIntrospectionScopesRequired = make([]string, 0, len(r.Config.AccessTokenIntrospectionScopesRequired))
			for _, accessTokenIntrospectionScopesRequiredItem := range r.Config.AccessTokenIntrospectionScopesRequired {
				accessTokenIntrospectionScopesRequired = append(accessTokenIntrospectionScopesRequired, accessTokenIntrospectionScopesRequiredItem.ValueString())
			}
		}
		accessTokenIntrospectionTimeout := new(float64)
		if !r.Config.AccessTokenIntrospectionTimeout.IsUnknown() && !r.Config.AccessTokenIntrospectionTimeout.IsNull() {
			*accessTokenIntrospectionTimeout = r.Config.AccessTokenIntrospectionTimeout.ValueFloat64()
		} else {
			accessTokenIntrospectionTimeout = nil
		}
		accessTokenIssuer := new(string)
		if !r.Config.AccessTokenIssuer.IsUnknown() && !r.Config.AccessTokenIssuer.IsNull() {
			*accessTokenIssuer = r.Config.AccessTokenIssuer.ValueString()
		} else {
			accessTokenIssuer = nil
		}
		accessTokenJwksURI := new(string)
		if !r.Config.AccessTokenJwksURI.IsUnknown() && !r.Config.AccessTokenJwksURI.IsNull() {
			*accessTokenJwksURI = r.Config.AccessTokenJwksURI.ValueString()
		} else {
			accessTokenJwksURI = nil
		}
		var accessTokenJwksURIClientCertificate *shared.AccessTokenJwksURIClientCertificate
		if r.Config.AccessTokenJwksURIClientCertificate != nil {
			id2 := new(string)
			if !r.Config.AccessTokenJwksURIClientCertificate.ID.IsUnknown() && !r.Config.AccessTokenJwksURIClientCertificate.ID.IsNull() {
				*id2 = r.Config.AccessTokenJwksURIClientCertificate.ID.ValueString()
			} else {
				id2 = nil
			}
			accessTokenJwksURIClientCertificate = &shared.AccessTokenJwksURIClientCertificate{
				ID: id2,
			}
		}
		accessTokenJwksURIClientPassword := new(string)
		if !r.Config.AccessTokenJwksURIClientPassword.IsUnknown() && !r.Config.AccessTokenJwksURIClientPassword.IsNull() {
			*accessTokenJwksURIClientPassword = r.Config.AccessTokenJwksURIClientPassword.ValueString()
		} else {
			accessTokenJwksURIClientPassword = nil
		}
		accessTokenJwksURIClientUsername := new(string)
		if !r.Config.AccessTokenJwksURIClientUsername.IsUnknown() && !r.Config.AccessTokenJwksURIClientUsername.IsNull() {
			*accessTokenJwksURIClientUsername = r.Config.AccessTokenJwksURIClientUsername.ValueString()
		} else {
			accessTokenJwksURIClientUsername = nil
		}
		accessTokenJwksURIRotatePeriod := new(float64)
		if !r.Config.AccessTokenJwksURIRotatePeriod.IsUnknown() && !r.Config.AccessTokenJwksURIRotatePeriod.IsNull() {
			*accessTokenJwksURIRotatePeriod = r.Config.AccessTokenJwksURIRotatePeriod.ValueFloat64()
		} else {
			accessTokenJwksURIRotatePeriod = nil
		}
		accessTokenKeyset := new(string)
		if !r.Config.AccessTokenKeyset.IsUnknown() && !r.Config.AccessTokenKeyset.IsNull() {
			*accessTokenKeyset = r.Config.AccessTokenKeyset.ValueString()
		} else {
			accessTokenKeyset = nil
		}
		var accessTokenKeysetClientCertificate *shared.AccessTokenKeysetClientCertificate
		if r.Config.AccessTokenKeysetClientCertificate != nil {
			id3 := new(string)
			if !r.Config.AccessTokenKeysetClientCertificate.ID.IsUnknown() && !r.Config.AccessTokenKeysetClientCertificate.ID.IsNull() {
				*id3 = r.Config.AccessTokenKeysetClientCertificate.ID.ValueString()
			} else {
				id3 = nil
			}
			accessTokenKeysetClientCertificate = &shared.AccessTokenKeysetClientCertificate{
				ID: id3,
			}
		}
		accessTokenKeysetClientPassword := new(string)
		if !r.Config.AccessTokenKeysetClientPassword.IsUnknown() && !r.Config.AccessTokenKeysetClientPassword.IsNull() {
			*accessTokenKeysetClientPassword = r.Config.AccessTokenKeysetClientPassword.ValueString()
		} else {
			accessTokenKeysetClientPassword = nil
		}
		accessTokenKeysetClientUsername := new(string)
		if !r.Config.AccessTokenKeysetClientUsername.IsUnknown() && !r.Config.AccessTokenKeysetClientUsername.IsNull() {
			*accessTokenKeysetClientUsername = r.Config.AccessTokenKeysetClientUsername.ValueString()
		} else {
			accessTokenKeysetClientUsername = nil
		}
		accessTokenKeysetRotatePeriod := new(float64)
		if !r.Config.AccessTokenKeysetRotatePeriod.IsUnknown() && !r.Config.AccessTokenKeysetRotatePeriod.IsNull() {
			*accessTokenKeysetRotatePeriod = r.Config.AccessTokenKeysetRotatePeriod.ValueFloat64()
		} else {
			accessTokenKeysetRotatePeriod = nil
		}
		accessTokenLeeway := new(float64)
		if !r.Config.AccessTokenLeeway.IsUnknown() && !r.Config.AccessTokenLeeway.IsNull() {
			*accessTokenLeeway = r.Config.AccessTokenLeeway.ValueFloat64()
		} else {
			accessTokenLeeway = nil
		}
		accessTokenOptional := new(bool)
		if !r.Config.AccessTokenOptional.IsUnknown() && !r.Config.AccessTokenOptional.IsNull() {
			*accessTokenOptional = r.Config.AccessTokenOptional.ValueBool()
		} else {
			accessTokenOptional = nil
		}
		accessTokenRequestHeader := new(string)
		if !r.Config.AccessTokenRequestHeader.IsUnknown() && !r.Config.AccessTokenRequestHeader.IsNull() {
			*accessTokenRequestHeader = r.Config.AccessTokenRequestHeader.ValueString()
		} else {
			accessTokenRequestHeader = nil
		}
		accessTokenScopesClaim := make([]string, 0, len(r.Config.AccessTokenScopesClaim))
		for _, accessTokenScopesClaimItem := range r.Config.AccessTokenScopesClaim {
			accessTokenScopesClaim = append(accessTokenScopesClaim, accessTokenScopesClaimItem.ValueString())
		}
		var accessTokenScopesRequired []string
		if r.Config.AccessTokenScopesRequired != nil {
			accessTokenScopesRequired = make([]string, 0, len(r.Config.AccessTokenScopesRequired))
			for _, accessTokenScopesRequiredItem := range r.Config.AccessTokenScopesRequired {
				accessTokenScopesRequired = append(accessTokenScopesRequired, accessTokenScopesRequiredItem.ValueString())
			}
		}
		accessTokenSigningAlgorithm := new(shared.AccessTokenSigningAlgorithm)
		if !r.Config.AccessTokenSigningAlgorithm.IsUnknown() && !r.Config.AccessTokenSigningAlgorithm.IsNull() {
			*accessTokenSigningAlgorithm = shared.AccessTokenSigningAlgorithm(r.Config.AccessTokenSigningAlgorithm.ValueString())
		} else {
			accessTokenSigningAlgorithm = nil
		}
		accessTokenUpstreamHeader := new(string)
		if !r.Config.AccessTokenUpstreamHeader.IsUnknown() && !r.Config.AccessTokenUpstreamHeader.IsNull() {
			*accessTokenUpstreamHeader = r.Config.AccessTokenUpstreamHeader.ValueString()
		} else {
			accessTokenUpstreamHeader = nil
		}
		accessTokenUpstreamLeeway := new(float64)
		if !r.Config.AccessTokenUpstreamLeeway.IsUnknown() && !r.Config.AccessTokenUpstreamLeeway.IsNull() {
			*accessTokenUpstreamLeeway = r.Config.AccessTokenUpstreamLeeway.ValueFloat64()
		} else {
			accessTokenUpstreamLeeway = nil
		}
		addAccessTokenClaims := make(map[string]interface{})
		for addAccessTokenClaimsKey, addAccessTokenClaimsValue := range r.Config.AddAccessTokenClaims {
			var addAccessTokenClaimsInst interface{}
			_ = json.Unmarshal([]byte(addAccessTokenClaimsValue.ValueString()), &addAccessTokenClaimsInst)
			addAccessTokenClaims[addAccessTokenClaimsKey] = addAccessTokenClaimsInst
		}
		addChannelTokenClaims := make(map[string]interface{})
		for addChannelTokenClaimsKey, addChannelTokenClaimsValue := range r.Config.AddChannelTokenClaims {
			var addChannelTokenClaimsInst interface{}
			_ = json.Unmarshal([]byte(addChannelTokenClaimsValue.ValueString()), &addChannelTokenClaimsInst)
			addChannelTokenClaims[addChannelTokenClaimsKey] = addChannelTokenClaimsInst
		}
		addClaims := make(map[string]interface{})
		for addClaimsKey, addClaimsValue := range r.Config.AddClaims {
			var addClaimsInst interface{}
			_ = json.Unmarshal([]byte(addClaimsValue.ValueString()), &addClaimsInst)
			addClaims[addClaimsKey] = addClaimsInst
		}
		cacheAccessTokenIntrospection := new(bool)
		if !r.Config.CacheAccessTokenIntrospection.IsUnknown() && !r.Config.CacheAccessTokenIntrospection.IsNull() {
			*cacheAccessTokenIntrospection = r.Config.CacheAccessTokenIntrospection.ValueBool()
		} else {
			cacheAccessTokenIntrospection = nil
		}
		cacheChannelTokenIntrospection := new(bool)
		if !r.Config.CacheChannelTokenIntrospection.IsUnknown() && !r.Config.CacheChannelTokenIntrospection.IsNull() {
			*cacheChannelTokenIntrospection = r.Config.CacheChannelTokenIntrospection.ValueBool()
		} else {
			cacheChannelTokenIntrospection = nil
		}
		channelTokenConsumerBy := make([]shared.ChannelTokenConsumerBy, 0, len(r.Config.ChannelTokenConsumerBy))
		for _, channelTokenConsumerByItem := range r.Config.ChannelTokenConsumerBy {
			channelTokenConsumerBy = append(channelTokenConsumerBy, shared.ChannelTokenConsumerBy(channelTokenConsumerByItem.ValueString()))
		}
		var channelTokenConsumerClaim []string
		if r.Config.ChannelTokenConsumerClaim != nil {
			channelTokenConsumerClaim = make([]string, 0, len(r.Config.ChannelTokenConsumerClaim))
			for _, channelTokenConsumerClaimItem := range r.Config.ChannelTokenConsumerClaim {
				channelTokenConsumerClaim = append(channelTokenConsumerClaim, channelTokenConsumerClaimItem.ValueString())
			}
		}
		channelTokenIntrospectionAuthorization := new(string)
		if !r.Config.ChannelTokenIntrospectionAuthorization.IsUnknown() && !r.Config.ChannelTokenIntrospectionAuthorization.IsNull() {
			*channelTokenIntrospectionAuthorization = r.Config.ChannelTokenIntrospectionAuthorization.ValueString()
		} else {
			channelTokenIntrospectionAuthorization = nil
		}
		channelTokenIntrospectionBodyArgs := new(string)
		if !r.Config.ChannelTokenIntrospectionBodyArgs.IsUnknown() && !r.Config.ChannelTokenIntrospectionBodyArgs.IsNull() {
			*channelTokenIntrospectionBodyArgs = r.Config.ChannelTokenIntrospectionBodyArgs.ValueString()
		} else {
			channelTokenIntrospectionBodyArgs = nil
		}
		channelTokenIntrospectionConsumerBy := make([]shared.ChannelTokenIntrospectionConsumerBy, 0, len(r.Config.ChannelTokenIntrospectionConsumerBy))
		for _, channelTokenIntrospectionConsumerByItem := range r.Config.ChannelTokenIntrospectionConsumerBy {
			channelTokenIntrospectionConsumerBy = append(channelTokenIntrospectionConsumerBy, shared.ChannelTokenIntrospectionConsumerBy(channelTokenIntrospectionConsumerByItem.ValueString()))
		}
		var channelTokenIntrospectionConsumerClaim []string
		if r.Config.ChannelTokenIntrospectionConsumerClaim != nil {
			channelTokenIntrospectionConsumerClaim = make([]string, 0, len(r.Config.ChannelTokenIntrospectionConsumerClaim))
			for _, channelTokenIntrospectionConsumerClaimItem := range r.Config.ChannelTokenIntrospectionConsumerClaim {
				channelTokenIntrospectionConsumerClaim = append(channelTokenIntrospectionConsumerClaim, channelTokenIntrospectionConsumerClaimItem.ValueString())
			}
		}
		channelTokenIntrospectionEndpoint := new(string)
		if !r.Config.ChannelTokenIntrospectionEndpoint.IsUnknown() && !r.Config.ChannelTokenIntrospectionEndpoint.IsNull() {
			*channelTokenIntrospectionEndpoint = r.Config.ChannelTokenIntrospectionEndpoint.ValueString()
		} else {
			channelTokenIntrospectionEndpoint = nil
		}
		channelTokenIntrospectionHint := new(string)
		if !r.Config.ChannelTokenIntrospectionHint.IsUnknown() && !r.Config.ChannelTokenIntrospectionHint.IsNull() {
			*channelTokenIntrospectionHint = r.Config.ChannelTokenIntrospectionHint.ValueString()
		} else {
			channelTokenIntrospectionHint = nil
		}
		var channelTokenIntrospectionJwtClaim []string
		if r.Config.ChannelTokenIntrospectionJwtClaim != nil {
			channelTokenIntrospectionJwtClaim = make([]string, 0, len(r.Config.ChannelTokenIntrospectionJwtClaim))
			for _, channelTokenIntrospectionJwtClaimItem := range r.Config.ChannelTokenIntrospectionJwtClaim {
				channelTokenIntrospectionJwtClaim = append(channelTokenIntrospectionJwtClaim, channelTokenIntrospectionJwtClaimItem.ValueString())
			}
		}
		channelTokenIntrospectionLeeway := new(float64)
		if !r.Config.ChannelTokenIntrospectionLeeway.IsUnknown() && !r.Config.ChannelTokenIntrospectionLeeway.IsNull() {
			*channelTokenIntrospectionLeeway = r.Config.ChannelTokenIntrospectionLeeway.ValueFloat64()
		} else {
			channelTokenIntrospectionLeeway = nil
		}
		channelTokenIntrospectionScopesClaim := make([]string, 0, len(r.Config.ChannelTokenIntrospectionScopesClaim))
		for _, channelTokenIntrospectionScopesClaimItem := range r.Config.ChannelTokenIntrospectionScopesClaim {
			channelTokenIntrospectionScopesClaim = append(channelTokenIntrospectionScopesClaim, channelTokenIntrospectionScopesClaimItem.ValueString())
		}
		var channelTokenIntrospectionScopesRequired []string
		if r.Config.ChannelTokenIntrospectionScopesRequired != nil {
			channelTokenIntrospectionScopesRequired = make([]string, 0, len(r.Config.ChannelTokenIntrospectionScopesRequired))
			for _, channelTokenIntrospectionScopesRequiredItem := range r.Config.ChannelTokenIntrospectionScopesRequired {
				channelTokenIntrospectionScopesRequired = append(channelTokenIntrospectionScopesRequired, channelTokenIntrospectionScopesRequiredItem.ValueString())
			}
		}
		channelTokenIntrospectionTimeout := new(float64)
		if !r.Config.ChannelTokenIntrospectionTimeout.IsUnknown() && !r.Config.ChannelTokenIntrospectionTimeout.IsNull() {
			*channelTokenIntrospectionTimeout = r.Config.ChannelTokenIntrospectionTimeout.ValueFloat64()
		} else {
			channelTokenIntrospectionTimeout = nil
		}
		channelTokenIssuer := new(string)
		if !r.Config.ChannelTokenIssuer.IsUnknown() && !r.Config.ChannelTokenIssuer.IsNull() {
			*channelTokenIssuer = r.Config.ChannelTokenIssuer.ValueString()
		} else {
			channelTokenIssuer = nil
		}
		channelTokenJwksURI := new(string)
		if !r.Config.ChannelTokenJwksURI.IsUnknown() && !r.Config.ChannelTokenJwksURI.IsNull() {
			*channelTokenJwksURI = r.Config.ChannelTokenJwksURI.ValueString()
		} else {
			channelTokenJwksURI = nil
		}
		var channelTokenJwksURIClientCertificate *shared.ChannelTokenJwksURIClientCertificate
		if r.Config.ChannelTokenJwksURIClientCertificate != nil {
			id4 := new(string)
			if !r.Config.ChannelTokenJwksURIClientCertificate.ID.IsUnknown() && !r.Config.ChannelTokenJwksURIClientCertificate.ID.IsNull() {
				*id4 = r.Config.ChannelTokenJwksURIClientCertificate.ID.ValueString()
			} else {
				id4 = nil
			}
			channelTokenJwksURIClientCertificate = &shared.ChannelTokenJwksURIClientCertificate{
				ID: id4,
			}
		}
		channelTokenJwksURIClientPassword := new(string)
		if !r.Config.ChannelTokenJwksURIClientPassword.IsUnknown() && !r.Config.ChannelTokenJwksURIClientPassword.IsNull() {
			*channelTokenJwksURIClientPassword = r.Config.ChannelTokenJwksURIClientPassword.ValueString()
		} else {
			channelTokenJwksURIClientPassword = nil
		}
		channelTokenJwksURIClientUsername := new(string)
		if !r.Config.ChannelTokenJwksURIClientUsername.IsUnknown() && !r.Config.ChannelTokenJwksURIClientUsername.IsNull() {
			*channelTokenJwksURIClientUsername = r.Config.ChannelTokenJwksURIClientUsername.ValueString()
		} else {
			channelTokenJwksURIClientUsername = nil
		}
		channelTokenJwksURIRotatePeriod := new(float64)
		if !r.Config.ChannelTokenJwksURIRotatePeriod.IsUnknown() && !r.Config.ChannelTokenJwksURIRotatePeriod.IsNull() {
			*channelTokenJwksURIRotatePeriod = r.Config.ChannelTokenJwksURIRotatePeriod.ValueFloat64()
		} else {
			channelTokenJwksURIRotatePeriod = nil
		}
		channelTokenKeyset := new(string)
		if !r.Config.ChannelTokenKeyset.IsUnknown() && !r.Config.ChannelTokenKeyset.IsNull() {
			*channelTokenKeyset = r.Config.ChannelTokenKeyset.ValueString()
		} else {
			channelTokenKeyset = nil
		}
		var channelTokenKeysetClientCertificate *shared.ChannelTokenKeysetClientCertificate
		if r.Config.ChannelTokenKeysetClientCertificate != nil {
			id5 := new(string)
			if !r.Config.ChannelTokenKeysetClientCertificate.ID.IsUnknown() && !r.Config.ChannelTokenKeysetClientCertificate.ID.IsNull() {
				*id5 = r.Config.ChannelTokenKeysetClientCertificate.ID.ValueString()
			} else {
				id5 = nil
			}
			channelTokenKeysetClientCertificate = &shared.ChannelTokenKeysetClientCertificate{
				ID: id5,
			}
		}
		channelTokenKeysetClientPassword := new(string)
		if !r.Config.ChannelTokenKeysetClientPassword.IsUnknown() && !r.Config.ChannelTokenKeysetClientPassword.IsNull() {
			*channelTokenKeysetClientPassword = r.Config.ChannelTokenKeysetClientPassword.ValueString()
		} else {
			channelTokenKeysetClientPassword = nil
		}
		channelTokenKeysetClientUsername := new(string)
		if !r.Config.ChannelTokenKeysetClientUsername.IsUnknown() && !r.Config.ChannelTokenKeysetClientUsername.IsNull() {
			*channelTokenKeysetClientUsername = r.Config.ChannelTokenKeysetClientUsername.ValueString()
		} else {
			channelTokenKeysetClientUsername = nil
		}
		channelTokenKeysetRotatePeriod := new(float64)
		if !r.Config.ChannelTokenKeysetRotatePeriod.IsUnknown() && !r.Config.ChannelTokenKeysetRotatePeriod.IsNull() {
			*channelTokenKeysetRotatePeriod = r.Config.ChannelTokenKeysetRotatePeriod.ValueFloat64()
		} else {
			channelTokenKeysetRotatePeriod = nil
		}
		channelTokenLeeway := new(float64)
		if !r.Config.ChannelTokenLeeway.IsUnknown() && !r.Config.ChannelTokenLeeway.IsNull() {
			*channelTokenLeeway = r.Config.ChannelTokenLeeway.ValueFloat64()
		} else {
			channelTokenLeeway = nil
		}
		channelTokenOptional := new(bool)
		if !r.Config.ChannelTokenOptional.IsUnknown() && !r.Config.ChannelTokenOptional.IsNull() {
			*channelTokenOptional = r.Config.ChannelTokenOptional.ValueBool()
		} else {
			channelTokenOptional = nil
		}
		channelTokenRequestHeader := new(string)
		if !r.Config.ChannelTokenRequestHeader.IsUnknown() && !r.Config.ChannelTokenRequestHeader.IsNull() {
			*channelTokenRequestHeader = r.Config.ChannelTokenRequestHeader.ValueString()
		} else {
			channelTokenRequestHeader = nil
		}
		channelTokenScopesClaim := make([]string, 0, len(r.Config.ChannelTokenScopesClaim))
		for _, channelTokenScopesClaimItem := range r.Config.ChannelTokenScopesClaim {
			channelTokenScopesClaim = append(channelTokenScopesClaim, channelTokenScopesClaimItem.ValueString())
		}
		var channelTokenScopesRequired []string
		if r.Config.ChannelTokenScopesRequired != nil {
			channelTokenScopesRequired = make([]string, 0, len(r.Config.ChannelTokenScopesRequired))
			for _, channelTokenScopesRequiredItem := range r.Config.ChannelTokenScopesRequired {
				channelTokenScopesRequired = append(channelTokenScopesRequired, channelTokenScopesRequiredItem.ValueString())
			}
		}
		channelTokenSigningAlgorithm := new(shared.ChannelTokenSigningAlgorithm)
		if !r.Config.ChannelTokenSigningAlgorithm.IsUnknown() && !r.Config.ChannelTokenSigningAlgorithm.IsNull() {
			*channelTokenSigningAlgorithm = shared.ChannelTokenSigningAlgorithm(r.Config.ChannelTokenSigningAlgorithm.ValueString())
		} else {
			channelTokenSigningAlgorithm = nil
		}
		channelTokenUpstreamHeader := new(string)
		if !r.Config.ChannelTokenUpstreamHeader.IsUnknown() && !r.Config.ChannelTokenUpstreamHeader.IsNull() {
			*channelTokenUpstreamHeader = r.Config.ChannelTokenUpstreamHeader.ValueString()
		} else {
			channelTokenUpstreamHeader = nil
		}
		channelTokenUpstreamLeeway := new(float64)
		if !r.Config.ChannelTokenUpstreamLeeway.IsUnknown() && !r.Config.ChannelTokenUpstreamLeeway.IsNull() {
			*channelTokenUpstreamLeeway = r.Config.ChannelTokenUpstreamLeeway.ValueFloat64()
		} else {
			channelTokenUpstreamLeeway = nil
		}
		enableAccessTokenIntrospection := new(bool)
		if !r.Config.EnableAccessTokenIntrospection.IsUnknown() && !r.Config.EnableAccessTokenIntrospection.IsNull() {
			*enableAccessTokenIntrospection = r.Config.EnableAccessTokenIntrospection.ValueBool()
		} else {
			enableAccessTokenIntrospection = nil
		}
		enableChannelTokenIntrospection := new(bool)
		if !r.Config.EnableChannelTokenIntrospection.IsUnknown() && !r.Config.EnableChannelTokenIntrospection.IsNull() {
			*enableChannelTokenIntrospection = r.Config.EnableChannelTokenIntrospection.ValueBool()
		} else {
			enableChannelTokenIntrospection = nil
		}
		enableHsSignatures := new(bool)
		if !r.Config.EnableHsSignatures.IsUnknown() && !r.Config.EnableHsSignatures.IsNull() {
			*enableHsSignatures = r.Config.EnableHsSignatures.ValueBool()
		} else {
			enableHsSignatures = nil
		}
		enableInstrumentation := new(bool)
		if !r.Config.EnableInstrumentation.IsUnknown() && !r.Config.EnableInstrumentation.IsNull() {
			*enableInstrumentation = r.Config.EnableInstrumentation.ValueBool()
		} else {
			enableInstrumentation = nil
		}
		originalAccessTokenUpstreamHeader := new(string)
		if !r.Config.OriginalAccessTokenUpstreamHeader.IsUnknown() && !r.Config.OriginalAccessTokenUpstreamHeader.IsNull() {
			*originalAccessTokenUpstreamHeader = r.Config.OriginalAccessTokenUpstreamHeader.ValueString()
		} else {
			originalAccessTokenUpstreamHeader = nil
		}
		originalChannelTokenUpstreamHeader := new(string)
		if !r.Config.OriginalChannelTokenUpstreamHeader.IsUnknown() && !r.Config.OriginalChannelTokenUpstreamHeader.IsNull() {
			*originalChannelTokenUpstreamHeader = r.Config.OriginalChannelTokenUpstreamHeader.ValueString()
		} else {
			originalChannelTokenUpstreamHeader = nil
		}
		realm := new(string)
		if !r.Config.Realm.IsUnknown() && !r.Config.Realm.IsNull() {
			*realm = r.Config.Realm.ValueString()
		} else {
			realm = nil
		}
		removeAccessTokenClaims := make([]string, 0, len(r.Config.RemoveAccessTokenClaims))
		for _, removeAccessTokenClaimsItem := range r.Config.RemoveAccessTokenClaims {
			removeAccessTokenClaims = append(removeAccessTokenClaims, removeAccessTokenClaimsItem.ValueString())
		}
		removeChannelTokenClaims := make([]string, 0, len(r.Config.RemoveChannelTokenClaims))
		for _, removeChannelTokenClaimsItem := range r.Config.RemoveChannelTokenClaims {
			removeChannelTokenClaims = append(removeChannelTokenClaims, removeChannelTokenClaimsItem.ValueString())
		}
		setAccessTokenClaims := make(map[string]interface{})
		for setAccessTokenClaimsKey, setAccessTokenClaimsValue := range r.Config.SetAccessTokenClaims {
			var setAccessTokenClaimsInst interface{}
			_ = json.Unmarshal([]byte(setAccessTokenClaimsValue.ValueString()), &setAccessTokenClaimsInst)
			setAccessTokenClaims[setAccessTokenClaimsKey] = setAccessTokenClaimsInst
		}
		setChannelTokenClaims := make(map[string]interface{})
		for setChannelTokenClaimsKey, setChannelTokenClaimsValue := range r.Config.SetChannelTokenClaims {
			var setChannelTokenClaimsInst interface{}
			_ = json.Unmarshal([]byte(setChannelTokenClaimsValue.ValueString()), &setChannelTokenClaimsInst)
			setChannelTokenClaims[setChannelTokenClaimsKey] = setChannelTokenClaimsInst
		}
		setClaims := make(map[string]interface{})
		for setClaimsKey, setClaimsValue := range r.Config.SetClaims {
			var setClaimsInst interface{}
			_ = json.Unmarshal([]byte(setClaimsValue.ValueString()), &setClaimsInst)
			setClaims[setClaimsKey] = setClaimsInst
		}
		trustAccessTokenIntrospection := new(bool)
		if !r.Config.TrustAccessTokenIntrospection.IsUnknown() && !r.Config.TrustAccessTokenIntrospection.IsNull() {
			*trustAccessTokenIntrospection = r.Config.TrustAccessTokenIntrospection.ValueBool()
		} else {
			trustAccessTokenIntrospection = nil
		}
		trustChannelTokenIntrospection := new(bool)
		if !r.Config.TrustChannelTokenIntrospection.IsUnknown() && !r.Config.TrustChannelTokenIntrospection.IsNull() {
			*trustChannelTokenIntrospection = r.Config.TrustChannelTokenIntrospection.ValueBool()
		} else {
			trustChannelTokenIntrospection = nil
		}
		verifyAccessTokenExpiry := new(bool)
		if !r.Config.VerifyAccessTokenExpiry.IsUnknown() && !r.Config.VerifyAccessTokenExpiry.IsNull() {
			*verifyAccessTokenExpiry = r.Config.VerifyAccessTokenExpiry.ValueBool()
		} else {
			verifyAccessTokenExpiry = nil
		}
		verifyAccessTokenIntrospectionExpiry := new(bool)
		if !r.Config.VerifyAccessTokenIntrospectionExpiry.IsUnknown() && !r.Config.VerifyAccessTokenIntrospectionExpiry.IsNull() {
			*verifyAccessTokenIntrospectionExpiry = r.Config.VerifyAccessTokenIntrospectionExpiry.ValueBool()
		} else {
			verifyAccessTokenIntrospectionExpiry = nil
		}
		verifyAccessTokenIntrospectionScopes := new(bool)
		if !r.Config.VerifyAccessTokenIntrospectionScopes.IsUnknown() && !r.Config.VerifyAccessTokenIntrospectionScopes.IsNull() {
			*verifyAccessTokenIntrospectionScopes = r.Config.VerifyAccessTokenIntrospectionScopes.ValueBool()
		} else {
			verifyAccessTokenIntrospectionScopes = nil
		}
		verifyAccessTokenScopes := new(bool)
		if !r.Config.VerifyAccessTokenScopes.IsUnknown() && !r.Config.VerifyAccessTokenScopes.IsNull() {
			*verifyAccessTokenScopes = r.Config.VerifyAccessTokenScopes.ValueBool()
		} else {
			verifyAccessTokenScopes = nil
		}
		verifyAccessTokenSignature := new(bool)
		if !r.Config.VerifyAccessTokenSignature.IsUnknown() && !r.Config.VerifyAccessTokenSignature.IsNull() {
			*verifyAccessTokenSignature = r.Config.VerifyAccessTokenSignature.ValueBool()
		} else {
			verifyAccessTokenSignature = nil
		}
		verifyChannelTokenExpiry := new(bool)
		if !r.Config.VerifyChannelTokenExpiry.IsUnknown() && !r.Config.VerifyChannelTokenExpiry.IsNull() {
			*verifyChannelTokenExpiry = r.Config.VerifyChannelTokenExpiry.ValueBool()
		} else {
			verifyChannelTokenExpiry = nil
		}
		verifyChannelTokenIntrospectionExpiry := new(bool)
		if !r.Config.VerifyChannelTokenIntrospectionExpiry.IsUnknown() && !r.Config.VerifyChannelTokenIntrospectionExpiry.IsNull() {
			*verifyChannelTokenIntrospectionExpiry = r.Config.VerifyChannelTokenIntrospectionExpiry.ValueBool()
		} else {
			verifyChannelTokenIntrospectionExpiry = nil
		}
		verifyChannelTokenIntrospectionScopes := new(bool)
		if !r.Config.VerifyChannelTokenIntrospectionScopes.IsUnknown() && !r.Config.VerifyChannelTokenIntrospectionScopes.IsNull() {
			*verifyChannelTokenIntrospectionScopes = r.Config.VerifyChannelTokenIntrospectionScopes.ValueBool()
		} else {
			verifyChannelTokenIntrospectionScopes = nil
		}
		verifyChannelTokenScopes := new(bool)
		if !r.Config.VerifyChannelTokenScopes.IsUnknown() && !r.Config.VerifyChannelTokenScopes.IsNull() {
			*verifyChannelTokenScopes = r.Config.VerifyChannelTokenScopes.ValueBool()
		} else {
			verifyChannelTokenScopes = nil
		}
		verifyChannelTokenSignature := new(bool)
		if !r.Config.VerifyChannelTokenSignature.IsUnknown() && !r.Config.VerifyChannelTokenSignature.IsNull() {
			*verifyChannelTokenSignature = r.Config.VerifyChannelTokenSignature.ValueBool()
		} else {
			verifyChannelTokenSignature = nil
		}
		config = &shared.JwtSignerPluginConfig{
			AccessTokenConsumerBy:                   accessTokenConsumerBy,
			AccessTokenConsumerClaim:                accessTokenConsumerClaim,
			AccessTokenIntrospectionAuthorization:   accessTokenIntrospectionAuthorization,
			AccessTokenIntrospectionBodyArgs:        accessTokenIntrospectionBodyArgs,
			AccessTokenIntrospectionConsumerBy:      accessTokenIntrospectionConsumerBy,
			AccessTokenIntrospectionConsumerClaim:   accessTokenIntrospectionConsumerClaim,
			AccessTokenIntrospectionEndpoint:        accessTokenIntrospectionEndpoint,
			AccessTokenIntrospectionHint:            accessTokenIntrospectionHint,
			AccessTokenIntrospectionJwtClaim:        accessTokenIntrospectionJwtClaim,
			AccessTokenIntrospectionLeeway:          accessTokenIntrospectionLeeway,
			AccessTokenIntrospectionScopesClaim:     accessTokenIntrospectionScopesClaim,
			AccessTokenIntrospectionScopesRequired:  accessTokenIntrospectionScopesRequired,
			AccessTokenIntrospectionTimeout:         accessTokenIntrospectionTimeout,
			AccessTokenIssuer:                       accessTokenIssuer,
			AccessTokenJwksURI:                      accessTokenJwksURI,
			AccessTokenJwksURIClientCertificate:     accessTokenJwksURIClientCertificate,
			AccessTokenJwksURIClientPassword:        accessTokenJwksURIClientPassword,
			AccessTokenJwksURIClientUsername:        accessTokenJwksURIClientUsername,
			AccessTokenJwksURIRotatePeriod:          accessTokenJwksURIRotatePeriod,
			AccessTokenKeyset:                       accessTokenKeyset,
			AccessTokenKeysetClientCertificate:      accessTokenKeysetClientCertificate,
			AccessTokenKeysetClientPassword:         accessTokenKeysetClientPassword,
			AccessTokenKeysetClientUsername:         accessTokenKeysetClientUsername,
			AccessTokenKeysetRotatePeriod:           accessTokenKeysetRotatePeriod,
			AccessTokenLeeway:                       accessTokenLeeway,
			AccessTokenOptional:                     accessTokenOptional,
			AccessTokenRequestHeader:                accessTokenRequestHeader,
			AccessTokenScopesClaim:                  accessTokenScopesClaim,
			AccessTokenScopesRequired:               accessTokenScopesRequired,
			AccessTokenSigningAlgorithm:             accessTokenSigningAlgorithm,
			AccessTokenUpstreamHeader:               accessTokenUpstreamHeader,
			AccessTokenUpstreamLeeway:               accessTokenUpstreamLeeway,
			AddAccessTokenClaims:                    addAccessTokenClaims,
			AddChannelTokenClaims:                   addChannelTokenClaims,
			AddClaims:                               addClaims,
			CacheAccessTokenIntrospection:           cacheAccessTokenIntrospection,
			CacheChannelTokenIntrospection:          cacheChannelTokenIntrospection,
			ChannelTokenConsumerBy:                  channelTokenConsumerBy,
			ChannelTokenConsumerClaim:               channelTokenConsumerClaim,
			ChannelTokenIntrospectionAuthorization:  channelTokenIntrospectionAuthorization,
			ChannelTokenIntrospectionBodyArgs:       channelTokenIntrospectionBodyArgs,
			ChannelTokenIntrospectionConsumerBy:     channelTokenIntrospectionConsumerBy,
			ChannelTokenIntrospectionConsumerClaim:  channelTokenIntrospectionConsumerClaim,
			ChannelTokenIntrospectionEndpoint:       channelTokenIntrospectionEndpoint,
			ChannelTokenIntrospectionHint:           channelTokenIntrospectionHint,
			ChannelTokenIntrospectionJwtClaim:       channelTokenIntrospectionJwtClaim,
			ChannelTokenIntrospectionLeeway:         channelTokenIntrospectionLeeway,
			ChannelTokenIntrospectionScopesClaim:    channelTokenIntrospectionScopesClaim,
			ChannelTokenIntrospectionScopesRequired: channelTokenIntrospectionScopesRequired,
			ChannelTokenIntrospectionTimeout:        channelTokenIntrospectionTimeout,
			ChannelTokenIssuer:                      channelTokenIssuer,
			ChannelTokenJwksURI:                     channelTokenJwksURI,
			ChannelTokenJwksURIClientCertificate:    channelTokenJwksURIClientCertificate,
			ChannelTokenJwksURIClientPassword:       channelTokenJwksURIClientPassword,
			ChannelTokenJwksURIClientUsername:       channelTokenJwksURIClientUsername,
			ChannelTokenJwksURIRotatePeriod:         channelTokenJwksURIRotatePeriod,
			ChannelTokenKeyset:                      channelTokenKeyset,
			ChannelTokenKeysetClientCertificate:     channelTokenKeysetClientCertificate,
			ChannelTokenKeysetClientPassword:        channelTokenKeysetClientPassword,
			ChannelTokenKeysetClientUsername:        channelTokenKeysetClientUsername,
			ChannelTokenKeysetRotatePeriod:          channelTokenKeysetRotatePeriod,
			ChannelTokenLeeway:                      channelTokenLeeway,
			ChannelTokenOptional:                    channelTokenOptional,
			ChannelTokenRequestHeader:               channelTokenRequestHeader,
			ChannelTokenScopesClaim:                 channelTokenScopesClaim,
			ChannelTokenScopesRequired:              channelTokenScopesRequired,
			ChannelTokenSigningAlgorithm:            channelTokenSigningAlgorithm,
			ChannelTokenUpstreamHeader:              channelTokenUpstreamHeader,
			ChannelTokenUpstreamLeeway:              channelTokenUpstreamLeeway,
			EnableAccessTokenIntrospection:          enableAccessTokenIntrospection,
			EnableChannelTokenIntrospection:         enableChannelTokenIntrospection,
			EnableHsSignatures:                      enableHsSignatures,
			EnableInstrumentation:                   enableInstrumentation,
			OriginalAccessTokenUpstreamHeader:       originalAccessTokenUpstreamHeader,
			OriginalChannelTokenUpstreamHeader:      originalChannelTokenUpstreamHeader,
			Realm:                                   realm,
			RemoveAccessTokenClaims:                 removeAccessTokenClaims,
			RemoveChannelTokenClaims:                removeChannelTokenClaims,
			SetAccessTokenClaims:                    setAccessTokenClaims,
			SetChannelTokenClaims:                   setChannelTokenClaims,
			SetClaims:                               setClaims,
			TrustAccessTokenIntrospection:           trustAccessTokenIntrospection,
			TrustChannelTokenIntrospection:          trustChannelTokenIntrospection,
			VerifyAccessTokenExpiry:                 verifyAccessTokenExpiry,
			VerifyAccessTokenIntrospectionExpiry:    verifyAccessTokenIntrospectionExpiry,
			VerifyAccessTokenIntrospectionScopes:    verifyAccessTokenIntrospectionScopes,
			VerifyAccessTokenScopes:                 verifyAccessTokenScopes,
			VerifyAccessTokenSignature:              verifyAccessTokenSignature,
			VerifyChannelTokenExpiry:                verifyChannelTokenExpiry,
			VerifyChannelTokenIntrospectionExpiry:   verifyChannelTokenIntrospectionExpiry,
			VerifyChannelTokenIntrospectionScopes:   verifyChannelTokenIntrospectionScopes,
			VerifyChannelTokenScopes:                verifyChannelTokenScopes,
			VerifyChannelTokenSignature:             verifyChannelTokenSignature,
		}
	}
	protocols := make([]shared.JwtSignerPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.JwtSignerPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.JwtSignerPluginRoute
	if r.Route != nil {
		id6 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id6 = r.Route.ID.ValueString()
		} else {
			id6 = nil
		}
		route = &shared.JwtSignerPluginRoute{
			ID: id6,
		}
	}
	var service *shared.JwtSignerPluginService
	if r.Service != nil {
		id7 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id7 = r.Service.ID.ValueString()
		} else {
			id7 = nil
		}
		service = &shared.JwtSignerPluginService{
			ID: id7,
		}
	}
	out := shared.JwtSignerPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
