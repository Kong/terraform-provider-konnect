// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *HostnameGeneratorDataSourceModel) RefreshFromSharedHostnameGeneratorItem(resp *shared.HostnameGeneratorItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.Selector == nil {
			r.Spec.Selector = nil
		} else {
			r.Spec.Selector = &tfTypes.Selector{}
			if resp.Spec.Selector.MeshExternalService == nil {
				r.Spec.Selector.MeshExternalService = nil
			} else {
				r.Spec.Selector.MeshExternalService = &tfTypes.MeshExternalService{}
				if len(resp.Spec.Selector.MeshExternalService.MatchLabels) > 0 {
					r.Spec.Selector.MeshExternalService.MatchLabels = make(map[string]types.String)
					for key1, value1 := range resp.Spec.Selector.MeshExternalService.MatchLabels {
						r.Spec.Selector.MeshExternalService.MatchLabels[key1] = types.StringValue(value1)
					}
				}
			}
			if resp.Spec.Selector.MeshMultiZoneService == nil {
				r.Spec.Selector.MeshMultiZoneService = nil
			} else {
				r.Spec.Selector.MeshMultiZoneService = &tfTypes.MeshExternalService{}
				if len(resp.Spec.Selector.MeshMultiZoneService.MatchLabels) > 0 {
					r.Spec.Selector.MeshMultiZoneService.MatchLabels = make(map[string]types.String)
					for key2, value2 := range resp.Spec.Selector.MeshMultiZoneService.MatchLabels {
						r.Spec.Selector.MeshMultiZoneService.MatchLabels[key2] = types.StringValue(value2)
					}
				}
			}
			if resp.Spec.Selector.MeshService == nil {
				r.Spec.Selector.MeshService = nil
			} else {
				r.Spec.Selector.MeshService = &tfTypes.MeshExternalService{}
				if len(resp.Spec.Selector.MeshService.MatchLabels) > 0 {
					r.Spec.Selector.MeshService.MatchLabels = make(map[string]types.String)
					for key3, value3 := range resp.Spec.Selector.MeshService.MatchLabels {
						r.Spec.Selector.MeshService.MatchLabels[key3] = types.StringValue(value3)
					}
				}
			}
		}
		r.Spec.Template = types.StringPointerValue(resp.Spec.Template)
		r.Type = types.StringValue(string(resp.Type))
	}
}
