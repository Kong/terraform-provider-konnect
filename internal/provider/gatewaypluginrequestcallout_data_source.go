// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &GatewayPluginRequestCalloutDataSource{}
var _ datasource.DataSourceWithConfigure = &GatewayPluginRequestCalloutDataSource{}

func NewGatewayPluginRequestCalloutDataSource() datasource.DataSource {
	return &GatewayPluginRequestCalloutDataSource{}
}

// GatewayPluginRequestCalloutDataSource is the data source implementation.
type GatewayPluginRequestCalloutDataSource struct {
	client *sdk.Konnect
}

// GatewayPluginRequestCalloutDataSourceModel describes the data model.
type GatewayPluginRequestCalloutDataSourceModel struct {
	Config         *tfTypes.RequestCalloutPluginConfig `tfsdk:"config"`
	Consumer       *tfTypes.Set                        `tfsdk:"consumer"`
	ConsumerGroup  *tfTypes.Set                        `tfsdk:"consumer_group"`
	ControlPlaneID types.String                        `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64                         `tfsdk:"created_at"`
	Enabled        types.Bool                          `tfsdk:"enabled"`
	ID             types.String                        `tfsdk:"id"`
	InstanceName   types.String                        `tfsdk:"instance_name"`
	Ordering       *tfTypes.ACLPluginOrdering          `tfsdk:"ordering"`
	Partials       []tfTypes.Partials                  `tfsdk:"partials"`
	Protocols      []types.String                      `tfsdk:"protocols"`
	Route          *tfTypes.Set                        `tfsdk:"route"`
	Service        *tfTypes.Set                        `tfsdk:"service"`
	Tags           []types.String                      `tfsdk:"tags"`
	UpdatedAt      types.Int64                         `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *GatewayPluginRequestCalloutDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_plugin_request_callout"
}

// Schema defines the schema for the data source.
func (r *GatewayPluginRequestCalloutDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayPluginRequestCallout DataSource",

		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"cache": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"cache_ttl": schema.Int64Attribute{
								Computed:    true,
								Description: `TTL in seconds of cache entities.`,
							},
							"memory": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"dictionary_name": schema.StringAttribute{
										Computed:    true,
										Description: `The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.`,
									},
								},
							},
							"redis": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"cluster_max_redirections": schema.Int64Attribute{
										Computed:    true,
										Description: `Maximum retry attempts for redirection.`,
									},
									"cluster_nodes": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"ip": schema.StringAttribute{
													Computed:    true,
													Description: `A string representing a host name, such as example.com.`,
												},
												"port": schema.Int64Attribute{
													Computed:    true,
													Description: `An integer representing a port number between 0 and 65535, inclusive.`,
												},
											},
										},
										Description: `Cluster addresses to use for Redis connections when the ` + "`" + `redis` + "`" + ` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.`,
									},
									"connect_timeout": schema.Int64Attribute{
										Computed:    true,
										Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.`,
									},
									"connection_is_proxied": schema.BoolAttribute{
										Computed:    true,
										Description: `If the connection to Redis is proxied (e.g. Envoy), set it ` + "`" + `true` + "`" + `. Set the ` + "`" + `host` + "`" + ` and ` + "`" + `port` + "`" + ` to point to the proxy address.`,
									},
									"database": schema.Int64Attribute{
										Computed:    true,
										Description: `Database to use for the Redis connection when using the ` + "`" + `redis` + "`" + ` strategy`,
									},
									"host": schema.StringAttribute{
										Computed:    true,
										Description: `A string representing a host name, such as example.com.`,
									},
									"keepalive_backlog": schema.Int64Attribute{
										Computed:    true,
										Description: `Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return ` + "`" + `nil` + "`" + `. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than ` + "`" + `keepalive_pool_size` + "`" + `. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than ` + "`" + `keepalive_pool_size` + "`" + `.`,
									},
									"keepalive_pool_size": schema.Int64Attribute{
										Computed:    true,
										Description: `The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither ` + "`" + `keepalive_pool_size` + "`" + ` nor ` + "`" + `keepalive_backlog` + "`" + ` is specified, no pool is created. If ` + "`" + `keepalive_pool_size` + "`" + ` isn't specified but ` + "`" + `keepalive_backlog` + "`" + ` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.`,
									},
									"password": schema.StringAttribute{
										Computed:    true,
										Description: `Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.`,
									},
									"port": schema.Int64Attribute{
										Computed:    true,
										Description: `An integer representing a port number between 0 and 65535, inclusive.`,
									},
									"read_timeout": schema.Int64Attribute{
										Computed:    true,
										Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.`,
									},
									"send_timeout": schema.Int64Attribute{
										Computed:    true,
										Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.`,
									},
									"sentinel_master": schema.StringAttribute{
										Computed:    true,
										Description: `Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.`,
									},
									"sentinel_nodes": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"host": schema.StringAttribute{
													Computed:    true,
													Description: `A string representing a host name, such as example.com.`,
												},
												"port": schema.Int64Attribute{
													Computed:    true,
													Description: `An integer representing a port number between 0 and 65535, inclusive.`,
												},
											},
										},
										Description: `Sentinel node addresses to use for Redis connections when the ` + "`" + `redis` + "`" + ` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.`,
									},
									"sentinel_password": schema.StringAttribute{
										Computed:    true,
										Description: `Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.`,
									},
									"sentinel_role": schema.StringAttribute{
										Computed:    true,
										Description: `Sentinel role to use for Redis connections when the ` + "`" + `redis` + "`" + ` strategy is defined. Defining this value implies using Redis Sentinel.`,
									},
									"sentinel_username": schema.StringAttribute{
										Computed:    true,
										Description: `Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.`,
									},
									"server_name": schema.StringAttribute{
										Computed:    true,
										Description: `A string representing an SNI (server name indication) value for TLS.`,
									},
									"ssl": schema.BoolAttribute{
										Computed:    true,
										Description: `If set to true, uses SSL to connect to Redis.`,
									},
									"ssl_verify": schema.BoolAttribute{
										Computed:    true,
										Description: `If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure ` + "`" + `lua_ssl_trusted_certificate` + "`" + ` in ` + "`" + `kong.conf` + "`" + ` to specify the CA (or server) certificate used by your Redis server. You may also need to configure ` + "`" + `lua_ssl_verify_depth` + "`" + ` accordingly.`,
									},
									"username": schema.StringAttribute{
										Computed:    true,
										Description: `Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to ` + "`" + `default` + "`" + `.`,
									},
								},
							},
							"strategy": schema.StringAttribute{
								Computed:    true,
								Description: `The backing data store in which to hold cache entities. Accepted values are: ` + "`" + `off` + "`" + `, ` + "`" + `memory` + "`" + `, and ` + "`" + `redis` + "`" + `.`,
							},
						},
						Description: `Plugin global caching configuration.`,
					},
					"callouts": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"cache": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"bypass": schema.BoolAttribute{
											Computed:    true,
											Description: `If true, skips caching the callout response.`,
										},
									},
									Description: `Callout caching configuration.`,
								},
								"depends_on": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An array of callout names the current callout depends on.This dependency determines the callout execution order.`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `A string identifier for a callout. A callout object is referenceablevia its name in the kong.ctx.shared.callouts.<name>`,
								},
								"request": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"body": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"custom": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `The custom body fields to be added in the callout HTTP request.Values can contain Lua expressions in the form $(some_lua_code).`,
												},
												"decode": schema.BoolAttribute{
													Computed:    true,
													Description: `If true, decodes the request's body to make it available for customizations.`,
												},
												"forward": schema.BoolAttribute{
													Computed:    true,
													Description: `If true, forwards the incoming request's body to the callout request.`,
												},
											},
											Description: `Callout request body customizations.`,
										},
										"by_lua": schema.StringAttribute{
											Computed:    true,
											Description: `Lua code that executes before the callout request is made.Standard Lua sandboxing restrictions apply.`,
										},
										"error": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"error_response_code": schema.Int64Attribute{
													Computed:    true,
													Description: `The error code to respond with if ` + "`" + `on_error` + "`" + ` is ` + "`" + `fail` + "`" + ` or if ` + "`" + `retries` + "`" + ` is achieved.`,
												},
												"error_response_msg": schema.StringAttribute{
													Computed:    true,
													Description: `The error mesasge to respond with if ` + "`" + `on_error` + "`" + ` is ` + "`" + `fail` + "`" + ` or if ` + "`" + `retries` + "`" + ` is achieved.Templating with Lua expressions is supported.`,
												},
												"http_statuses": schema.ListAttribute{
													Computed:    true,
													ElementType: types.Int64Type,
													Description: `The list of HTTP status codes considered errors under the error handling policy.`,
												},
												"on_error": schema.StringAttribute{
													Computed: true,
												},
												"retries": schema.Int64Attribute{
													Computed:    true,
													Description: `The number of retries the plugin will attempt on TCP and HTTP errors if ` + "`" + `on_error` + "`" + ` is set to ` + "`" + `retry` + "`" + `.`,
												},
											},
											Description: `The error handling policy the plugin will apply to TCP and HTTP errors.`,
										},
										"headers": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"custom": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `The custom headers to be added in the callout HTTP request.Values can contain Lua expressions in the form $(some_lua_code).`,
												},
												"forward": schema.BoolAttribute{
													Computed:    true,
													Description: `If true, forwards the incoming request's headers to the callout request.`,
												},
											},
											Description: `Callout request header customizations.`,
										},
										"http_opts": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"proxy": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"auth_password": schema.StringAttribute{
															Computed:    true,
															Description: `The password to authenticate with, if the forward proxy is protected by basic authentication.`,
														},
														"auth_username": schema.StringAttribute{
															Computed:    true,
															Description: `The username to authenticate with, if the forward proxy is protected by basic authentication.`,
														},
														"http_proxy": schema.StringAttribute{
															Computed:    true,
															Description: `The HTTP proxy URL. This proxy server will be used for HTTP requests.`,
														},
														"https_proxy": schema.StringAttribute{
															Computed:    true,
															Description: `The HTTPS proxy URL. This proxy server will be used for HTTPS requests.`,
														},
													},
													Description: `Proxy settings.`,
												},
												"ssl_server_name": schema.StringAttribute{
													Computed:    true,
													Description: `The SNI used in the callout request. Defaults to host if omitted.`,
												},
												"ssl_verify": schema.BoolAttribute{
													Computed:    true,
													Description: `If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure ` + "`" + `lua_ssl_trusted_certificate` + "`" + ` in ` + "`" + `kong.conf` + "`" + ` to specify the CA (or server) certificate used by your Redis server. You may also need to configure ` + "`" + `lua_ssl_verify_depth` + "`" + ` accordingly.`,
												},
												"timeouts": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"connect": schema.Int64Attribute{
															Computed:    true,
															Description: `The socket connect timeout.`,
														},
														"read": schema.Int64Attribute{
															Computed:    true,
															Description: `The socket read timeout.`,
														},
														"write": schema.Int64Attribute{
															Computed:    true,
															Description: `The socket write timeout.`,
														},
													},
													Description: `Socket timeouts in milliseconds. All or none must be set.`,
												},
											},
											Description: `HTTP connection parameters.`,
										},
										"method": schema.StringAttribute{
											Computed:    true,
											Description: `The HTTP method that will be requested.`,
										},
										"query": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"custom": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `The custom query params to be added in the callout HTTP request.Values can contain Lua expressions in the form $(some_lua_code).`,
												},
												"forward": schema.BoolAttribute{
													Computed:    true,
													Description: `If true, forwards the incoming request's query params to the callout request.`,
												},
											},
											Description: `Callout request query param customizations.`,
										},
										"url": schema.StringAttribute{
											Computed:    true,
											Description: `The URL that will be requested.`,
										},
									},
									Description: `The customizations for the callout request.`,
								},
								"response": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"body": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"decode": schema.BoolAttribute{
													Computed:    true,
													Description: `If true, decodes the response body before storing into the context. Only JSON is supported.`,
												},
												"store": schema.BoolAttribute{
													Computed:    true,
													Description: `If false, skips storing the callout response body into kong.ctx.shared.callouts.<name>.response.body.`,
												},
											},
										},
										"by_lua": schema.StringAttribute{
											Computed:    true,
											Description: `Lua code that executes after the callout request is made, before caching takes place. Standard Lua sandboxing restrictions apply.`,
										},
										"headers": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"store": schema.BoolAttribute{
													Computed:    true,
													Description: `If false, skips storing the callout response headers intokong.ctx.shared.callouts.<name>.response.headers.`,
												},
											},
											Description: `Callout response header customizations.`,
										},
									},
									Description: `Configurations of callout response handling.`,
								},
							},
						},
						Description: `A collection of callout objects, where each object represents an HTTPrequest made in the context of a proxy request.`,
					},
					"upstream": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"body": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"custom": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The custom body fields to be added in the upstream request body. Values can contain Lua expressions in the form $(some_lua_code).`,
									},
									"decode": schema.BoolAttribute{
										Computed:    true,
										Description: `If true, decodes the request's body to make it available for upstream by_lua customizations.`,
									},
									"forward": schema.BoolAttribute{
										Computed:    true,
										Description: `If false, skips forwarding the incoming request's body to the upstream request.`,
									},
								},
								Description: `Callout request body customizations.`,
							},
							"by_lua": schema.StringAttribute{
								Computed:    true,
								Description: `Lua code that executes before the upstream request is made. Standard Lua sandboxing restrictions apply.`,
							},
							"headers": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"custom": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The custom headers to be added in the upstream HTTP request. Values can contain Lua expressions in the form $(some_lua_code).`,
									},
									"forward": schema.BoolAttribute{
										Computed:    true,
										Description: `If false, does not forward request headers to upstream request.`,
									},
								},
								Description: `Callout request header customizations.`,
							},
							"query": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"custom": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `The custom query params to be added in the upstream HTTP request. Values can contain Lua expressions in the form $(some_lua_code).`,
									},
									"forward": schema.BoolAttribute{
										Computed:    true,
										Description: `If false, does not forward request query params to upstream request.`,
									},
								},
								Description: `Upstream request query param customizations.`,
							},
						},
						Description: `Customizations to the upstream request.`,
					},
				},
			},
			"consumer": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.`,
			},
			"consumer_group": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups`,
			},
			"control_plane_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your control plane. This variable is available in the Konnect manager.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the plugin is applied.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"instance_name": schema.StringAttribute{
				Computed: true,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"path": schema.StringAttribute{
							Computed: true,
						},
					},
				},
			},
			"protocols": schema.SetAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols.`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
		},
	}
}

func (r *GatewayPluginRequestCalloutDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayPluginRequestCalloutDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *GatewayPluginRequestCalloutDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRequestcalloutPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetRequestcalloutPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestCalloutPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRequestCalloutPlugin(ctx, res.RequestCalloutPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
