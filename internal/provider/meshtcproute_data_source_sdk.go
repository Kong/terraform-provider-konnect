// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshTCPRouteDataSourceModel) RefreshFromSharedMeshTCPRouteItem(resp *shared.MeshTCPRouteItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			r.Spec.TargetRef.Kind = types.StringValue(string(resp.Spec.TargetRef.Kind))
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key1, value1 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key1] = types.StringValue(value1)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(resp.Spec.TargetRef.ProxyTypes))
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key2, value2 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key2] = types.StringValue(value2)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshTCPRouteItemTo{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to1 tfTypes.MeshTCPRouteItemTo
			to1.Rules = []tfTypes.MeshTCPRouteItemRules{}
			for rulesCount, rulesItem := range toItem.Rules {
				var rules1 tfTypes.MeshTCPRouteItemRules
				rules1.Default.BackendRefs = []tfTypes.BackendRefs{}
				for backendRefsCount, backendRefsItem := range rulesItem.Default.BackendRefs {
					var backendRefs1 tfTypes.BackendRefs
					backendRefs1.Kind = types.StringValue(string(backendRefsItem.Kind))
					if len(backendRefsItem.Labels) > 0 {
						backendRefs1.Labels = make(map[string]types.String)
						for key3, value3 := range backendRefsItem.Labels {
							backendRefs1.Labels[key3] = types.StringValue(value3)
						}
					}
					backendRefs1.Mesh = types.StringPointerValue(backendRefsItem.Mesh)
					backendRefs1.Name = types.StringPointerValue(backendRefsItem.Name)
					backendRefs1.Namespace = types.StringPointerValue(backendRefsItem.Namespace)
					if backendRefsItem.Port != nil {
						backendRefs1.Port = types.Int64Value(int64(*backendRefsItem.Port))
					} else {
						backendRefs1.Port = types.Int64Null()
					}
					backendRefs1.ProxyTypes = make([]types.String, 0, len(backendRefsItem.ProxyTypes))
					for _, v := range backendRefsItem.ProxyTypes {
						backendRefs1.ProxyTypes = append(backendRefs1.ProxyTypes, types.StringValue(string(v)))
					}
					backendRefs1.SectionName = types.StringPointerValue(backendRefsItem.SectionName)
					if len(backendRefsItem.Tags) > 0 {
						backendRefs1.Tags = make(map[string]types.String)
						for key4, value4 := range backendRefsItem.Tags {
							backendRefs1.Tags[key4] = types.StringValue(value4)
						}
					}
					backendRefs1.Weight = types.Int64PointerValue(backendRefsItem.Weight)
					if backendRefsCount+1 > len(rules1.Default.BackendRefs) {
						rules1.Default.BackendRefs = append(rules1.Default.BackendRefs, backendRefs1)
					} else {
						rules1.Default.BackendRefs[backendRefsCount].Kind = backendRefs1.Kind
						rules1.Default.BackendRefs[backendRefsCount].Labels = backendRefs1.Labels
						rules1.Default.BackendRefs[backendRefsCount].Mesh = backendRefs1.Mesh
						rules1.Default.BackendRefs[backendRefsCount].Name = backendRefs1.Name
						rules1.Default.BackendRefs[backendRefsCount].Namespace = backendRefs1.Namespace
						rules1.Default.BackendRefs[backendRefsCount].Port = backendRefs1.Port
						rules1.Default.BackendRefs[backendRefsCount].ProxyTypes = backendRefs1.ProxyTypes
						rules1.Default.BackendRefs[backendRefsCount].SectionName = backendRefs1.SectionName
						rules1.Default.BackendRefs[backendRefsCount].Tags = backendRefs1.Tags
						rules1.Default.BackendRefs[backendRefsCount].Weight = backendRefs1.Weight
					}
				}
				if rulesCount+1 > len(to1.Rules) {
					to1.Rules = append(to1.Rules, rules1)
				} else {
					to1.Rules[rulesCount].Default = rules1.Default
				}
			}
			to1.TargetRef.Kind = types.StringValue(string(toItem.TargetRef.Kind))
			if len(toItem.TargetRef.Labels) > 0 {
				to1.TargetRef.Labels = make(map[string]types.String)
				for key5, value5 := range toItem.TargetRef.Labels {
					to1.TargetRef.Labels[key5] = types.StringValue(value5)
				}
			}
			to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to1.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
			for _, v := range toItem.TargetRef.ProxyTypes {
				to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to1.TargetRef.Tags = make(map[string]types.String)
				for key6, value6 := range toItem.TargetRef.Tags {
					to1.TargetRef.Tags[key6] = types.StringValue(value6)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to1)
			} else {
				r.Spec.To[toCount].Rules = to1.Rules
				r.Spec.To[toCount].TargetRef = to1.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
