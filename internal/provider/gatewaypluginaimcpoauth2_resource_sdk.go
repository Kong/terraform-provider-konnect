// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginAiMcpOauth2ResourceModel) RefreshFromSharedAiMcpOauth2Plugin(ctx context.Context, resp *shared.AiMcpOauth2Plugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.AiMcpOauth2PluginConfig{}
			if len(resp.Config.Args) > 0 {
				r.Config.Args = make(map[string]jsontypes.Normalized, len(resp.Config.Args))
				for key, value := range resp.Config.Args {
					result, _ := json.Marshal(value)
					r.Config.Args[key] = jsontypes.NewNormalizedValue(string(result))
				}
			}
			r.Config.AuthorizationServers = make([]types.String, 0, len(resp.Config.AuthorizationServers))
			for _, v := range resp.Config.AuthorizationServers {
				r.Config.AuthorizationServers = append(r.Config.AuthorizationServers, types.StringValue(v))
			}
			r.Config.CacheIntrospection = types.BoolPointerValue(resp.Config.CacheIntrospection)
			if resp.Config.ClaimToHeader != nil {
				r.Config.ClaimToHeader = []tfTypes.ClaimToHeader{}

				for _, claimToHeaderItem := range resp.Config.ClaimToHeader {
					var claimToHeader tfTypes.ClaimToHeader

					claimToHeader.Claim = types.StringValue(claimToHeaderItem.Claim)
					claimToHeader.Header = types.StringValue(claimToHeaderItem.Header)

					r.Config.ClaimToHeader = append(r.Config.ClaimToHeader, claimToHeader)
				}
			}
			if resp.Config.ClientAlg != nil {
				r.Config.ClientAlg = types.StringValue(string(*resp.Config.ClientAlg))
			} else {
				r.Config.ClientAlg = types.StringNull()
			}
			if resp.Config.ClientAuth != nil {
				r.Config.ClientAuth = types.StringValue(string(*resp.Config.ClientAuth))
			} else {
				r.Config.ClientAuth = types.StringNull()
			}
			r.Config.ClientID = types.StringValue(resp.Config.ClientID)
			r.Config.ClientJwk = types.StringPointerValue(resp.Config.ClientJwk)
			r.Config.ClientSecret = types.StringPointerValue(resp.Config.ClientSecret)
			if len(resp.Config.Headers) > 0 {
				r.Config.Headers = make(map[string]jsontypes.Normalized, len(resp.Config.Headers))
				for key1, value1 := range resp.Config.Headers {
					result1, _ := json.Marshal(value1)
					r.Config.Headers[key1] = jsontypes.NewNormalizedValue(string(result1))
				}
			}
			r.Config.HTTPProxy = types.StringPointerValue(resp.Config.HTTPProxy)
			r.Config.HTTPProxyAuthorization = types.StringPointerValue(resp.Config.HTTPProxyAuthorization)
			r.Config.HTTPVersion = types.Float64PointerValue(resp.Config.HTTPVersion)
			r.Config.HTTPSProxy = types.StringPointerValue(resp.Config.HTTPSProxy)
			r.Config.HTTPSProxyAuthorization = types.StringPointerValue(resp.Config.HTTPSProxyAuthorization)
			r.Config.InsecureRelaxedAudienceValidation = types.BoolPointerValue(resp.Config.InsecureRelaxedAudienceValidation)
			r.Config.IntrospectionEndpoint = types.StringValue(resp.Config.IntrospectionEndpoint)
			if resp.Config.IntrospectionFormat != nil {
				r.Config.IntrospectionFormat = types.StringValue(string(*resp.Config.IntrospectionFormat))
			} else {
				r.Config.IntrospectionFormat = types.StringNull()
			}
			r.Config.Keepalive = types.BoolPointerValue(resp.Config.Keepalive)
			r.Config.MaxRequestBodySize = types.Int64PointerValue(resp.Config.MaxRequestBodySize)
			r.Config.MetadataEndpoint = types.StringPointerValue(resp.Config.MetadataEndpoint)
			r.Config.MtlsIntrospectionEndpoint = types.StringPointerValue(resp.Config.MtlsIntrospectionEndpoint)
			r.Config.NoProxy = types.StringPointerValue(resp.Config.NoProxy)
			r.Config.Resource = types.StringValue(resp.Config.Resource)
			if resp.Config.ScopesSupported != nil {
				r.Config.ScopesSupported = make([]types.String, 0, len(resp.Config.ScopesSupported))
				for _, v := range resp.Config.ScopesSupported {
					r.Config.ScopesSupported = append(r.Config.ScopesSupported, types.StringValue(v))
				}
			}
			r.Config.SslVerify = types.BoolPointerValue(resp.Config.SslVerify)
			r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
			r.Config.TLSClientAuthCert = types.StringPointerValue(resp.Config.TLSClientAuthCert)
			r.Config.TLSClientAuthKey = types.StringPointerValue(resp.Config.TLSClientAuthKey)
			r.Config.TLSClientAuthSslVerify = types.BoolPointerValue(resp.Config.TLSClientAuthSslVerify)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.AcePluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.AcePluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.AcePluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAiMcpOauth2ResourceModel) ToOperationsCreateAimcpoauth2PluginRequest(ctx context.Context) (*operations.CreateAimcpoauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiMcpOauth2Plugin, aiMcpOauth2PluginDiags := r.ToSharedAiMcpOauth2Plugin(ctx)
	diags.Append(aiMcpOauth2PluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAimcpoauth2PluginRequest{
		ControlPlaneID:    controlPlaneID,
		AiMcpOauth2Plugin: *aiMcpOauth2Plugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiMcpOauth2ResourceModel) ToOperationsDeleteAimcpoauth2PluginRequest(ctx context.Context) (*operations.DeleteAimcpoauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAimcpoauth2PluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiMcpOauth2ResourceModel) ToOperationsGetAimcpoauth2PluginRequest(ctx context.Context) (*operations.GetAimcpoauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAimcpoauth2PluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiMcpOauth2ResourceModel) ToOperationsUpdateAimcpoauth2PluginRequest(ctx context.Context) (*operations.UpdateAimcpoauth2PluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiMcpOauth2Plugin, aiMcpOauth2PluginDiags := r.ToSharedAiMcpOauth2Plugin(ctx)
	diags.Append(aiMcpOauth2PluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAimcpoauth2PluginRequest{
		PluginID:          pluginID,
		ControlPlaneID:    controlPlaneID,
		AiMcpOauth2Plugin: *aiMcpOauth2Plugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiMcpOauth2ResourceModel) ToSharedAiMcpOauth2Plugin(ctx context.Context) (*shared.AiMcpOauth2Plugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AiMcpOauth2PluginOrdering
	if r.Ordering != nil {
		var after *shared.AiMcpOauth2PluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AiMcpOauth2PluginAfter{
				Access: access,
			}
		}
		var before *shared.AiMcpOauth2PluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AiMcpOauth2PluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AiMcpOauth2PluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AiMcpOauth2PluginPartials
	if r.Partials != nil {
		partials = make([]shared.AiMcpOauth2PluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AiMcpOauth2PluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.AiMcpOauth2PluginConfig
	if r.Config != nil {
		args := make(map[string]interface{})
		for argsKey, argsValue := range r.Config.Args {
			var argsInst interface{}
			_ = json.Unmarshal([]byte(argsValue.ValueString()), &argsInst)
			args[argsKey] = argsInst
		}
		authorizationServers := make([]string, 0, len(r.Config.AuthorizationServers))
		for _, authorizationServersItem := range r.Config.AuthorizationServers {
			authorizationServers = append(authorizationServers, authorizationServersItem.ValueString())
		}
		cacheIntrospection := new(bool)
		if !r.Config.CacheIntrospection.IsUnknown() && !r.Config.CacheIntrospection.IsNull() {
			*cacheIntrospection = r.Config.CacheIntrospection.ValueBool()
		} else {
			cacheIntrospection = nil
		}
		var claimToHeader []shared.ClaimToHeader
		if r.Config.ClaimToHeader != nil {
			claimToHeader = make([]shared.ClaimToHeader, 0, len(r.Config.ClaimToHeader))
			for _, claimToHeaderItem := range r.Config.ClaimToHeader {
				var claim string
				claim = claimToHeaderItem.Claim.ValueString()

				var header string
				header = claimToHeaderItem.Header.ValueString()

				claimToHeader = append(claimToHeader, shared.ClaimToHeader{
					Claim:  claim,
					Header: header,
				})
			}
		}
		clientAlg := new(shared.ClientAlg)
		if !r.Config.ClientAlg.IsUnknown() && !r.Config.ClientAlg.IsNull() {
			*clientAlg = shared.ClientAlg(r.Config.ClientAlg.ValueString())
		} else {
			clientAlg = nil
		}
		clientAuth := new(shared.ClientAuth)
		if !r.Config.ClientAuth.IsUnknown() && !r.Config.ClientAuth.IsNull() {
			*clientAuth = shared.ClientAuth(r.Config.ClientAuth.ValueString())
		} else {
			clientAuth = nil
		}
		var clientID string
		clientID = r.Config.ClientID.ValueString()

		clientJwk := new(string)
		if !r.Config.ClientJwk.IsUnknown() && !r.Config.ClientJwk.IsNull() {
			*clientJwk = r.Config.ClientJwk.ValueString()
		} else {
			clientJwk = nil
		}
		clientSecret := new(string)
		if !r.Config.ClientSecret.IsUnknown() && !r.Config.ClientSecret.IsNull() {
			*clientSecret = r.Config.ClientSecret.ValueString()
		} else {
			clientSecret = nil
		}
		headers := make(map[string]interface{})
		for headersKey, headersValue := range r.Config.Headers {
			var headersInst interface{}
			_ = json.Unmarshal([]byte(headersValue.ValueString()), &headersInst)
			headers[headersKey] = headersInst
		}
		httpProxy := new(string)
		if !r.Config.HTTPProxy.IsUnknown() && !r.Config.HTTPProxy.IsNull() {
			*httpProxy = r.Config.HTTPProxy.ValueString()
		} else {
			httpProxy = nil
		}
		httpProxyAuthorization := new(string)
		if !r.Config.HTTPProxyAuthorization.IsUnknown() && !r.Config.HTTPProxyAuthorization.IsNull() {
			*httpProxyAuthorization = r.Config.HTTPProxyAuthorization.ValueString()
		} else {
			httpProxyAuthorization = nil
		}
		httpVersion := new(float64)
		if !r.Config.HTTPVersion.IsUnknown() && !r.Config.HTTPVersion.IsNull() {
			*httpVersion = r.Config.HTTPVersion.ValueFloat64()
		} else {
			httpVersion = nil
		}
		httpsProxy := new(string)
		if !r.Config.HTTPSProxy.IsUnknown() && !r.Config.HTTPSProxy.IsNull() {
			*httpsProxy = r.Config.HTTPSProxy.ValueString()
		} else {
			httpsProxy = nil
		}
		httpsProxyAuthorization := new(string)
		if !r.Config.HTTPSProxyAuthorization.IsUnknown() && !r.Config.HTTPSProxyAuthorization.IsNull() {
			*httpsProxyAuthorization = r.Config.HTTPSProxyAuthorization.ValueString()
		} else {
			httpsProxyAuthorization = nil
		}
		insecureRelaxedAudienceValidation := new(bool)
		if !r.Config.InsecureRelaxedAudienceValidation.IsUnknown() && !r.Config.InsecureRelaxedAudienceValidation.IsNull() {
			*insecureRelaxedAudienceValidation = r.Config.InsecureRelaxedAudienceValidation.ValueBool()
		} else {
			insecureRelaxedAudienceValidation = nil
		}
		var introspectionEndpoint string
		introspectionEndpoint = r.Config.IntrospectionEndpoint.ValueString()

		introspectionFormat := new(shared.IntrospectionFormat)
		if !r.Config.IntrospectionFormat.IsUnknown() && !r.Config.IntrospectionFormat.IsNull() {
			*introspectionFormat = shared.IntrospectionFormat(r.Config.IntrospectionFormat.ValueString())
		} else {
			introspectionFormat = nil
		}
		keepalive := new(bool)
		if !r.Config.Keepalive.IsUnknown() && !r.Config.Keepalive.IsNull() {
			*keepalive = r.Config.Keepalive.ValueBool()
		} else {
			keepalive = nil
		}
		maxRequestBodySize := new(int64)
		if !r.Config.MaxRequestBodySize.IsUnknown() && !r.Config.MaxRequestBodySize.IsNull() {
			*maxRequestBodySize = r.Config.MaxRequestBodySize.ValueInt64()
		} else {
			maxRequestBodySize = nil
		}
		metadataEndpoint := new(string)
		if !r.Config.MetadataEndpoint.IsUnknown() && !r.Config.MetadataEndpoint.IsNull() {
			*metadataEndpoint = r.Config.MetadataEndpoint.ValueString()
		} else {
			metadataEndpoint = nil
		}
		mtlsIntrospectionEndpoint := new(string)
		if !r.Config.MtlsIntrospectionEndpoint.IsUnknown() && !r.Config.MtlsIntrospectionEndpoint.IsNull() {
			*mtlsIntrospectionEndpoint = r.Config.MtlsIntrospectionEndpoint.ValueString()
		} else {
			mtlsIntrospectionEndpoint = nil
		}
		noProxy := new(string)
		if !r.Config.NoProxy.IsUnknown() && !r.Config.NoProxy.IsNull() {
			*noProxy = r.Config.NoProxy.ValueString()
		} else {
			noProxy = nil
		}
		var resource string
		resource = r.Config.Resource.ValueString()

		var scopesSupported []string
		if r.Config.ScopesSupported != nil {
			scopesSupported = make([]string, 0, len(r.Config.ScopesSupported))
			for _, scopesSupportedItem := range r.Config.ScopesSupported {
				scopesSupported = append(scopesSupported, scopesSupportedItem.ValueString())
			}
		}
		sslVerify := new(bool)
		if !r.Config.SslVerify.IsUnknown() && !r.Config.SslVerify.IsNull() {
			*sslVerify = r.Config.SslVerify.ValueBool()
		} else {
			sslVerify = nil
		}
		timeout := new(float64)
		if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
			*timeout = r.Config.Timeout.ValueFloat64()
		} else {
			timeout = nil
		}
		tlsClientAuthCert := new(string)
		if !r.Config.TLSClientAuthCert.IsUnknown() && !r.Config.TLSClientAuthCert.IsNull() {
			*tlsClientAuthCert = r.Config.TLSClientAuthCert.ValueString()
		} else {
			tlsClientAuthCert = nil
		}
		tlsClientAuthKey := new(string)
		if !r.Config.TLSClientAuthKey.IsUnknown() && !r.Config.TLSClientAuthKey.IsNull() {
			*tlsClientAuthKey = r.Config.TLSClientAuthKey.ValueString()
		} else {
			tlsClientAuthKey = nil
		}
		tlsClientAuthSslVerify := new(bool)
		if !r.Config.TLSClientAuthSslVerify.IsUnknown() && !r.Config.TLSClientAuthSslVerify.IsNull() {
			*tlsClientAuthSslVerify = r.Config.TLSClientAuthSslVerify.ValueBool()
		} else {
			tlsClientAuthSslVerify = nil
		}
		config = &shared.AiMcpOauth2PluginConfig{
			Args:                              args,
			AuthorizationServers:              authorizationServers,
			CacheIntrospection:                cacheIntrospection,
			ClaimToHeader:                     claimToHeader,
			ClientAlg:                         clientAlg,
			ClientAuth:                        clientAuth,
			ClientID:                          clientID,
			ClientJwk:                         clientJwk,
			ClientSecret:                      clientSecret,
			Headers:                           headers,
			HTTPProxy:                         httpProxy,
			HTTPProxyAuthorization:            httpProxyAuthorization,
			HTTPVersion:                       httpVersion,
			HTTPSProxy:                        httpsProxy,
			HTTPSProxyAuthorization:           httpsProxyAuthorization,
			InsecureRelaxedAudienceValidation: insecureRelaxedAudienceValidation,
			IntrospectionEndpoint:             introspectionEndpoint,
			IntrospectionFormat:               introspectionFormat,
			Keepalive:                         keepalive,
			MaxRequestBodySize:                maxRequestBodySize,
			MetadataEndpoint:                  metadataEndpoint,
			MtlsIntrospectionEndpoint:         mtlsIntrospectionEndpoint,
			NoProxy:                           noProxy,
			Resource:                          resource,
			ScopesSupported:                   scopesSupported,
			SslVerify:                         sslVerify,
			Timeout:                           timeout,
			TLSClientAuthCert:                 tlsClientAuthCert,
			TLSClientAuthKey:                  tlsClientAuthKey,
			TLSClientAuthSslVerify:            tlsClientAuthSslVerify,
		}
	}
	protocols := make([]shared.AiMcpOauth2PluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AiMcpOauth2PluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AiMcpOauth2PluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.AiMcpOauth2PluginRoute{
			ID: id2,
		}
	}
	var service *shared.AiMcpOauth2PluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.AiMcpOauth2PluginService{
			ID: id3,
		}
	}
	out := shared.AiMcpOauth2Plugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
