// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *PortalTeamResourceModel) RefreshFromSharedPortalTeamResponse(ctx context.Context, resp *shared.PortalTeamResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *PortalTeamResourceModel) ToOperationsCreatePortalTeamRequest(ctx context.Context) (*operations.CreatePortalTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	portalCreateTeamRequest, portalCreateTeamRequestDiags := r.ToSharedPortalCreateTeamRequest(ctx)
	diags.Append(portalCreateTeamRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePortalTeamRequest{
		PortalID:                portalID,
		PortalCreateTeamRequest: portalCreateTeamRequest,
	}

	return &out, diags
}

func (r *PortalTeamResourceModel) ToOperationsDeletePortalTeamRequest(ctx context.Context) (*operations.DeletePortalTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.ID.ValueString()

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.DeletePortalTeamRequest{
		TeamID:   teamID,
		PortalID: portalID,
	}

	return &out, diags
}

func (r *PortalTeamResourceModel) ToOperationsGetPortalTeamRequest(ctx context.Context) (*operations.GetPortalTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.ID.ValueString()

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.GetPortalTeamRequest{
		TeamID:   teamID,
		PortalID: portalID,
	}

	return &out, diags
}

func (r *PortalTeamResourceModel) ToOperationsUpdatePortalTeamRequest(ctx context.Context) (*operations.UpdatePortalTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var teamID string
	teamID = r.ID.ValueString()

	var portalID string
	portalID = r.PortalID.ValueString()

	portalUpdateTeamRequest, portalUpdateTeamRequestDiags := r.ToSharedPortalUpdateTeamRequest(ctx)
	diags.Append(portalUpdateTeamRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePortalTeamRequest{
		TeamID:                  teamID,
		PortalID:                portalID,
		PortalUpdateTeamRequest: portalUpdateTeamRequest,
	}

	return &out, diags
}

func (r *PortalTeamResourceModel) ToSharedPortalCreateTeamRequest(ctx context.Context) (*shared.PortalCreateTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.PortalCreateTeamRequest{
		Name:        name,
		Description: description,
	}

	return &out, diags
}

func (r *PortalTeamResourceModel) ToSharedPortalUpdateTeamRequest(ctx context.Context) (*shared.PortalUpdateTeamRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.PortalUpdateTeamRequest{
		Name:        name,
		Description: description,
	}

	return &out, diags
}
