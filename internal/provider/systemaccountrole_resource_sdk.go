// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *SystemAccountRoleResourceModel) ToSharedAssignRole(ctx context.Context) (*shared.AssignRole, diag.Diagnostics) {
	var diags diag.Diagnostics

	roleName := new(shared.RoleName)
	if !r.RoleName.IsUnknown() && !r.RoleName.IsNull() {
		*roleName = shared.RoleName(r.RoleName.ValueString())
	} else {
		roleName = nil
	}
	entityID := new(string)
	if !r.EntityID.IsUnknown() && !r.EntityID.IsNull() {
		*entityID = r.EntityID.ValueString()
	} else {
		entityID = nil
	}
	entityTypeName := new(shared.EntityTypeName)
	if !r.EntityTypeName.IsUnknown() && !r.EntityTypeName.IsNull() {
		*entityTypeName = shared.EntityTypeName(r.EntityTypeName.ValueString())
	} else {
		entityTypeName = nil
	}
	entityRegion := new(shared.EntityRegion)
	if !r.EntityRegion.IsUnknown() && !r.EntityRegion.IsNull() {
		*entityRegion = shared.EntityRegion(r.EntityRegion.ValueString())
	} else {
		entityRegion = nil
	}
	out := shared.AssignRole{
		RoleName:       roleName,
		EntityID:       entityID,
		EntityTypeName: entityTypeName,
		EntityRegion:   entityRegion,
	}

	return &out, diags
}

func (r *SystemAccountRoleResourceModel) ToOperationsPostSystemAccountsAccountIDAssignedRolesRequest(ctx context.Context) (*operations.PostSystemAccountsAccountIDAssignedRolesRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accountID string
	accountID = r.AccountID.ValueString()

	assignRole, assignRoleDiags := r.ToSharedAssignRole(ctx)
	diags.Append(assignRoleDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PostSystemAccountsAccountIDAssignedRolesRequest{
		AccountID:  accountID,
		AssignRole: assignRole,
	}

	return &out, diags
}

func (r *SystemAccountRoleResourceModel) ToOperationsDeleteSystemAccountsAccountIDAssignedRolesRoleIDRequest(ctx context.Context) (*operations.DeleteSystemAccountsAccountIDAssignedRolesRoleIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accountID string
	accountID = r.AccountID.ValueString()

	var roleID string
	roleID = r.ID.ValueString()

	out := operations.DeleteSystemAccountsAccountIDAssignedRolesRoleIDRequest{
		AccountID: accountID,
		RoleID:    roleID,
	}

	return &out, diags
}

func (r *SystemAccountRoleResourceModel) RefreshFromSharedAssignedRole(ctx context.Context, resp *shared.AssignedRole) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.EntityID = types.StringPointerValue(resp.EntityID)
		if resp.EntityRegion != nil {
			r.EntityRegion = types.StringValue(string(*resp.EntityRegion))
		} else {
			r.EntityRegion = types.StringNull()
		}
		if resp.EntityTypeName != nil {
			r.EntityTypeName = types.StringValue(string(*resp.EntityTypeName))
		} else {
			r.EntityTypeName = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		if resp.RoleName != nil {
			r.RoleName = types.StringValue(string(*resp.RoleName))
		} else {
			r.RoleName = types.StringNull()
		}
	}

	return diags
}
