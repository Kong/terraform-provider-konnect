// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginMockingResourceModel) RefreshFromSharedMockingPlugin(ctx context.Context, resp *shared.MockingPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.MockingPluginConfig{}
			r.Config.APISpecification = types.StringPointerValue(resp.Config.APISpecification)
			r.Config.APISpecificationFilename = types.StringPointerValue(resp.Config.APISpecificationFilename)
			r.Config.CustomBasePath = types.StringPointerValue(resp.Config.CustomBasePath)
			r.Config.IncludeBasePath = types.BoolPointerValue(resp.Config.IncludeBasePath)
			if resp.Config.IncludedStatusCodes != nil {
				r.Config.IncludedStatusCodes = make([]types.Int64, 0, len(resp.Config.IncludedStatusCodes))
				for _, v := range resp.Config.IncludedStatusCodes {
					r.Config.IncludedStatusCodes = append(r.Config.IncludedStatusCodes, types.Int64Value(v))
				}
			}
			r.Config.MaxDelayTime = types.Float64PointerValue(resp.Config.MaxDelayTime)
			r.Config.MinDelayTime = types.Float64PointerValue(resp.Config.MinDelayTime)
			r.Config.RandomDelay = types.BoolPointerValue(resp.Config.RandomDelay)
			r.Config.RandomExamples = types.BoolPointerValue(resp.Config.RandomExamples)
			r.Config.RandomStatusCode = types.BoolPointerValue(resp.Config.RandomStatusCode)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.After.Access != nil {
					r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
					for _, v := range resp.Ordering.After.Access {
						r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
					}
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.Before.Access != nil {
					r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
					for _, v := range resp.Ordering.Before.Access {
						r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
					}
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginMockingResourceModel) ToOperationsCreateMockingPluginRequest(ctx context.Context) (*operations.CreateMockingPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	mockingPlugin, mockingPluginDiags := r.ToSharedMockingPlugin(ctx)
	diags.Append(mockingPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateMockingPluginRequest{
		ControlPlaneID: controlPlaneID,
		MockingPlugin:  *mockingPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginMockingResourceModel) ToOperationsDeleteMockingPluginRequest(ctx context.Context) (*operations.DeleteMockingPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteMockingPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginMockingResourceModel) ToOperationsGetMockingPluginRequest(ctx context.Context) (*operations.GetMockingPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetMockingPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginMockingResourceModel) ToOperationsUpdateMockingPluginRequest(ctx context.Context) (*operations.UpdateMockingPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	mockingPlugin, mockingPluginDiags := r.ToSharedMockingPlugin(ctx)
	diags.Append(mockingPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateMockingPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
		MockingPlugin:  *mockingPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginMockingResourceModel) ToSharedMockingPlugin(ctx context.Context) (*shared.MockingPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.MockingPluginOrdering
	if r.Ordering != nil {
		var after *shared.MockingPluginAfter
		if r.Ordering.After != nil {
			var access []string
			if r.Ordering.After.Access != nil {
				access = make([]string, 0, len(r.Ordering.After.Access))
				for _, accessItem := range r.Ordering.After.Access {
					access = append(access, accessItem.ValueString())
				}
			}
			after = &shared.MockingPluginAfter{
				Access: access,
			}
		}
		var before *shared.MockingPluginBefore
		if r.Ordering.Before != nil {
			var access1 []string
			if r.Ordering.Before.Access != nil {
				access1 = make([]string, 0, len(r.Ordering.Before.Access))
				for _, accessItem1 := range r.Ordering.Before.Access {
					access1 = append(access1, accessItem1.ValueString())
				}
			}
			before = &shared.MockingPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.MockingPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.MockingPluginPartials
	if r.Partials != nil {
		partials = make([]shared.MockingPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.MockingPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.MockingPluginConfig
	if r.Config != nil {
		apiSpecification := new(string)
		if !r.Config.APISpecification.IsUnknown() && !r.Config.APISpecification.IsNull() {
			*apiSpecification = r.Config.APISpecification.ValueString()
		} else {
			apiSpecification = nil
		}
		apiSpecificationFilename := new(string)
		if !r.Config.APISpecificationFilename.IsUnknown() && !r.Config.APISpecificationFilename.IsNull() {
			*apiSpecificationFilename = r.Config.APISpecificationFilename.ValueString()
		} else {
			apiSpecificationFilename = nil
		}
		customBasePath := new(string)
		if !r.Config.CustomBasePath.IsUnknown() && !r.Config.CustomBasePath.IsNull() {
			*customBasePath = r.Config.CustomBasePath.ValueString()
		} else {
			customBasePath = nil
		}
		includeBasePath := new(bool)
		if !r.Config.IncludeBasePath.IsUnknown() && !r.Config.IncludeBasePath.IsNull() {
			*includeBasePath = r.Config.IncludeBasePath.ValueBool()
		} else {
			includeBasePath = nil
		}
		var includedStatusCodes []int64
		if r.Config.IncludedStatusCodes != nil {
			includedStatusCodes = make([]int64, 0, len(r.Config.IncludedStatusCodes))
			for _, includedStatusCodesItem := range r.Config.IncludedStatusCodes {
				includedStatusCodes = append(includedStatusCodes, includedStatusCodesItem.ValueInt64())
			}
		}
		maxDelayTime := new(float64)
		if !r.Config.MaxDelayTime.IsUnknown() && !r.Config.MaxDelayTime.IsNull() {
			*maxDelayTime = r.Config.MaxDelayTime.ValueFloat64()
		} else {
			maxDelayTime = nil
		}
		minDelayTime := new(float64)
		if !r.Config.MinDelayTime.IsUnknown() && !r.Config.MinDelayTime.IsNull() {
			*minDelayTime = r.Config.MinDelayTime.ValueFloat64()
		} else {
			minDelayTime = nil
		}
		randomDelay := new(bool)
		if !r.Config.RandomDelay.IsUnknown() && !r.Config.RandomDelay.IsNull() {
			*randomDelay = r.Config.RandomDelay.ValueBool()
		} else {
			randomDelay = nil
		}
		randomExamples := new(bool)
		if !r.Config.RandomExamples.IsUnknown() && !r.Config.RandomExamples.IsNull() {
			*randomExamples = r.Config.RandomExamples.ValueBool()
		} else {
			randomExamples = nil
		}
		randomStatusCode := new(bool)
		if !r.Config.RandomStatusCode.IsUnknown() && !r.Config.RandomStatusCode.IsNull() {
			*randomStatusCode = r.Config.RandomStatusCode.ValueBool()
		} else {
			randomStatusCode = nil
		}
		config = &shared.MockingPluginConfig{
			APISpecification:         apiSpecification,
			APISpecificationFilename: apiSpecificationFilename,
			CustomBasePath:           customBasePath,
			IncludeBasePath:          includeBasePath,
			IncludedStatusCodes:      includedStatusCodes,
			MaxDelayTime:             maxDelayTime,
			MinDelayTime:             minDelayTime,
			RandomDelay:              randomDelay,
			RandomExamples:           randomExamples,
			RandomStatusCode:         randomStatusCode,
		}
	}
	var consumer *shared.MockingPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.MockingPluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.MockingPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.MockingPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.MockingPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.MockingPluginRoute{
			ID: id3,
		}
	}
	var service *shared.MockingPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.MockingPluginService{
			ID: id4,
		}
	}
	out := shared.MockingPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
