// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v3/internal/validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v3/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &GatewayPluginRequestCalloutResource{}
var _ resource.ResourceWithImportState = &GatewayPluginRequestCalloutResource{}

func NewGatewayPluginRequestCalloutResource() resource.Resource {
	return &GatewayPluginRequestCalloutResource{}
}

// GatewayPluginRequestCalloutResource defines the resource implementation.
type GatewayPluginRequestCalloutResource struct {
	// Provider configured SDK client.
	client *sdk.Konnect
}

// GatewayPluginRequestCalloutResourceModel describes the resource data model.
type GatewayPluginRequestCalloutResourceModel struct {
	Config         tfTypes.RequestCalloutPluginConfig `tfsdk:"config"`
	Consumer       *tfTypes.Set                       `tfsdk:"consumer"`
	ConsumerGroup  *tfTypes.Set                       `tfsdk:"consumer_group"`
	ControlPlaneID types.String                       `tfsdk:"control_plane_id"`
	CreatedAt      types.Int64                        `tfsdk:"created_at"`
	Enabled        types.Bool                         `tfsdk:"enabled"`
	ID             types.String                       `tfsdk:"id"`
	InstanceName   types.String                       `tfsdk:"instance_name"`
	Ordering       *tfTypes.ACLPluginOrdering         `tfsdk:"ordering"`
	Partials       []tfTypes.Partials                 `tfsdk:"partials"`
	Protocols      []types.String                     `tfsdk:"protocols"`
	Route          *tfTypes.Set                       `tfsdk:"route"`
	Service        *tfTypes.Set                       `tfsdk:"service"`
	Tags           []types.String                     `tfsdk:"tags"`
	UpdatedAt      types.Int64                        `tfsdk:"updated_at"`
}

func (r *GatewayPluginRequestCalloutResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_plugin_request_callout"
}

func (r *GatewayPluginRequestCalloutResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayPluginRequestCallout Resource",
		Attributes: map[string]schema.Attribute{
			"config": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"cache": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
							"cache_ttl": types.Int64Type,
							"memory": types.ObjectType{
								AttrTypes: map[string]attr.Type{
									`dictionary_name`: types.StringType,
								},
							},
							"redis": types.ObjectType{
								AttrTypes: map[string]attr.Type{
									`cluster_max_redirections`: types.Int64Type,
									`cluster_nodes`: types.ListType{
										ElemType: types.ObjectType{
											AttrTypes: map[string]attr.Type{
												`ip`:   types.StringType,
												`port`: types.Int64Type,
											},
										},
									},
									`connect_timeout`:       types.Int64Type,
									`connection_is_proxied`: types.BoolType,
									`database`:              types.Int64Type,
									`host`:                  types.StringType,
									`keepalive_backlog`:     types.Int64Type,
									`keepalive_pool_size`:   types.Int64Type,
									`password`:              types.StringType,
									`port`:                  types.Int64Type,
									`read_timeout`:          types.Int64Type,
									`send_timeout`:          types.Int64Type,
									`sentinel_master`:       types.StringType,
									`sentinel_nodes`: types.ListType{
										ElemType: types.ObjectType{
											AttrTypes: map[string]attr.Type{
												`host`: types.StringType,
												`port`: types.Int64Type,
											},
										},
									},
									`sentinel_password`: types.StringType,
									`sentinel_role`:     types.StringType,
									`sentinel_username`: types.StringType,
									`server_name`:       types.StringType,
									`ssl`:               types.BoolType,
									`ssl_verify`:        types.BoolType,
									`username`:          types.StringType,
								},
							},
							"strategy": types.StringType,
						})),
						Attributes: map[string]schema.Attribute{
							"cache_ttl": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Default:     int64default.StaticInt64(300),
								Description: `TTL in seconds of cache entities. Default: 300`,
							},
							"memory": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"dictionary_name": types.StringType,
								})),
								Attributes: map[string]schema.Attribute{
									"dictionary_name": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Default:     stringdefault.StaticString(`kong_db_cache`),
										Description: `The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template. Default: "kong_db_cache"`,
									},
								},
							},
							"redis": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"cluster_max_redirections": types.Int64Type,
									"cluster_nodes": types.ListType{
										ElemType: types.ObjectType{
											AttrTypes: map[string]attr.Type{
												`ip`:   types.StringType,
												`port`: types.Int64Type,
											},
										},
									},
									"connect_timeout":       types.Int64Type,
									"connection_is_proxied": types.BoolType,
									"database":              types.Int64Type,
									"host":                  types.StringType,
									"keepalive_backlog":     types.Int64Type,
									"keepalive_pool_size":   types.Int64Type,
									"password":              types.StringType,
									"port":                  types.Int64Type,
									"read_timeout":          types.Int64Type,
									"send_timeout":          types.Int64Type,
									"sentinel_master":       types.StringType,
									"sentinel_nodes": types.ListType{
										ElemType: types.ObjectType{
											AttrTypes: map[string]attr.Type{
												`host`: types.StringType,
												`port`: types.Int64Type,
											},
										},
									},
									"sentinel_password": types.StringType,
									"sentinel_role":     types.StringType,
									"sentinel_username": types.StringType,
									"server_name":       types.StringType,
									"ssl":               types.BoolType,
									"ssl_verify":        types.BoolType,
									"username":          types.StringType,
								})),
								Attributes: map[string]schema.Attribute{
									"cluster_max_redirections": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(5),
										Description: `Maximum retry attempts for redirection. Default: 5`,
									},
									"cluster_nodes": schema.ListNestedAttribute{
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											Attributes: map[string]schema.Attribute{
												"ip": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Default:     stringdefault.StaticString(`127.0.0.1`),
													Description: `A string representing a host name, such as example.com. Default: "127.0.0.1"`,
												},
												"port": schema.Int64Attribute{
													Computed:    true,
													Optional:    true,
													Default:     int64default.StaticInt64(6379),
													Description: `An integer representing a port number between 0 and 65535, inclusive. Default: 6379`,
													Validators: []validator.Int64{
														int64validator.AtMost(65535),
													},
												},
											},
										},
										Description: `Cluster addresses to use for Redis connections when the ` + "`" + `redis` + "`" + ` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.`,
									},
									"connect_timeout": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(2000),
										Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2. Default: 2000`,
										Validators: []validator.Int64{
											int64validator.AtMost(2147483646),
										},
									},
									"connection_is_proxied": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `If the connection to Redis is proxied (e.g. Envoy), set it ` + "`" + `true` + "`" + `. Set the ` + "`" + `host` + "`" + ` and ` + "`" + `port` + "`" + ` to point to the proxy address. Default: false`,
									},
									"database": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(0),
										Description: `Database to use for the Redis connection when using the ` + "`" + `redis` + "`" + ` strategy. Default: 0`,
									},
									"host": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Default:     stringdefault.StaticString(`127.0.0.1`),
										Description: `A string representing a host name, such as example.com. Default: "127.0.0.1"`,
									},
									"keepalive_backlog": schema.Int64Attribute{
										Optional:    true,
										Description: `Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return ` + "`" + `nil` + "`" + `. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than ` + "`" + `keepalive_pool_size` + "`" + `. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than ` + "`" + `keepalive_pool_size` + "`" + `.`,
										Validators: []validator.Int64{
											int64validator.AtMost(2147483646),
										},
									},
									"keepalive_pool_size": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(256),
										Description: `The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither ` + "`" + `keepalive_pool_size` + "`" + ` nor ` + "`" + `keepalive_backlog` + "`" + ` is specified, no pool is created. If ` + "`" + `keepalive_pool_size` + "`" + ` isn't specified but ` + "`" + `keepalive_backlog` + "`" + ` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low. Default: 256`,
										Validators: []validator.Int64{
											int64validator.Between(1, 2147483646),
										},
									},
									"password": schema.StringAttribute{
										Optional:    true,
										Description: `Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.`,
									},
									"port": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(6379),
										Description: `An integer representing a port number between 0 and 65535, inclusive. Default: 6379`,
										Validators: []validator.Int64{
											int64validator.AtMost(65535),
										},
									},
									"read_timeout": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(2000),
										Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2. Default: 2000`,
										Validators: []validator.Int64{
											int64validator.AtMost(2147483646),
										},
									},
									"send_timeout": schema.Int64Attribute{
										Computed:    true,
										Optional:    true,
										Default:     int64default.StaticInt64(2000),
										Description: `An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2. Default: 2000`,
										Validators: []validator.Int64{
											int64validator.AtMost(2147483646),
										},
									},
									"sentinel_master": schema.StringAttribute{
										Optional:    true,
										Description: `Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.`,
									},
									"sentinel_nodes": schema.ListNestedAttribute{
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
											Attributes: map[string]schema.Attribute{
												"host": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Default:     stringdefault.StaticString(`127.0.0.1`),
													Description: `A string representing a host name, such as example.com. Default: "127.0.0.1"`,
												},
												"port": schema.Int64Attribute{
													Computed:    true,
													Optional:    true,
													Default:     int64default.StaticInt64(6379),
													Description: `An integer representing a port number between 0 and 65535, inclusive. Default: 6379`,
													Validators: []validator.Int64{
														int64validator.AtMost(65535),
													},
												},
											},
										},
										Description: `Sentinel node addresses to use for Redis connections when the ` + "`" + `redis` + "`" + ` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.`,
									},
									"sentinel_password": schema.StringAttribute{
										Optional:    true,
										Description: `Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.`,
									},
									"sentinel_role": schema.StringAttribute{
										Computed:    true,
										Optional:    true,
										Description: `Sentinel role to use for Redis connections when the ` + "`" + `redis` + "`" + ` strategy is defined. Defining this value implies using Redis Sentinel. must be one of ["any", "master", "slave"]`,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"any",
												"master",
												"slave",
											),
										},
									},
									"sentinel_username": schema.StringAttribute{
										Optional:    true,
										Description: `Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.`,
									},
									"server_name": schema.StringAttribute{
										Optional:    true,
										Description: `A string representing an SNI (server name indication) value for TLS.`,
									},
									"ssl": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `If set to true, uses SSL to connect to Redis. Default: false`,
									},
									"ssl_verify": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(false),
										Description: `If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure ` + "`" + `lua_ssl_trusted_certificate` + "`" + ` in ` + "`" + `kong.conf` + "`" + ` to specify the CA (or server) certificate used by your Redis server. You may also need to configure ` + "`" + `lua_ssl_verify_depth` + "`" + ` accordingly. Default: false`,
									},
									"username": schema.StringAttribute{
										Optional:    true,
										Description: `Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to ` + "`" + `default` + "`" + `.`,
									},
								},
							},
							"strategy": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Default:     stringdefault.StaticString(`off`),
								Description: `The backing data store in which to hold cache entities. Accepted values are: ` + "`" + `off` + "`" + `, ` + "`" + `memory` + "`" + `, and ` + "`" + `redis` + "`" + `. Default: "off"; must be one of ["memory", "off", "redis"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"memory",
										"off",
										"redis",
									),
								},
							},
						},
						Description: `Plugin global caching configuration.`,
					},
					"callouts": schema.ListNestedAttribute{
						Required: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"cache": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"bypass": schema.BoolAttribute{
											Computed:    true,
											Optional:    true,
											Default:     booldefault.StaticBool(false),
											Description: `If ` + "`" + `true` + "`" + `, skips caching the callout response. Default: false`,
										},
									},
									Description: `Callout caching configuration. Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"depends_on": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									Default:     listdefault.StaticValue(types.ListValueMust(types.StringType, []attr.Value{})),
									ElementType: types.StringType,
									Description: `An array of callout names the current callout depends on. This dependency list determines the callout execution order via a topological sorting algorithm.`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Optional:    true,
									Description: `A string identifier for a callout. A callout object is referenceable via its name in the ` + "`" + `kong.ctx.shared.callouts.<name>` + "`" + `. Not Null`,
									Validators: []validator.String{
										speakeasy_stringvalidators.NotNull(),
									},
								},
								"request": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"body": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"custom": schema.MapAttribute{
													Optional:    true,
													ElementType: jsontypes.NormalizedType{},
													Description: `The custom body fields to be added to the callout HTTP request. Values can contain Lua expressions in the form $(some_lua_expression). The syntax is based on ` + "`" + `request-transformer-advanced` + "`" + ` templates.`,
													Validators: []validator.Map{
														mapvalidator.ValueStringsAre(validators.IsValidJSON()),
													},
												},
												"decode": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(false),
													Description: `If ` + "`" + `true` + "`" + `, decodes the request's body and make it available for customizations. Only JSON content type is supported. Default: false`,
												},
												"forward": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(false),
													Description: `If ` + "`" + `true` + "`" + `, forwards the incoming request's body to the callout request. Default: false`,
												},
											},
											Description: `Callout request body customizations. Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"by_lua": schema.StringAttribute{
											Optional:    true,
											Description: `Lua code that executes before the callout request is made. **Warning** can impact system behavior. Standard Lua sandboxing restrictions apply.`,
										},
										"error": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"error_response_code": schema.Int64Attribute{
													Computed:    true,
													Optional:    true,
													Default:     int64default.StaticInt64(400),
													Description: `The error code to respond with if ` + "`" + `on_error` + "`" + ` is ` + "`" + `fail` + "`" + ` or if ` + "`" + `retries` + "`" + ` is achieved. Default: 400`,
												},
												"error_response_msg": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Default:     stringdefault.StaticString(`service callout error`),
													Description: `The error mesasge to respond with if ` + "`" + `on_error` + "`" + ` is set to ` + "`" + `fail` + "`" + ` or if ` + "`" + `retries` + "`" + ` is achieved. Templating with Lua expressions is supported. Default: "service callout error"`,
												},
												"http_statuses": schema.ListAttribute{
													Optional:    true,
													ElementType: types.Int64Type,
													Description: `The list of HTTP status codes considered errors under the error handling policy.`,
												},
												"on_error": schema.StringAttribute{
													Computed:    true,
													Optional:    true,
													Default:     stringdefault.StaticString(`fail`),
													Description: `Default: "fail"; must be one of ["continue", "fail", "retry"]`,
													Validators: []validator.String{
														stringvalidator.OneOf(
															"continue",
															"fail",
															"retry",
														),
													},
												},
												"retries": schema.Int64Attribute{
													Computed:    true,
													Optional:    true,
													Default:     int64default.StaticInt64(2),
													Description: `The number of retries the plugin will attempt on TCP and HTTP errors if ` + "`" + `on_error` + "`" + ` is set to ` + "`" + `retry` + "`" + `. Default: 2`,
												},
											},
											Description: `The error handling policy the plugin will apply to TCP and HTTP errors. Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"headers": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"custom": schema.MapAttribute{
													Optional:    true,
													ElementType: jsontypes.NormalizedType{},
													Description: `The custom headers to be added in the callout HTTP request. Values can contain Lua expressions in the form ` + "`" + `$(some_lua_expression)` + "`" + `. The syntax is based on ` + "`" + `request-transformer-advanced` + "`" + ` templates.`,
													Validators: []validator.Map{
														mapvalidator.ValueStringsAre(validators.IsValidJSON()),
													},
												},
												"forward": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(false),
													Description: `If ` + "`" + `true` + "`" + `, forwards the incoming request's headers to the callout request. Default: false`,
												},
											},
											Description: `Callout request header customizations. Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"http_opts": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"proxy": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
														"auth_password": types.StringType,
														"auth_username": types.StringType,
														"http_proxy":    types.StringType,
														"https_proxy":   types.StringType,
													})),
													Attributes: map[string]schema.Attribute{
														"auth_password": schema.StringAttribute{
															Optional:    true,
															Description: `The password to authenticate with, if the forward proxy is protected by basic authentication.`,
														},
														"auth_username": schema.StringAttribute{
															Optional:    true,
															Description: `The username to authenticate with, if the forward proxy is protected by basic authentication.`,
														},
														"http_proxy": schema.StringAttribute{
															Optional:    true,
															Description: `The HTTP proxy URL. This proxy server will be used for HTTP requests.`,
														},
														"https_proxy": schema.StringAttribute{
															Optional:    true,
															Description: `The HTTPS proxy URL. This proxy server will be used for HTTPS requests.`,
														},
													},
													Description: `Proxy settings.`,
												},
												"ssl_server_name": schema.StringAttribute{
													Optional:    true,
													Description: `The SNI used in the callout request. Defaults to host if omitted.`,
												},
												"ssl_verify": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(false),
													Description: `If set to ` + "`" + `true` + "`" + `, verifies the validity of the server SSL certificate. If setting this parameter, also configure ` + "`" + `lua_ssl_trusted_certificate` + "`" + ` in ` + "`" + `kong.conf` + "`" + ` to specify the CA (or server) certificate used by your Redis server. You may also need to configure ` + "`" + `lua_ssl_verify_depth` + "`" + ` accordingly. Default: false`,
												},
												"timeouts": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
														"connect": types.Int64Type,
														"read":    types.Int64Type,
														"write":   types.Int64Type,
													})),
													Attributes: map[string]schema.Attribute{
														"connect": schema.Int64Attribute{
															Optional:    true,
															Description: `The socket connect timeout.`,
															Validators: []validator.Int64{
																int64validator.AtMost(2147483646),
															},
														},
														"read": schema.Int64Attribute{
															Optional:    true,
															Description: `The socket read timeout.`,
															Validators: []validator.Int64{
																int64validator.AtMost(2147483646),
															},
														},
														"write": schema.Int64Attribute{
															Optional:    true,
															Description: `The socket write timeout.`,
															Validators: []validator.Int64{
																int64validator.AtMost(2147483646),
															},
														},
													},
													Description: `Socket timeouts in milliseconds. All or none must be set.`,
												},
											},
											Description: `HTTP connection parameters. Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"method": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Default:     stringdefault.StaticString(`GET`),
											Description: `The HTTP method that will be requested. Default: "GET"`,
											Validators: []validator.String{
												stringvalidator.RegexMatches(regexp.MustCompile(`^[A-Z]+$`), "must match pattern "+regexp.MustCompile(`^[A-Z]+$`).String()),
											},
										},
										"query": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"custom": schema.MapAttribute{
													Optional:    true,
													ElementType: jsontypes.NormalizedType{},
													Description: `The custom query params to be added in the callout HTTP request. Values can contain Lua expressions in the form ` + "`" + `$(some_lua_expression)` + "`" + `. The syntax is based on ` + "`" + `request-transformer-advanced` + "`" + ` templates.`,
													Validators: []validator.Map{
														mapvalidator.ValueStringsAre(validators.IsValidJSON()),
													},
												},
												"forward": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(false),
													Description: `If ` + "`" + `true` + "`" + `, forwards the incoming request's query params to the callout request. Default: false`,
												},
											},
											Description: `Callout request query param customizations. Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"url": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `The URL that will be requested. Not Null`,
											Validators: []validator.String{
												speakeasy_stringvalidators.NotNull(),
											},
										},
									},
									Description: `The customizations for the callout request. Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
								"response": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"body": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"decode": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(false),
													Description: `If ` + "`" + `true` + "`" + `, decodes the response body before storing into the context. Only JSON is supported. Default: false`,
												},
												"store": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(true),
													Description: `If ` + "`" + `false` + "`" + `, skips storing the callout response body into kong.ctx.shared.callouts.<name>.response.body. Default: true`,
												},
											},
											Description: `Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
										"by_lua": schema.StringAttribute{
											Optional:    true,
											Description: `Lua code that executes after the callout response is received, before caching takes place. Can produce side effects. Standard Lua sandboxing restrictions apply.`,
										},
										"headers": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"store": schema.BoolAttribute{
													Computed:    true,
													Optional:    true,
													Default:     booldefault.StaticBool(true),
													Description: `If ` + "`" + `false` + "`" + `, skips storing the callout response headers into kong.ctx.shared.callouts.<name>.response.headers. Default: true`,
												},
											},
											Description: `Callout response header customizations. Not Null`,
											Validators: []validator.Object{
												speakeasy_objectvalidators.NotNull(),
											},
										},
									},
									Description: `Configurations of callout response handling. Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
							},
						},
						Description: `A collection of callout objects, where each object represents an HTTP request made in the context of a proxy request.`,
					},
					"upstream": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
							"body": types.ObjectType{
								AttrTypes: map[string]attr.Type{
									`custom`: types.MapType{
										ElemType: jsontypes.NormalizedType{},
									},
									`decode`:  types.BoolType,
									`forward`: types.BoolType,
								},
							},
							"by_lua": types.StringType,
							"headers": types.ObjectType{
								AttrTypes: map[string]attr.Type{
									`custom`: types.MapType{
										ElemType: jsontypes.NormalizedType{},
									},
									`forward`: types.BoolType,
								},
							},
							"query": types.ObjectType{
								AttrTypes: map[string]attr.Type{
									`custom`: types.MapType{
										ElemType: jsontypes.NormalizedType{},
									},
									`forward`: types.BoolType,
								},
							},
						})),
						Attributes: map[string]schema.Attribute{
							"body": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"custom": types.MapType{
										ElemType: jsontypes.NormalizedType{},
									},
									"decode":  types.BoolType,
									"forward": types.BoolType,
								})),
								Attributes: map[string]schema.Attribute{
									"custom": schema.MapAttribute{
										Optional:    true,
										ElementType: jsontypes.NormalizedType{},
										Description: `The custom body fields to be added in the upstream request body. Values can contain Lua expressions in the form $(some_lua_expression). The syntax is based on ` + "`" + `request-transformer-advanced` + "`" + ` templates.`,
										Validators: []validator.Map{
											mapvalidator.ValueStringsAre(validators.IsValidJSON()),
										},
									},
									"decode": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `If ` + "`" + `true` + "`" + `, decodes the request's body to make it available for upstream by_lua customizations. Only JSON content type is supported. Default: true`,
									},
									"forward": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `If ` + "`" + `false` + "`" + `, skips forwarding the incoming request's body to the upstream request. Default: true`,
									},
								},
								Description: `Callout request body customizations.`,
							},
							"by_lua": schema.StringAttribute{
								Optional:    true,
								Description: `Lua code that executes before the upstream request is made. Can produce side effects. Standard Lua sandboxing restrictions apply.`,
							},
							"headers": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"custom": types.MapType{
										ElemType: jsontypes.NormalizedType{},
									},
									"forward": types.BoolType,
								})),
								Attributes: map[string]schema.Attribute{
									"custom": schema.MapAttribute{
										Optional:    true,
										ElementType: jsontypes.NormalizedType{},
										Description: `The custom headers to be added in the upstream HTTP request. Values can contain Lua expressions in the form $(some_lua_expression). The syntax is based on ` + "`" + `request-transformer-advanced` + "`" + ` templates.`,
										Validators: []validator.Map{
											mapvalidator.ValueStringsAre(validators.IsValidJSON()),
										},
									},
									"forward": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `If ` + "`" + `false` + "`" + `, does not forward request headers to upstream request. Default: true`,
									},
								},
								Description: `Callout request header customizations.`,
							},
							"query": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
									"custom": types.MapType{
										ElemType: jsontypes.NormalizedType{},
									},
									"forward": types.BoolType,
								})),
								Attributes: map[string]schema.Attribute{
									"custom": schema.MapAttribute{
										Optional:    true,
										ElementType: jsontypes.NormalizedType{},
										Description: `The custom query params to be added in the upstream HTTP request. Values can contain Lua expressions in the form ` + "`" + `$(some_lua_expression)` + "`" + `. The syntax is based on ` + "`" + `request-transformer-advanced` + "`" + ` templates.`,
										Validators: []validator.Map{
											mapvalidator.ValueStringsAre(validators.IsValidJSON()),
										},
									},
									"forward": schema.BoolAttribute{
										Computed:    true,
										Optional:    true,
										Default:     booldefault.StaticBool(true),
										Description: `If ` + "`" + `false` + "`" + `, does not forward request query params to upstream request. Default: true`,
									},
								},
								Description: `Upstream request query param customizations.`,
							},
						},
						Description: `Customizations to the upstream request.`,
					},
				},
			},
			"consumer": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.`,
			},
			"consumer_group": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups`,
			},
			"control_plane_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Default:     booldefault.StaticBool(true),
				Description: `Whether the plugin is applied. Default: true`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A string representing a UUID (universally unique identifier).`,
			},
			"instance_name": schema.StringAttribute{
				Optional:    true,
				Description: `A unique string representing a UTF-8 encoded name.`,
			},
			"ordering": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"after": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
					"before": types.ObjectType{
						AttrTypes: map[string]attr.Type{
							`access`: types.ListType{
								ElemType: types.StringType,
							},
						},
					},
				})),
				Attributes: map[string]schema.Attribute{
					"after": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
					"before": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"access": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
							},
						},
					},
				},
			},
			"partials": schema.ListNestedAttribute{
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A string representing a UUID (universally unique identifier).`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `A unique string representing a UTF-8 encoded name.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
				Description: `A list of partials to be used by the plugin.`,
			},
			"protocols": schema.SetAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `A set of strings representing HTTP protocols.`,
			},
			"route": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Default: objectdefault.StaticValue(types.ObjectNull(map[string]attr.Type{
					"id": types.StringType,
				})),
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
				},
				Description: `If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.`,
			},
			"tags": schema.ListAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Plugin for grouping and filtering.`,
			},
			"updated_at": schema.Int64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Unix epoch when the resource was last updated.`,
			},
		},
	}
}

func (r *GatewayPluginRequestCalloutResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayPluginRequestCalloutResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *GatewayPluginRequestCalloutResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreateRequestcalloutPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.CreateRequestcalloutPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestCalloutPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRequestCalloutPlugin(ctx, res.RequestCalloutPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginRequestCalloutResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *GatewayPluginRequestCalloutResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetRequestcalloutPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.GetRequestcalloutPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestCalloutPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRequestCalloutPlugin(ctx, res.RequestCalloutPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginRequestCalloutResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *GatewayPluginRequestCalloutResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdateRequestcalloutPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.UpdateRequestcalloutPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.RequestCalloutPlugin != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedRequestCalloutPlugin(ctx, res.RequestCalloutPlugin)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *GatewayPluginRequestCalloutResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *GatewayPluginRequestCalloutResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeleteRequestcalloutPluginRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.Plugins.DeleteRequestcalloutPlugin(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *GatewayPluginRequestCalloutResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		ControlPlaneID string `json:"control_plane_id"`
		ID             string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{"control_plane_id": "9524ec7d-36d9-465d-a8c5-83a3c9390458", "id": "3473c251-5b6c-4f45-b1ff-7ede735a366d"}': `+err.Error())
		return
	}

	if len(data.ControlPlaneID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field control_plane_id is required but was not found in the json encoded ID. It's expected to be a value alike '"9524ec7d-36d9-465d-a8c5-83a3c9390458"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("control_plane_id"), data.ControlPlaneID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"3473c251-5b6c-4f45-b1ff-7ede735a366d"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)
}
