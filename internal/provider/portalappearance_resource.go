// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/operations"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PortalAppearanceResource{}
var _ resource.ResourceWithImportState = &PortalAppearanceResource{}

func NewPortalAppearanceResource() resource.Resource {
	return &PortalAppearanceResource{}
}

// PortalAppearanceResource defines the resource implementation.
type PortalAppearanceResource struct {
	client *sdk.Konnect
}

// PortalAppearanceResourceModel describes the resource data model.
type PortalAppearanceResourceModel struct {
	CustomFonts    *tfTypes.NullableAppearanceFonts          `tfsdk:"custom_fonts"`
	CustomTheme    *tfTypes.NullableAppearanceThemeVariables `tfsdk:"custom_theme"`
	Images         *tfTypes.AppearanceImages                 `tfsdk:"images"`
	PortalID       types.String                              `tfsdk:"portal_id"`
	Text           *tfTypes.NullableAppearanceTextVariables  `tfsdk:"text"`
	ThemeName      types.String                              `tfsdk:"theme_name"`
	UseCustomFonts types.Bool                                `tfsdk:"use_custom_fonts"`
}

func (r *PortalAppearanceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_appearance"
}

func (r *PortalAppearanceResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalAppearance Resource",
		Attributes: map[string]schema.Attribute{
			"custom_fonts": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"base": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.OneOf(
								"Roboto",
								"Inter",
								"Open Sans",
								"Lato",
								"Slabo 27px",
								"Slabo 13px",
								"Oswald",
								"Source Sans Pro",
								"Montserrat",
								"Raleway",
								"PT Sans",
								"Lora",
								"Roboto Mono",
								"Inconsolata",
								"Source Code Pro",
								"PT Mono",
								"Ubuntu Mono",
								"IBM Plex Mono",
							),
						},
					},
					"code": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.OneOf(
								"Roboto",
								"Inter",
								"Open Sans",
								"Lato",
								"Slabo 27px",
								"Slabo 13px",
								"Oswald",
								"Source Sans Pro",
								"Montserrat",
								"Raleway",
								"PT Sans",
								"Lora",
								"Roboto Mono",
								"Inconsolata",
								"Source Code Pro",
								"PT Mono",
								"Ubuntu Mono",
								"IBM Plex Mono",
							),
						},
					},
					"headings": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]`,
						Validators: []validator.String{
							speakeasy_stringvalidators.NotNull(),
							stringvalidator.OneOf(
								"Roboto",
								"Inter",
								"Open Sans",
								"Lato",
								"Slabo 27px",
								"Slabo 13px",
								"Oswald",
								"Source Sans Pro",
								"Montserrat",
								"Raleway",
								"PT Sans",
								"Lora",
								"Roboto Mono",
								"Inconsolata",
								"Source Code Pro",
								"PT Mono",
								"Ubuntu Mono",
								"IBM Plex Mono",
							),
						},
					},
				},
				Description: `Font selections to render text in the portal user interface. Must set use_custom_fonts to true to enable using custom font values.`,
			},
			"custom_theme": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"colors": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"button": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"primary_fill": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"primary_text": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
							"section": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"accent": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"body": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"footer": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"header": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"hero": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"stroke": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"tertiary": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
							"text": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"accent": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"footer": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"header": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"headings": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"hero": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"link": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"primary": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
									"secondary": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.UTF8LengthAtMost(512),
												},
											},
											"value": schema.StringAttribute{
												Computed:    true,
												Optional:    true,
												Description: `Not Null`,
												Validators: []validator.String{
													speakeasy_stringvalidators.NotNull(),
													stringvalidator.UTF8LengthAtMost(255),
												},
											},
										},
										Description: `Not Null`,
										Validators: []validator.Object{
											speakeasy_objectvalidators.NotNull(),
										},
									},
								},
								Description: `Not Null`,
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
							},
						},
						Description: `Not Null`,
						Validators: []validator.Object{
							speakeasy_objectvalidators.NotNull(),
						},
					},
				},
				Description: `Groups of variables for configuring visual details of the portal user interface. Set theme_name to 'custom' to use custom values for theme variables.`,
			},
			"images": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"catalog_cover": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"data": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `must be a data URL with base64 image data, e.g., data:image/jpeg;base64,<BASE64_IMAGE_DATA>. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.RegexMatches(regexp.MustCompile(`^data:image/(png|jpeg|x-icon|ico|icon|vnd.microsoft.icon|gif)(;base64)?,(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`), "must match pattern "+regexp.MustCompile(`^data:image/(png|jpeg|x-icon|ico|icon|vnd.microsoft.icon|gif)(;base64)?,(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`).String()),
								},
							},
							"filename": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.UTF8LengthAtMost(512),
								},
							},
						},
						Description: `The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs.`,
					},
					"favicon": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"data": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `must be a data URL with base64 image data, e.g., data:image/jpeg;base64,<BASE64_IMAGE_DATA>. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.RegexMatches(regexp.MustCompile(`^data:image/(png|jpeg|x-icon|ico|icon|vnd.microsoft.icon|gif)(;base64)?,(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`), "must match pattern "+regexp.MustCompile(`^data:image/(png|jpeg|x-icon|ico|icon|vnd.microsoft.icon|gif)(;base64)?,(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`).String()),
								},
							},
							"filename": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.UTF8LengthAtMost(512),
								},
							},
						},
						Description: `The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs.`,
					},
					"logo": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"data": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `must be a data URL with base64 image data, e.g., data:image/jpeg;base64,<BASE64_IMAGE_DATA>. Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.RegexMatches(regexp.MustCompile(`^data:image/(png|jpeg|x-icon|ico|icon|vnd.microsoft.icon|gif)(;base64)?,(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`), "must match pattern "+regexp.MustCompile(`^data:image/(png|jpeg|x-icon|ico|icon|vnd.microsoft.icon|gif)(;base64)?,(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$`).String()),
								},
							},
							"filename": schema.StringAttribute{
								Computed: true,
								Optional: true,
								Validators: []validator.String{
									stringvalidator.UTF8LengthAtMost(512),
								},
							},
						},
						Description: `The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs.`,
					},
				},
				Description: `A collection of binary image data to customize images in the portal`,
			},
			"portal_id": schema.StringAttribute{
				Required:    true,
				Description: `ID of the portal.`,
			},
			"text": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"catalog": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"primary_header": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.UTF8LengthAtMost(512),
								},
							},
							"welcome_message": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Not Null`,
								Validators: []validator.String{
									speakeasy_stringvalidators.NotNull(),
									stringvalidator.UTF8LengthAtMost(512),
								},
							},
						},
						Description: `Not Null`,
						Validators: []validator.Object{
							speakeasy_objectvalidators.NotNull(),
						},
					},
				},
				Description: `Values to display for customizable text in the portal user interface`,
			},
			"theme_name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Select a pre-existing default theme or specify 'custom' to use custom_theme variables. must be one of ["mint_rocket", "dark_mode", "custom"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"mint_rocket",
						"dark_mode",
						"custom",
					),
				},
			},
			"use_custom_fonts": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `If true, fonts in custom_fonts will be used over the theme's default fonts`,
			},
		},
	}
}

func (r *PortalAppearanceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalAppearanceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PortalAppearanceResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	portalID := data.PortalID.ValueString()
	updatePortalAppearanceRequest := *data.ToSharedUpdatePortalAppearanceRequest()
	request := operations.UpdatePortalAppearanceRequest{
		PortalID:                      portalID,
		UpdatePortalAppearanceRequest: updatePortalAppearanceRequest,
	}
	res, err := r.client.PortalAppearance.UpdatePortalAppearance(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.UpdatePortalAppearanceResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedUpdatePortalAppearanceResponse(res.UpdatePortalAppearanceResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalAppearanceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PortalAppearanceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	portalID := data.PortalID.ValueString()
	request := operations.GetPortalAppearanceRequest{
		PortalID: portalID,
	}
	res, err := r.client.PortalAppearance.GetPortalAppearance(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.GetPortalAppearanceResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedGetPortalAppearanceResponse(res.GetPortalAppearanceResponse)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalAppearanceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PortalAppearanceResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	portalID := data.PortalID.ValueString()
	updatePortalAppearanceRequest := *data.ToSharedUpdatePortalAppearanceRequest()
	request := operations.UpdatePortalAppearanceRequest{
		PortalID:                      portalID,
		UpdatePortalAppearanceRequest: updatePortalAppearanceRequest,
	}
	res, err := r.client.PortalAppearance.UpdatePortalAppearance(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.UpdatePortalAppearanceResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedUpdatePortalAppearanceResponse(res.UpdatePortalAppearanceResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalAppearanceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PortalAppearanceResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *PortalAppearanceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("portal_id"), req.ID)...)
}
