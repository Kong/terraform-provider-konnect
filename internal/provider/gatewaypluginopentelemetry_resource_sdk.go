// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginOpentelemetryResourceModel) ToSharedOpentelemetryPluginInput() *shared.OpentelemetryPluginInput {
	batchFlushDelay := new(int64)
	if !r.Config.BatchFlushDelay.IsUnknown() && !r.Config.BatchFlushDelay.IsNull() {
		*batchFlushDelay = r.Config.BatchFlushDelay.ValueInt64()
	} else {
		batchFlushDelay = nil
	}
	batchSpanCount := new(int64)
	if !r.Config.BatchSpanCount.IsUnknown() && !r.Config.BatchSpanCount.IsNull() {
		*batchSpanCount = r.Config.BatchSpanCount.ValueInt64()
	} else {
		batchSpanCount = nil
	}
	connectTimeout := new(int64)
	if !r.Config.ConnectTimeout.IsUnknown() && !r.Config.ConnectTimeout.IsNull() {
		*connectTimeout = r.Config.ConnectTimeout.ValueInt64()
	} else {
		connectTimeout = nil
	}
	headerType := new(shared.HeaderType)
	if !r.Config.HeaderType.IsUnknown() && !r.Config.HeaderType.IsNull() {
		*headerType = shared.HeaderType(r.Config.HeaderType.ValueString())
	} else {
		headerType = nil
	}
	headers := make(map[string]interface{})
	for headersKey, headersValue := range r.Config.Headers {
		var headersInst interface{}
		_ = json.Unmarshal([]byte(headersValue.ValueString()), &headersInst)
		headers[headersKey] = headersInst
	}
	httpResponseHeaderForTraceid := new(string)
	if !r.Config.HTTPResponseHeaderForTraceid.IsUnknown() && !r.Config.HTTPResponseHeaderForTraceid.IsNull() {
		*httpResponseHeaderForTraceid = r.Config.HTTPResponseHeaderForTraceid.ValueString()
	} else {
		httpResponseHeaderForTraceid = nil
	}
	logsEndpoint := new(string)
	if !r.Config.LogsEndpoint.IsUnknown() && !r.Config.LogsEndpoint.IsNull() {
		*logsEndpoint = r.Config.LogsEndpoint.ValueString()
	} else {
		logsEndpoint = nil
	}
	var propagation *shared.Propagation
	if r.Config.Propagation != nil {
		var clear []string = []string{}
		for _, clearItem := range r.Config.Propagation.Clear {
			clear = append(clear, clearItem.ValueString())
		}
		defaultFormat := shared.DefaultFormat(r.Config.Propagation.DefaultFormat.ValueString())
		var extract []shared.Extract = []shared.Extract{}
		for _, extractItem := range r.Config.Propagation.Extract {
			extract = append(extract, shared.Extract(extractItem.ValueString()))
		}
		var inject []shared.Inject = []shared.Inject{}
		for _, injectItem := range r.Config.Propagation.Inject {
			inject = append(inject, shared.Inject(injectItem.ValueString()))
		}
		propagation = &shared.Propagation{
			Clear:         clear,
			DefaultFormat: defaultFormat,
			Extract:       extract,
			Inject:        inject,
		}
	}
	var queue *shared.OpentelemetryPluginQueue
	if r.Config.Queue != nil {
		concurrencyLimit := new(shared.OpentelemetryPluginConcurrencyLimit)
		if !r.Config.Queue.ConcurrencyLimit.IsUnknown() && !r.Config.Queue.ConcurrencyLimit.IsNull() {
			*concurrencyLimit = shared.OpentelemetryPluginConcurrencyLimit(r.Config.Queue.ConcurrencyLimit.ValueInt64())
		} else {
			concurrencyLimit = nil
		}
		initialRetryDelay := new(float64)
		if !r.Config.Queue.InitialRetryDelay.IsUnknown() && !r.Config.Queue.InitialRetryDelay.IsNull() {
			*initialRetryDelay, _ = r.Config.Queue.InitialRetryDelay.ValueBigFloat().Float64()
		} else {
			initialRetryDelay = nil
		}
		maxBatchSize := new(int64)
		if !r.Config.Queue.MaxBatchSize.IsUnknown() && !r.Config.Queue.MaxBatchSize.IsNull() {
			*maxBatchSize = r.Config.Queue.MaxBatchSize.ValueInt64()
		} else {
			maxBatchSize = nil
		}
		maxBytes := new(int64)
		if !r.Config.Queue.MaxBytes.IsUnknown() && !r.Config.Queue.MaxBytes.IsNull() {
			*maxBytes = r.Config.Queue.MaxBytes.ValueInt64()
		} else {
			maxBytes = nil
		}
		maxCoalescingDelay := new(float64)
		if !r.Config.Queue.MaxCoalescingDelay.IsUnknown() && !r.Config.Queue.MaxCoalescingDelay.IsNull() {
			*maxCoalescingDelay, _ = r.Config.Queue.MaxCoalescingDelay.ValueBigFloat().Float64()
		} else {
			maxCoalescingDelay = nil
		}
		maxEntries := new(int64)
		if !r.Config.Queue.MaxEntries.IsUnknown() && !r.Config.Queue.MaxEntries.IsNull() {
			*maxEntries = r.Config.Queue.MaxEntries.ValueInt64()
		} else {
			maxEntries = nil
		}
		maxRetryDelay := new(float64)
		if !r.Config.Queue.MaxRetryDelay.IsUnknown() && !r.Config.Queue.MaxRetryDelay.IsNull() {
			*maxRetryDelay, _ = r.Config.Queue.MaxRetryDelay.ValueBigFloat().Float64()
		} else {
			maxRetryDelay = nil
		}
		maxRetryTime := new(float64)
		if !r.Config.Queue.MaxRetryTime.IsUnknown() && !r.Config.Queue.MaxRetryTime.IsNull() {
			*maxRetryTime, _ = r.Config.Queue.MaxRetryTime.ValueBigFloat().Float64()
		} else {
			maxRetryTime = nil
		}
		queue = &shared.OpentelemetryPluginQueue{
			ConcurrencyLimit:   concurrencyLimit,
			InitialRetryDelay:  initialRetryDelay,
			MaxBatchSize:       maxBatchSize,
			MaxBytes:           maxBytes,
			MaxCoalescingDelay: maxCoalescingDelay,
			MaxEntries:         maxEntries,
			MaxRetryDelay:      maxRetryDelay,
			MaxRetryTime:       maxRetryTime,
		}
	}
	readTimeout := new(int64)
	if !r.Config.ReadTimeout.IsUnknown() && !r.Config.ReadTimeout.IsNull() {
		*readTimeout = r.Config.ReadTimeout.ValueInt64()
	} else {
		readTimeout = nil
	}
	resourceAttributes := make(map[string]interface{})
	for resourceAttributesKey, resourceAttributesValue := range r.Config.ResourceAttributes {
		var resourceAttributesInst interface{}
		_ = json.Unmarshal([]byte(resourceAttributesValue.ValueString()), &resourceAttributesInst)
		resourceAttributes[resourceAttributesKey] = resourceAttributesInst
	}
	samplingRate := new(float64)
	if !r.Config.SamplingRate.IsUnknown() && !r.Config.SamplingRate.IsNull() {
		*samplingRate, _ = r.Config.SamplingRate.ValueBigFloat().Float64()
	} else {
		samplingRate = nil
	}
	sendTimeout := new(int64)
	if !r.Config.SendTimeout.IsUnknown() && !r.Config.SendTimeout.IsNull() {
		*sendTimeout = r.Config.SendTimeout.ValueInt64()
	} else {
		sendTimeout = nil
	}
	tracesEndpoint := new(string)
	if !r.Config.TracesEndpoint.IsUnknown() && !r.Config.TracesEndpoint.IsNull() {
		*tracesEndpoint = r.Config.TracesEndpoint.ValueString()
	} else {
		tracesEndpoint = nil
	}
	config := shared.OpentelemetryPluginConfig{
		BatchFlushDelay:              batchFlushDelay,
		BatchSpanCount:               batchSpanCount,
		ConnectTimeout:               connectTimeout,
		HeaderType:                   headerType,
		Headers:                      headers,
		HTTPResponseHeaderForTraceid: httpResponseHeaderForTraceid,
		LogsEndpoint:                 logsEndpoint,
		Propagation:                  propagation,
		Queue:                        queue,
		ReadTimeout:                  readTimeout,
		ResourceAttributes:           resourceAttributes,
		SamplingRate:                 samplingRate,
		SendTimeout:                  sendTimeout,
		TracesEndpoint:               tracesEndpoint,
	}
	var consumer *shared.OpentelemetryPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.OpentelemetryPluginConsumer{
			ID: id,
		}
	}
	var consumerGroup *shared.OpentelemetryPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id1 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id1 = r.ConsumerGroup.ID.ValueString()
		} else {
			id1 = nil
		}
		consumerGroup = &shared.OpentelemetryPluginConsumerGroup{
			ID: id1,
		}
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id2 := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id2 = r.ID.ValueString()
	} else {
		id2 = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.OpentelemetryPluginOrdering
	if r.Ordering != nil {
		var after *shared.OpentelemetryPluginAfter
		if r.Ordering.After != nil {
			var access []string = []string{}
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.OpentelemetryPluginAfter{
				Access: access,
			}
		}
		var before *shared.OpentelemetryPluginBefore
		if r.Ordering.Before != nil {
			var access1 []string = []string{}
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.OpentelemetryPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.OpentelemetryPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var protocols []shared.OpentelemetryPluginProtocols = []shared.OpentelemetryPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.OpentelemetryPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.OpentelemetryPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.OpentelemetryPluginRoute{
			ID: id3,
		}
	}
	var service *shared.OpentelemetryPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.OpentelemetryPluginService{
			ID: id4,
		}
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.OpentelemetryPluginInput{
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Enabled:       enabled,
		ID:            id2,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
		Tags:          tags,
	}
	return &out
}

func (r *GatewayPluginOpentelemetryResourceModel) RefreshFromSharedOpentelemetryPlugin(resp *shared.OpentelemetryPlugin) {
	if resp != nil {
		r.Config.BatchFlushDelay = types.Int64PointerValue(resp.Config.BatchFlushDelay)
		r.Config.BatchSpanCount = types.Int64PointerValue(resp.Config.BatchSpanCount)
		r.Config.ConnectTimeout = types.Int64PointerValue(resp.Config.ConnectTimeout)
		if resp.Config.HeaderType != nil {
			r.Config.HeaderType = types.StringValue(string(*resp.Config.HeaderType))
		} else {
			r.Config.HeaderType = types.StringNull()
		}
		if len(resp.Config.Headers) > 0 {
			r.Config.Headers = make(map[string]types.String)
			for key, value := range resp.Config.Headers {
				result, _ := json.Marshal(value)
				r.Config.Headers[key] = types.StringValue(string(result))
			}
		}
		r.Config.HTTPResponseHeaderForTraceid = types.StringPointerValue(resp.Config.HTTPResponseHeaderForTraceid)
		r.Config.LogsEndpoint = types.StringPointerValue(resp.Config.LogsEndpoint)
		if resp.Config.Propagation == nil {
			r.Config.Propagation = nil
		} else {
			r.Config.Propagation = &tfTypes.Propagation{}
			r.Config.Propagation.Clear = []types.String{}
			for _, v := range resp.Config.Propagation.Clear {
				r.Config.Propagation.Clear = append(r.Config.Propagation.Clear, types.StringValue(v))
			}
			r.Config.Propagation.DefaultFormat = types.StringValue(string(resp.Config.Propagation.DefaultFormat))
			r.Config.Propagation.Extract = []types.String{}
			for _, v := range resp.Config.Propagation.Extract {
				r.Config.Propagation.Extract = append(r.Config.Propagation.Extract, types.StringValue(string(v)))
			}
			r.Config.Propagation.Inject = []types.String{}
			for _, v := range resp.Config.Propagation.Inject {
				r.Config.Propagation.Inject = append(r.Config.Propagation.Inject, types.StringValue(string(v)))
			}
		}
		if resp.Config.Queue == nil {
			r.Config.Queue = nil
		} else {
			r.Config.Queue = &tfTypes.Queue{}
			if resp.Config.Queue.ConcurrencyLimit != nil {
				r.Config.Queue.ConcurrencyLimit = types.Int64Value(int64(*resp.Config.Queue.ConcurrencyLimit))
			} else {
				r.Config.Queue.ConcurrencyLimit = types.Int64Null()
			}
			if resp.Config.Queue.InitialRetryDelay != nil {
				r.Config.Queue.InitialRetryDelay = types.NumberValue(big.NewFloat(float64(*resp.Config.Queue.InitialRetryDelay)))
			} else {
				r.Config.Queue.InitialRetryDelay = types.NumberNull()
			}
			r.Config.Queue.MaxBatchSize = types.Int64PointerValue(resp.Config.Queue.MaxBatchSize)
			r.Config.Queue.MaxBytes = types.Int64PointerValue(resp.Config.Queue.MaxBytes)
			if resp.Config.Queue.MaxCoalescingDelay != nil {
				r.Config.Queue.MaxCoalescingDelay = types.NumberValue(big.NewFloat(float64(*resp.Config.Queue.MaxCoalescingDelay)))
			} else {
				r.Config.Queue.MaxCoalescingDelay = types.NumberNull()
			}
			r.Config.Queue.MaxEntries = types.Int64PointerValue(resp.Config.Queue.MaxEntries)
			if resp.Config.Queue.MaxRetryDelay != nil {
				r.Config.Queue.MaxRetryDelay = types.NumberValue(big.NewFloat(float64(*resp.Config.Queue.MaxRetryDelay)))
			} else {
				r.Config.Queue.MaxRetryDelay = types.NumberNull()
			}
			if resp.Config.Queue.MaxRetryTime != nil {
				r.Config.Queue.MaxRetryTime = types.NumberValue(big.NewFloat(float64(*resp.Config.Queue.MaxRetryTime)))
			} else {
				r.Config.Queue.MaxRetryTime = types.NumberNull()
			}
		}
		r.Config.ReadTimeout = types.Int64PointerValue(resp.Config.ReadTimeout)
		if len(resp.Config.ResourceAttributes) > 0 {
			r.Config.ResourceAttributes = make(map[string]types.String)
			for key1, value1 := range resp.Config.ResourceAttributes {
				result1, _ := json.Marshal(value1)
				r.Config.ResourceAttributes[key1] = types.StringValue(string(result1))
			}
		}
		if resp.Config.SamplingRate != nil {
			r.Config.SamplingRate = types.NumberValue(big.NewFloat(float64(*resp.Config.SamplingRate)))
		} else {
			r.Config.SamplingRate = types.NumberNull()
		}
		r.Config.SendTimeout = types.Int64PointerValue(resp.Config.SendTimeout)
		r.Config.TracesEndpoint = types.StringPointerValue(resp.Config.TracesEndpoint)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = []types.String{}
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = []types.String{}
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
