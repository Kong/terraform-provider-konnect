// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &MeshHealthCheckListDataSource{}
var _ datasource.DataSourceWithConfigure = &MeshHealthCheckListDataSource{}

func NewMeshHealthCheckListDataSource() datasource.DataSource {
	return &MeshHealthCheckListDataSource{}
}

// MeshHealthCheckListDataSource is the data source implementation.
type MeshHealthCheckListDataSource struct {
	client *sdk.Konnect
}

// MeshHealthCheckListDataSourceModel describes the data model.
type MeshHealthCheckListDataSourceModel struct {
	CpID  types.String                  `tfsdk:"cp_id"`
	Items []tfTypes.MeshHealthCheckItem `tfsdk:"items"`
	Key   types.String                  `tfsdk:"key"`
	Mesh  types.String                  `tfsdk:"mesh"`
	Next  types.String                  `tfsdk:"next"`
	Total types.Number                  `tfsdk:"total"`
	Value types.String                  `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *MeshHealthCheckListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_health_check_list"
}

// Schema defines the schema for the data source.
func (r *MeshHealthCheckListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshHealthCheckList DataSource",

		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the Konnect resource`,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"creation_time": schema.StringAttribute{
							Computed:    true,
							Description: `Time at which the resource was created`,
						},
						"labels": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `The labels to help identity resources`,
						},
						"mesh": schema.StringAttribute{
							Computed:    true,
							Description: `Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.`,
						},
						"modification_time": schema.StringAttribute{
							Computed:    true,
							Description: `Time at which the resource was updated`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name of the Kuma resource`,
						},
						"spec": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"target_ref": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Computed:    true,
											Description: `Kind of the referenced resource`,
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Computed:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
										},
										"section_name": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
										`The resource could be either a real store object or virtual resource` + "\n" +
										`defined inplace.`,
								},
								"to": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"default": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"always_log_health_check_failures": schema.BoolAttribute{
														Computed: true,
														MarkdownDescription: `If set to true, health check failure events will always be logged. If set` + "\n" +
															`to false, only the initial health check failure event will be logged. The` + "\n" +
															`default value is false.`,
													},
													"event_log_path": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Specifies the path to the file where Envoy can log health check events.` + "\n" +
															`If empty, no event log will be written.`,
													},
													"fail_traffic_on_panic": schema.BoolAttribute{
														Computed: true,
														MarkdownDescription: `If set to true, Envoy will not consider any hosts when the cluster is in` + "\n" +
															`'panic mode'. Instead, the cluster will fail all requests as if all hosts` + "\n" +
															`are unhealthy. This can help avoid potentially overwhelming a failing` + "\n" +
															`service.`,
													},
													"grpc": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"authority": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The value of the :authority header in the gRPC health check request,` + "\n" +
																	`by default name of the cluster this health check is associated with`,
															},
															"disabled": schema.BoolAttribute{
																Computed:    true,
																Description: `If true the GrpcHealthCheck is disabled`,
															},
															"service_name": schema.StringAttribute{
																Computed:    true,
																Description: `Service name parameter which will be sent to gRPC service`,
															},
														},
														MarkdownDescription: `GrpcHealthCheck defines gRPC configuration which will instruct the service` + "\n" +
															`the health check will be made for is a gRPC service.`,
													},
													"healthy_panic_threshold": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"integer": schema.Int64Attribute{
																Computed: true,
															},
															"str": schema.StringAttribute{
																Computed: true,
															},
														},
														MarkdownDescription: `Allows to configure panic threshold for Envoy cluster. If not specified,` + "\n" +
															`the default is 50%. To disable panic mode, set to 0%.` + "\n" +
															`Either int or decimal represented as string.`,
													},
													"healthy_threshold": schema.Int64Attribute{
														Computed: true,
														MarkdownDescription: `Number of consecutive healthy checks before considering a host healthy.` + "\n" +
															`If not specified then the default value is 1`,
													},
													"http": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"disabled": schema.BoolAttribute{
																Computed:    true,
																Description: `If true the HttpHealthCheck is disabled`,
															},
															"expected_statuses": schema.ListAttribute{
																Computed:    true,
																ElementType: types.Int64Type,
																Description: `List of HTTP response statuses which are considered healthy`,
															},
															"path": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The HTTP path which will be requested during the health check` + "\n" +
																	`(ie. /health)` + "\n" +
																	`If not specified then the default value is "/"`,
															},
															"request_headers_to_add": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"add": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"value": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																	"set": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"value": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																},
																MarkdownDescription: `The list of HTTP headers which should be added to each health check` + "\n" +
																	`request`,
															},
														},
														MarkdownDescription: `HttpHealthCheck defines HTTP configuration which will instruct the service` + "\n" +
															`the health check will be made for is an HTTP service.`,
													},
													"initial_jitter": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `If specified, Envoy will start health checking after a random time in` + "\n" +
															`ms between 0 and initialJitter. This only applies to the first health` + "\n" +
															`check.`,
													},
													"interval": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Interval between consecutive health checks.` + "\n" +
															`If not specified then the default value is 1m`,
													},
													"interval_jitter": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `If specified, during every interval Envoy will add IntervalJitter to the` + "\n" +
															`wait time.`,
													},
													"interval_jitter_percent": schema.Int64Attribute{
														Computed: true,
														MarkdownDescription: `If specified, during every interval Envoy will add IntervalJitter *` + "\n" +
															`IntervalJitterPercent / 100 to the wait time. If IntervalJitter and` + "\n" +
															`IntervalJitterPercent are both set, both of them will be used to` + "\n" +
															`increase the wait time.`,
													},
													"no_traffic_interval": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `The "no traffic interval" is a special health check interval that is used` + "\n" +
															`when a cluster has never had traffic routed to it. This lower interval` + "\n" +
															`allows cluster information to be kept up to date, without sending a` + "\n" +
															`potentially large amount of active health checking traffic for no reason.` + "\n" +
															`Once a cluster has been used for traffic routing, Envoy will shift back` + "\n" +
															`to using the standard health check interval that is defined. Note that` + "\n" +
															`this interval takes precedence over any other. The default value for "no` + "\n" +
															`traffic interval" is 60 seconds.`,
													},
													"reuse_connection": schema.BoolAttribute{
														Computed:    true,
														Description: `Reuse health check connection between health checks. Default is true.`,
													},
													"tcp": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"disabled": schema.BoolAttribute{
																Computed:    true,
																Description: `If true the TcpHealthCheck is disabled`,
															},
															"receive": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
																MarkdownDescription: `List of Base64 encoded blocks of strings expected as a response. When checking the response,` + "\n" +
																	`"fuzzy" matching is performed such that each block must be found, and` + "\n" +
																	`in the order specified, but not necessarily contiguous.` + "\n" +
																	`If not provided or empty, checks will be performed as "connect only" and be marked as successful when TCP connection is successfully established.`,
															},
															"send": schema.StringAttribute{
																Computed:    true,
																Description: `Base64 encoded content of the message which will be sent during the health check to the target`,
															},
														},
														MarkdownDescription: `TcpHealthCheck defines configuration for specifying bytes to send and` + "\n" +
															`expected response during the health check`,
													},
													"timeout": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Maximum time to wait for a health check response.` + "\n" +
															`If not specified then the default value is 15s`,
													},
													"unhealthy_threshold": schema.Int64Attribute{
														Computed: true,
														MarkdownDescription: `Number of consecutive unhealthy checks before considering a host` + "\n" +
															`unhealthy.` + "\n" +
															`If not specified then the default value is 5`,
													},
												},
												MarkdownDescription: `Default is a configuration specific to the group of destinations referenced in` + "\n" +
													`'targetRef'`,
											},
											"target_ref": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"kind": schema.StringAttribute{
														Computed:    true,
														Description: `Kind of the referenced resource`,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
															`Name and Namespace can be used.`,
													},
													"mesh": schema.StringAttribute{
														Computed:    true,
														Description: `Mesh is reserved for future use to identify cross mesh resources.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
															`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
													},
													"namespace": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
															`will be targeted.`,
													},
													"proxy_types": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
															`all data plane types are targeted by the policy.`,
													},
													"section_name": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
															`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
													},
													"tags": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
															`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
													},
												},
												MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
													`destinations.`,
											},
										},
									},
									Description: `To list makes a match between the consumed services and corresponding configurations`,
								},
							},
							Description: `Spec is the specification of the Kuma MeshHealthCheck resource.`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `the type of the resource`,
						},
					},
				},
			},
			"key": schema.StringAttribute{
				Optional: true,
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `name of the mesh`,
			},
			"next": schema.StringAttribute{
				Computed:    true,
				Description: `URL to the next page`,
			},
			"total": schema.NumberAttribute{
				Computed:    true,
				Description: `The total number of entities`,
			},
			"value": schema.StringAttribute{
				Optional: true,
			},
		},
	}
}

func (r *MeshHealthCheckListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshHealthCheckListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *MeshHealthCheckListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var filter *operations.GetMeshHealthCheckListQueryParamFilter
	key := new(string)
	if !data.Key.IsUnknown() && !data.Key.IsNull() {
		*key = data.Key.ValueString()
	} else {
		key = nil
	}
	value := new(string)
	if !data.Value.IsUnknown() && !data.Value.IsNull() {
		*value = data.Value.ValueString()
	} else {
		value = nil
	}
	filter = &operations.GetMeshHealthCheckListQueryParamFilter{
		Key:   key,
		Value: value,
	}
	var mesh string
	mesh = data.Mesh.ValueString()

	request := operations.GetMeshHealthCheckListRequest{
		CpID:   cpID,
		Filter: filter,
		Mesh:   mesh,
	}
	res, err := r.client.MeshHealthCheck.GetMeshHealthCheckList(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshHealthCheckList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshHealthCheckList(res.MeshHealthCheckList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
