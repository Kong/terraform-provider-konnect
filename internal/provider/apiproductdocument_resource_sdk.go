// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *APIProductDocumentResourceModel) ToSharedCreateAPIProductDocumentDTO(ctx context.Context) (*shared.CreateAPIProductDocumentDTO, diag.Diagnostics) {
	var diags diag.Diagnostics

	parentDocumentID := new(string)
	if !r.ParentDocumentID.IsUnknown() && !r.ParentDocumentID.IsNull() {
		*parentDocumentID = r.ParentDocumentID.ValueString()
	} else {
		parentDocumentID = nil
	}
	var slug string
	slug = r.Slug.ValueString()

	status := shared.PublishStatus(r.Status.ValueString())
	var title string
	title = r.Title.ValueString()

	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	var metadata *shared.Metadata
	if r.Metadata != nil {
		metadata = &shared.Metadata{}
	}
	out := shared.CreateAPIProductDocumentDTO{
		ParentDocumentID: parentDocumentID,
		Slug:             slug,
		Status:           status,
		Title:            title,
		Content:          content,
		Metadata:         metadata,
	}

	return &out, diags
}

func (r *APIProductDocumentResourceModel) ToOperationsCreateAPIProductDocumentRequest(ctx context.Context) (*operations.CreateAPIProductDocumentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiProductID string
	apiProductID = r.APIProductID.ValueString()

	createAPIProductDocumentDTO, createAPIProductDocumentDTODiags := r.ToSharedCreateAPIProductDocumentDTO(ctx)
	diags.Append(createAPIProductDocumentDTODiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAPIProductDocumentRequest{
		APIProductID:                apiProductID,
		CreateAPIProductDocumentDTO: *createAPIProductDocumentDTO,
	}

	return &out, diags
}

func (r *APIProductDocumentResourceModel) ToSharedUpdateAPIProductDocumentDTO(ctx context.Context) (*shared.UpdateAPIProductDocumentDTO, diag.Diagnostics) {
	var diags diag.Diagnostics

	parentDocumentID := new(string)
	if !r.ParentDocumentID.IsUnknown() && !r.ParentDocumentID.IsNull() {
		*parentDocumentID = r.ParentDocumentID.ValueString()
	} else {
		parentDocumentID = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	status := new(shared.PublishStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	var metadata *shared.UpdateAPIProductDocumentDTOMetadata
	if r.Metadata != nil {
		metadata = &shared.UpdateAPIProductDocumentDTOMetadata{}
	}
	out := shared.UpdateAPIProductDocumentDTO{
		ParentDocumentID: parentDocumentID,
		Slug:             slug,
		Status:           status,
		Title:            title,
		Content:          content,
		Metadata:         metadata,
	}

	return &out, diags
}

func (r *APIProductDocumentResourceModel) ToOperationsUpdateAPIProductDocumentRequest(ctx context.Context) (*operations.UpdateAPIProductDocumentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiProductID string
	apiProductID = r.APIProductID.ValueString()

	var id string
	id = r.ID.ValueString()

	updateAPIProductDocumentDTO, updateAPIProductDocumentDTODiags := r.ToSharedUpdateAPIProductDocumentDTO(ctx)
	diags.Append(updateAPIProductDocumentDTODiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAPIProductDocumentRequest{
		APIProductID:                apiProductID,
		ID:                          id,
		UpdateAPIProductDocumentDTO: *updateAPIProductDocumentDTO,
	}

	return &out, diags
}

func (r *APIProductDocumentResourceModel) ToOperationsGetAPIProductDocumentRequest(ctx context.Context) (*operations.GetAPIProductDocumentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiProductID string
	apiProductID = r.APIProductID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.GetAPIProductDocumentRequest{
		APIProductID: apiProductID,
		ID:           id,
	}

	return &out, diags
}

func (r *APIProductDocumentResourceModel) ToOperationsDeleteAPIProductDocumentRequest(ctx context.Context) (*operations.DeleteAPIProductDocumentRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiProductID string
	apiProductID = r.APIProductID.ValueString()

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteAPIProductDocumentRequest{
		APIProductID: apiProductID,
		ID:           id,
	}

	return &out, diags
}

func (r *APIProductDocumentResourceModel) RefreshFromSharedAPIProductDocument(ctx context.Context, resp *shared.APIProductDocument) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Content = types.StringValue(resp.Content)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		if r.Metadata == nil {
			r.Metadata = &tfTypes.Metadata{}
		}
		r.ParentDocumentID = types.StringPointerValue(resp.ParentDocumentID)
		r.Slug = types.StringValue(resp.Slug)
		r.Status = types.StringValue(string(resp.Status))
		r.Title = types.StringValue(resp.Title)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
