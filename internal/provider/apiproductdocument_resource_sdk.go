// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/customtypes/encodedstring"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *APIProductDocumentResourceModel) ToSharedCreateAPIProductDocumentDTO() *shared.CreateAPIProductDocumentDTO {
	parentDocumentID := new(string)
	if !r.ParentDocumentID.IsUnknown() && !r.ParentDocumentID.IsNull() {
		*parentDocumentID = r.ParentDocumentID.ValueString()
	} else {
		parentDocumentID = nil
	}
	var slug string
	slug = r.Slug.ValueString()

	status := shared.PublishStatus(r.Status.ValueString())
	var title string
	title = r.Title.ValueString()

	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	var metadata *shared.Metadata
	if r.Metadata != nil {
		metadata = &shared.Metadata{}
	}
	out := shared.CreateAPIProductDocumentDTO{
		ParentDocumentID: parentDocumentID,
		Slug:             slug,
		Status:           status,
		Title:            title,
		Content:          content,
		Metadata:         metadata,
	}
	return &out
}

func (r *APIProductDocumentResourceModel) RefreshFromSharedAPIProductDocument(ctx context.Context, resp *shared.APIProductDocument) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		contentValuable, contentDiags := encodedstring.Base64OrPlainInputType{}.ValueFromString(ctx, types.StringValue(resp.Content))
		diags.Append(contentDiags...)
		r.Content, _ = contentValuable.(encodedstring.Base64OrPlainInput)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		if r.Metadata == nil {
			r.Metadata = &tfTypes.Metadata{}
		}
		r.ParentDocumentID = types.StringPointerValue(resp.ParentDocumentID)
		r.Slug = types.StringValue(resp.Slug)
		r.Status = types.StringValue(string(resp.Status))
		r.Title = types.StringValue(resp.Title)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *APIProductDocumentResourceModel) ToSharedUpdateAPIProductDocumentDTO() *shared.UpdateAPIProductDocumentDTO {
	parentDocumentID := new(string)
	if !r.ParentDocumentID.IsUnknown() && !r.ParentDocumentID.IsNull() {
		*parentDocumentID = r.ParentDocumentID.ValueString()
	} else {
		parentDocumentID = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	status := new(shared.PublishStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	var metadata *shared.UpdateAPIProductDocumentDTOMetadata
	if r.Metadata != nil {
		metadata = &shared.UpdateAPIProductDocumentDTOMetadata{}
	}
	out := shared.UpdateAPIProductDocumentDTO{
		ParentDocumentID: parentDocumentID,
		Slug:             slug,
		Status:           status,
		Title:            title,
		Content:          content,
		Metadata:         metadata,
	}
	return &out
}
