// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *AuditLogResourceModel) ToSharedUpdateAuditLogWebhook() *shared.UpdateAuditLogWebhook {
	endpoint := new(string)
	if !r.Endpoint.IsUnknown() && !r.Endpoint.IsNull() {
		*endpoint = r.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	authorization := new(string)
	if !r.Authorization.IsUnknown() && !r.Authorization.IsNull() {
		*authorization = r.Authorization.ValueString()
	} else {
		authorization = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	logFormat := new(shared.UpdateAuditLogWebhookLogFormat)
	if !r.LogFormat.IsUnknown() && !r.LogFormat.IsNull() {
		*logFormat = shared.UpdateAuditLogWebhookLogFormat(r.LogFormat.ValueString())
	} else {
		logFormat = nil
	}
	skipSslVerification := new(bool)
	if !r.SkipSslVerification.IsUnknown() && !r.SkipSslVerification.IsNull() {
		*skipSslVerification = r.SkipSslVerification.ValueBool()
	} else {
		skipSslVerification = nil
	}
	out := shared.UpdateAuditLogWebhook{
		Endpoint:            endpoint,
		Authorization:       authorization,
		Enabled:             enabled,
		LogFormat:           logFormat,
		SkipSslVerification: skipSslVerification,
	}
	return &out
}

func (r *AuditLogResourceModel) RefreshFromSharedAuditLogWebhook(resp *shared.AuditLogWebhook) {
	if resp != nil {
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.Endpoint = types.StringPointerValue(resp.Endpoint)
		if resp.LogFormat != nil {
			r.LogFormat = types.StringValue(string(*resp.LogFormat))
		} else {
			r.LogFormat = types.StringNull()
		}
		r.SkipSslVerification = types.BoolPointerValue(resp.SkipSslVerification)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *AuditLogResourceModel) ToOperationsDeleteAuditLogWebhookRequestBody() *operations.DeleteAuditLogWebhookRequestBody {
	out := operations.DeleteAuditLogWebhookRequestBody{}
	return &out
}
