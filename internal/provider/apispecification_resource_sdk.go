// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *APISpecificationResourceModel) RefreshFromSharedAPISpecResponse(ctx context.Context, resp *shared.APISpecResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Content = types.StringValue(resp.Content)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.ID = types.StringValue(resp.ID)
		r.Type = types.StringValue(string(resp.Type))
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.ValidationMessages = []tfTypes.ValidationMessages{}

		for _, validationMessagesItem := range resp.ValidationMessages {
			var validationMessages tfTypes.ValidationMessages

			validationMessages.Message = types.StringValue(validationMessagesItem.Message)

			r.ValidationMessages = append(r.ValidationMessages, validationMessages)
		}
	}

	return diags
}

func (r *APISpecificationResourceModel) ToOperationsCreateAPISpecRequest(ctx context.Context) (*operations.CreateAPISpecRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	createAPISpecRequest, createAPISpecRequestDiags := r.ToSharedCreateAPISpecRequest(ctx)
	diags.Append(createAPISpecRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAPISpecRequest{
		APIID:                apiID,
		CreateAPISpecRequest: *createAPISpecRequest,
	}

	return &out, diags
}

func (r *APISpecificationResourceModel) ToOperationsDeleteAPISpecRequest(ctx context.Context) (*operations.DeleteAPISpecRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	out := operations.DeleteAPISpecRequest{
		APIID:  apiID,
		SpecID: specID,
	}

	return &out, diags
}

func (r *APISpecificationResourceModel) ToOperationsFetchAPISpecRequest(ctx context.Context) (*operations.FetchAPISpecRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	out := operations.FetchAPISpecRequest{
		APIID:  apiID,
		SpecID: specID,
	}

	return &out, diags
}

func (r *APISpecificationResourceModel) ToOperationsUpdateAPISpecRequest(ctx context.Context) (*operations.UpdateAPISpecRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.APIID.ValueString()

	var specID string
	specID = r.ID.ValueString()

	apiSpec, apiSpecDiags := r.ToSharedAPISpec(ctx)
	diags.Append(apiSpecDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAPISpecRequest{
		APIID:   apiID,
		SpecID:  specID,
		APISpec: *apiSpec,
	}

	return &out, diags
}

func (r *APISpecificationResourceModel) ToSharedAPISpec(ctx context.Context) (*shared.APISpec, diag.Diagnostics) {
	var diags diag.Diagnostics

	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	typeVar := new(shared.APISpecAPISpecType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.APISpecAPISpecType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.APISpec{
		Content: content,
		Type:    typeVar,
	}

	return &out, diags
}

func (r *APISpecificationResourceModel) ToSharedCreateAPISpecRequest(ctx context.Context) (*shared.CreateAPISpecRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var content string
	content = r.Content.ValueString()

	typeVar := new(shared.CreateAPISpecRequestAPISpecType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.CreateAPISpecRequestAPISpecType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	out := shared.CreateAPISpecRequest{
		Content: content,
		Type:    typeVar,
	}

	return &out, diags
}
