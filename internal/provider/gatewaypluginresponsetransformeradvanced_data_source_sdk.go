// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginResponseTransformerAdvancedDataSourceModel) ToOperationsGetResponsetransformeradvancedPluginRequest(ctx context.Context) (*operations.GetResponsetransformeradvancedPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetResponsetransformeradvancedPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginResponseTransformerAdvancedDataSourceModel) RefreshFromSharedResponseTransformerAdvancedPlugin(ctx context.Context, resp *shared.ResponseTransformerAdvancedPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.ResponseTransformerAdvancedPluginConfig{}
			if resp.Config.Add == nil {
				r.Config.Add = nil
			} else {
				r.Config.Add = &tfTypes.ResponseTransformerAdvancedPluginAdd{}
				r.Config.Add.Headers = make([]types.String, 0, len(resp.Config.Add.Headers))
				for _, v := range resp.Config.Add.Headers {
					r.Config.Add.Headers = append(r.Config.Add.Headers, types.StringValue(v))
				}
				r.Config.Add.IfStatus = make([]types.String, 0, len(resp.Config.Add.IfStatus))
				for _, v := range resp.Config.Add.IfStatus {
					r.Config.Add.IfStatus = append(r.Config.Add.IfStatus, types.StringValue(v))
				}
				r.Config.Add.JSON = make([]types.String, 0, len(resp.Config.Add.JSON))
				for _, v := range resp.Config.Add.JSON {
					r.Config.Add.JSON = append(r.Config.Add.JSON, types.StringValue(v))
				}
				r.Config.Add.JSONTypes = make([]types.String, 0, len(resp.Config.Add.JSONTypes))
				for _, v := range resp.Config.Add.JSONTypes {
					r.Config.Add.JSONTypes = append(r.Config.Add.JSONTypes, types.StringValue(string(v)))
				}
			}
			if resp.Config.Allow == nil {
				r.Config.Allow = nil
			} else {
				r.Config.Allow = &tfTypes.ResponseTransformerAdvancedPluginAllow{}
				r.Config.Allow.JSON = make([]types.String, 0, len(resp.Config.Allow.JSON))
				for _, v := range resp.Config.Allow.JSON {
					r.Config.Allow.JSON = append(r.Config.Allow.JSON, types.StringValue(v))
				}
			}
			if resp.Config.Append == nil {
				r.Config.Append = nil
			} else {
				r.Config.Append = &tfTypes.ResponseTransformerAdvancedPluginAdd{}
				r.Config.Append.Headers = make([]types.String, 0, len(resp.Config.Append.Headers))
				for _, v := range resp.Config.Append.Headers {
					r.Config.Append.Headers = append(r.Config.Append.Headers, types.StringValue(v))
				}
				r.Config.Append.IfStatus = make([]types.String, 0, len(resp.Config.Append.IfStatus))
				for _, v := range resp.Config.Append.IfStatus {
					r.Config.Append.IfStatus = append(r.Config.Append.IfStatus, types.StringValue(v))
				}
				r.Config.Append.JSON = make([]types.String, 0, len(resp.Config.Append.JSON))
				for _, v := range resp.Config.Append.JSON {
					r.Config.Append.JSON = append(r.Config.Append.JSON, types.StringValue(v))
				}
				r.Config.Append.JSONTypes = make([]types.String, 0, len(resp.Config.Append.JSONTypes))
				for _, v := range resp.Config.Append.JSONTypes {
					r.Config.Append.JSONTypes = append(r.Config.Append.JSONTypes, types.StringValue(string(v)))
				}
			}
			r.Config.DotsInKeys = types.BoolPointerValue(resp.Config.DotsInKeys)
			if resp.Config.Remove == nil {
				r.Config.Remove = nil
			} else {
				r.Config.Remove = &tfTypes.ResponseTransformerAdvancedPluginRemove{}
				r.Config.Remove.Headers = make([]types.String, 0, len(resp.Config.Remove.Headers))
				for _, v := range resp.Config.Remove.Headers {
					r.Config.Remove.Headers = append(r.Config.Remove.Headers, types.StringValue(v))
				}
				r.Config.Remove.IfStatus = make([]types.String, 0, len(resp.Config.Remove.IfStatus))
				for _, v := range resp.Config.Remove.IfStatus {
					r.Config.Remove.IfStatus = append(r.Config.Remove.IfStatus, types.StringValue(v))
				}
				r.Config.Remove.JSON = make([]types.String, 0, len(resp.Config.Remove.JSON))
				for _, v := range resp.Config.Remove.JSON {
					r.Config.Remove.JSON = append(r.Config.Remove.JSON, types.StringValue(v))
				}
			}
			if resp.Config.Rename == nil {
				r.Config.Rename = nil
			} else {
				r.Config.Rename = &tfTypes.ResponseTransformerAdvancedPluginRename{}
				r.Config.Rename.Headers = make([]types.String, 0, len(resp.Config.Rename.Headers))
				for _, v := range resp.Config.Rename.Headers {
					r.Config.Rename.Headers = append(r.Config.Rename.Headers, types.StringValue(v))
				}
				r.Config.Rename.IfStatus = make([]types.String, 0, len(resp.Config.Rename.IfStatus))
				for _, v := range resp.Config.Rename.IfStatus {
					r.Config.Rename.IfStatus = append(r.Config.Rename.IfStatus, types.StringValue(v))
				}
			}
			if resp.Config.Replace == nil {
				r.Config.Replace = nil
			} else {
				r.Config.Replace = &tfTypes.ResponseTransformerAdvancedPluginReplace{}
				r.Config.Replace.Body = types.StringPointerValue(resp.Config.Replace.Body)
				r.Config.Replace.Headers = make([]types.String, 0, len(resp.Config.Replace.Headers))
				for _, v := range resp.Config.Replace.Headers {
					r.Config.Replace.Headers = append(r.Config.Replace.Headers, types.StringValue(v))
				}
				r.Config.Replace.IfStatus = make([]types.String, 0, len(resp.Config.Replace.IfStatus))
				for _, v := range resp.Config.Replace.IfStatus {
					r.Config.Replace.IfStatus = append(r.Config.Replace.IfStatus, types.StringValue(v))
				}
				r.Config.Replace.JSON = make([]types.String, 0, len(resp.Config.Replace.JSON))
				for _, v := range resp.Config.Replace.JSON {
					r.Config.Replace.JSON = append(r.Config.Replace.JSON, types.StringValue(v))
				}
				r.Config.Replace.JSONTypes = make([]types.String, 0, len(resp.Config.Replace.JSONTypes))
				for _, v := range resp.Config.Replace.JSONTypes {
					r.Config.Replace.JSONTypes = append(r.Config.Replace.JSONTypes, types.StringValue(string(v)))
				}
			}
			if resp.Config.Transform == nil {
				r.Config.Transform = nil
			} else {
				r.Config.Transform = &tfTypes.Transform{}
				r.Config.Transform.Functions = make([]types.String, 0, len(resp.Config.Transform.Functions))
				for _, v := range resp.Config.Transform.Functions {
					r.Config.Transform.Functions = append(r.Config.Transform.Functions, types.StringValue(v))
				}
				r.Config.Transform.IfStatus = make([]types.String, 0, len(resp.Config.Transform.IfStatus))
				for _, v := range resp.Config.Transform.IfStatus {
					r.Config.Transform.IfStatus = append(r.Config.Transform.IfStatus, types.StringValue(v))
				}
				r.Config.Transform.JSON = make([]types.String, 0, len(resp.Config.Transform.JSON))
				for _, v := range resp.Config.Transform.JSON {
					r.Config.Transform.JSON = append(r.Config.Transform.JSON, types.StringValue(v))
				}
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
