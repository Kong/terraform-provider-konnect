// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *SystemAccountAccessTokenResourceModel) RefreshFromSharedSystemAccountAccessToken(ctx context.Context, resp *shared.SystemAccountAccessToken) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ExpiresAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ExpiresAt))
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUsedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsedAt))
		r.Name = types.StringPointerValue(resp.Name)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *SystemAccountAccessTokenResourceModel) RefreshFromSharedSystemAccountAccessTokenCreated(ctx context.Context, resp *shared.SystemAccountAccessTokenCreated) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.ExpiresAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.ExpiresAt))
		r.ID = types.StringPointerValue(resp.ID)
		r.LastUsedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastUsedAt))
		r.Name = types.StringPointerValue(resp.Name)
		r.Token = types.StringPointerValue(resp.Token)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *SystemAccountAccessTokenResourceModel) ToOperationsDeleteSystemAccountsIDAccessTokensIDRequest(ctx context.Context) (*operations.DeleteSystemAccountsIDAccessTokensIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accountID string
	accountID = r.AccountID.ValueString()

	var tokenID string
	tokenID = r.ID.ValueString()

	out := operations.DeleteSystemAccountsIDAccessTokensIDRequest{
		AccountID: accountID,
		TokenID:   tokenID,
	}

	return &out, diags
}

func (r *SystemAccountAccessTokenResourceModel) ToOperationsGetSystemAccountsIDAccessTokensIDRequest(ctx context.Context) (*operations.GetSystemAccountsIDAccessTokensIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accountID string
	accountID = r.AccountID.ValueString()

	var tokenID string
	tokenID = r.ID.ValueString()

	out := operations.GetSystemAccountsIDAccessTokensIDRequest{
		AccountID: accountID,
		TokenID:   tokenID,
	}

	return &out, diags
}

func (r *SystemAccountAccessTokenResourceModel) ToOperationsPatchSystemAccountsIDAccessTokensIDRequest(ctx context.Context) (*operations.PatchSystemAccountsIDAccessTokensIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accountID string
	accountID = r.AccountID.ValueString()

	var tokenID string
	tokenID = r.ID.ValueString()

	updateSystemAccountAccessToken, updateSystemAccountAccessTokenDiags := r.ToSharedUpdateSystemAccountAccessToken(ctx)
	diags.Append(updateSystemAccountAccessTokenDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PatchSystemAccountsIDAccessTokensIDRequest{
		AccountID:                      accountID,
		TokenID:                        tokenID,
		UpdateSystemAccountAccessToken: updateSystemAccountAccessToken,
	}

	return &out, diags
}

func (r *SystemAccountAccessTokenResourceModel) ToOperationsPostSystemAccountsIDAccessTokensRequest(ctx context.Context) (*operations.PostSystemAccountsIDAccessTokensRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var accountID string
	accountID = r.AccountID.ValueString()

	createSystemAccountAccessToken, createSystemAccountAccessTokenDiags := r.ToSharedCreateSystemAccountAccessToken(ctx)
	diags.Append(createSystemAccountAccessTokenDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PostSystemAccountsIDAccessTokensRequest{
		AccountID:                      accountID,
		CreateSystemAccountAccessToken: createSystemAccountAccessToken,
	}

	return &out, diags
}

func (r *SystemAccountAccessTokenResourceModel) ToSharedCreateSystemAccountAccessToken(ctx context.Context) (*shared.CreateSystemAccountAccessToken, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	expiresAt := new(time.Time)
	if !r.ExpiresAt.IsUnknown() && !r.ExpiresAt.IsNull() {
		*expiresAt, _ = time.Parse(time.RFC3339Nano, r.ExpiresAt.ValueString())
	} else {
		expiresAt = nil
	}
	out := shared.CreateSystemAccountAccessToken{
		Name:      name,
		ExpiresAt: expiresAt,
	}

	return &out, diags
}

func (r *SystemAccountAccessTokenResourceModel) ToSharedUpdateSystemAccountAccessToken(ctx context.Context) (*shared.UpdateSystemAccountAccessToken, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.UpdateSystemAccountAccessToken{
		Name: name,
	}

	return &out, diags
}
