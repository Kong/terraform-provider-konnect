// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *GatewayPluginAiProxyAdvancedDataSourceModel) RefreshFromSharedAiProxyAdvancedPlugin(resp *shared.AiProxyAdvancedPlugin) {
	if resp != nil {
		if resp.Config.Balancer == nil {
			r.Config.Balancer = nil
		} else {
			r.Config.Balancer = &tfTypes.Balancer{}
			if resp.Config.Balancer.Algorithm != nil {
				r.Config.Balancer.Algorithm = types.StringValue(string(*resp.Config.Balancer.Algorithm))
			} else {
				r.Config.Balancer.Algorithm = types.StringNull()
			}
			r.Config.Balancer.ConnectTimeout = types.Int64PointerValue(resp.Config.Balancer.ConnectTimeout)
			r.Config.Balancer.HashOnHeader = types.StringPointerValue(resp.Config.Balancer.HashOnHeader)
			if resp.Config.Balancer.LatencyStrategy != nil {
				r.Config.Balancer.LatencyStrategy = types.StringValue(string(*resp.Config.Balancer.LatencyStrategy))
			} else {
				r.Config.Balancer.LatencyStrategy = types.StringNull()
			}
			r.Config.Balancer.ReadTimeout = types.Int64PointerValue(resp.Config.Balancer.ReadTimeout)
			r.Config.Balancer.Retries = types.Int64PointerValue(resp.Config.Balancer.Retries)
			r.Config.Balancer.Slots = types.Int64PointerValue(resp.Config.Balancer.Slots)
			if resp.Config.Balancer.TokensCountStrategy != nil {
				r.Config.Balancer.TokensCountStrategy = types.StringValue(string(*resp.Config.Balancer.TokensCountStrategy))
			} else {
				r.Config.Balancer.TokensCountStrategy = types.StringNull()
			}
			r.Config.Balancer.WriteTimeout = types.Int64PointerValue(resp.Config.Balancer.WriteTimeout)
		}
		if resp.Config.Embeddings == nil {
			r.Config.Embeddings = nil
		} else {
			r.Config.Embeddings = &tfTypes.Embeddings{}
			if resp.Config.Embeddings.Auth == nil {
				r.Config.Embeddings.Auth = nil
			} else {
				r.Config.Embeddings.Auth = &tfTypes.Auth{}
				r.Config.Embeddings.Auth.AllowOverride = types.BoolPointerValue(resp.Config.Embeddings.Auth.AllowOverride)
				r.Config.Embeddings.Auth.AwsAccessKeyID = types.StringPointerValue(resp.Config.Embeddings.Auth.AwsAccessKeyID)
				r.Config.Embeddings.Auth.AwsSecretAccessKey = types.StringPointerValue(resp.Config.Embeddings.Auth.AwsSecretAccessKey)
				r.Config.Embeddings.Auth.AzureClientID = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureClientID)
				r.Config.Embeddings.Auth.AzureClientSecret = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureClientSecret)
				r.Config.Embeddings.Auth.AzureTenantID = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureTenantID)
				r.Config.Embeddings.Auth.AzureUseManagedIdentity = types.BoolPointerValue(resp.Config.Embeddings.Auth.AzureUseManagedIdentity)
				r.Config.Embeddings.Auth.GcpServiceAccountJSON = types.StringPointerValue(resp.Config.Embeddings.Auth.GcpServiceAccountJSON)
				r.Config.Embeddings.Auth.GcpUseServiceAccount = types.BoolPointerValue(resp.Config.Embeddings.Auth.GcpUseServiceAccount)
				r.Config.Embeddings.Auth.HeaderName = types.StringPointerValue(resp.Config.Embeddings.Auth.HeaderName)
				r.Config.Embeddings.Auth.HeaderValue = types.StringPointerValue(resp.Config.Embeddings.Auth.HeaderValue)
				if resp.Config.Embeddings.Auth.ParamLocation != nil {
					r.Config.Embeddings.Auth.ParamLocation = types.StringValue(string(*resp.Config.Embeddings.Auth.ParamLocation))
				} else {
					r.Config.Embeddings.Auth.ParamLocation = types.StringNull()
				}
				r.Config.Embeddings.Auth.ParamName = types.StringPointerValue(resp.Config.Embeddings.Auth.ParamName)
				r.Config.Embeddings.Auth.ParamValue = types.StringPointerValue(resp.Config.Embeddings.Auth.ParamValue)
			}
			r.Config.Embeddings.Model.Name = types.StringValue(resp.Config.Embeddings.Model.Name)
			if resp.Config.Embeddings.Model.Options == nil {
				r.Config.Embeddings.Model.Options = nil
			} else {
				r.Config.Embeddings.Model.Options = &tfTypes.AiProxyAdvancedPluginOptions{}
				r.Config.Embeddings.Model.Options.UpstreamURL = types.StringPointerValue(resp.Config.Embeddings.Model.Options.UpstreamURL)
			}
			r.Config.Embeddings.Model.Provider = types.StringValue(string(resp.Config.Embeddings.Model.Provider))
		}
		r.Config.MaxRequestBodySize = types.Int64PointerValue(resp.Config.MaxRequestBodySize)
		r.Config.ModelNameHeader = types.BoolPointerValue(resp.Config.ModelNameHeader)
		if resp.Config.ResponseStreaming != nil {
			r.Config.ResponseStreaming = types.StringValue(string(*resp.Config.ResponseStreaming))
		} else {
			r.Config.ResponseStreaming = types.StringNull()
		}
		r.Config.Targets = []tfTypes.Targets{}
		if len(r.Config.Targets) > len(resp.Config.Targets) {
			r.Config.Targets = r.Config.Targets[:len(resp.Config.Targets)]
		}
		for targetsCount, targetsItem := range resp.Config.Targets {
			var targets1 tfTypes.Targets
			if targetsItem.Auth == nil {
				targets1.Auth = nil
			} else {
				targets1.Auth = &tfTypes.Auth{}
				targets1.Auth.AllowOverride = types.BoolPointerValue(targetsItem.Auth.AllowOverride)
				targets1.Auth.AwsAccessKeyID = types.StringPointerValue(targetsItem.Auth.AwsAccessKeyID)
				targets1.Auth.AwsSecretAccessKey = types.StringPointerValue(targetsItem.Auth.AwsSecretAccessKey)
				targets1.Auth.AzureClientID = types.StringPointerValue(targetsItem.Auth.AzureClientID)
				targets1.Auth.AzureClientSecret = types.StringPointerValue(targetsItem.Auth.AzureClientSecret)
				targets1.Auth.AzureTenantID = types.StringPointerValue(targetsItem.Auth.AzureTenantID)
				targets1.Auth.AzureUseManagedIdentity = types.BoolPointerValue(targetsItem.Auth.AzureUseManagedIdentity)
				targets1.Auth.GcpServiceAccountJSON = types.StringPointerValue(targetsItem.Auth.GcpServiceAccountJSON)
				targets1.Auth.GcpUseServiceAccount = types.BoolPointerValue(targetsItem.Auth.GcpUseServiceAccount)
				targets1.Auth.HeaderName = types.StringPointerValue(targetsItem.Auth.HeaderName)
				targets1.Auth.HeaderValue = types.StringPointerValue(targetsItem.Auth.HeaderValue)
				if targetsItem.Auth.ParamLocation != nil {
					targets1.Auth.ParamLocation = types.StringValue(string(*targetsItem.Auth.ParamLocation))
				} else {
					targets1.Auth.ParamLocation = types.StringNull()
				}
				targets1.Auth.ParamName = types.StringPointerValue(targetsItem.Auth.ParamName)
				targets1.Auth.ParamValue = types.StringPointerValue(targetsItem.Auth.ParamValue)
			}
			targets1.Description = types.StringPointerValue(targetsItem.Description)
			targets1.Logging.LogPayloads = types.BoolPointerValue(targetsItem.Logging.LogPayloads)
			targets1.Logging.LogStatistics = types.BoolPointerValue(targetsItem.Logging.LogStatistics)
			targets1.Model.Name = types.StringPointerValue(targetsItem.Model.Name)
			if targetsItem.Model.Options == nil {
				targets1.Model.Options = nil
			} else {
				targets1.Model.Options = &tfTypes.OptionsObj{}
				targets1.Model.Options.AnthropicVersion = types.StringPointerValue(targetsItem.Model.Options.AnthropicVersion)
				targets1.Model.Options.AzureAPIVersion = types.StringPointerValue(targetsItem.Model.Options.AzureAPIVersion)
				targets1.Model.Options.AzureDeploymentID = types.StringPointerValue(targetsItem.Model.Options.AzureDeploymentID)
				targets1.Model.Options.AzureInstance = types.StringPointerValue(targetsItem.Model.Options.AzureInstance)
				if targetsItem.Model.Options.Bedrock == nil {
					targets1.Model.Options.Bedrock = nil
				} else {
					targets1.Model.Options.Bedrock = &tfTypes.Bedrock{}
					targets1.Model.Options.Bedrock.AwsRegion = types.StringPointerValue(targetsItem.Model.Options.Bedrock.AwsRegion)
				}
				if targetsItem.Model.Options.Gemini == nil {
					targets1.Model.Options.Gemini = nil
				} else {
					targets1.Model.Options.Gemini = &tfTypes.Gemini{}
					targets1.Model.Options.Gemini.APIEndpoint = types.StringPointerValue(targetsItem.Model.Options.Gemini.APIEndpoint)
					targets1.Model.Options.Gemini.LocationID = types.StringPointerValue(targetsItem.Model.Options.Gemini.LocationID)
					targets1.Model.Options.Gemini.ProjectID = types.StringPointerValue(targetsItem.Model.Options.Gemini.ProjectID)
				}
				if targetsItem.Model.Options.Huggingface == nil {
					targets1.Model.Options.Huggingface = nil
				} else {
					targets1.Model.Options.Huggingface = &tfTypes.Huggingface{}
					targets1.Model.Options.Huggingface.UseCache = types.BoolPointerValue(targetsItem.Model.Options.Huggingface.UseCache)
					targets1.Model.Options.Huggingface.WaitForModel = types.BoolPointerValue(targetsItem.Model.Options.Huggingface.WaitForModel)
				}
				if targetsItem.Model.Options.InputCost != nil {
					targets1.Model.Options.InputCost = types.NumberValue(big.NewFloat(float64(*targetsItem.Model.Options.InputCost)))
				} else {
					targets1.Model.Options.InputCost = types.NumberNull()
				}
				if targetsItem.Model.Options.Llama2Format != nil {
					targets1.Model.Options.Llama2Format = types.StringValue(string(*targetsItem.Model.Options.Llama2Format))
				} else {
					targets1.Model.Options.Llama2Format = types.StringNull()
				}
				targets1.Model.Options.MaxTokens = types.Int64PointerValue(targetsItem.Model.Options.MaxTokens)
				if targetsItem.Model.Options.MistralFormat != nil {
					targets1.Model.Options.MistralFormat = types.StringValue(string(*targetsItem.Model.Options.MistralFormat))
				} else {
					targets1.Model.Options.MistralFormat = types.StringNull()
				}
				if targetsItem.Model.Options.OutputCost != nil {
					targets1.Model.Options.OutputCost = types.NumberValue(big.NewFloat(float64(*targetsItem.Model.Options.OutputCost)))
				} else {
					targets1.Model.Options.OutputCost = types.NumberNull()
				}
				if targetsItem.Model.Options.Temperature != nil {
					targets1.Model.Options.Temperature = types.NumberValue(big.NewFloat(float64(*targetsItem.Model.Options.Temperature)))
				} else {
					targets1.Model.Options.Temperature = types.NumberNull()
				}
				targets1.Model.Options.TopK = types.Int64PointerValue(targetsItem.Model.Options.TopK)
				if targetsItem.Model.Options.TopP != nil {
					targets1.Model.Options.TopP = types.NumberValue(big.NewFloat(float64(*targetsItem.Model.Options.TopP)))
				} else {
					targets1.Model.Options.TopP = types.NumberNull()
				}
				targets1.Model.Options.UpstreamPath = types.StringPointerValue(targetsItem.Model.Options.UpstreamPath)
				targets1.Model.Options.UpstreamURL = types.StringPointerValue(targetsItem.Model.Options.UpstreamURL)
			}
			targets1.Model.Provider = types.StringValue(string(targetsItem.Model.Provider))
			targets1.RouteType = types.StringValue(string(targetsItem.RouteType))
			targets1.Weight = types.Int64PointerValue(targetsItem.Weight)
			if targetsCount+1 > len(r.Config.Targets) {
				r.Config.Targets = append(r.Config.Targets, targets1)
			} else {
				r.Config.Targets[targetsCount].Auth = targets1.Auth
				r.Config.Targets[targetsCount].Description = targets1.Description
				r.Config.Targets[targetsCount].Logging = targets1.Logging
				r.Config.Targets[targetsCount].Model = targets1.Model
				r.Config.Targets[targetsCount].RouteType = targets1.RouteType
				r.Config.Targets[targetsCount].Weight = targets1.Weight
			}
		}
		if resp.Config.Vectordb == nil {
			r.Config.Vectordb = nil
		} else {
			r.Config.Vectordb = &tfTypes.Vectordb{}
			r.Config.Vectordb.Dimensions = types.Int64Value(resp.Config.Vectordb.Dimensions)
			r.Config.Vectordb.DistanceMetric = types.StringValue(string(resp.Config.Vectordb.DistanceMetric))
			r.Config.Vectordb.Redis.ClusterMaxRedirections = types.Int64PointerValue(resp.Config.Vectordb.Redis.ClusterMaxRedirections)
			r.Config.Vectordb.Redis.ClusterNodes = []tfTypes.AiProxyAdvancedPluginClusterNodes{}
			if len(r.Config.Vectordb.Redis.ClusterNodes) > len(resp.Config.Vectordb.Redis.ClusterNodes) {
				r.Config.Vectordb.Redis.ClusterNodes = r.Config.Vectordb.Redis.ClusterNodes[:len(resp.Config.Vectordb.Redis.ClusterNodes)]
			}
			for clusterNodesCount, clusterNodesItem := range resp.Config.Vectordb.Redis.ClusterNodes {
				var clusterNodes1 tfTypes.AiProxyAdvancedPluginClusterNodes
				clusterNodes1.IP = types.StringPointerValue(clusterNodesItem.IP)
				clusterNodes1.Port = types.Int64PointerValue(clusterNodesItem.Port)
				if clusterNodesCount+1 > len(r.Config.Vectordb.Redis.ClusterNodes) {
					r.Config.Vectordb.Redis.ClusterNodes = append(r.Config.Vectordb.Redis.ClusterNodes, clusterNodes1)
				} else {
					r.Config.Vectordb.Redis.ClusterNodes[clusterNodesCount].IP = clusterNodes1.IP
					r.Config.Vectordb.Redis.ClusterNodes[clusterNodesCount].Port = clusterNodes1.Port
				}
			}
			r.Config.Vectordb.Redis.ConnectTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.ConnectTimeout)
			r.Config.Vectordb.Redis.ConnectionIsProxied = types.BoolPointerValue(resp.Config.Vectordb.Redis.ConnectionIsProxied)
			r.Config.Vectordb.Redis.Database = types.Int64PointerValue(resp.Config.Vectordb.Redis.Database)
			r.Config.Vectordb.Redis.Host = types.StringPointerValue(resp.Config.Vectordb.Redis.Host)
			r.Config.Vectordb.Redis.KeepaliveBacklog = types.Int64PointerValue(resp.Config.Vectordb.Redis.KeepaliveBacklog)
			r.Config.Vectordb.Redis.KeepalivePoolSize = types.Int64PointerValue(resp.Config.Vectordb.Redis.KeepalivePoolSize)
			r.Config.Vectordb.Redis.Password = types.StringPointerValue(resp.Config.Vectordb.Redis.Password)
			r.Config.Vectordb.Redis.Port = types.Int64PointerValue(resp.Config.Vectordb.Redis.Port)
			r.Config.Vectordb.Redis.ReadTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.ReadTimeout)
			r.Config.Vectordb.Redis.SendTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.SendTimeout)
			r.Config.Vectordb.Redis.SentinelMaster = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelMaster)
			r.Config.Vectordb.Redis.SentinelNodes = []tfTypes.AiProxyAdvancedPluginSentinelNodes{}
			if len(r.Config.Vectordb.Redis.SentinelNodes) > len(resp.Config.Vectordb.Redis.SentinelNodes) {
				r.Config.Vectordb.Redis.SentinelNodes = r.Config.Vectordb.Redis.SentinelNodes[:len(resp.Config.Vectordb.Redis.SentinelNodes)]
			}
			for sentinelNodesCount, sentinelNodesItem := range resp.Config.Vectordb.Redis.SentinelNodes {
				var sentinelNodes1 tfTypes.AiProxyAdvancedPluginSentinelNodes
				sentinelNodes1.Host = types.StringPointerValue(sentinelNodesItem.Host)
				sentinelNodes1.Port = types.Int64PointerValue(sentinelNodesItem.Port)
				if sentinelNodesCount+1 > len(r.Config.Vectordb.Redis.SentinelNodes) {
					r.Config.Vectordb.Redis.SentinelNodes = append(r.Config.Vectordb.Redis.SentinelNodes, sentinelNodes1)
				} else {
					r.Config.Vectordb.Redis.SentinelNodes[sentinelNodesCount].Host = sentinelNodes1.Host
					r.Config.Vectordb.Redis.SentinelNodes[sentinelNodesCount].Port = sentinelNodes1.Port
				}
			}
			r.Config.Vectordb.Redis.SentinelPassword = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelPassword)
			if resp.Config.Vectordb.Redis.SentinelRole != nil {
				r.Config.Vectordb.Redis.SentinelRole = types.StringValue(string(*resp.Config.Vectordb.Redis.SentinelRole))
			} else {
				r.Config.Vectordb.Redis.SentinelRole = types.StringNull()
			}
			r.Config.Vectordb.Redis.SentinelUsername = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelUsername)
			r.Config.Vectordb.Redis.ServerName = types.StringPointerValue(resp.Config.Vectordb.Redis.ServerName)
			r.Config.Vectordb.Redis.Ssl = types.BoolPointerValue(resp.Config.Vectordb.Redis.Ssl)
			r.Config.Vectordb.Redis.SslVerify = types.BoolPointerValue(resp.Config.Vectordb.Redis.SslVerify)
			r.Config.Vectordb.Redis.Username = types.StringPointerValue(resp.Config.Vectordb.Redis.Username)
			r.Config.Vectordb.Strategy = types.StringValue(string(resp.Config.Vectordb.Strategy))
			r.Config.Vectordb.Threshold = types.NumberValue(big.NewFloat(float64(resp.Config.Vectordb.Threshold)))
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering != nil {
			r.Ordering = make(map[string]types.String, len(resp.Ordering))
			for key, value := range resp.Ordering {
				r.Ordering[key] = types.StringValue(value)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
