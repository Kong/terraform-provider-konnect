// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &AuditLogDestinationDataSource{}
var _ datasource.DataSourceWithConfigure = &AuditLogDestinationDataSource{}

func NewAuditLogDestinationDataSource() datasource.DataSource {
	return &AuditLogDestinationDataSource{}
}

// AuditLogDestinationDataSource is the data source implementation.
type AuditLogDestinationDataSource struct {
	client *sdk.Konnect
}

// AuditLogDestinationDataSourceModel describes the data model.
type AuditLogDestinationDataSourceModel struct {
	CreatedAt           types.String `tfsdk:"created_at"`
	Endpoint            types.String `tfsdk:"endpoint"`
	ID                  types.String `tfsdk:"id"`
	LogFormat           types.String `tfsdk:"log_format"`
	Name                types.String `tfsdk:"name"`
	SkipSslVerification types.Bool   `tfsdk:"skip_ssl_verification"`
	UpdatedAt           types.String `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *AuditLogDestinationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_audit_log_destination"
}

// Schema defines the schema for the data source.
func (r *AuditLogDestinationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "AuditLogDestination DataSource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when this webhook was created.`,
			},
			"endpoint": schema.StringAttribute{
				Computed:    true,
				Description: `The endpoint that will receive audit log messages.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The unique ID of the audit log destination.`,
			},
			"log_format": schema.StringAttribute{
				Computed:    true,
				Description: `The output format of each log messages.`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the audit log destination.`,
			},
			"skip_ssl_verification": schema.BoolAttribute{
				Computed:    true,
				Description: `Indicates if the SSL certificate verification of the host endpoint should be skipped when delivering payloads.`,
			},
			"updated_at": schema.StringAttribute{
				Computed:    true,
				Description: `Timestamp when this webhook was last updated. Initial value is 0001-01-01T00:00:0Z.`,
			},
		},
	}
}

func (r *AuditLogDestinationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *AuditLogDestinationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *AuditLogDestinationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetAuditLogDestinationRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.AuditLogs.GetAuditLogDestination(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.AuditLogDestination != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedAuditLogDestination(ctx, res.AuditLogDestination)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
