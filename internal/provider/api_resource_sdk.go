// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *APIResourceModel) RefreshFromSharedAPIResponseSchema(ctx context.Context, resp *shared.APIResponseSchema) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.APISpecIds = make([]types.String, 0, len(resp.APISpecIds))
		for _, v := range resp.APISpecIds {
			r.APISpecIds = append(r.APISpecIds, types.StringValue(v))
		}
		if resp.Attributes == nil {
			r.Attributes = jsontypes.NewNormalizedNull()
		} else {
			attributesResult, _ := json.Marshal(resp.Attributes)
			r.Attributes = jsontypes.NewNormalizedValue(string(attributesResult))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.Portals = []tfTypes.Portals{}

		for _, portalsItem := range resp.Portals {
			var portals tfTypes.Portals

			portals.DisplayName = types.StringValue(portalsItem.DisplayName)
			portals.ID = types.StringValue(portalsItem.ID)
			portals.Name = types.StringValue(portalsItem.Name)

			r.Portals = append(r.Portals, portals)
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Version = types.StringPointerValue(resp.Version)
	}

	return diags
}

func (r *APIResourceModel) ToOperationsDeleteAPIRequest(ctx context.Context) (*operations.DeleteAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.ID.ValueString()

	out := operations.DeleteAPIRequest{
		APIID: apiID,
	}

	return &out, diags
}

func (r *APIResourceModel) ToOperationsFetchAPIRequest(ctx context.Context) (*operations.FetchAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.ID.ValueString()

	out := operations.FetchAPIRequest{
		APIID: apiID,
	}

	return &out, diags
}

func (r *APIResourceModel) ToOperationsUpdateAPIRequest(ctx context.Context) (*operations.UpdateAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var apiID string
	apiID = r.ID.ValueString()

	updateAPIRequest, updateAPIRequestDiags := r.ToSharedUpdateAPIRequest(ctx)
	diags.Append(updateAPIRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAPIRequest{
		APIID:            apiID,
		UpdateAPIRequest: *updateAPIRequest,
	}

	return &out, diags
}

func (r *APIResourceModel) ToSharedCreateAPIRequest(ctx context.Context) (*shared.CreateAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	var attributes interface{}
	if !r.Attributes.IsUnknown() && !r.Attributes.IsNull() {
		_ = json.Unmarshal([]byte(r.Attributes.ValueString()), &attributes)
	}
	specContent := new(string)
	if !r.SpecContent.IsUnknown() && !r.SpecContent.IsNull() {
		*specContent = r.SpecContent.ValueString()
	} else {
		specContent = nil
	}
	out := shared.CreateAPIRequest{
		Name:        name,
		Description: description,
		Version:     version,
		Slug:        slug,
		Labels:      labels,
		Attributes:  attributes,
		SpecContent: specContent,
	}

	return &out, diags
}

func (r *APIResourceModel) ToSharedUpdateAPIRequest(ctx context.Context) (*shared.UpdateAPIRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	var attributes interface{}
	if !r.Attributes.IsUnknown() && !r.Attributes.IsNull() {
		_ = json.Unmarshal([]byte(r.Attributes.ValueString()), &attributes)
	}
	out := shared.UpdateAPIRequest{
		Name:        name,
		Description: description,
		Version:     version,
		Slug:        slug,
		Labels:      labels,
		Attributes:  attributes,
	}

	return &out, diags
}
