// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *PortalSnippetResourceModel) RefreshFromSharedPortalSnippetResponse(ctx context.Context, resp *shared.PortalSnippetResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Content = types.StringValue(resp.Content)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.Status = types.StringValue(string(resp.Status))
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Visibility = types.StringValue(string(resp.Visibility))
	}

	return diags
}

func (r *PortalSnippetResourceModel) ToOperationsCreatePortalSnippetRequest(ctx context.Context) (*operations.CreatePortalSnippetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	createPortalSnippetRequest, createPortalSnippetRequestDiags := r.ToSharedCreatePortalSnippetRequest(ctx)
	diags.Append(createPortalSnippetRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePortalSnippetRequest{
		PortalID:                   portalID,
		CreatePortalSnippetRequest: *createPortalSnippetRequest,
	}

	return &out, diags
}

func (r *PortalSnippetResourceModel) ToOperationsDeletePortalSnippetRequest(ctx context.Context) (*operations.DeletePortalSnippetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	var snippetID string
	snippetID = r.ID.ValueString()

	out := operations.DeletePortalSnippetRequest{
		PortalID:  portalID,
		SnippetID: snippetID,
	}

	return &out, diags
}

func (r *PortalSnippetResourceModel) ToOperationsGetPortalSnippetRequest(ctx context.Context) (*operations.GetPortalSnippetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	var snippetID string
	snippetID = r.ID.ValueString()

	out := operations.GetPortalSnippetRequest{
		PortalID:  portalID,
		SnippetID: snippetID,
	}

	return &out, diags
}

func (r *PortalSnippetResourceModel) ToOperationsUpdatePortalSnippetRequest(ctx context.Context) (*operations.UpdatePortalSnippetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	var snippetID string
	snippetID = r.ID.ValueString()

	updatePortalSnippetRequest, updatePortalSnippetRequestDiags := r.ToSharedUpdatePortalSnippetRequest(ctx)
	diags.Append(updatePortalSnippetRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePortalSnippetRequest{
		PortalID:                   portalID,
		SnippetID:                  snippetID,
		UpdatePortalSnippetRequest: *updatePortalSnippetRequest,
	}

	return &out, diags
}

func (r *PortalSnippetResourceModel) ToSharedCreatePortalSnippetRequest(ctx context.Context) (*shared.CreatePortalSnippetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	var content string
	content = r.Content.ValueString()

	visibility := new(shared.SnippetVisibilityStatus)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.SnippetVisibilityStatus(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	status := new(shared.PublishedStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishedStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.CreatePortalSnippetRequest{
		Name:        name,
		Title:       title,
		Content:     content,
		Visibility:  visibility,
		Status:      status,
		Description: description,
	}

	return &out, diags
}

func (r *PortalSnippetResourceModel) ToSharedUpdatePortalSnippetRequest(ctx context.Context) (*shared.UpdatePortalSnippetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	visibility := new(shared.VisibilityStatus)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.VisibilityStatus(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	status := new(shared.PublishedStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishedStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.UpdatePortalSnippetRequest{
		Name:        name,
		Title:       title,
		Content:     content,
		Visibility:  visibility,
		Status:      status,
		Description: description,
	}

	return &out, diags
}
