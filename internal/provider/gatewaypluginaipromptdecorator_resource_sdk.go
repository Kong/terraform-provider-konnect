// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
)

func (r *GatewayPluginAIPromptDecoratorResourceModel) ToSharedCreateAIPromptDecoratorPlugin() *shared.CreateAIPromptDecoratorPlugin {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var protocols []shared.CreateAIPromptDecoratorPluginProtocols = []shared.CreateAIPromptDecoratorPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.CreateAIPromptDecoratorPluginProtocols(protocolsItem.ValueString()))
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var consumer *shared.CreateAIPromptDecoratorPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateAIPromptDecoratorPluginConsumer{
			ID: id,
		}
	}
	var route *shared.CreateAIPromptDecoratorPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.CreateAIPromptDecoratorPluginRoute{
			ID: id1,
		}
	}
	var service *shared.CreateAIPromptDecoratorPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.CreateAIPromptDecoratorPluginService{
			ID: id2,
		}
	}
	var prompts *shared.Prompts
	if r.Config.Prompts != nil {
		var prepend []shared.Prepend = []shared.Prepend{}
		for _, prependItem := range r.Config.Prompts.Prepend {
			role := new(shared.Role)
			if !prependItem.Role.IsUnknown() && !prependItem.Role.IsNull() {
				*role = shared.Role(prependItem.Role.ValueString())
			} else {
				role = nil
			}
			content := new(string)
			if !prependItem.Content.IsUnknown() && !prependItem.Content.IsNull() {
				*content = prependItem.Content.ValueString()
			} else {
				content = nil
			}
			prepend = append(prepend, shared.Prepend{
				Role:    role,
				Content: content,
			})
		}
		var append1 []shared.CreateAIPromptDecoratorPluginAppend = []shared.CreateAIPromptDecoratorPluginAppend{}
		for _, appendItem := range r.Config.Prompts.Append {
			role1 := new(shared.CreateAIPromptDecoratorPluginRole)
			if !appendItem.Role.IsUnknown() && !appendItem.Role.IsNull() {
				*role1 = shared.CreateAIPromptDecoratorPluginRole(appendItem.Role.ValueString())
			} else {
				role1 = nil
			}
			content1 := new(string)
			if !appendItem.Content.IsUnknown() && !appendItem.Content.IsNull() {
				*content1 = appendItem.Content.ValueString()
			} else {
				content1 = nil
			}
			append1 = append(append1, shared.CreateAIPromptDecoratorPluginAppend{
				Role:    role1,
				Content: content1,
			})
		}
		prompts = &shared.Prompts{
			Prepend: prepend,
			Append:  append1,
		}
	}
	config := shared.CreateAIPromptDecoratorPluginConfig{
		Prompts: prompts,
	}
	out := shared.CreateAIPromptDecoratorPlugin{
		Enabled:   enabled,
		Protocols: protocols,
		Tags:      tags,
		Consumer:  consumer,
		Route:     route,
		Service:   service,
		Config:    config,
	}
	return &out
}

func (r *GatewayPluginAIPromptDecoratorResourceModel) RefreshFromSharedAIPromptDecoratorPlugin(resp *shared.AIPromptDecoratorPlugin) {
	if resp != nil {
		if resp.Config.Prompts == nil {
			r.Config.Prompts = nil
		} else {
			r.Config.Prompts = &tfTypes.Prompts{}
			if len(r.Config.Prompts.Append) > len(resp.Config.Prompts.Append) {
				r.Config.Prompts.Append = r.Config.Prompts.Append[:len(resp.Config.Prompts.Append)]
			}
			for appendCount, appendItem := range resp.Config.Prompts.Append {
				var append2 tfTypes.AIPromptDecoratorPluginAppend
				append2.Content = types.StringPointerValue(appendItem.Content)
				if appendItem.Role != nil {
					append2.Role = types.StringValue(string(*appendItem.Role))
				} else {
					append2.Role = types.StringNull()
				}
				if appendCount+1 > len(r.Config.Prompts.Append) {
					r.Config.Prompts.Append = append(r.Config.Prompts.Append, append2)
				} else {
					r.Config.Prompts.Append[appendCount].Content = append2.Content
					r.Config.Prompts.Append[appendCount].Role = append2.Role
				}
			}
			if len(r.Config.Prompts.Prepend) > len(resp.Config.Prompts.Prepend) {
				r.Config.Prompts.Prepend = r.Config.Prompts.Prepend[:len(resp.Config.Prompts.Prepend)]
			}
			for prependCount, prependItem := range resp.Config.Prompts.Prepend {
				var prepend1 tfTypes.AIPromptDecoratorPluginAppend
				prepend1.Content = types.StringPointerValue(prependItem.Content)
				if prependItem.Role != nil {
					prepend1.Role = types.StringValue(string(*prependItem.Role))
				} else {
					prepend1.Role = types.StringNull()
				}
				if prependCount+1 > len(r.Config.Prompts.Prepend) {
					r.Config.Prompts.Prepend = append(r.Config.Prompts.Prepend, prepend1)
				} else {
					r.Config.Prompts.Prepend[prependCount].Content = prepend1.Content
					r.Config.Prompts.Prepend[prependCount].Role = prepend1.Role
				}
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}
}
