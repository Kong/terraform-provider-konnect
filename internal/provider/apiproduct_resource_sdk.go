// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"math/big"
	"time"
)

func (r *APIProductResourceModel) ToSharedCreateAPIProductDTO() *shared.CreateAPIProductDTO {
	name := r.Name.ValueString()
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := labelsValue.ValueString()
		labels[labelsKey] = labelsInst
	}
	var portalIds []string = []string{}
	for _, portalIdsItem := range r.PortalIds {
		portalIds = append(portalIds, portalIdsItem.ValueString())
	}
	out := shared.CreateAPIProductDTO{
		Name:        name,
		Description: description,
		Labels:      labels,
		PortalIds:   portalIds,
	}
	return &out
}

func (r *APIProductResourceModel) RefreshFromSharedAPIProduct(resp *shared.APIProduct) {
	if resp != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.PortalIds = []types.String{}
		for _, v := range resp.PortalIds {
			r.PortalIds = append(r.PortalIds, types.StringValue(v))
		}
		r.Portals = []tfTypes.APIProductPortal{}
		if len(r.Portals) > len(resp.Portals) {
			r.Portals = r.Portals[:len(resp.Portals)]
		}
		for portalsCount, portalsItem := range resp.Portals {
			var portals1 tfTypes.APIProductPortal
			portals1.PortalID = types.StringValue(portalsItem.PortalID)
			portals1.PortalName = types.StringValue(portalsItem.PortalName)
			if portalsCount+1 > len(r.Portals) {
				r.Portals = append(r.Portals, portals1)
			} else {
				r.Portals[portalsCount].PortalID = portals1.PortalID
				r.Portals[portalsCount].PortalName = portals1.PortalName
			}
		}
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		r.VersionCount = types.NumberValue(big.NewFloat(float64(resp.VersionCount)))
	}
}

func (r *APIProductResourceModel) ToSharedUpdateAPIProductDTO() *shared.UpdateAPIProductDTO {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := labelsValue.ValueString()
		labels[labelsKey] = labelsInst
	}
	var portalIds []string = []string{}
	for _, portalIdsItem := range r.PortalIds {
		portalIds = append(portalIds, portalIdsItem.ValueString())
	}
	out := shared.UpdateAPIProductDTO{
		Name:        name,
		Description: description,
		Labels:      labels,
		PortalIds:   portalIds,
	}
	return &out
}
