// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginAiSemanticCacheResourceModel) RefreshFromSharedAiSemanticCachePlugin(ctx context.Context, resp *shared.AiSemanticCachePlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.CacheControl = types.BoolPointerValue(resp.Config.CacheControl)
		r.Config.CacheTTL = types.Int64PointerValue(resp.Config.CacheTTL)
		if resp.Config.Embeddings.Auth == nil {
			r.Config.Embeddings.Auth = nil
		} else {
			r.Config.Embeddings.Auth = &tfTypes.Auth{}
			r.Config.Embeddings.Auth.AllowOverride = types.BoolPointerValue(resp.Config.Embeddings.Auth.AllowOverride)
			r.Config.Embeddings.Auth.AwsAccessKeyID = types.StringPointerValue(resp.Config.Embeddings.Auth.AwsAccessKeyID)
			r.Config.Embeddings.Auth.AwsSecretAccessKey = types.StringPointerValue(resp.Config.Embeddings.Auth.AwsSecretAccessKey)
			r.Config.Embeddings.Auth.AzureClientID = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureClientID)
			r.Config.Embeddings.Auth.AzureClientSecret = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureClientSecret)
			r.Config.Embeddings.Auth.AzureTenantID = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureTenantID)
			r.Config.Embeddings.Auth.AzureUseManagedIdentity = types.BoolPointerValue(resp.Config.Embeddings.Auth.AzureUseManagedIdentity)
			r.Config.Embeddings.Auth.GcpServiceAccountJSON = types.StringPointerValue(resp.Config.Embeddings.Auth.GcpServiceAccountJSON)
			r.Config.Embeddings.Auth.GcpUseServiceAccount = types.BoolPointerValue(resp.Config.Embeddings.Auth.GcpUseServiceAccount)
			r.Config.Embeddings.Auth.HeaderName = types.StringPointerValue(resp.Config.Embeddings.Auth.HeaderName)
			r.Config.Embeddings.Auth.HeaderValue = types.StringPointerValue(resp.Config.Embeddings.Auth.HeaderValue)
			if resp.Config.Embeddings.Auth.ParamLocation != nil {
				r.Config.Embeddings.Auth.ParamLocation = types.StringValue(string(*resp.Config.Embeddings.Auth.ParamLocation))
			} else {
				r.Config.Embeddings.Auth.ParamLocation = types.StringNull()
			}
			r.Config.Embeddings.Auth.ParamName = types.StringPointerValue(resp.Config.Embeddings.Auth.ParamName)
			r.Config.Embeddings.Auth.ParamValue = types.StringPointerValue(resp.Config.Embeddings.Auth.ParamValue)
		}
		r.Config.Embeddings.Model.Name = types.StringValue(resp.Config.Embeddings.Model.Name)
		if resp.Config.Embeddings.Model.Options == nil {
			r.Config.Embeddings.Model.Options = nil
		} else {
			r.Config.Embeddings.Model.Options = &tfTypes.AiProxyAdvancedPluginOptions{}
			r.Config.Embeddings.Model.Options.Azure.APIVersion = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Azure.APIVersion)
			r.Config.Embeddings.Model.Options.Azure.DeploymentID = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Azure.DeploymentID)
			r.Config.Embeddings.Model.Options.Azure.Instance = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Azure.Instance)
			if resp.Config.Embeddings.Model.Options.Bedrock == nil {
				r.Config.Embeddings.Model.Options.Bedrock = nil
			} else {
				r.Config.Embeddings.Model.Options.Bedrock = &tfTypes.Bedrock{}
				r.Config.Embeddings.Model.Options.Bedrock.AwsAssumeRoleArn = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Bedrock.AwsAssumeRoleArn)
				r.Config.Embeddings.Model.Options.Bedrock.AwsRegion = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Bedrock.AwsRegion)
				r.Config.Embeddings.Model.Options.Bedrock.AwsRoleSessionName = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Bedrock.AwsRoleSessionName)
				r.Config.Embeddings.Model.Options.Bedrock.AwsStsEndpointURL = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Bedrock.AwsStsEndpointURL)
				r.Config.Embeddings.Model.Options.Bedrock.EmbeddingsNormalize = types.BoolPointerValue(resp.Config.Embeddings.Model.Options.Bedrock.EmbeddingsNormalize)
				r.Config.Embeddings.Model.Options.Bedrock.PerformanceConfigLatency = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Bedrock.PerformanceConfigLatency)
			}
			if resp.Config.Embeddings.Model.Options.Gemini == nil {
				r.Config.Embeddings.Model.Options.Gemini = nil
			} else {
				r.Config.Embeddings.Model.Options.Gemini = &tfTypes.Gemini{}
				r.Config.Embeddings.Model.Options.Gemini.APIEndpoint = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Gemini.APIEndpoint)
				r.Config.Embeddings.Model.Options.Gemini.LocationID = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Gemini.LocationID)
				r.Config.Embeddings.Model.Options.Gemini.ProjectID = types.StringPointerValue(resp.Config.Embeddings.Model.Options.Gemini.ProjectID)
			}
			if resp.Config.Embeddings.Model.Options.Huggingface == nil {
				r.Config.Embeddings.Model.Options.Huggingface = nil
			} else {
				r.Config.Embeddings.Model.Options.Huggingface = &tfTypes.Huggingface{}
				r.Config.Embeddings.Model.Options.Huggingface.UseCache = types.BoolPointerValue(resp.Config.Embeddings.Model.Options.Huggingface.UseCache)
				r.Config.Embeddings.Model.Options.Huggingface.WaitForModel = types.BoolPointerValue(resp.Config.Embeddings.Model.Options.Huggingface.WaitForModel)
			}
			r.Config.Embeddings.Model.Options.UpstreamURL = types.StringPointerValue(resp.Config.Embeddings.Model.Options.UpstreamURL)
		}
		r.Config.Embeddings.Model.Provider = types.StringValue(string(resp.Config.Embeddings.Model.Provider))
		r.Config.ExactCaching = types.BoolPointerValue(resp.Config.ExactCaching)
		r.Config.IgnoreAssistantPrompts = types.BoolPointerValue(resp.Config.IgnoreAssistantPrompts)
		r.Config.IgnoreSystemPrompts = types.BoolPointerValue(resp.Config.IgnoreSystemPrompts)
		r.Config.IgnoreToolPrompts = types.BoolPointerValue(resp.Config.IgnoreToolPrompts)
		if resp.Config.LlmFormat != nil {
			r.Config.LlmFormat = types.StringValue(string(*resp.Config.LlmFormat))
		} else {
			r.Config.LlmFormat = types.StringNull()
		}
		r.Config.MessageCountback = types.Float64PointerValue(resp.Config.MessageCountback)
		r.Config.StopOnFailure = types.BoolPointerValue(resp.Config.StopOnFailure)
		r.Config.Vectordb.Dimensions = types.Int64Value(resp.Config.Vectordb.Dimensions)
		r.Config.Vectordb.DistanceMetric = types.StringValue(string(resp.Config.Vectordb.DistanceMetric))
		if resp.Config.Vectordb.Pgvector == nil {
			r.Config.Vectordb.Pgvector = nil
		} else {
			r.Config.Vectordb.Pgvector = &tfTypes.Pgvector{}
			r.Config.Vectordb.Pgvector.Database = types.StringPointerValue(resp.Config.Vectordb.Pgvector.Database)
			r.Config.Vectordb.Pgvector.Host = types.StringPointerValue(resp.Config.Vectordb.Pgvector.Host)
			r.Config.Vectordb.Pgvector.Password = types.StringPointerValue(resp.Config.Vectordb.Pgvector.Password)
			r.Config.Vectordb.Pgvector.Port = types.Int64PointerValue(resp.Config.Vectordb.Pgvector.Port)
			r.Config.Vectordb.Pgvector.Ssl = types.BoolPointerValue(resp.Config.Vectordb.Pgvector.Ssl)
			r.Config.Vectordb.Pgvector.SslCert = types.StringPointerValue(resp.Config.Vectordb.Pgvector.SslCert)
			r.Config.Vectordb.Pgvector.SslCertKey = types.StringPointerValue(resp.Config.Vectordb.Pgvector.SslCertKey)
			r.Config.Vectordb.Pgvector.SslRequired = types.BoolPointerValue(resp.Config.Vectordb.Pgvector.SslRequired)
			r.Config.Vectordb.Pgvector.SslVerify = types.BoolPointerValue(resp.Config.Vectordb.Pgvector.SslVerify)
			if resp.Config.Vectordb.Pgvector.SslVersion != nil {
				r.Config.Vectordb.Pgvector.SslVersion = types.StringValue(string(*resp.Config.Vectordb.Pgvector.SslVersion))
			} else {
				r.Config.Vectordb.Pgvector.SslVersion = types.StringNull()
			}
			r.Config.Vectordb.Pgvector.Timeout = types.Float64PointerValue(resp.Config.Vectordb.Pgvector.Timeout)
			r.Config.Vectordb.Pgvector.User = types.StringPointerValue(resp.Config.Vectordb.Pgvector.User)
		}
		if resp.Config.Vectordb.Redis == nil {
			r.Config.Vectordb.Redis = nil
		} else {
			r.Config.Vectordb.Redis = &tfTypes.AiProxyAdvancedPluginRedis{}
			r.Config.Vectordb.Redis.ClusterMaxRedirections = types.Int64PointerValue(resp.Config.Vectordb.Redis.ClusterMaxRedirections)
			if resp.Config.Vectordb.Redis.ClusterNodes != nil {
				r.Config.Vectordb.Redis.ClusterNodes = []tfTypes.PartialRedisEeClusterNodes{}

				for _, clusterNodesItem := range resp.Config.Vectordb.Redis.ClusterNodes {
					var clusterNodes tfTypes.PartialRedisEeClusterNodes

					clusterNodes.IP = types.StringPointerValue(clusterNodesItem.IP)
					clusterNodes.Port = types.Int64PointerValue(clusterNodesItem.Port)

					r.Config.Vectordb.Redis.ClusterNodes = append(r.Config.Vectordb.Redis.ClusterNodes, clusterNodes)
				}
			}
			r.Config.Vectordb.Redis.ConnectTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.ConnectTimeout)
			r.Config.Vectordb.Redis.ConnectionIsProxied = types.BoolPointerValue(resp.Config.Vectordb.Redis.ConnectionIsProxied)
			r.Config.Vectordb.Redis.Database = types.Int64PointerValue(resp.Config.Vectordb.Redis.Database)
			r.Config.Vectordb.Redis.Host = types.StringPointerValue(resp.Config.Vectordb.Redis.Host)
			r.Config.Vectordb.Redis.KeepaliveBacklog = types.Int64PointerValue(resp.Config.Vectordb.Redis.KeepaliveBacklog)
			r.Config.Vectordb.Redis.KeepalivePoolSize = types.Int64PointerValue(resp.Config.Vectordb.Redis.KeepalivePoolSize)
			r.Config.Vectordb.Redis.Password = types.StringPointerValue(resp.Config.Vectordb.Redis.Password)
			r.Config.Vectordb.Redis.Port = types.Int64PointerValue(resp.Config.Vectordb.Redis.Port)
			r.Config.Vectordb.Redis.ReadTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.ReadTimeout)
			r.Config.Vectordb.Redis.SendTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.SendTimeout)
			r.Config.Vectordb.Redis.SentinelMaster = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelMaster)
			if resp.Config.Vectordb.Redis.SentinelNodes != nil {
				r.Config.Vectordb.Redis.SentinelNodes = []tfTypes.PartialRedisEeSentinelNodes{}

				for _, sentinelNodesItem := range resp.Config.Vectordb.Redis.SentinelNodes {
					var sentinelNodes tfTypes.PartialRedisEeSentinelNodes

					sentinelNodes.Host = types.StringPointerValue(sentinelNodesItem.Host)
					sentinelNodes.Port = types.Int64PointerValue(sentinelNodesItem.Port)

					r.Config.Vectordb.Redis.SentinelNodes = append(r.Config.Vectordb.Redis.SentinelNodes, sentinelNodes)
				}
			}
			r.Config.Vectordb.Redis.SentinelPassword = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelPassword)
			if resp.Config.Vectordb.Redis.SentinelRole != nil {
				r.Config.Vectordb.Redis.SentinelRole = types.StringValue(string(*resp.Config.Vectordb.Redis.SentinelRole))
			} else {
				r.Config.Vectordb.Redis.SentinelRole = types.StringNull()
			}
			r.Config.Vectordb.Redis.SentinelUsername = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelUsername)
			r.Config.Vectordb.Redis.ServerName = types.StringPointerValue(resp.Config.Vectordb.Redis.ServerName)
			r.Config.Vectordb.Redis.Ssl = types.BoolPointerValue(resp.Config.Vectordb.Redis.Ssl)
			r.Config.Vectordb.Redis.SslVerify = types.BoolPointerValue(resp.Config.Vectordb.Redis.SslVerify)
			r.Config.Vectordb.Redis.Username = types.StringPointerValue(resp.Config.Vectordb.Redis.Username)
		}
		r.Config.Vectordb.Strategy = types.StringValue(string(resp.Config.Vectordb.Strategy))
		r.Config.Vectordb.Threshold = types.Float64Value(resp.Config.Vectordb.Threshold)
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.Set{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginAiSemanticCacheResourceModel) ToOperationsCreateAisemanticcachePluginRequest(ctx context.Context) (*operations.CreateAisemanticcachePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiSemanticCachePlugin, aiSemanticCachePluginDiags := r.ToSharedAiSemanticCachePlugin(ctx)
	diags.Append(aiSemanticCachePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAisemanticcachePluginRequest{
		ControlPlaneID:        controlPlaneID,
		AiSemanticCachePlugin: *aiSemanticCachePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiSemanticCacheResourceModel) ToOperationsDeleteAisemanticcachePluginRequest(ctx context.Context) (*operations.DeleteAisemanticcachePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAisemanticcachePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiSemanticCacheResourceModel) ToOperationsGetAisemanticcachePluginRequest(ctx context.Context) (*operations.GetAisemanticcachePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAisemanticcachePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiSemanticCacheResourceModel) ToOperationsUpdateAisemanticcachePluginRequest(ctx context.Context) (*operations.UpdateAisemanticcachePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiSemanticCachePlugin, aiSemanticCachePluginDiags := r.ToSharedAiSemanticCachePlugin(ctx)
	diags.Append(aiSemanticCachePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAisemanticcachePluginRequest{
		PluginID:              pluginID,
		ControlPlaneID:        controlPlaneID,
		AiSemanticCachePlugin: *aiSemanticCachePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiSemanticCacheResourceModel) ToSharedAiSemanticCachePlugin(ctx context.Context) (*shared.AiSemanticCachePlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AiSemanticCachePluginOrdering
	if r.Ordering != nil {
		var after *shared.AiSemanticCachePluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AiSemanticCachePluginAfter{
				Access: access,
			}
		}
		var before *shared.AiSemanticCachePluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AiSemanticCachePluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AiSemanticCachePluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AiSemanticCachePluginPartials
	if r.Partials != nil {
		partials = make([]shared.AiSemanticCachePluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AiSemanticCachePluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	cacheControl := new(bool)
	if !r.Config.CacheControl.IsUnknown() && !r.Config.CacheControl.IsNull() {
		*cacheControl = r.Config.CacheControl.ValueBool()
	} else {
		cacheControl = nil
	}
	cacheTTL := new(int64)
	if !r.Config.CacheTTL.IsUnknown() && !r.Config.CacheTTL.IsNull() {
		*cacheTTL = r.Config.CacheTTL.ValueInt64()
	} else {
		cacheTTL = nil
	}
	var auth *shared.AiSemanticCachePluginAuth
	if r.Config.Embeddings.Auth != nil {
		allowOverride := new(bool)
		if !r.Config.Embeddings.Auth.AllowOverride.IsUnknown() && !r.Config.Embeddings.Auth.AllowOverride.IsNull() {
			*allowOverride = r.Config.Embeddings.Auth.AllowOverride.ValueBool()
		} else {
			allowOverride = nil
		}
		awsAccessKeyID := new(string)
		if !r.Config.Embeddings.Auth.AwsAccessKeyID.IsUnknown() && !r.Config.Embeddings.Auth.AwsAccessKeyID.IsNull() {
			*awsAccessKeyID = r.Config.Embeddings.Auth.AwsAccessKeyID.ValueString()
		} else {
			awsAccessKeyID = nil
		}
		awsSecretAccessKey := new(string)
		if !r.Config.Embeddings.Auth.AwsSecretAccessKey.IsUnknown() && !r.Config.Embeddings.Auth.AwsSecretAccessKey.IsNull() {
			*awsSecretAccessKey = r.Config.Embeddings.Auth.AwsSecretAccessKey.ValueString()
		} else {
			awsSecretAccessKey = nil
		}
		azureClientID := new(string)
		if !r.Config.Embeddings.Auth.AzureClientID.IsUnknown() && !r.Config.Embeddings.Auth.AzureClientID.IsNull() {
			*azureClientID = r.Config.Embeddings.Auth.AzureClientID.ValueString()
		} else {
			azureClientID = nil
		}
		azureClientSecret := new(string)
		if !r.Config.Embeddings.Auth.AzureClientSecret.IsUnknown() && !r.Config.Embeddings.Auth.AzureClientSecret.IsNull() {
			*azureClientSecret = r.Config.Embeddings.Auth.AzureClientSecret.ValueString()
		} else {
			azureClientSecret = nil
		}
		azureTenantID := new(string)
		if !r.Config.Embeddings.Auth.AzureTenantID.IsUnknown() && !r.Config.Embeddings.Auth.AzureTenantID.IsNull() {
			*azureTenantID = r.Config.Embeddings.Auth.AzureTenantID.ValueString()
		} else {
			azureTenantID = nil
		}
		azureUseManagedIdentity := new(bool)
		if !r.Config.Embeddings.Auth.AzureUseManagedIdentity.IsUnknown() && !r.Config.Embeddings.Auth.AzureUseManagedIdentity.IsNull() {
			*azureUseManagedIdentity = r.Config.Embeddings.Auth.AzureUseManagedIdentity.ValueBool()
		} else {
			azureUseManagedIdentity = nil
		}
		gcpServiceAccountJSON := new(string)
		if !r.Config.Embeddings.Auth.GcpServiceAccountJSON.IsUnknown() && !r.Config.Embeddings.Auth.GcpServiceAccountJSON.IsNull() {
			*gcpServiceAccountJSON = r.Config.Embeddings.Auth.GcpServiceAccountJSON.ValueString()
		} else {
			gcpServiceAccountJSON = nil
		}
		gcpUseServiceAccount := new(bool)
		if !r.Config.Embeddings.Auth.GcpUseServiceAccount.IsUnknown() && !r.Config.Embeddings.Auth.GcpUseServiceAccount.IsNull() {
			*gcpUseServiceAccount = r.Config.Embeddings.Auth.GcpUseServiceAccount.ValueBool()
		} else {
			gcpUseServiceAccount = nil
		}
		headerName := new(string)
		if !r.Config.Embeddings.Auth.HeaderName.IsUnknown() && !r.Config.Embeddings.Auth.HeaderName.IsNull() {
			*headerName = r.Config.Embeddings.Auth.HeaderName.ValueString()
		} else {
			headerName = nil
		}
		headerValue := new(string)
		if !r.Config.Embeddings.Auth.HeaderValue.IsUnknown() && !r.Config.Embeddings.Auth.HeaderValue.IsNull() {
			*headerValue = r.Config.Embeddings.Auth.HeaderValue.ValueString()
		} else {
			headerValue = nil
		}
		paramLocation := new(shared.AiSemanticCachePluginParamLocation)
		if !r.Config.Embeddings.Auth.ParamLocation.IsUnknown() && !r.Config.Embeddings.Auth.ParamLocation.IsNull() {
			*paramLocation = shared.AiSemanticCachePluginParamLocation(r.Config.Embeddings.Auth.ParamLocation.ValueString())
		} else {
			paramLocation = nil
		}
		paramName := new(string)
		if !r.Config.Embeddings.Auth.ParamName.IsUnknown() && !r.Config.Embeddings.Auth.ParamName.IsNull() {
			*paramName = r.Config.Embeddings.Auth.ParamName.ValueString()
		} else {
			paramName = nil
		}
		paramValue := new(string)
		if !r.Config.Embeddings.Auth.ParamValue.IsUnknown() && !r.Config.Embeddings.Auth.ParamValue.IsNull() {
			*paramValue = r.Config.Embeddings.Auth.ParamValue.ValueString()
		} else {
			paramValue = nil
		}
		auth = &shared.AiSemanticCachePluginAuth{
			AllowOverride:           allowOverride,
			AwsAccessKeyID:          awsAccessKeyID,
			AwsSecretAccessKey:      awsSecretAccessKey,
			AzureClientID:           azureClientID,
			AzureClientSecret:       azureClientSecret,
			AzureTenantID:           azureTenantID,
			AzureUseManagedIdentity: azureUseManagedIdentity,
			GcpServiceAccountJSON:   gcpServiceAccountJSON,
			GcpUseServiceAccount:    gcpUseServiceAccount,
			HeaderName:              headerName,
			HeaderValue:             headerValue,
			ParamLocation:           paramLocation,
			ParamName:               paramName,
			ParamValue:              paramValue,
		}
	}
	var name1 string
	name1 = r.Config.Embeddings.Model.Name.ValueString()

	var optionsVar *shared.AiSemanticCachePluginOptions
	if r.Config.Embeddings.Model.Options != nil {
		apiVersion := new(string)
		if !r.Config.Embeddings.Model.Options.Azure.APIVersion.IsUnknown() && !r.Config.Embeddings.Model.Options.Azure.APIVersion.IsNull() {
			*apiVersion = r.Config.Embeddings.Model.Options.Azure.APIVersion.ValueString()
		} else {
			apiVersion = nil
		}
		deploymentID := new(string)
		if !r.Config.Embeddings.Model.Options.Azure.DeploymentID.IsUnknown() && !r.Config.Embeddings.Model.Options.Azure.DeploymentID.IsNull() {
			*deploymentID = r.Config.Embeddings.Model.Options.Azure.DeploymentID.ValueString()
		} else {
			deploymentID = nil
		}
		instance := new(string)
		if !r.Config.Embeddings.Model.Options.Azure.Instance.IsUnknown() && !r.Config.Embeddings.Model.Options.Azure.Instance.IsNull() {
			*instance = r.Config.Embeddings.Model.Options.Azure.Instance.ValueString()
		} else {
			instance = nil
		}
		azure := shared.AiSemanticCachePluginAzure{
			APIVersion:   apiVersion,
			DeploymentID: deploymentID,
			Instance:     instance,
		}
		var bedrock *shared.AiSemanticCachePluginBedrock
		if r.Config.Embeddings.Model.Options.Bedrock != nil {
			awsAssumeRoleArn := new(string)
			if !r.Config.Embeddings.Model.Options.Bedrock.AwsAssumeRoleArn.IsUnknown() && !r.Config.Embeddings.Model.Options.Bedrock.AwsAssumeRoleArn.IsNull() {
				*awsAssumeRoleArn = r.Config.Embeddings.Model.Options.Bedrock.AwsAssumeRoleArn.ValueString()
			} else {
				awsAssumeRoleArn = nil
			}
			awsRegion := new(string)
			if !r.Config.Embeddings.Model.Options.Bedrock.AwsRegion.IsUnknown() && !r.Config.Embeddings.Model.Options.Bedrock.AwsRegion.IsNull() {
				*awsRegion = r.Config.Embeddings.Model.Options.Bedrock.AwsRegion.ValueString()
			} else {
				awsRegion = nil
			}
			awsRoleSessionName := new(string)
			if !r.Config.Embeddings.Model.Options.Bedrock.AwsRoleSessionName.IsUnknown() && !r.Config.Embeddings.Model.Options.Bedrock.AwsRoleSessionName.IsNull() {
				*awsRoleSessionName = r.Config.Embeddings.Model.Options.Bedrock.AwsRoleSessionName.ValueString()
			} else {
				awsRoleSessionName = nil
			}
			awsStsEndpointURL := new(string)
			if !r.Config.Embeddings.Model.Options.Bedrock.AwsStsEndpointURL.IsUnknown() && !r.Config.Embeddings.Model.Options.Bedrock.AwsStsEndpointURL.IsNull() {
				*awsStsEndpointURL = r.Config.Embeddings.Model.Options.Bedrock.AwsStsEndpointURL.ValueString()
			} else {
				awsStsEndpointURL = nil
			}
			embeddingsNormalize := new(bool)
			if !r.Config.Embeddings.Model.Options.Bedrock.EmbeddingsNormalize.IsUnknown() && !r.Config.Embeddings.Model.Options.Bedrock.EmbeddingsNormalize.IsNull() {
				*embeddingsNormalize = r.Config.Embeddings.Model.Options.Bedrock.EmbeddingsNormalize.ValueBool()
			} else {
				embeddingsNormalize = nil
			}
			performanceConfigLatency := new(string)
			if !r.Config.Embeddings.Model.Options.Bedrock.PerformanceConfigLatency.IsUnknown() && !r.Config.Embeddings.Model.Options.Bedrock.PerformanceConfigLatency.IsNull() {
				*performanceConfigLatency = r.Config.Embeddings.Model.Options.Bedrock.PerformanceConfigLatency.ValueString()
			} else {
				performanceConfigLatency = nil
			}
			bedrock = &shared.AiSemanticCachePluginBedrock{
				AwsAssumeRoleArn:         awsAssumeRoleArn,
				AwsRegion:                awsRegion,
				AwsRoleSessionName:       awsRoleSessionName,
				AwsStsEndpointURL:        awsStsEndpointURL,
				EmbeddingsNormalize:      embeddingsNormalize,
				PerformanceConfigLatency: performanceConfigLatency,
			}
		}
		var gemini *shared.AiSemanticCachePluginGemini
		if r.Config.Embeddings.Model.Options.Gemini != nil {
			apiEndpoint := new(string)
			if !r.Config.Embeddings.Model.Options.Gemini.APIEndpoint.IsUnknown() && !r.Config.Embeddings.Model.Options.Gemini.APIEndpoint.IsNull() {
				*apiEndpoint = r.Config.Embeddings.Model.Options.Gemini.APIEndpoint.ValueString()
			} else {
				apiEndpoint = nil
			}
			locationID := new(string)
			if !r.Config.Embeddings.Model.Options.Gemini.LocationID.IsUnknown() && !r.Config.Embeddings.Model.Options.Gemini.LocationID.IsNull() {
				*locationID = r.Config.Embeddings.Model.Options.Gemini.LocationID.ValueString()
			} else {
				locationID = nil
			}
			projectID := new(string)
			if !r.Config.Embeddings.Model.Options.Gemini.ProjectID.IsUnknown() && !r.Config.Embeddings.Model.Options.Gemini.ProjectID.IsNull() {
				*projectID = r.Config.Embeddings.Model.Options.Gemini.ProjectID.ValueString()
			} else {
				projectID = nil
			}
			gemini = &shared.AiSemanticCachePluginGemini{
				APIEndpoint: apiEndpoint,
				LocationID:  locationID,
				ProjectID:   projectID,
			}
		}
		var huggingface *shared.AiSemanticCachePluginHuggingface
		if r.Config.Embeddings.Model.Options.Huggingface != nil {
			useCache := new(bool)
			if !r.Config.Embeddings.Model.Options.Huggingface.UseCache.IsUnknown() && !r.Config.Embeddings.Model.Options.Huggingface.UseCache.IsNull() {
				*useCache = r.Config.Embeddings.Model.Options.Huggingface.UseCache.ValueBool()
			} else {
				useCache = nil
			}
			waitForModel := new(bool)
			if !r.Config.Embeddings.Model.Options.Huggingface.WaitForModel.IsUnknown() && !r.Config.Embeddings.Model.Options.Huggingface.WaitForModel.IsNull() {
				*waitForModel = r.Config.Embeddings.Model.Options.Huggingface.WaitForModel.ValueBool()
			} else {
				waitForModel = nil
			}
			huggingface = &shared.AiSemanticCachePluginHuggingface{
				UseCache:     useCache,
				WaitForModel: waitForModel,
			}
		}
		upstreamURL := new(string)
		if !r.Config.Embeddings.Model.Options.UpstreamURL.IsUnknown() && !r.Config.Embeddings.Model.Options.UpstreamURL.IsNull() {
			*upstreamURL = r.Config.Embeddings.Model.Options.UpstreamURL.ValueString()
		} else {
			upstreamURL = nil
		}
		optionsVar = &shared.AiSemanticCachePluginOptions{
			Azure:       azure,
			Bedrock:     bedrock,
			Gemini:      gemini,
			Huggingface: huggingface,
			UpstreamURL: upstreamURL,
		}
	}
	provider := shared.AiSemanticCachePluginProvider(r.Config.Embeddings.Model.Provider.ValueString())
	model := shared.AiSemanticCachePluginModel{
		Name:     name1,
		Options:  optionsVar,
		Provider: provider,
	}
	embeddings := shared.AiSemanticCachePluginEmbeddings{
		Auth:  auth,
		Model: model,
	}
	exactCaching := new(bool)
	if !r.Config.ExactCaching.IsUnknown() && !r.Config.ExactCaching.IsNull() {
		*exactCaching = r.Config.ExactCaching.ValueBool()
	} else {
		exactCaching = nil
	}
	ignoreAssistantPrompts := new(bool)
	if !r.Config.IgnoreAssistantPrompts.IsUnknown() && !r.Config.IgnoreAssistantPrompts.IsNull() {
		*ignoreAssistantPrompts = r.Config.IgnoreAssistantPrompts.ValueBool()
	} else {
		ignoreAssistantPrompts = nil
	}
	ignoreSystemPrompts := new(bool)
	if !r.Config.IgnoreSystemPrompts.IsUnknown() && !r.Config.IgnoreSystemPrompts.IsNull() {
		*ignoreSystemPrompts = r.Config.IgnoreSystemPrompts.ValueBool()
	} else {
		ignoreSystemPrompts = nil
	}
	ignoreToolPrompts := new(bool)
	if !r.Config.IgnoreToolPrompts.IsUnknown() && !r.Config.IgnoreToolPrompts.IsNull() {
		*ignoreToolPrompts = r.Config.IgnoreToolPrompts.ValueBool()
	} else {
		ignoreToolPrompts = nil
	}
	llmFormat := new(shared.AiSemanticCachePluginLlmFormat)
	if !r.Config.LlmFormat.IsUnknown() && !r.Config.LlmFormat.IsNull() {
		*llmFormat = shared.AiSemanticCachePluginLlmFormat(r.Config.LlmFormat.ValueString())
	} else {
		llmFormat = nil
	}
	messageCountback := new(float64)
	if !r.Config.MessageCountback.IsUnknown() && !r.Config.MessageCountback.IsNull() {
		*messageCountback = r.Config.MessageCountback.ValueFloat64()
	} else {
		messageCountback = nil
	}
	stopOnFailure := new(bool)
	if !r.Config.StopOnFailure.IsUnknown() && !r.Config.StopOnFailure.IsNull() {
		*stopOnFailure = r.Config.StopOnFailure.ValueBool()
	} else {
		stopOnFailure = nil
	}
	var dimensions int64
	dimensions = r.Config.Vectordb.Dimensions.ValueInt64()

	distanceMetric := shared.AiSemanticCachePluginDistanceMetric(r.Config.Vectordb.DistanceMetric.ValueString())
	var pgvector *shared.AiSemanticCachePluginPgvector
	if r.Config.Vectordb.Pgvector != nil {
		database := new(string)
		if !r.Config.Vectordb.Pgvector.Database.IsUnknown() && !r.Config.Vectordb.Pgvector.Database.IsNull() {
			*database = r.Config.Vectordb.Pgvector.Database.ValueString()
		} else {
			database = nil
		}
		host := new(string)
		if !r.Config.Vectordb.Pgvector.Host.IsUnknown() && !r.Config.Vectordb.Pgvector.Host.IsNull() {
			*host = r.Config.Vectordb.Pgvector.Host.ValueString()
		} else {
			host = nil
		}
		password := new(string)
		if !r.Config.Vectordb.Pgvector.Password.IsUnknown() && !r.Config.Vectordb.Pgvector.Password.IsNull() {
			*password = r.Config.Vectordb.Pgvector.Password.ValueString()
		} else {
			password = nil
		}
		port := new(int64)
		if !r.Config.Vectordb.Pgvector.Port.IsUnknown() && !r.Config.Vectordb.Pgvector.Port.IsNull() {
			*port = r.Config.Vectordb.Pgvector.Port.ValueInt64()
		} else {
			port = nil
		}
		ssl := new(bool)
		if !r.Config.Vectordb.Pgvector.Ssl.IsUnknown() && !r.Config.Vectordb.Pgvector.Ssl.IsNull() {
			*ssl = r.Config.Vectordb.Pgvector.Ssl.ValueBool()
		} else {
			ssl = nil
		}
		sslCert := new(string)
		if !r.Config.Vectordb.Pgvector.SslCert.IsUnknown() && !r.Config.Vectordb.Pgvector.SslCert.IsNull() {
			*sslCert = r.Config.Vectordb.Pgvector.SslCert.ValueString()
		} else {
			sslCert = nil
		}
		sslCertKey := new(string)
		if !r.Config.Vectordb.Pgvector.SslCertKey.IsUnknown() && !r.Config.Vectordb.Pgvector.SslCertKey.IsNull() {
			*sslCertKey = r.Config.Vectordb.Pgvector.SslCertKey.ValueString()
		} else {
			sslCertKey = nil
		}
		sslRequired := new(bool)
		if !r.Config.Vectordb.Pgvector.SslRequired.IsUnknown() && !r.Config.Vectordb.Pgvector.SslRequired.IsNull() {
			*sslRequired = r.Config.Vectordb.Pgvector.SslRequired.ValueBool()
		} else {
			sslRequired = nil
		}
		sslVerify := new(bool)
		if !r.Config.Vectordb.Pgvector.SslVerify.IsUnknown() && !r.Config.Vectordb.Pgvector.SslVerify.IsNull() {
			*sslVerify = r.Config.Vectordb.Pgvector.SslVerify.ValueBool()
		} else {
			sslVerify = nil
		}
		sslVersion := new(shared.AiSemanticCachePluginSslVersion)
		if !r.Config.Vectordb.Pgvector.SslVersion.IsUnknown() && !r.Config.Vectordb.Pgvector.SslVersion.IsNull() {
			*sslVersion = shared.AiSemanticCachePluginSslVersion(r.Config.Vectordb.Pgvector.SslVersion.ValueString())
		} else {
			sslVersion = nil
		}
		timeout := new(float64)
		if !r.Config.Vectordb.Pgvector.Timeout.IsUnknown() && !r.Config.Vectordb.Pgvector.Timeout.IsNull() {
			*timeout = r.Config.Vectordb.Pgvector.Timeout.ValueFloat64()
		} else {
			timeout = nil
		}
		user := new(string)
		if !r.Config.Vectordb.Pgvector.User.IsUnknown() && !r.Config.Vectordb.Pgvector.User.IsNull() {
			*user = r.Config.Vectordb.Pgvector.User.ValueString()
		} else {
			user = nil
		}
		pgvector = &shared.AiSemanticCachePluginPgvector{
			Database:    database,
			Host:        host,
			Password:    password,
			Port:        port,
			Ssl:         ssl,
			SslCert:     sslCert,
			SslCertKey:  sslCertKey,
			SslRequired: sslRequired,
			SslVerify:   sslVerify,
			SslVersion:  sslVersion,
			Timeout:     timeout,
			User:        user,
		}
	}
	var redis *shared.AiSemanticCachePluginRedis
	if r.Config.Vectordb.Redis != nil {
		clusterMaxRedirections := new(int64)
		if !r.Config.Vectordb.Redis.ClusterMaxRedirections.IsUnknown() && !r.Config.Vectordb.Redis.ClusterMaxRedirections.IsNull() {
			*clusterMaxRedirections = r.Config.Vectordb.Redis.ClusterMaxRedirections.ValueInt64()
		} else {
			clusterMaxRedirections = nil
		}
		var clusterNodes []shared.AiSemanticCachePluginClusterNodes
		if r.Config.Vectordb.Redis.ClusterNodes != nil {
			clusterNodes = make([]shared.AiSemanticCachePluginClusterNodes, 0, len(r.Config.Vectordb.Redis.ClusterNodes))
			for _, clusterNodesItem := range r.Config.Vectordb.Redis.ClusterNodes {
				ip := new(string)
				if !clusterNodesItem.IP.IsUnknown() && !clusterNodesItem.IP.IsNull() {
					*ip = clusterNodesItem.IP.ValueString()
				} else {
					ip = nil
				}
				port1 := new(int64)
				if !clusterNodesItem.Port.IsUnknown() && !clusterNodesItem.Port.IsNull() {
					*port1 = clusterNodesItem.Port.ValueInt64()
				} else {
					port1 = nil
				}
				clusterNodes = append(clusterNodes, shared.AiSemanticCachePluginClusterNodes{
					IP:   ip,
					Port: port1,
				})
			}
		}
		connectTimeout := new(int64)
		if !r.Config.Vectordb.Redis.ConnectTimeout.IsUnknown() && !r.Config.Vectordb.Redis.ConnectTimeout.IsNull() {
			*connectTimeout = r.Config.Vectordb.Redis.ConnectTimeout.ValueInt64()
		} else {
			connectTimeout = nil
		}
		connectionIsProxied := new(bool)
		if !r.Config.Vectordb.Redis.ConnectionIsProxied.IsUnknown() && !r.Config.Vectordb.Redis.ConnectionIsProxied.IsNull() {
			*connectionIsProxied = r.Config.Vectordb.Redis.ConnectionIsProxied.ValueBool()
		} else {
			connectionIsProxied = nil
		}
		database1 := new(int64)
		if !r.Config.Vectordb.Redis.Database.IsUnknown() && !r.Config.Vectordb.Redis.Database.IsNull() {
			*database1 = r.Config.Vectordb.Redis.Database.ValueInt64()
		} else {
			database1 = nil
		}
		host1 := new(string)
		if !r.Config.Vectordb.Redis.Host.IsUnknown() && !r.Config.Vectordb.Redis.Host.IsNull() {
			*host1 = r.Config.Vectordb.Redis.Host.ValueString()
		} else {
			host1 = nil
		}
		keepaliveBacklog := new(int64)
		if !r.Config.Vectordb.Redis.KeepaliveBacklog.IsUnknown() && !r.Config.Vectordb.Redis.KeepaliveBacklog.IsNull() {
			*keepaliveBacklog = r.Config.Vectordb.Redis.KeepaliveBacklog.ValueInt64()
		} else {
			keepaliveBacklog = nil
		}
		keepalivePoolSize := new(int64)
		if !r.Config.Vectordb.Redis.KeepalivePoolSize.IsUnknown() && !r.Config.Vectordb.Redis.KeepalivePoolSize.IsNull() {
			*keepalivePoolSize = r.Config.Vectordb.Redis.KeepalivePoolSize.ValueInt64()
		} else {
			keepalivePoolSize = nil
		}
		password1 := new(string)
		if !r.Config.Vectordb.Redis.Password.IsUnknown() && !r.Config.Vectordb.Redis.Password.IsNull() {
			*password1 = r.Config.Vectordb.Redis.Password.ValueString()
		} else {
			password1 = nil
		}
		port2 := new(int64)
		if !r.Config.Vectordb.Redis.Port.IsUnknown() && !r.Config.Vectordb.Redis.Port.IsNull() {
			*port2 = r.Config.Vectordb.Redis.Port.ValueInt64()
		} else {
			port2 = nil
		}
		readTimeout := new(int64)
		if !r.Config.Vectordb.Redis.ReadTimeout.IsUnknown() && !r.Config.Vectordb.Redis.ReadTimeout.IsNull() {
			*readTimeout = r.Config.Vectordb.Redis.ReadTimeout.ValueInt64()
		} else {
			readTimeout = nil
		}
		sendTimeout := new(int64)
		if !r.Config.Vectordb.Redis.SendTimeout.IsUnknown() && !r.Config.Vectordb.Redis.SendTimeout.IsNull() {
			*sendTimeout = r.Config.Vectordb.Redis.SendTimeout.ValueInt64()
		} else {
			sendTimeout = nil
		}
		sentinelMaster := new(string)
		if !r.Config.Vectordb.Redis.SentinelMaster.IsUnknown() && !r.Config.Vectordb.Redis.SentinelMaster.IsNull() {
			*sentinelMaster = r.Config.Vectordb.Redis.SentinelMaster.ValueString()
		} else {
			sentinelMaster = nil
		}
		var sentinelNodes []shared.AiSemanticCachePluginSentinelNodes
		if r.Config.Vectordb.Redis.SentinelNodes != nil {
			sentinelNodes = make([]shared.AiSemanticCachePluginSentinelNodes, 0, len(r.Config.Vectordb.Redis.SentinelNodes))
			for _, sentinelNodesItem := range r.Config.Vectordb.Redis.SentinelNodes {
				host2 := new(string)
				if !sentinelNodesItem.Host.IsUnknown() && !sentinelNodesItem.Host.IsNull() {
					*host2 = sentinelNodesItem.Host.ValueString()
				} else {
					host2 = nil
				}
				port3 := new(int64)
				if !sentinelNodesItem.Port.IsUnknown() && !sentinelNodesItem.Port.IsNull() {
					*port3 = sentinelNodesItem.Port.ValueInt64()
				} else {
					port3 = nil
				}
				sentinelNodes = append(sentinelNodes, shared.AiSemanticCachePluginSentinelNodes{
					Host: host2,
					Port: port3,
				})
			}
		}
		sentinelPassword := new(string)
		if !r.Config.Vectordb.Redis.SentinelPassword.IsUnknown() && !r.Config.Vectordb.Redis.SentinelPassword.IsNull() {
			*sentinelPassword = r.Config.Vectordb.Redis.SentinelPassword.ValueString()
		} else {
			sentinelPassword = nil
		}
		sentinelRole := new(shared.AiSemanticCachePluginSentinelRole)
		if !r.Config.Vectordb.Redis.SentinelRole.IsUnknown() && !r.Config.Vectordb.Redis.SentinelRole.IsNull() {
			*sentinelRole = shared.AiSemanticCachePluginSentinelRole(r.Config.Vectordb.Redis.SentinelRole.ValueString())
		} else {
			sentinelRole = nil
		}
		sentinelUsername := new(string)
		if !r.Config.Vectordb.Redis.SentinelUsername.IsUnknown() && !r.Config.Vectordb.Redis.SentinelUsername.IsNull() {
			*sentinelUsername = r.Config.Vectordb.Redis.SentinelUsername.ValueString()
		} else {
			sentinelUsername = nil
		}
		serverName := new(string)
		if !r.Config.Vectordb.Redis.ServerName.IsUnknown() && !r.Config.Vectordb.Redis.ServerName.IsNull() {
			*serverName = r.Config.Vectordb.Redis.ServerName.ValueString()
		} else {
			serverName = nil
		}
		ssl1 := new(bool)
		if !r.Config.Vectordb.Redis.Ssl.IsUnknown() && !r.Config.Vectordb.Redis.Ssl.IsNull() {
			*ssl1 = r.Config.Vectordb.Redis.Ssl.ValueBool()
		} else {
			ssl1 = nil
		}
		sslVerify1 := new(bool)
		if !r.Config.Vectordb.Redis.SslVerify.IsUnknown() && !r.Config.Vectordb.Redis.SslVerify.IsNull() {
			*sslVerify1 = r.Config.Vectordb.Redis.SslVerify.ValueBool()
		} else {
			sslVerify1 = nil
		}
		username := new(string)
		if !r.Config.Vectordb.Redis.Username.IsUnknown() && !r.Config.Vectordb.Redis.Username.IsNull() {
			*username = r.Config.Vectordb.Redis.Username.ValueString()
		} else {
			username = nil
		}
		redis = &shared.AiSemanticCachePluginRedis{
			ClusterMaxRedirections: clusterMaxRedirections,
			ClusterNodes:           clusterNodes,
			ConnectTimeout:         connectTimeout,
			ConnectionIsProxied:    connectionIsProxied,
			Database:               database1,
			Host:                   host1,
			KeepaliveBacklog:       keepaliveBacklog,
			KeepalivePoolSize:      keepalivePoolSize,
			Password:               password1,
			Port:                   port2,
			ReadTimeout:            readTimeout,
			SendTimeout:            sendTimeout,
			SentinelMaster:         sentinelMaster,
			SentinelNodes:          sentinelNodes,
			SentinelPassword:       sentinelPassword,
			SentinelRole:           sentinelRole,
			SentinelUsername:       sentinelUsername,
			ServerName:             serverName,
			Ssl:                    ssl1,
			SslVerify:              sslVerify1,
			Username:               username,
		}
	}
	strategy := shared.AiSemanticCachePluginStrategy(r.Config.Vectordb.Strategy.ValueString())
	var threshold float64
	threshold = r.Config.Vectordb.Threshold.ValueFloat64()

	vectordb := shared.AiSemanticCachePluginVectordb{
		Dimensions:     dimensions,
		DistanceMetric: distanceMetric,
		Pgvector:       pgvector,
		Redis:          redis,
		Strategy:       strategy,
		Threshold:      threshold,
	}
	config := shared.AiSemanticCachePluginConfig{
		CacheControl:           cacheControl,
		CacheTTL:               cacheTTL,
		Embeddings:             embeddings,
		ExactCaching:           exactCaching,
		IgnoreAssistantPrompts: ignoreAssistantPrompts,
		IgnoreSystemPrompts:    ignoreSystemPrompts,
		IgnoreToolPrompts:      ignoreToolPrompts,
		LlmFormat:              llmFormat,
		MessageCountback:       messageCountback,
		StopOnFailure:          stopOnFailure,
		Vectordb:               vectordb,
	}
	var consumer *shared.AiSemanticCachePluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.AiSemanticCachePluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.AiSemanticCachePluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.AiSemanticCachePluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.AiSemanticCachePluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AiSemanticCachePluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AiSemanticCachePluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.AiSemanticCachePluginRoute{
			ID: id4,
		}
	}
	var service *shared.AiSemanticCachePluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.AiSemanticCachePluginService{
			ID: id5,
		}
	}
	out := shared.AiSemanticCachePlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}
