// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *MeshResourceModel) ToSharedMeshItem() *shared.MeshItem {
	var constraints *shared.Constraints
	if r.Constraints != nil {
		var dataplaneProxy *shared.DataplaneProxy
		if r.Constraints.DataplaneProxy != nil {
			var requirements []shared.Requirements = []shared.Requirements{}
			for _, requirementsItem := range r.Constraints.DataplaneProxy.Requirements {
				tags := make(map[string]string)
				for tagsKey, tagsValue := range requirementsItem.Tags {
					var tagsInst string
					tagsInst = tagsValue.ValueString()

					tags[tagsKey] = tagsInst
				}
				requirements = append(requirements, shared.Requirements{
					Tags: tags,
				})
			}
			var restrictions []shared.Restrictions = []shared.Restrictions{}
			for _, restrictionsItem := range r.Constraints.DataplaneProxy.Restrictions {
				tags1 := make(map[string]string)
				for tagsKey1, tagsValue1 := range restrictionsItem.Tags {
					var tagsInst1 string
					tagsInst1 = tagsValue1.ValueString()

					tags1[tagsKey1] = tagsInst1
				}
				restrictions = append(restrictions, shared.Restrictions{
					Tags: tags1,
				})
			}
			dataplaneProxy = &shared.DataplaneProxy{
				Requirements: requirements,
				Restrictions: restrictions,
			}
		}
		constraints = &shared.Constraints{
			DataplaneProxy: dataplaneProxy,
		}
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var logging *shared.Logging
	if r.Logging != nil {
		var backends []shared.Backends = []shared.Backends{}
		for _, backendsItem := range r.Logging.Backends {
			var conf *shared.MeshItemLoggingConf
			if backendsItem.Conf != nil {
				var fileLoggingBackendConfig *shared.FileLoggingBackendConfig
				if backendsItem.Conf.FileLoggingBackendConfig != nil {
					path := new(string)
					if !backendsItem.Conf.FileLoggingBackendConfig.Path.IsUnknown() && !backendsItem.Conf.FileLoggingBackendConfig.Path.IsNull() {
						*path = backendsItem.Conf.FileLoggingBackendConfig.Path.ValueString()
					} else {
						path = nil
					}
					fileLoggingBackendConfig = &shared.FileLoggingBackendConfig{
						Path: path,
					}
				}
				if fileLoggingBackendConfig != nil {
					conf = &shared.MeshItemLoggingConf{
						FileLoggingBackendConfig: fileLoggingBackendConfig,
					}
				}
				var tcpLoggingBackendConfig *shared.TCPLoggingBackendConfig
				if backendsItem.Conf.TCPLoggingBackendConfig != nil {
					address := new(string)
					if !backendsItem.Conf.TCPLoggingBackendConfig.Address.IsUnknown() && !backendsItem.Conf.TCPLoggingBackendConfig.Address.IsNull() {
						*address = backendsItem.Conf.TCPLoggingBackendConfig.Address.ValueString()
					} else {
						address = nil
					}
					tcpLoggingBackendConfig = &shared.TCPLoggingBackendConfig{
						Address: address,
					}
				}
				if tcpLoggingBackendConfig != nil {
					conf = &shared.MeshItemLoggingConf{
						TCPLoggingBackendConfig: tcpLoggingBackendConfig,
					}
				}
			}
			format := new(string)
			if !backendsItem.Format.IsUnknown() && !backendsItem.Format.IsNull() {
				*format = backendsItem.Format.ValueString()
			} else {
				format = nil
			}
			name := new(string)
			if !backendsItem.Name.IsUnknown() && !backendsItem.Name.IsNull() {
				*name = backendsItem.Name.ValueString()
			} else {
				name = nil
			}
			typeVar := new(string)
			if !backendsItem.Type.IsUnknown() && !backendsItem.Type.IsNull() {
				*typeVar = backendsItem.Type.ValueString()
			} else {
				typeVar = nil
			}
			backends = append(backends, shared.Backends{
				Conf:   conf,
				Format: format,
				Name:   name,
				Type:   typeVar,
			})
		}
		defaultBackend := new(string)
		if !r.Logging.DefaultBackend.IsUnknown() && !r.Logging.DefaultBackend.IsNull() {
			*defaultBackend = r.Logging.DefaultBackend.ValueString()
		} else {
			defaultBackend = nil
		}
		logging = &shared.Logging{
			Backends:       backends,
			DefaultBackend: defaultBackend,
		}
	}
	var meshServices *shared.MeshServices
	if r.MeshServices != nil {
		var mode *shared.Mode
		if r.MeshServices.Mode != nil {
			str := new(string)
			if !r.MeshServices.Mode.Str.IsUnknown() && !r.MeshServices.Mode.Str.IsNull() {
				*str = r.MeshServices.Mode.Str.ValueString()
			} else {
				str = nil
			}
			if str != nil {
				mode = &shared.Mode{
					Str: str,
				}
			}
			integer := new(int64)
			if !r.MeshServices.Mode.Integer.IsUnknown() && !r.MeshServices.Mode.Integer.IsNull() {
				*integer = r.MeshServices.Mode.Integer.ValueInt64()
			} else {
				integer = nil
			}
			if integer != nil {
				mode = &shared.Mode{
					Integer: integer,
				}
			}
		}
		meshServices = &shared.MeshServices{
			Mode: mode,
		}
	}
	var metrics *shared.Metrics
	if r.Metrics != nil {
		var backends1 []shared.MeshItemBackends = []shared.MeshItemBackends{}
		for _, backendsItem1 := range r.Metrics.Backends {
			var conf1 *shared.MeshItemConf
			if backendsItem1.Conf != nil {
				var prometheusMetricsBackendConfig *shared.PrometheusMetricsBackendConfig
				if backendsItem1.Conf.PrometheusMetricsBackendConfig != nil {
					var aggregate []shared.Aggregate = []shared.Aggregate{}
					for _, aggregateItem := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Aggregate {
						address1 := new(string)
						if !aggregateItem.Address.IsUnknown() && !aggregateItem.Address.IsNull() {
							*address1 = aggregateItem.Address.ValueString()
						} else {
							address1 = nil
						}
						enabled := new(bool)
						if !aggregateItem.Enabled.IsUnknown() && !aggregateItem.Enabled.IsNull() {
							*enabled = aggregateItem.Enabled.ValueBool()
						} else {
							enabled = nil
						}
						name1 := new(string)
						if !aggregateItem.Name.IsUnknown() && !aggregateItem.Name.IsNull() {
							*name1 = aggregateItem.Name.ValueString()
						} else {
							name1 = nil
						}
						path1 := new(string)
						if !aggregateItem.Path.IsUnknown() && !aggregateItem.Path.IsNull() {
							*path1 = aggregateItem.Path.ValueString()
						} else {
							path1 = nil
						}
						port := new(int64)
						if !aggregateItem.Port.IsUnknown() && !aggregateItem.Port.IsNull() {
							*port = aggregateItem.Port.ValueInt64()
						} else {
							port = nil
						}
						aggregate = append(aggregate, shared.Aggregate{
							Address: address1,
							Enabled: enabled,
							Name:    name1,
							Path:    path1,
							Port:    port,
						})
					}
					var envoy *shared.Envoy
					if backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy != nil {
						filterRegex := new(string)
						if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex.IsNull() {
							*filterRegex = backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex.ValueString()
						} else {
							filterRegex = nil
						}
						usedOnly := new(bool)
						if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly.IsNull() {
							*usedOnly = backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly.ValueBool()
						} else {
							usedOnly = nil
						}
						envoy = &shared.Envoy{
							FilterRegex: filterRegex,
							UsedOnly:    usedOnly,
						}
					}
					path2 := new(string)
					if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Path.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Path.IsNull() {
						*path2 = backendsItem1.Conf.PrometheusMetricsBackendConfig.Path.ValueString()
					} else {
						path2 = nil
					}
					port1 := new(int64)
					if !backendsItem1.Conf.PrometheusMetricsBackendConfig.Port.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.Port.IsNull() {
						*port1 = backendsItem1.Conf.PrometheusMetricsBackendConfig.Port.ValueInt64()
					} else {
						port1 = nil
					}
					skipMTLS := new(bool)
					if !backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS.IsNull() {
						*skipMTLS = backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS.ValueBool()
					} else {
						skipMTLS = nil
					}
					tags2 := make(map[string]string)
					for tagsKey2, tagsValue2 := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags {
						var tagsInst2 string
						tagsInst2 = tagsValue2.ValueString()

						tags2[tagsKey2] = tagsInst2
					}
					var tls *shared.ConfTLS
					if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS != nil {
						var mode1 *shared.ConfMode
						if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode != nil {
							str1 := new(string)
							if !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str.IsNull() {
								*str1 = backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str.ValueString()
							} else {
								str1 = nil
							}
							if str1 != nil {
								mode1 = &shared.ConfMode{
									Str: str1,
								}
							}
							integer1 := new(int64)
							if !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer.IsUnknown() && !backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer.IsNull() {
								*integer1 = backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer.ValueInt64()
							} else {
								integer1 = nil
							}
							if integer1 != nil {
								mode1 = &shared.ConfMode{
									Integer: integer1,
								}
							}
						}
						tls = &shared.ConfTLS{
							Mode: mode1,
						}
					}
					prometheusMetricsBackendConfig = &shared.PrometheusMetricsBackendConfig{
						Aggregate: aggregate,
						Envoy:     envoy,
						Path:      path2,
						Port:      port1,
						SkipMTLS:  skipMTLS,
						Tags:      tags2,
						TLS:       tls,
					}
				}
				if prometheusMetricsBackendConfig != nil {
					conf1 = &shared.MeshItemConf{
						PrometheusMetricsBackendConfig: prometheusMetricsBackendConfig,
					}
				}
			}
			name2 := new(string)
			if !backendsItem1.Name.IsUnknown() && !backendsItem1.Name.IsNull() {
				*name2 = backendsItem1.Name.ValueString()
			} else {
				name2 = nil
			}
			type1 := new(string)
			if !backendsItem1.Type.IsUnknown() && !backendsItem1.Type.IsNull() {
				*type1 = backendsItem1.Type.ValueString()
			} else {
				type1 = nil
			}
			backends1 = append(backends1, shared.MeshItemBackends{
				Conf: conf1,
				Name: name2,
				Type: type1,
			})
		}
		enabledBackend := new(string)
		if !r.Metrics.EnabledBackend.IsUnknown() && !r.Metrics.EnabledBackend.IsNull() {
			*enabledBackend = r.Metrics.EnabledBackend.ValueString()
		} else {
			enabledBackend = nil
		}
		metrics = &shared.Metrics{
			Backends:       backends1,
			EnabledBackend: enabledBackend,
		}
	}
	var mtls *shared.Mtls
	if r.Mtls != nil {
		var backends2 []shared.MeshItemMtlsBackends = []shared.MeshItemMtlsBackends{}
		for _, backendsItem2 := range r.Mtls.Backends {
			var conf2 *shared.MeshItemMtlsConf
			if backendsItem2.Conf != nil {
				var providedCertificateAuthorityConfig *shared.ProvidedCertificateAuthorityConfig
				if backendsItem2.Conf.ProvidedCertificateAuthorityConfig != nil {
					var cert *shared.Cert
					if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert != nil {
						var typeVar1 interface{}
						_ = json.Unmarshal([]byte(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.Type.ValueString()), &typeVar1)
						cert = &shared.Cert{
							Type: typeVar1,
						}
					}
					var key *shared.ConfKey
					if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key != nil {
						var typeVar2 interface{}
						_ = json.Unmarshal([]byte(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.Type.ValueString()), &typeVar2)
						key = &shared.ConfKey{
							Type: typeVar2,
						}
					}
					providedCertificateAuthorityConfig = &shared.ProvidedCertificateAuthorityConfig{
						Cert: cert,
						Key:  key,
					}
				}
				if providedCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						ProvidedCertificateAuthorityConfig: providedCertificateAuthorityConfig,
					}
				}
				var builtinCertificateAuthorityConfig *shared.BuiltinCertificateAuthorityConfig
				if backendsItem2.Conf.BuiltinCertificateAuthorityConfig != nil {
					var caCert *shared.BuiltinCertificateAuthorityConfigConfCaCert
					if backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert != nil {
						rsAbits := new(int64)
						if !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RSAbits.IsUnknown() && !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RSAbits.IsNull() {
							*rsAbits = backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RSAbits.ValueInt64()
						} else {
							rsAbits = nil
						}
						expiration := new(string)
						if !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration.IsUnknown() && !backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration.IsNull() {
							*expiration = backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration.ValueString()
						} else {
							expiration = nil
						}
						caCert = &shared.BuiltinCertificateAuthorityConfigConfCaCert{
							RSAbits:    rsAbits,
							Expiration: expiration,
						}
					}
					builtinCertificateAuthorityConfig = &shared.BuiltinCertificateAuthorityConfig{
						CaCert: caCert,
					}
				}
				if builtinCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						BuiltinCertificateAuthorityConfig: builtinCertificateAuthorityConfig,
					}
				}
				var vaultCertificateAuthorityConfig *shared.VaultCertificateAuthorityConfig
				if backendsItem2.Conf.VaultCertificateAuthorityConfig != nil {
					var mode2 interface{}
					if !backendsItem2.Conf.VaultCertificateAuthorityConfig.Mode.IsUnknown() && !backendsItem2.Conf.VaultCertificateAuthorityConfig.Mode.IsNull() {
						_ = json.Unmarshal([]byte(backendsItem2.Conf.VaultCertificateAuthorityConfig.Mode.ValueString()), &mode2)
					}
					vaultCertificateAuthorityConfig = &shared.VaultCertificateAuthorityConfig{
						Mode: mode2,
					}
				}
				if vaultCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						VaultCertificateAuthorityConfig: vaultCertificateAuthorityConfig,
					}
				}
				var acmCertificateAuthorityConfig *shared.ACMCertificateAuthorityConfig
				if backendsItem2.Conf.ACMCertificateAuthorityConfig != nil {
					arn := new(string)
					if !backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn.IsNull() {
						*arn = backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn.ValueString()
					} else {
						arn = nil
					}
					var auth *shared.ConfAuth
					if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth != nil {
						var awsCredentials *shared.AwsCredentials
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials != nil {
							var accessKey *shared.AccessKey
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey != nil {
								var typeVar3 interface{}
								_ = json.Unmarshal([]byte(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.Type.ValueString()), &typeVar3)
								accessKey = &shared.AccessKey{
									Type: typeVar3,
								}
							}
							var accessKeySecret *shared.AccessKeySecret
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret != nil {
								var typeVar4 interface{}
								_ = json.Unmarshal([]byte(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.Type.ValueString()), &typeVar4)
								accessKeySecret = &shared.AccessKeySecret{
									Type: typeVar4,
								}
							}
							awsCredentials = &shared.AwsCredentials{
								AccessKey:       accessKey,
								AccessKeySecret: accessKeySecret,
							}
						}
						auth = &shared.ConfAuth{
							AwsCredentials: awsCredentials,
						}
					}
					var caCert1 *shared.ConfCaCert
					if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert != nil {
						var typeVar5 interface{}
						_ = json.Unmarshal([]byte(backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.Type.ValueString()), &typeVar5)
						caCert1 = &shared.ConfCaCert{
							Type: typeVar5,
						}
					}
					commonName := new(string)
					if !backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName.IsUnknown() && !backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName.IsNull() {
						*commonName = backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName.ValueString()
					} else {
						commonName = nil
					}
					acmCertificateAuthorityConfig = &shared.ACMCertificateAuthorityConfig{
						Arn:        arn,
						Auth:       auth,
						CaCert:     caCert1,
						CommonName: commonName,
					}
				}
				if acmCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						ACMCertificateAuthorityConfig: acmCertificateAuthorityConfig,
					}
				}
				var certManagerCertificateAuthorityConfig *shared.CertManagerCertificateAuthorityConfig
				if backendsItem2.Conf.CertManagerCertificateAuthorityConfig != nil {
					var caCert2 *shared.CertManagerCertificateAuthorityConfigConfCaCert
					if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert != nil {
						var typeVar6 interface{}
						_ = json.Unmarshal([]byte(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.Type.ValueString()), &typeVar6)
						caCert2 = &shared.CertManagerCertificateAuthorityConfigConfCaCert{
							Type: typeVar6,
						}
					}
					commonName1 := new(string)
					if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName.IsNull() {
						*commonName1 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName.ValueString()
					} else {
						commonName1 = nil
					}
					var dnsNames []string = []string{}
					for _, dnsNamesItem := range backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames {
						dnsNames = append(dnsNames, dnsNamesItem.ValueString())
					}
					var issuerRef *shared.IssuerRef
					if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef != nil {
						group := new(string)
						if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group.IsNull() {
							*group = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group.ValueString()
						} else {
							group = nil
						}
						kind := new(string)
						if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind.IsNull() {
							*kind = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind.ValueString()
						} else {
							kind = nil
						}
						name3 := new(string)
						if !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name.IsUnknown() && !backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name.IsNull() {
							*name3 = backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name.ValueString()
						} else {
							name3 = nil
						}
						issuerRef = &shared.IssuerRef{
							Group: group,
							Kind:  kind,
							Name:  name3,
						}
					}
					certManagerCertificateAuthorityConfig = &shared.CertManagerCertificateAuthorityConfig{
						CaCert:     caCert2,
						CommonName: commonName1,
						DNSNames:   dnsNames,
						IssuerRef:  issuerRef,
					}
				}
				if certManagerCertificateAuthorityConfig != nil {
					conf2 = &shared.MeshItemMtlsConf{
						CertManagerCertificateAuthorityConfig: certManagerCertificateAuthorityConfig,
					}
				}
			}
			var dpCert *shared.DpCert
			if backendsItem2.DpCert != nil {
				var requestTimeout *shared.RequestTimeout
				if backendsItem2.DpCert.RequestTimeout != nil {
					nanos := new(int64)
					if !backendsItem2.DpCert.RequestTimeout.Nanos.IsUnknown() && !backendsItem2.DpCert.RequestTimeout.Nanos.IsNull() {
						*nanos = backendsItem2.DpCert.RequestTimeout.Nanos.ValueInt64()
					} else {
						nanos = nil
					}
					seconds := new(int64)
					if !backendsItem2.DpCert.RequestTimeout.Seconds.IsUnknown() && !backendsItem2.DpCert.RequestTimeout.Seconds.IsNull() {
						*seconds = backendsItem2.DpCert.RequestTimeout.Seconds.ValueInt64()
					} else {
						seconds = nil
					}
					requestTimeout = &shared.RequestTimeout{
						Nanos:   nanos,
						Seconds: seconds,
					}
				}
				var rotation *shared.Rotation
				if backendsItem2.DpCert.Rotation != nil {
					expiration1 := new(string)
					if !backendsItem2.DpCert.Rotation.Expiration.IsUnknown() && !backendsItem2.DpCert.Rotation.Expiration.IsNull() {
						*expiration1 = backendsItem2.DpCert.Rotation.Expiration.ValueString()
					} else {
						expiration1 = nil
					}
					rotation = &shared.Rotation{
						Expiration: expiration1,
					}
				}
				dpCert = &shared.DpCert{
					RequestTimeout: requestTimeout,
					Rotation:       rotation,
				}
			}
			var mode3 *shared.MeshItemMode
			if backendsItem2.Mode != nil {
				str2 := new(string)
				if !backendsItem2.Mode.Str.IsUnknown() && !backendsItem2.Mode.Str.IsNull() {
					*str2 = backendsItem2.Mode.Str.ValueString()
				} else {
					str2 = nil
				}
				if str2 != nil {
					mode3 = &shared.MeshItemMode{
						Str: str2,
					}
				}
				integer2 := new(int64)
				if !backendsItem2.Mode.Integer.IsUnknown() && !backendsItem2.Mode.Integer.IsNull() {
					*integer2 = backendsItem2.Mode.Integer.ValueInt64()
				} else {
					integer2 = nil
				}
				if integer2 != nil {
					mode3 = &shared.MeshItemMode{
						Integer: integer2,
					}
				}
			}
			name4 := new(string)
			if !backendsItem2.Name.IsUnknown() && !backendsItem2.Name.IsNull() {
				*name4 = backendsItem2.Name.ValueString()
			} else {
				name4 = nil
			}
			var rootChain *shared.RootChain
			if backendsItem2.RootChain != nil {
				var requestTimeout1 *shared.MeshItemRequestTimeout
				if backendsItem2.RootChain.RequestTimeout != nil {
					nanos1 := new(int64)
					if !backendsItem2.RootChain.RequestTimeout.Nanos.IsUnknown() && !backendsItem2.RootChain.RequestTimeout.Nanos.IsNull() {
						*nanos1 = backendsItem2.RootChain.RequestTimeout.Nanos.ValueInt64()
					} else {
						nanos1 = nil
					}
					seconds1 := new(int64)
					if !backendsItem2.RootChain.RequestTimeout.Seconds.IsUnknown() && !backendsItem2.RootChain.RequestTimeout.Seconds.IsNull() {
						*seconds1 = backendsItem2.RootChain.RequestTimeout.Seconds.ValueInt64()
					} else {
						seconds1 = nil
					}
					requestTimeout1 = &shared.MeshItemRequestTimeout{
						Nanos:   nanos1,
						Seconds: seconds1,
					}
				}
				rootChain = &shared.RootChain{
					RequestTimeout: requestTimeout1,
				}
			}
			type2 := new(string)
			if !backendsItem2.Type.IsUnknown() && !backendsItem2.Type.IsNull() {
				*type2 = backendsItem2.Type.ValueString()
			} else {
				type2 = nil
			}
			backends2 = append(backends2, shared.MeshItemMtlsBackends{
				Conf:      conf2,
				DpCert:    dpCert,
				Mode:      mode3,
				Name:      name4,
				RootChain: rootChain,
				Type:      type2,
			})
		}
		enabledBackend1 := new(string)
		if !r.Mtls.EnabledBackend.IsUnknown() && !r.Mtls.EnabledBackend.IsNull() {
			*enabledBackend1 = r.Mtls.EnabledBackend.ValueString()
		} else {
			enabledBackend1 = nil
		}
		skipValidation := new(bool)
		if !r.Mtls.SkipValidation.IsUnknown() && !r.Mtls.SkipValidation.IsNull() {
			*skipValidation = r.Mtls.SkipValidation.ValueBool()
		} else {
			skipValidation = nil
		}
		mtls = &shared.Mtls{
			Backends:       backends2,
			EnabledBackend: enabledBackend1,
			SkipValidation: skipValidation,
		}
	}
	var name5 string
	name5 = r.Name.ValueString()

	var networking *shared.Networking
	if r.Networking != nil {
		var outbound *shared.Outbound
		if r.Networking.Outbound != nil {
			passthrough := new(bool)
			if !r.Networking.Outbound.Passthrough.IsUnknown() && !r.Networking.Outbound.Passthrough.IsNull() {
				*passthrough = r.Networking.Outbound.Passthrough.ValueBool()
			} else {
				passthrough = nil
			}
			outbound = &shared.Outbound{
				Passthrough: passthrough,
			}
		}
		networking = &shared.Networking{
			Outbound: outbound,
		}
	}
	var routing *shared.Routing
	if r.Routing != nil {
		defaultForbidMeshExternalServiceAccess := new(bool)
		if !r.Routing.DefaultForbidMeshExternalServiceAccess.IsUnknown() && !r.Routing.DefaultForbidMeshExternalServiceAccess.IsNull() {
			*defaultForbidMeshExternalServiceAccess = r.Routing.DefaultForbidMeshExternalServiceAccess.ValueBool()
		} else {
			defaultForbidMeshExternalServiceAccess = nil
		}
		localityAwareLoadBalancing := new(bool)
		if !r.Routing.LocalityAwareLoadBalancing.IsUnknown() && !r.Routing.LocalityAwareLoadBalancing.IsNull() {
			*localityAwareLoadBalancing = r.Routing.LocalityAwareLoadBalancing.ValueBool()
		} else {
			localityAwareLoadBalancing = nil
		}
		zoneEgress := new(bool)
		if !r.Routing.ZoneEgress.IsUnknown() && !r.Routing.ZoneEgress.IsNull() {
			*zoneEgress = r.Routing.ZoneEgress.ValueBool()
		} else {
			zoneEgress = nil
		}
		routing = &shared.Routing{
			DefaultForbidMeshExternalServiceAccess: defaultForbidMeshExternalServiceAccess,
			LocalityAwareLoadBalancing:             localityAwareLoadBalancing,
			ZoneEgress:                             zoneEgress,
		}
	}
	var skipCreatingInitialPolicies []string = []string{}
	for _, skipCreatingInitialPoliciesItem := range r.SkipCreatingInitialPolicies {
		skipCreatingInitialPolicies = append(skipCreatingInitialPolicies, skipCreatingInitialPoliciesItem.ValueString())
	}
	var tracing *shared.Tracing
	if r.Tracing != nil {
		var backends3 []shared.MeshItemTracingBackends = []shared.MeshItemTracingBackends{}
		for _, backendsItem3 := range r.Tracing.Backends {
			var conf3 *shared.MeshItemTracingConf
			if backendsItem3.Conf != nil {
				var datadogTracingBackendConfig *shared.DatadogTracingBackendConfig
				if backendsItem3.Conf.DatadogTracingBackendConfig != nil {
					address2 := new(string)
					if !backendsItem3.Conf.DatadogTracingBackendConfig.Address.IsUnknown() && !backendsItem3.Conf.DatadogTracingBackendConfig.Address.IsNull() {
						*address2 = backendsItem3.Conf.DatadogTracingBackendConfig.Address.ValueString()
					} else {
						address2 = nil
					}
					port2 := new(int64)
					if !backendsItem3.Conf.DatadogTracingBackendConfig.Port.IsUnknown() && !backendsItem3.Conf.DatadogTracingBackendConfig.Port.IsNull() {
						*port2 = backendsItem3.Conf.DatadogTracingBackendConfig.Port.ValueInt64()
					} else {
						port2 = nil
					}
					splitService := new(bool)
					if !backendsItem3.Conf.DatadogTracingBackendConfig.SplitService.IsUnknown() && !backendsItem3.Conf.DatadogTracingBackendConfig.SplitService.IsNull() {
						*splitService = backendsItem3.Conf.DatadogTracingBackendConfig.SplitService.ValueBool()
					} else {
						splitService = nil
					}
					datadogTracingBackendConfig = &shared.DatadogTracingBackendConfig{
						Address:      address2,
						Port:         port2,
						SplitService: splitService,
					}
				}
				if datadogTracingBackendConfig != nil {
					conf3 = &shared.MeshItemTracingConf{
						DatadogTracingBackendConfig: datadogTracingBackendConfig,
					}
				}
				var zipkinTracingBackendConfig *shared.ZipkinTracingBackendConfig
				if backendsItem3.Conf.ZipkinTracingBackendConfig != nil {
					apiVersion := new(string)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion.IsNull() {
						*apiVersion = backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion.ValueString()
					} else {
						apiVersion = nil
					}
					sharedSpanContext := new(bool)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext.IsNull() {
						*sharedSpanContext = backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext.ValueBool()
					} else {
						sharedSpanContext = nil
					}
					traceId128bit := new(bool)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit.IsNull() {
						*traceId128bit = backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit.ValueBool()
					} else {
						traceId128bit = nil
					}
					url := new(string)
					if !backendsItem3.Conf.ZipkinTracingBackendConfig.URL.IsUnknown() && !backendsItem3.Conf.ZipkinTracingBackendConfig.URL.IsNull() {
						*url = backendsItem3.Conf.ZipkinTracingBackendConfig.URL.ValueString()
					} else {
						url = nil
					}
					zipkinTracingBackendConfig = &shared.ZipkinTracingBackendConfig{
						APIVersion:        apiVersion,
						SharedSpanContext: sharedSpanContext,
						TraceId128bit:     traceId128bit,
						URL:               url,
					}
				}
				if zipkinTracingBackendConfig != nil {
					conf3 = &shared.MeshItemTracingConf{
						ZipkinTracingBackendConfig: zipkinTracingBackendConfig,
					}
				}
			}
			name6 := new(string)
			if !backendsItem3.Name.IsUnknown() && !backendsItem3.Name.IsNull() {
				*name6 = backendsItem3.Name.ValueString()
			} else {
				name6 = nil
			}
			sampling := new(float64)
			if !backendsItem3.Sampling.IsUnknown() && !backendsItem3.Sampling.IsNull() {
				*sampling, _ = backendsItem3.Sampling.ValueBigFloat().Float64()
			} else {
				sampling = nil
			}
			type3 := new(string)
			if !backendsItem3.Type.IsUnknown() && !backendsItem3.Type.IsNull() {
				*type3 = backendsItem3.Type.ValueString()
			} else {
				type3 = nil
			}
			backends3 = append(backends3, shared.MeshItemTracingBackends{
				Conf:     conf3,
				Name:     name6,
				Sampling: sampling,
				Type:     type3,
			})
		}
		defaultBackend1 := new(string)
		if !r.Tracing.DefaultBackend.IsUnknown() && !r.Tracing.DefaultBackend.IsNull() {
			*defaultBackend1 = r.Tracing.DefaultBackend.ValueString()
		} else {
			defaultBackend1 = nil
		}
		tracing = &shared.Tracing{
			Backends:       backends3,
			DefaultBackend: defaultBackend1,
		}
	}
	var typeVar7 string
	typeVar7 = r.Type.ValueString()

	out := shared.MeshItem{
		Constraints:                 constraints,
		Labels:                      labels,
		Logging:                     logging,
		MeshServices:                meshServices,
		Metrics:                     metrics,
		Mtls:                        mtls,
		Name:                        name5,
		Networking:                  networking,
		Routing:                     routing,
		SkipCreatingInitialPolicies: skipCreatingInitialPolicies,
		Tracing:                     tracing,
		Type:                        typeVar7,
	}
	return &out
}

func (r *MeshResourceModel) RefreshFromSharedMeshCreateOrUpdateSuccessResponse(resp *shared.MeshCreateOrUpdateSuccessResponse) {
	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}
}

func (r *MeshResourceModel) RefreshFromSharedMeshItem(resp *shared.MeshItem) {
	if resp != nil {
		if resp.Constraints == nil {
			r.Constraints = nil
		} else {
			r.Constraints = &tfTypes.Constraints{}
			if resp.Constraints.DataplaneProxy == nil {
				r.Constraints.DataplaneProxy = nil
			} else {
				r.Constraints.DataplaneProxy = &tfTypes.DataplaneProxy{}
				r.Constraints.DataplaneProxy.Requirements = []tfTypes.Requirements{}
				if len(r.Constraints.DataplaneProxy.Requirements) > len(resp.Constraints.DataplaneProxy.Requirements) {
					r.Constraints.DataplaneProxy.Requirements = r.Constraints.DataplaneProxy.Requirements[:len(resp.Constraints.DataplaneProxy.Requirements)]
				}
				for requirementsCount, requirementsItem := range resp.Constraints.DataplaneProxy.Requirements {
					var requirements1 tfTypes.Requirements
					if len(requirementsItem.Tags) > 0 {
						requirements1.Tags = make(map[string]types.String, len(requirementsItem.Tags))
						for key, value := range requirementsItem.Tags {
							requirements1.Tags[key] = types.StringValue(value)
						}
					}
					if requirementsCount+1 > len(r.Constraints.DataplaneProxy.Requirements) {
						r.Constraints.DataplaneProxy.Requirements = append(r.Constraints.DataplaneProxy.Requirements, requirements1)
					} else {
						r.Constraints.DataplaneProxy.Requirements[requirementsCount].Tags = requirements1.Tags
					}
				}
				r.Constraints.DataplaneProxy.Restrictions = []tfTypes.Requirements{}
				if len(r.Constraints.DataplaneProxy.Restrictions) > len(resp.Constraints.DataplaneProxy.Restrictions) {
					r.Constraints.DataplaneProxy.Restrictions = r.Constraints.DataplaneProxy.Restrictions[:len(resp.Constraints.DataplaneProxy.Restrictions)]
				}
				for restrictionsCount, restrictionsItem := range resp.Constraints.DataplaneProxy.Restrictions {
					var restrictions1 tfTypes.Requirements
					if len(restrictionsItem.Tags) > 0 {
						restrictions1.Tags = make(map[string]types.String, len(restrictionsItem.Tags))
						for key1, value1 := range restrictionsItem.Tags {
							restrictions1.Tags[key1] = types.StringValue(value1)
						}
					}
					if restrictionsCount+1 > len(r.Constraints.DataplaneProxy.Restrictions) {
						r.Constraints.DataplaneProxy.Restrictions = append(r.Constraints.DataplaneProxy.Restrictions, restrictions1)
					} else {
						r.Constraints.DataplaneProxy.Restrictions[restrictionsCount].Tags = restrictions1.Tags
					}
				}
			}
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key2, value2 := range resp.Labels {
				r.Labels[key2] = types.StringValue(value2)
			}
		}
		if resp.Logging == nil {
			r.Logging = nil
		} else {
			r.Logging = &tfTypes.Logging{}
			r.Logging.Backends = []tfTypes.Backends{}
			if len(r.Logging.Backends) > len(resp.Logging.Backends) {
				r.Logging.Backends = r.Logging.Backends[:len(resp.Logging.Backends)]
			}
			for backendsCount, backendsItem := range resp.Logging.Backends {
				var backends1 tfTypes.Backends
				if backendsItem.Conf == nil {
					backends1.Conf = nil
				} else {
					backends1.Conf = &tfTypes.MeshItemLoggingConf{}
					if backendsItem.Conf.FileLoggingBackendConfig != nil {
						backends1.Conf.FileLoggingBackendConfig = &tfTypes.FileLoggingBackendConfig{}
						backends1.Conf.FileLoggingBackendConfig.Path = types.StringPointerValue(backendsItem.Conf.FileLoggingBackendConfig.Path)
					}
					if backendsItem.Conf.TCPLoggingBackendConfig != nil {
						backends1.Conf.TCPLoggingBackendConfig = &tfTypes.TCPLoggingBackendConfig{}
						backends1.Conf.TCPLoggingBackendConfig.Address = types.StringPointerValue(backendsItem.Conf.TCPLoggingBackendConfig.Address)
					}
				}
				backends1.Format = types.StringPointerValue(backendsItem.Format)
				backends1.Name = types.StringPointerValue(backendsItem.Name)
				backends1.Type = types.StringPointerValue(backendsItem.Type)
				if backendsCount+1 > len(r.Logging.Backends) {
					r.Logging.Backends = append(r.Logging.Backends, backends1)
				} else {
					r.Logging.Backends[backendsCount].Conf = backends1.Conf
					r.Logging.Backends[backendsCount].Format = backends1.Format
					r.Logging.Backends[backendsCount].Name = backends1.Name
					r.Logging.Backends[backendsCount].Type = backends1.Type
				}
			}
			r.Logging.DefaultBackend = types.StringPointerValue(resp.Logging.DefaultBackend)
		}
		if resp.MeshServices == nil {
			r.MeshServices = nil
		} else {
			r.MeshServices = &tfTypes.MeshServices{}
			if resp.MeshServices.Mode == nil {
				r.MeshServices.Mode = nil
			} else {
				r.MeshServices.Mode = &tfTypes.Mode{}
				if resp.MeshServices.Mode.Str != nil {
					r.MeshServices.Mode.Str = types.StringPointerValue(resp.MeshServices.Mode.Str)
				}
				if resp.MeshServices.Mode.Integer != nil {
					r.MeshServices.Mode.Integer = types.Int64PointerValue(resp.MeshServices.Mode.Integer)
				}
			}
		}
		if resp.Metrics == nil {
			r.Metrics = nil
		} else {
			r.Metrics = &tfTypes.Metrics{}
			r.Metrics.Backends = []tfTypes.MeshItemBackends{}
			if len(r.Metrics.Backends) > len(resp.Metrics.Backends) {
				r.Metrics.Backends = r.Metrics.Backends[:len(resp.Metrics.Backends)]
			}
			for backendsCount1, backendsItem1 := range resp.Metrics.Backends {
				var backends3 tfTypes.MeshItemBackends
				if backendsItem1.Conf == nil {
					backends3.Conf = nil
				} else {
					backends3.Conf = &tfTypes.MeshItemConf{}
					if backendsItem1.Conf.PrometheusMetricsBackendConfig != nil {
						backends3.Conf.PrometheusMetricsBackendConfig = &tfTypes.PrometheusMetricsBackendConfig{}
						backends3.Conf.PrometheusMetricsBackendConfig.Aggregate = []tfTypes.Aggregate{}
						for aggregateCount, aggregateItem := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Aggregate {
							var aggregate1 tfTypes.Aggregate
							aggregate1.Address = types.StringPointerValue(aggregateItem.Address)
							aggregate1.Enabled = types.BoolPointerValue(aggregateItem.Enabled)
							aggregate1.Name = types.StringPointerValue(aggregateItem.Name)
							aggregate1.Path = types.StringPointerValue(aggregateItem.Path)
							aggregate1.Port = types.Int64PointerValue(aggregateItem.Port)
							if aggregateCount+1 > len(backends3.Conf.PrometheusMetricsBackendConfig.Aggregate) {
								backends3.Conf.PrometheusMetricsBackendConfig.Aggregate = append(backends3.Conf.PrometheusMetricsBackendConfig.Aggregate, aggregate1)
							} else {
								backends3.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Address = aggregate1.Address
								backends3.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Enabled = aggregate1.Enabled
								backends3.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Name = aggregate1.Name
								backends3.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Path = aggregate1.Path
								backends3.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Port = aggregate1.Port
							}
						}
						if backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy == nil {
							backends3.Conf.PrometheusMetricsBackendConfig.Envoy = nil
						} else {
							backends3.Conf.PrometheusMetricsBackendConfig.Envoy = &tfTypes.Envoy{}
							backends3.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex = types.StringPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex)
							backends3.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly = types.BoolPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly)
						}
						backends3.Conf.PrometheusMetricsBackendConfig.Path = types.StringPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Path)
						backends3.Conf.PrometheusMetricsBackendConfig.Port = types.Int64PointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.Port)
						backends3.Conf.PrometheusMetricsBackendConfig.SkipMTLS = types.BoolPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.SkipMTLS)
						if len(backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags) > 0 {
							backends3.Conf.PrometheusMetricsBackendConfig.Tags = make(map[string]types.String, len(backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags))
							for key3, value3 := range backendsItem1.Conf.PrometheusMetricsBackendConfig.Tags {
								backends3.Conf.PrometheusMetricsBackendConfig.Tags[key3] = types.StringValue(value3)
							}
						}
						if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS == nil {
							backends3.Conf.PrometheusMetricsBackendConfig.TLS = nil
						} else {
							backends3.Conf.PrometheusMetricsBackendConfig.TLS = &tfTypes.MeshServices{}
							if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode == nil {
								backends3.Conf.PrometheusMetricsBackendConfig.TLS.Mode = nil
							} else {
								backends3.Conf.PrometheusMetricsBackendConfig.TLS.Mode = &tfTypes.Mode{}
								if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str != nil {
									backends3.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str = types.StringPointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str)
								}
								if backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer != nil {
									backends3.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer = types.Int64PointerValue(backendsItem1.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer)
								}
							}
						}
					}
				}
				backends3.Name = types.StringPointerValue(backendsItem1.Name)
				backends3.Type = types.StringPointerValue(backendsItem1.Type)
				if backendsCount1+1 > len(r.Metrics.Backends) {
					r.Metrics.Backends = append(r.Metrics.Backends, backends3)
				} else {
					r.Metrics.Backends[backendsCount1].Conf = backends3.Conf
					r.Metrics.Backends[backendsCount1].Name = backends3.Name
					r.Metrics.Backends[backendsCount1].Type = backends3.Type
				}
			}
			r.Metrics.EnabledBackend = types.StringPointerValue(resp.Metrics.EnabledBackend)
		}
		if resp.Mtls == nil {
			r.Mtls = nil
		} else {
			r.Mtls = &tfTypes.Mtls{}
			r.Mtls.Backends = []tfTypes.MeshItemMtlsBackends{}
			if len(r.Mtls.Backends) > len(resp.Mtls.Backends) {
				r.Mtls.Backends = r.Mtls.Backends[:len(resp.Mtls.Backends)]
			}
			for backendsCount2, backendsItem2 := range resp.Mtls.Backends {
				var backends5 tfTypes.MeshItemMtlsBackends
				if backendsItem2.Conf == nil {
					backends5.Conf = nil
				} else {
					backends5.Conf = &tfTypes.MeshItemMtlsConf{}
					if backendsItem2.Conf.ACMCertificateAuthorityConfig != nil {
						backends5.Conf.ACMCertificateAuthorityConfig = &tfTypes.ACMCertificateAuthorityConfig{}
						backends5.Conf.ACMCertificateAuthorityConfig.Arn = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.Arn)
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth == nil {
							backends5.Conf.ACMCertificateAuthorityConfig.Auth = nil
						} else {
							backends5.Conf.ACMCertificateAuthorityConfig.Auth = &tfTypes.ConfAuth{}
							if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials == nil {
								backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials = nil
							} else {
								backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials = &tfTypes.AwsCredentials{}
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey == nil {
									backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey = nil
								} else {
									backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey = &tfTypes.AccessKey{}
									typeVarResult, _ := json.Marshal(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.Type)
									backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKey.Type = types.StringValue(string(typeVarResult))
								}
								if backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret == nil {
									backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret = nil
								} else {
									backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret = &tfTypes.AccessKey{}
									typeVarResult1, _ := json.Marshal(backendsItem2.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.Type)
									backends5.Conf.ACMCertificateAuthorityConfig.Auth.AwsCredentials.AccessKeySecret.Type = types.StringValue(string(typeVarResult1))
								}
							}
						}
						if backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert == nil {
							backends5.Conf.ACMCertificateAuthorityConfig.CaCert = nil
						} else {
							backends5.Conf.ACMCertificateAuthorityConfig.CaCert = &tfTypes.AccessKey{}
							typeVarResult2, _ := json.Marshal(backendsItem2.Conf.ACMCertificateAuthorityConfig.CaCert.Type)
							backends5.Conf.ACMCertificateAuthorityConfig.CaCert.Type = types.StringValue(string(typeVarResult2))
						}
						backends5.Conf.ACMCertificateAuthorityConfig.CommonName = types.StringPointerValue(backendsItem2.Conf.ACMCertificateAuthorityConfig.CommonName)
					}
					if backendsItem2.Conf.BuiltinCertificateAuthorityConfig != nil {
						backends5.Conf.BuiltinCertificateAuthorityConfig = &tfTypes.BuiltinCertificateAuthorityConfig{}
						if backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert == nil {
							backends5.Conf.BuiltinCertificateAuthorityConfig.CaCert = nil
						} else {
							backends5.Conf.BuiltinCertificateAuthorityConfig.CaCert = &tfTypes.BuiltinCertificateAuthorityConfigConfCaCert{}
							backends5.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration = types.StringPointerValue(backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.Expiration)
							backends5.Conf.BuiltinCertificateAuthorityConfig.CaCert.RSAbits = types.Int64PointerValue(backendsItem2.Conf.BuiltinCertificateAuthorityConfig.CaCert.RSAbits)
						}
					}
					if backendsItem2.Conf.CertManagerCertificateAuthorityConfig != nil {
						backends5.Conf.CertManagerCertificateAuthorityConfig = &tfTypes.CertManagerCertificateAuthorityConfig{}
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert == nil {
							backends5.Conf.CertManagerCertificateAuthorityConfig.CaCert = nil
						} else {
							backends5.Conf.CertManagerCertificateAuthorityConfig.CaCert = &tfTypes.AccessKey{}
							typeVarResult3, _ := json.Marshal(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CaCert.Type)
							backends5.Conf.CertManagerCertificateAuthorityConfig.CaCert.Type = types.StringValue(string(typeVarResult3))
						}
						backends5.Conf.CertManagerCertificateAuthorityConfig.CommonName = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.CommonName)
						backends5.Conf.CertManagerCertificateAuthorityConfig.DNSNames = make([]types.String, 0, len(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames))
						for _, v := range backendsItem2.Conf.CertManagerCertificateAuthorityConfig.DNSNames {
							backends5.Conf.CertManagerCertificateAuthorityConfig.DNSNames = append(backends5.Conf.CertManagerCertificateAuthorityConfig.DNSNames, types.StringValue(v))
						}
						if backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef == nil {
							backends5.Conf.CertManagerCertificateAuthorityConfig.IssuerRef = nil
						} else {
							backends5.Conf.CertManagerCertificateAuthorityConfig.IssuerRef = &tfTypes.IssuerRef{}
							backends5.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Group)
							backends5.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Kind)
							backends5.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name = types.StringPointerValue(backendsItem2.Conf.CertManagerCertificateAuthorityConfig.IssuerRef.Name)
						}
					}
					if backendsItem2.Conf.ProvidedCertificateAuthorityConfig != nil {
						backends5.Conf.ProvidedCertificateAuthorityConfig = &tfTypes.ProvidedCertificateAuthorityConfig{}
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert == nil {
							backends5.Conf.ProvidedCertificateAuthorityConfig.Cert = nil
						} else {
							backends5.Conf.ProvidedCertificateAuthorityConfig.Cert = &tfTypes.AccessKey{}
							typeVarResult4, _ := json.Marshal(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Cert.Type)
							backends5.Conf.ProvidedCertificateAuthorityConfig.Cert.Type = types.StringValue(string(typeVarResult4))
						}
						if backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key == nil {
							backends5.Conf.ProvidedCertificateAuthorityConfig.Key = nil
						} else {
							backends5.Conf.ProvidedCertificateAuthorityConfig.Key = &tfTypes.AccessKey{}
							typeVarResult5, _ := json.Marshal(backendsItem2.Conf.ProvidedCertificateAuthorityConfig.Key.Type)
							backends5.Conf.ProvidedCertificateAuthorityConfig.Key.Type = types.StringValue(string(typeVarResult5))
						}
					}
					if backendsItem2.Conf.VaultCertificateAuthorityConfig != nil {
						backends5.Conf.VaultCertificateAuthorityConfig = &tfTypes.VaultCertificateAuthorityConfig{}
						if backendsItem2.Conf.VaultCertificateAuthorityConfig.Mode == nil {
							backends5.Conf.VaultCertificateAuthorityConfig.Mode = types.StringNull()
						} else {
							modeResult, _ := json.Marshal(backendsItem2.Conf.VaultCertificateAuthorityConfig.Mode)
							backends5.Conf.VaultCertificateAuthorityConfig.Mode = types.StringValue(string(modeResult))
						}
					}
				}
				if backendsItem2.DpCert == nil {
					backends5.DpCert = nil
				} else {
					backends5.DpCert = &tfTypes.DpCert{}
					if backendsItem2.DpCert.RequestTimeout == nil {
						backends5.DpCert.RequestTimeout = nil
					} else {
						backends5.DpCert.RequestTimeout = &tfTypes.RequestTimeout{}
						backends5.DpCert.RequestTimeout.Nanos = types.Int64PointerValue(backendsItem2.DpCert.RequestTimeout.Nanos)
						backends5.DpCert.RequestTimeout.Seconds = types.Int64PointerValue(backendsItem2.DpCert.RequestTimeout.Seconds)
					}
					if backendsItem2.DpCert.Rotation == nil {
						backends5.DpCert.Rotation = nil
					} else {
						backends5.DpCert.Rotation = &tfTypes.Rotation{}
						backends5.DpCert.Rotation.Expiration = types.StringPointerValue(backendsItem2.DpCert.Rotation.Expiration)
					}
				}
				if backendsItem2.Mode == nil {
					backends5.Mode = nil
				} else {
					backends5.Mode = &tfTypes.Mode{}
					if backendsItem2.Mode.Str != nil {
						backends5.Mode.Str = types.StringPointerValue(backendsItem2.Mode.Str)
					}
					if backendsItem2.Mode.Integer != nil {
						backends5.Mode.Integer = types.Int64PointerValue(backendsItem2.Mode.Integer)
					}
				}
				backends5.Name = types.StringPointerValue(backendsItem2.Name)
				if backendsItem2.RootChain == nil {
					backends5.RootChain = nil
				} else {
					backends5.RootChain = &tfTypes.RootChain{}
					if backendsItem2.RootChain.RequestTimeout == nil {
						backends5.RootChain.RequestTimeout = nil
					} else {
						backends5.RootChain.RequestTimeout = &tfTypes.RequestTimeout{}
						backends5.RootChain.RequestTimeout.Nanos = types.Int64PointerValue(backendsItem2.RootChain.RequestTimeout.Nanos)
						backends5.RootChain.RequestTimeout.Seconds = types.Int64PointerValue(backendsItem2.RootChain.RequestTimeout.Seconds)
					}
				}
				backends5.Type = types.StringPointerValue(backendsItem2.Type)
				if backendsCount2+1 > len(r.Mtls.Backends) {
					r.Mtls.Backends = append(r.Mtls.Backends, backends5)
				} else {
					r.Mtls.Backends[backendsCount2].Conf = backends5.Conf
					r.Mtls.Backends[backendsCount2].DpCert = backends5.DpCert
					r.Mtls.Backends[backendsCount2].Mode = backends5.Mode
					r.Mtls.Backends[backendsCount2].Name = backends5.Name
					r.Mtls.Backends[backendsCount2].RootChain = backends5.RootChain
					r.Mtls.Backends[backendsCount2].Type = backends5.Type
				}
			}
			r.Mtls.EnabledBackend = types.StringPointerValue(resp.Mtls.EnabledBackend)
			r.Mtls.SkipValidation = types.BoolPointerValue(resp.Mtls.SkipValidation)
		}
		r.Name = types.StringValue(resp.Name)
		if resp.Networking == nil {
			r.Networking = nil
		} else {
			r.Networking = &tfTypes.Networking{}
			if resp.Networking.Outbound == nil {
				r.Networking.Outbound = nil
			} else {
				r.Networking.Outbound = &tfTypes.Outbound{}
				r.Networking.Outbound.Passthrough = types.BoolPointerValue(resp.Networking.Outbound.Passthrough)
			}
		}
		if resp.Routing == nil {
			r.Routing = nil
		} else {
			r.Routing = &tfTypes.Routing{}
			r.Routing.DefaultForbidMeshExternalServiceAccess = types.BoolPointerValue(resp.Routing.DefaultForbidMeshExternalServiceAccess)
			r.Routing.LocalityAwareLoadBalancing = types.BoolPointerValue(resp.Routing.LocalityAwareLoadBalancing)
			r.Routing.ZoneEgress = types.BoolPointerValue(resp.Routing.ZoneEgress)
		}
		r.SkipCreatingInitialPolicies = make([]types.String, 0, len(resp.SkipCreatingInitialPolicies))
		for _, v := range resp.SkipCreatingInitialPolicies {
			r.SkipCreatingInitialPolicies = append(r.SkipCreatingInitialPolicies, types.StringValue(v))
		}
		if resp.Tracing == nil {
			r.Tracing = nil
		} else {
			r.Tracing = &tfTypes.Tracing{}
			r.Tracing.Backends = []tfTypes.MeshItemTracingBackends{}
			if len(r.Tracing.Backends) > len(resp.Tracing.Backends) {
				r.Tracing.Backends = r.Tracing.Backends[:len(resp.Tracing.Backends)]
			}
			for backendsCount3, backendsItem3 := range resp.Tracing.Backends {
				var backends7 tfTypes.MeshItemTracingBackends
				if backendsItem3.Conf == nil {
					backends7.Conf = nil
				} else {
					backends7.Conf = &tfTypes.MeshItemTracingConf{}
					if backendsItem3.Conf.DatadogTracingBackendConfig != nil {
						backends7.Conf.DatadogTracingBackendConfig = &tfTypes.DatadogTracingBackendConfig{}
						backends7.Conf.DatadogTracingBackendConfig.Address = types.StringPointerValue(backendsItem3.Conf.DatadogTracingBackendConfig.Address)
						backends7.Conf.DatadogTracingBackendConfig.Port = types.Int64PointerValue(backendsItem3.Conf.DatadogTracingBackendConfig.Port)
						backends7.Conf.DatadogTracingBackendConfig.SplitService = types.BoolPointerValue(backendsItem3.Conf.DatadogTracingBackendConfig.SplitService)
					}
					if backendsItem3.Conf.ZipkinTracingBackendConfig != nil {
						backends7.Conf.ZipkinTracingBackendConfig = &tfTypes.ZipkinTracingBackendConfig{}
						backends7.Conf.ZipkinTracingBackendConfig.APIVersion = types.StringPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.APIVersion)
						backends7.Conf.ZipkinTracingBackendConfig.SharedSpanContext = types.BoolPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.SharedSpanContext)
						backends7.Conf.ZipkinTracingBackendConfig.TraceId128bit = types.BoolPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.TraceId128bit)
						backends7.Conf.ZipkinTracingBackendConfig.URL = types.StringPointerValue(backendsItem3.Conf.ZipkinTracingBackendConfig.URL)
					}
				}
				backends7.Name = types.StringPointerValue(backendsItem3.Name)
				if backendsItem3.Sampling != nil {
					backends7.Sampling = types.NumberValue(big.NewFloat(float64(*backendsItem3.Sampling)))
				} else {
					backends7.Sampling = types.NumberNull()
				}
				backends7.Type = types.StringPointerValue(backendsItem3.Type)
				if backendsCount3+1 > len(r.Tracing.Backends) {
					r.Tracing.Backends = append(r.Tracing.Backends, backends7)
				} else {
					r.Tracing.Backends[backendsCount3].Conf = backends7.Conf
					r.Tracing.Backends[backendsCount3].Name = backends7.Name
					r.Tracing.Backends[backendsCount3].Sampling = backends7.Sampling
					r.Tracing.Backends[backendsCount3].Type = backends7.Type
				}
			}
			r.Tracing.DefaultBackend = types.StringPointerValue(resp.Tracing.DefaultBackend)
		}
		r.Type = types.StringValue(resp.Type)
	}
}
