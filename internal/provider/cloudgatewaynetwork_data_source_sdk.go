// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *CloudGatewayNetworkDataSourceModel) ToOperationsGetNetworkRequest(ctx context.Context) (*operations.GetNetworkRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.ID.ValueString()

	out := operations.GetNetworkRequest{
		NetworkID: networkID,
	}

	return &out, diags
}

func (r *CloudGatewayNetworkDataSourceModel) RefreshFromSharedNetwork(ctx context.Context, resp *shared.Network) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AvailabilityZones = make([]types.String, 0, len(resp.AvailabilityZones))
		for _, v := range resp.AvailabilityZones {
			r.AvailabilityZones = append(r.AvailabilityZones, types.StringValue(v))
		}
		r.CidrBlock = types.StringValue(resp.CidrBlock)
		r.CloudGatewayProviderAccountID = types.StringValue(resp.CloudGatewayProviderAccountID)
		r.ConfigurationReferenceCount = types.Int64Value(resp.ConfigurationReferenceCount)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Default = types.BoolValue(resp.Default)
		r.EntityVersion = types.Int64Value(resp.EntityVersion)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.ProviderMetadata.SubnetIds = make([]types.String, 0, len(resp.ProviderMetadata.SubnetIds))
		for _, v := range resp.ProviderMetadata.SubnetIds {
			r.ProviderMetadata.SubnetIds = append(r.ProviderMetadata.SubnetIds, types.StringValue(v))
		}
		r.ProviderMetadata.VpcID = types.StringPointerValue(resp.ProviderMetadata.VpcID)
		r.Region = types.StringValue(resp.Region)
		r.TransitGatewayCount = types.Int64Value(resp.TransitGatewayCount)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
