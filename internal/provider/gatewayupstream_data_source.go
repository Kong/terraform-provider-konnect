// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &GatewayUpstreamDataSource{}
var _ datasource.DataSourceWithConfigure = &GatewayUpstreamDataSource{}

func NewGatewayUpstreamDataSource() datasource.DataSource {
	return &GatewayUpstreamDataSource{}
}

// GatewayUpstreamDataSource is the data source implementation.
type GatewayUpstreamDataSource struct {
	client *sdk.Konnect
}

// GatewayUpstreamDataSourceModel describes the data model.
type GatewayUpstreamDataSourceModel struct {
	Algorithm              types.String          `tfsdk:"algorithm"`
	ClientCertificate      *tfTypes.ACLConsumer  `tfsdk:"client_certificate"`
	ControlPlaneID         types.String          `tfsdk:"control_plane_id"`
	CreatedAt              types.Int64           `tfsdk:"created_at"`
	HashFallback           types.String          `tfsdk:"hash_fallback"`
	HashFallbackHeader     types.String          `tfsdk:"hash_fallback_header"`
	HashFallbackQueryArg   types.String          `tfsdk:"hash_fallback_query_arg"`
	HashFallbackURICapture types.String          `tfsdk:"hash_fallback_uri_capture"`
	HashOn                 types.String          `tfsdk:"hash_on"`
	HashOnCookie           types.String          `tfsdk:"hash_on_cookie"`
	HashOnCookiePath       types.String          `tfsdk:"hash_on_cookie_path"`
	HashOnHeader           types.String          `tfsdk:"hash_on_header"`
	HashOnQueryArg         types.String          `tfsdk:"hash_on_query_arg"`
	HashOnURICapture       types.String          `tfsdk:"hash_on_uri_capture"`
	Healthchecks           *tfTypes.Healthchecks `tfsdk:"healthchecks"`
	HostHeader             types.String          `tfsdk:"host_header"`
	ID                     types.String          `tfsdk:"id"`
	Name                   types.String          `tfsdk:"name"`
	Slots                  types.Int64           `tfsdk:"slots"`
	Tags                   []types.String        `tfsdk:"tags"`
	UseSrvName             types.Bool            `tfsdk:"use_srv_name"`
}

// Metadata returns the data source type name.
func (r *GatewayUpstreamDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_gateway_upstream"
}

// Schema defines the schema for the data source.
func (r *GatewayUpstreamDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "GatewayUpstream DataSource",

		Attributes: map[string]schema.Attribute{
			"algorithm": schema.StringAttribute{
				Computed:    true,
				Description: `Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin"]`,
			},
			"client_certificate": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.`,
			},
			"control_plane_id": schema.StringAttribute{
				Required:    true,
				Description: `The UUID of your control plane. This variable is available in the Konnect manager.`,
			},
			"created_at": schema.Int64Attribute{
				Computed:    true,
				Description: `Unix epoch when the resource was created.`,
			},
			"hash_fallback": schema.StringAttribute{
				Computed:    true,
				Description: `What to use as hashing input if the primary ` + "`" + `hash_on` + "`" + ` does not return a hash (eg. header is missing, or no Consumer identified). Not available if ` + "`" + `hash_on` + "`" + ` is set to ` + "`" + `cookie` + "`" + `. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query_arg", "uri_capture"]`,
			},
			"hash_fallback_header": schema.StringAttribute{
				Computed:    true,
				Description: `The header name to take the value from as hash input. Only required when ` + "`" + `hash_fallback` + "`" + ` is set to ` + "`" + `header` + "`" + `.`,
			},
			"hash_fallback_query_arg": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the query string argument to take the value from as hash input. Only required when ` + "`" + `hash_fallback` + "`" + ` is set to ` + "`" + `query_arg` + "`" + `.`,
			},
			"hash_fallback_uri_capture": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the route URI capture to take the value from as hash input. Only required when ` + "`" + `hash_fallback` + "`" + ` is set to ` + "`" + `uri_capture` + "`" + `.`,
			},
			"hash_on": schema.StringAttribute{
				Computed:    true,
				Description: `What to use as hashing input. Using ` + "`" + `none` + "`" + ` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query_arg", "uri_capture"]`,
			},
			"hash_on_cookie": schema.StringAttribute{
				Computed:    true,
				Description: `The cookie name to take the value from as hash input. Only required when ` + "`" + `hash_on` + "`" + ` or ` + "`" + `hash_fallback` + "`" + ` is set to ` + "`" + `cookie` + "`" + `. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.`,
			},
			"hash_on_cookie_path": schema.StringAttribute{
				Computed:    true,
				Description: `The cookie path to set in the response headers. Only required when ` + "`" + `hash_on` + "`" + ` or ` + "`" + `hash_fallback` + "`" + ` is set to ` + "`" + `cookie` + "`" + `.`,
			},
			"hash_on_header": schema.StringAttribute{
				Computed:    true,
				Description: `The header name to take the value from as hash input. Only required when ` + "`" + `hash_on` + "`" + ` is set to ` + "`" + `header` + "`" + `.`,
			},
			"hash_on_query_arg": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the query string argument to take the value from as hash input. Only required when ` + "`" + `hash_on` + "`" + ` is set to ` + "`" + `query_arg` + "`" + `.`,
			},
			"hash_on_uri_capture": schema.StringAttribute{
				Computed:    true,
				Description: `The name of the route URI capture to take the value from as hash input. Only required when ` + "`" + `hash_on` + "`" + ` is set to ` + "`" + `uri_capture` + "`" + `.`,
			},
			"healthchecks": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"concurrency": schema.Int64Attribute{
								Computed: true,
							},
							"headers": schema.MapAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"healthy": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"http_statuses": schema.ListAttribute{
										Computed:    true,
										ElementType: types.Int64Type,
									},
									"interval": schema.NumberAttribute{
										Computed: true,
									},
									"successes": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
							"http_path": schema.StringAttribute{
								Computed: true,
							},
							"https_sni": schema.StringAttribute{
								Computed: true,
							},
							"https_verify_certificate": schema.BoolAttribute{
								Computed: true,
							},
							"timeout": schema.NumberAttribute{
								Computed: true,
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["tcp", "http", "https", "grpc", "grpcs"]`,
							},
							"unhealthy": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"http_failures": schema.Int64Attribute{
										Computed: true,
									},
									"http_statuses": schema.ListAttribute{
										Computed:    true,
										ElementType: types.Int64Type,
									},
									"interval": schema.NumberAttribute{
										Computed: true,
									},
									"tcp_failures": schema.Int64Attribute{
										Computed: true,
									},
									"timeouts": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
						},
					},
					"passive": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"healthy": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"http_statuses": schema.ListAttribute{
										Computed:    true,
										ElementType: types.Int64Type,
									},
									"successes": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["tcp", "http", "https", "grpc", "grpcs"]`,
							},
							"unhealthy": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"http_failures": schema.Int64Attribute{
										Computed: true,
									},
									"http_statuses": schema.ListAttribute{
										Computed:    true,
										ElementType: types.Int64Type,
									},
									"tcp_failures": schema.Int64Attribute{
										Computed: true,
									},
									"timeouts": schema.Int64Attribute{
										Computed: true,
									},
								},
							},
						},
					},
					"threshold": schema.NumberAttribute{
						Computed: true,
					},
				},
			},
			"host_header": schema.StringAttribute{
				Computed:    true,
				Description: `The hostname to be used as ` + "`" + `Host` + "`" + ` header when proxying requests through Kong.`,
			},
			"id": schema.StringAttribute{
				Required:    true,
				Description: `ID of the Upstream to lookup`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `This is a hostname, which must be equal to the ` + "`" + `host` + "`" + ` of a Service.`,
			},
			"slots": schema.Int64Attribute{
				Computed:    true,
				Description: `The number of slots in the load balancer algorithm. If ` + "`" + `algorithm` + "`" + ` is set to ` + "`" + `round-robin` + "`" + `, this setting determines the maximum number of slots. If ` + "`" + `algorithm` + "`" + ` is set to ` + "`" + `consistent-hashing` + "`" + `, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range ` + "`" + `10` + "`" + `-` + "`" + `65536` + "`" + `.`,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An optional set of strings associated with the Upstream for grouping and filtering.`,
			},
			"use_srv_name": schema.BoolAttribute{
				Computed:    true,
				Description: `If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream ` + "`" + `Host` + "`" + `.`,
			},
		},
	}
}

func (r *GatewayUpstreamDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GatewayUpstreamDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *GatewayUpstreamDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	controlPlaneID := data.ControlPlaneID.ValueString()
	upstreamID := data.ID.ValueString()
	request := operations.GetUpstreamRequest{
		ControlPlaneID: controlPlaneID,
		UpstreamID:     upstreamID,
	}
	res, err := r.client.Upstreams.GetUpstream(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.Upstream == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedUpstream(res.Upstream)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
