// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginForwardProxyResourceModel) RefreshFromSharedForwardProxyPlugin(ctx context.Context, resp *shared.ForwardProxyPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.ForwardProxyPluginConfig{}
			r.Config.AuthPassword = types.StringPointerValue(resp.Config.AuthPassword)
			r.Config.AuthUsername = types.StringPointerValue(resp.Config.AuthUsername)
			r.Config.HTTPProxyHost = types.StringPointerValue(resp.Config.HTTPProxyHost)
			r.Config.HTTPProxyPort = types.Int64PointerValue(resp.Config.HTTPProxyPort)
			r.Config.HTTPSProxyHost = types.StringPointerValue(resp.Config.HTTPSProxyHost)
			r.Config.HTTPSProxyPort = types.Int64PointerValue(resp.Config.HTTPSProxyPort)
			r.Config.HTTPSVerify = types.BoolPointerValue(resp.Config.HTTPSVerify)
			if resp.Config.ProxyScheme != nil {
				r.Config.ProxyScheme = types.StringValue(string(*resp.Config.ProxyScheme))
			} else {
				r.Config.ProxyScheme = types.StringNull()
			}
			if resp.Config.XHeaders != nil {
				r.Config.XHeaders = types.StringValue(string(*resp.Config.XHeaders))
			} else {
				r.Config.XHeaders = types.StringNull()
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.AcePluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.AcePluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.AcePluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginForwardProxyResourceModel) ToOperationsCreateForwardproxyPluginRequest(ctx context.Context) (*operations.CreateForwardproxyPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	forwardProxyPlugin, forwardProxyPluginDiags := r.ToSharedForwardProxyPlugin(ctx)
	diags.Append(forwardProxyPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateForwardproxyPluginRequest{
		ControlPlaneID:     controlPlaneID,
		ForwardProxyPlugin: *forwardProxyPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginForwardProxyResourceModel) ToOperationsDeleteForwardproxyPluginRequest(ctx context.Context) (*operations.DeleteForwardproxyPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteForwardproxyPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginForwardProxyResourceModel) ToOperationsGetForwardproxyPluginRequest(ctx context.Context) (*operations.GetForwardproxyPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetForwardproxyPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginForwardProxyResourceModel) ToOperationsUpdateForwardproxyPluginRequest(ctx context.Context) (*operations.UpdateForwardproxyPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	forwardProxyPlugin, forwardProxyPluginDiags := r.ToSharedForwardProxyPlugin(ctx)
	diags.Append(forwardProxyPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateForwardproxyPluginRequest{
		PluginID:           pluginID,
		ControlPlaneID:     controlPlaneID,
		ForwardProxyPlugin: *forwardProxyPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginForwardProxyResourceModel) ToSharedForwardProxyPlugin(ctx context.Context) (*shared.ForwardProxyPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.ForwardProxyPluginOrdering
	if r.Ordering != nil {
		var after *shared.ForwardProxyPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.ForwardProxyPluginAfter{
				Access: access,
			}
		}
		var before *shared.ForwardProxyPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.ForwardProxyPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.ForwardProxyPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.ForwardProxyPluginPartials
	if r.Partials != nil {
		partials = make([]shared.ForwardProxyPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.ForwardProxyPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.ForwardProxyPluginConfig
	if r.Config != nil {
		authPassword := new(string)
		if !r.Config.AuthPassword.IsUnknown() && !r.Config.AuthPassword.IsNull() {
			*authPassword = r.Config.AuthPassword.ValueString()
		} else {
			authPassword = nil
		}
		authUsername := new(string)
		if !r.Config.AuthUsername.IsUnknown() && !r.Config.AuthUsername.IsNull() {
			*authUsername = r.Config.AuthUsername.ValueString()
		} else {
			authUsername = nil
		}
		httpProxyHost := new(string)
		if !r.Config.HTTPProxyHost.IsUnknown() && !r.Config.HTTPProxyHost.IsNull() {
			*httpProxyHost = r.Config.HTTPProxyHost.ValueString()
		} else {
			httpProxyHost = nil
		}
		httpProxyPort := new(int64)
		if !r.Config.HTTPProxyPort.IsUnknown() && !r.Config.HTTPProxyPort.IsNull() {
			*httpProxyPort = r.Config.HTTPProxyPort.ValueInt64()
		} else {
			httpProxyPort = nil
		}
		httpsProxyHost := new(string)
		if !r.Config.HTTPSProxyHost.IsUnknown() && !r.Config.HTTPSProxyHost.IsNull() {
			*httpsProxyHost = r.Config.HTTPSProxyHost.ValueString()
		} else {
			httpsProxyHost = nil
		}
		httpsProxyPort := new(int64)
		if !r.Config.HTTPSProxyPort.IsUnknown() && !r.Config.HTTPSProxyPort.IsNull() {
			*httpsProxyPort = r.Config.HTTPSProxyPort.ValueInt64()
		} else {
			httpsProxyPort = nil
		}
		httpsVerify := new(bool)
		if !r.Config.HTTPSVerify.IsUnknown() && !r.Config.HTTPSVerify.IsNull() {
			*httpsVerify = r.Config.HTTPSVerify.ValueBool()
		} else {
			httpsVerify = nil
		}
		proxyScheme := new(shared.ProxyScheme)
		if !r.Config.ProxyScheme.IsUnknown() && !r.Config.ProxyScheme.IsNull() {
			*proxyScheme = shared.ProxyScheme(r.Config.ProxyScheme.ValueString())
		} else {
			proxyScheme = nil
		}
		xHeaders := new(shared.XHeaders)
		if !r.Config.XHeaders.IsUnknown() && !r.Config.XHeaders.IsNull() {
			*xHeaders = shared.XHeaders(r.Config.XHeaders.ValueString())
		} else {
			xHeaders = nil
		}
		config = &shared.ForwardProxyPluginConfig{
			AuthPassword:   authPassword,
			AuthUsername:   authUsername,
			HTTPProxyHost:  httpProxyHost,
			HTTPProxyPort:  httpProxyPort,
			HTTPSProxyHost: httpsProxyHost,
			HTTPSProxyPort: httpsProxyPort,
			HTTPSVerify:    httpsVerify,
			ProxyScheme:    proxyScheme,
			XHeaders:       xHeaders,
		}
	}
	var consumer *shared.ForwardProxyPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.ForwardProxyPluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.ForwardProxyPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.ForwardProxyPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.ForwardProxyPluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.ForwardProxyPluginRoute{
			ID: id3,
		}
	}
	var service *shared.ForwardProxyPluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.ForwardProxyPluginService{
			ID: id4,
		}
	}
	out := shared.ForwardProxyPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
