// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *CloudGatewayConfigurationResourceModel) ToSharedCreateConfigurationRequest(ctx context.Context) (*shared.CreateConfigurationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	controlPlaneGeo := shared.ControlPlaneGeo(r.ControlPlaneGeo.ValueString())
	var version string
	version = r.Version.ValueString()

	dataplaneGroups := make([]shared.CreateConfigurationDataPlaneGroup, 0, len(r.DataplaneGroups))
	for _, dataplaneGroupsItem := range r.DataplaneGroups {
		provider := shared.ProviderName(dataplaneGroupsItem.Provider.ValueString())
		var region string
		region = dataplaneGroupsItem.Region.ValueString()

		var cloudGatewayNetworkID string
		cloudGatewayNetworkID = dataplaneGroupsItem.CloudGatewayNetworkID.ValueString()

		var autoscale shared.ConfigurationDataPlaneGroupAutoscale
		var configurationDataPlaneGroupAutoscaleStatic *shared.ConfigurationDataPlaneGroupAutoscaleStatic
		if dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic != nil {
			kind := shared.Kind(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.Kind.ValueString())
			instanceType := shared.InstanceTypeName(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.InstanceType.ValueString())
			var requestedInstances int64
			requestedInstances = dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.RequestedInstances.ValueInt64()

			configurationDataPlaneGroupAutoscaleStatic = &shared.ConfigurationDataPlaneGroupAutoscaleStatic{
				Kind:               kind,
				InstanceType:       instanceType,
				RequestedInstances: requestedInstances,
			}
		}
		if configurationDataPlaneGroupAutoscaleStatic != nil {
			autoscale = shared.ConfigurationDataPlaneGroupAutoscale{
				ConfigurationDataPlaneGroupAutoscaleStatic: configurationDataPlaneGroupAutoscaleStatic,
			}
		}
		var configurationDataPlaneGroupAutoscaleAutopilot *shared.ConfigurationDataPlaneGroupAutoscaleAutopilot
		if dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot != nil {
			kind1 := shared.ConfigurationDataPlaneGroupAutoscaleAutopilotKind(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.Kind.ValueString())
			var baseRps int64
			baseRps = dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.BaseRps.ValueInt64()

			maxRps := new(int64)
			if !dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps.IsUnknown() && !dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps.IsNull() {
				*maxRps = dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps.ValueInt64()
			} else {
				maxRps = nil
			}
			configurationDataPlaneGroupAutoscaleAutopilot = &shared.ConfigurationDataPlaneGroupAutoscaleAutopilot{
				Kind:    kind1,
				BaseRps: baseRps,
				MaxRps:  maxRps,
			}
		}
		if configurationDataPlaneGroupAutoscaleAutopilot != nil {
			autoscale = shared.ConfigurationDataPlaneGroupAutoscale{
				ConfigurationDataPlaneGroupAutoscaleAutopilot: configurationDataPlaneGroupAutoscaleAutopilot,
			}
		}
		environment := make([]shared.ConfigurationDataPlaneGroupEnvironmentField, 0, len(dataplaneGroupsItem.Environment))
		for _, environmentItem := range dataplaneGroupsItem.Environment {
			var name string
			name = environmentItem.Name.ValueString()

			var value string
			value = environmentItem.Value.ValueString()

			environment = append(environment, shared.ConfigurationDataPlaneGroupEnvironmentField{
				Name:  name,
				Value: value,
			})
		}
		dataplaneGroups = append(dataplaneGroups, shared.CreateConfigurationDataPlaneGroup{
			Provider:              provider,
			Region:                region,
			CloudGatewayNetworkID: cloudGatewayNetworkID,
			Autoscale:             autoscale,
			Environment:           environment,
		})
	}
	apiAccess := new(shared.APIAccess)
	if !r.APIAccess.IsUnknown() && !r.APIAccess.IsNull() {
		*apiAccess = shared.APIAccess(r.APIAccess.ValueString())
	} else {
		apiAccess = nil
	}
	out := shared.CreateConfigurationRequest{
		ControlPlaneID:  controlPlaneID,
		ControlPlaneGeo: controlPlaneGeo,
		Version:         version,
		DataplaneGroups: dataplaneGroups,
		APIAccess:       apiAccess,
	}

	return &out, diags
}

func (r *CloudGatewayConfigurationResourceModel) ToOperationsGetConfigurationRequest(ctx context.Context) (*operations.GetConfigurationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var configurationID string
	configurationID = r.ID.ValueString()

	out := operations.GetConfigurationRequest{
		ConfigurationID: configurationID,
	}

	return &out, diags
}

func (r *CloudGatewayConfigurationResourceModel) RefreshFromSharedConfigurationManifest(ctx context.Context, resp *shared.ConfigurationManifest) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.APIAccess != nil {
			r.APIAccess = types.StringValue(string(*resp.APIAccess))
		} else {
			r.APIAccess = types.StringNull()
		}
		r.ControlPlaneGeo = types.StringValue(string(resp.ControlPlaneGeo))
		r.ControlPlaneID = types.StringValue(resp.ControlPlaneID)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.DataplaneGroupConfig = []tfTypes.ConfigurationDataPlaneGroupConfig{}
		if len(r.DataplaneGroupConfig) > len(resp.DataplaneGroupConfig) {
			r.DataplaneGroupConfig = r.DataplaneGroupConfig[:len(resp.DataplaneGroupConfig)]
		}
		for dataplaneGroupConfigCount, dataplaneGroupConfigItem := range resp.DataplaneGroupConfig {
			var dataplaneGroupConfig tfTypes.ConfigurationDataPlaneGroupConfig
			if dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot != nil {
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot = &tfTypes.ConfigurationDataPlaneGroupAutoscaleAutopilot{}
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.BaseRps = types.Int64Value(dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.BaseRps)
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.Kind = types.StringValue(string(dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.Kind))
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps = types.Int64PointerValue(dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps)
			}
			if dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic != nil {
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic = &tfTypes.ConfigurationDataPlaneGroupAutoscaleStatic{}
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.InstanceType = types.StringValue(string(dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.InstanceType))
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.Kind = types.StringValue(string(dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.Kind))
				dataplaneGroupConfig.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.RequestedInstances = types.Int64Value(dataplaneGroupConfigItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.RequestedInstances)
			}
			dataplaneGroupConfig.CloudGatewayNetworkID = types.StringValue(dataplaneGroupConfigItem.CloudGatewayNetworkID)
			dataplaneGroupConfig.Environment = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
			for environmentCount, environmentItem := range dataplaneGroupConfigItem.Environment {
				var environment tfTypes.ConfigurationDataPlaneGroupEnvironmentField
				environment.Name = types.StringValue(environmentItem.Name)
				environment.Value = types.StringValue(environmentItem.Value)
				if environmentCount+1 > len(dataplaneGroupConfig.Environment) {
					dataplaneGroupConfig.Environment = append(dataplaneGroupConfig.Environment, environment)
				} else {
					dataplaneGroupConfig.Environment[environmentCount].Name = environment.Name
					dataplaneGroupConfig.Environment[environmentCount].Value = environment.Value
				}
			}
			dataplaneGroupConfig.Provider = types.StringValue(string(dataplaneGroupConfigItem.Provider))
			dataplaneGroupConfig.Region = types.StringValue(dataplaneGroupConfigItem.Region)
			if dataplaneGroupConfigCount+1 > len(r.DataplaneGroupConfig) {
				r.DataplaneGroupConfig = append(r.DataplaneGroupConfig, dataplaneGroupConfig)
			} else {
				r.DataplaneGroupConfig[dataplaneGroupConfigCount].Autoscale = dataplaneGroupConfig.Autoscale
				r.DataplaneGroupConfig[dataplaneGroupConfigCount].CloudGatewayNetworkID = dataplaneGroupConfig.CloudGatewayNetworkID
				r.DataplaneGroupConfig[dataplaneGroupConfigCount].Environment = dataplaneGroupConfig.Environment
				r.DataplaneGroupConfig[dataplaneGroupConfigCount].Provider = dataplaneGroupConfig.Provider
				r.DataplaneGroupConfig[dataplaneGroupConfigCount].Region = dataplaneGroupConfig.Region
			}
		}
		r.DataplaneGroups = []tfTypes.ConfigurationDataPlaneGroup{}
		if len(r.DataplaneGroups) > len(resp.DataplaneGroups) {
			r.DataplaneGroups = r.DataplaneGroups[:len(resp.DataplaneGroups)]
		}
		for dataplaneGroupsCount, dataplaneGroupsItem := range resp.DataplaneGroups {
			var dataplaneGroups tfTypes.ConfigurationDataPlaneGroup
			if dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot != nil {
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot = &tfTypes.ConfigurationDataPlaneGroupAutoscaleAutopilot{}
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.BaseRps = types.Int64Value(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.BaseRps)
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.Kind = types.StringValue(string(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.Kind))
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps = types.Int64PointerValue(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleAutopilot.MaxRps)
			}
			if dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic != nil {
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic = &tfTypes.ConfigurationDataPlaneGroupAutoscaleStatic{}
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.InstanceType = types.StringValue(string(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.InstanceType))
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.Kind = types.StringValue(string(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.Kind))
				dataplaneGroups.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.RequestedInstances = types.Int64Value(dataplaneGroupsItem.Autoscale.ConfigurationDataPlaneGroupAutoscaleStatic.RequestedInstances)
			}
			dataplaneGroups.CloudGatewayNetworkID = types.StringValue(dataplaneGroupsItem.CloudGatewayNetworkID)
			dataplaneGroups.CreatedAt = types.StringValue(typeconvert.TimeToString(dataplaneGroupsItem.CreatedAt))
			dataplaneGroups.EgressIPAddresses = make([]types.String, 0, len(dataplaneGroupsItem.EgressIPAddresses))
			for _, v := range dataplaneGroupsItem.EgressIPAddresses {
				dataplaneGroups.EgressIPAddresses = append(dataplaneGroups.EgressIPAddresses, types.StringValue(v))
			}
			dataplaneGroups.Environment = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
			for environmentCount1, environmentItem1 := range dataplaneGroupsItem.Environment {
				var environment1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
				environment1.Name = types.StringValue(environmentItem1.Name)
				environment1.Value = types.StringValue(environmentItem1.Value)
				if environmentCount1+1 > len(dataplaneGroups.Environment) {
					dataplaneGroups.Environment = append(dataplaneGroups.Environment, environment1)
				} else {
					dataplaneGroups.Environment[environmentCount1].Name = environment1.Name
					dataplaneGroups.Environment[environmentCount1].Value = environment1.Value
				}
			}
			dataplaneGroups.ID = types.StringValue(dataplaneGroupsItem.ID)
			dataplaneGroups.PrivateIPAddresses = make([]types.String, 0, len(dataplaneGroupsItem.PrivateIPAddresses))
			for _, v := range dataplaneGroupsItem.PrivateIPAddresses {
				dataplaneGroups.PrivateIPAddresses = append(dataplaneGroups.PrivateIPAddresses, types.StringValue(v))
			}
			dataplaneGroups.Provider = types.StringValue(string(dataplaneGroupsItem.Provider))
			dataplaneGroups.Region = types.StringValue(dataplaneGroupsItem.Region)
			dataplaneGroups.State = types.StringValue(string(dataplaneGroupsItem.State))
			dataplaneGroups.UpdatedAt = types.StringValue(typeconvert.TimeToString(dataplaneGroupsItem.UpdatedAt))
			if dataplaneGroupsCount+1 > len(r.DataplaneGroups) {
				r.DataplaneGroups = append(r.DataplaneGroups, dataplaneGroups)
			} else {
				r.DataplaneGroups[dataplaneGroupsCount].Autoscale = dataplaneGroups.Autoscale
				r.DataplaneGroups[dataplaneGroupsCount].CloudGatewayNetworkID = dataplaneGroups.CloudGatewayNetworkID
				r.DataplaneGroups[dataplaneGroupsCount].CreatedAt = dataplaneGroups.CreatedAt
				r.DataplaneGroups[dataplaneGroupsCount].EgressIPAddresses = dataplaneGroups.EgressIPAddresses
				r.DataplaneGroups[dataplaneGroupsCount].Environment = dataplaneGroups.Environment
				r.DataplaneGroups[dataplaneGroupsCount].ID = dataplaneGroups.ID
				r.DataplaneGroups[dataplaneGroupsCount].PrivateIPAddresses = dataplaneGroups.PrivateIPAddresses
				r.DataplaneGroups[dataplaneGroupsCount].Provider = dataplaneGroups.Provider
				r.DataplaneGroups[dataplaneGroupsCount].Region = dataplaneGroups.Region
				r.DataplaneGroups[dataplaneGroupsCount].State = dataplaneGroups.State
				r.DataplaneGroups[dataplaneGroupsCount].UpdatedAt = dataplaneGroups.UpdatedAt
			}
		}
		r.EntityVersion = types.Float64Value(resp.EntityVersion)
		r.ID = types.StringValue(resp.ID)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Version = types.StringValue(resp.Version)
	}

	return diags
}
