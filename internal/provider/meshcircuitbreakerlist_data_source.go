// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &MeshCircuitBreakerListDataSource{}
var _ datasource.DataSourceWithConfigure = &MeshCircuitBreakerListDataSource{}

func NewMeshCircuitBreakerListDataSource() datasource.DataSource {
	return &MeshCircuitBreakerListDataSource{}
}

// MeshCircuitBreakerListDataSource is the data source implementation.
type MeshCircuitBreakerListDataSource struct {
	client *sdk.Konnect
}

// MeshCircuitBreakerListDataSourceModel describes the data model.
type MeshCircuitBreakerListDataSourceModel struct {
	CpID   types.String                     `tfsdk:"cp_id"`
	Items  []tfTypes.MeshCircuitBreakerItem `tfsdk:"items"`
	Key    types.String                     `queryParam:"name=key" tfsdk:"key"`
	Mesh   types.String                     `tfsdk:"mesh"`
	Next   types.String                     `tfsdk:"next"`
	Offset types.Int64                      `queryParam:"style=form,explode=true,name=offset" tfsdk:"offset"`
	Size   types.Int64                      `queryParam:"style=form,explode=true,name=size" tfsdk:"size"`
	Total  types.Number                     `tfsdk:"total"`
	Value  types.String                     `queryParam:"name=value" tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *MeshCircuitBreakerListDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_circuit_breaker_list"
}

// Schema defines the schema for the data source.
func (r *MeshCircuitBreakerListDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshCircuitBreakerList DataSource",

		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the Konnect resource`,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"creation_time": schema.StringAttribute{
							Computed:    true,
							Description: `Time at which the resource was created`,
						},
						"labels": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `The labels to help identity resources`,
						},
						"mesh": schema.StringAttribute{
							Computed:    true,
							Description: `Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.`,
						},
						"modification_time": schema.StringAttribute{
							Computed:    true,
							Description: `Time at which the resource was updated`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Name of the Kuma resource`,
						},
						"spec": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"from": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"default": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"connection_limits": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"max_connection_pools": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of connection pools per cluster that are concurrently` + "\n" +
																	`supported at once. Set this for clusters which create a large number of` + "\n" +
																	`connection pools.`,
															},
															"max_connections": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of connections allowed to be made to the upstream` + "\n" +
																	`cluster.`,
															},
															"max_pending_requests": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of pending requests that are allowed to the upstream` + "\n" +
																	`cluster. This limit is applied as a connection limit for non-HTTP` + "\n" +
																	`traffic.`,
															},
															"max_requests": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of parallel requests that are allowed to be made` + "\n" +
																	`to the upstream cluster. This limit does not apply to non-HTTP traffic.`,
															},
															"max_retries": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of parallel retries that will be allowed to` + "\n" +
																	`the upstream cluster.`,
															},
														},
														MarkdownDescription: `ConnectionLimits contains configuration of each circuit breaking limit,` + "\n" +
															`which when exceeded makes the circuit breaker to become open (no traffic` + "\n" +
															`is allowed like no current is allowed in the circuits when physical` + "\n" +
															`circuit breaker ir open)`,
													},
													"outlier_detection": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"base_ejection_time": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The base time that a host is ejected for. The real time is equal to` + "\n" +
																	`the base time multiplied by the number of times the host has been` + "\n" +
																	`ejected.`,
															},
															"detectors": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"failure_percentage": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"minimum_hosts": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of hosts in a cluster in order to perform failure` + "\n" +
																					`percentage-based ejection. If the total number of hosts in the cluster is` + "\n" +
																					`less than this value, failure percentage-based ejection will not be` + "\n" +
																					`performed.`,
																			},
																			"request_volume": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of total requests that must be collected in one` + "\n" +
																					`interval (as defined by the interval duration above) to perform failure` + "\n" +
																					`percentage-based ejection for this host. If the volume is lower than this` + "\n" +
																					`setting, failure percentage-based ejection will not be performed for this` + "\n" +
																					`host.`,
																			},
																			"threshold": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The failure percentage to use when determining failure percentage-based` + "\n" +
																					`outlier detection. If the failure percentage of a given host is greater` + "\n" +
																					`than or equal to this value, it will be ejected.`,
																			},
																		},
																		MarkdownDescription: `Failure Percentage based outlier detection functions similarly to success` + "\n" +
																			`rate detection, in that it relies on success rate data from each host in` + "\n" +
																			`a cluster. However, rather than compare those values to the mean success` + "\n" +
																			`rate of the cluster as a whole, they are compared to a flat` + "\n" +
																			`user-configured threshold. This threshold is configured via the` + "\n" +
																			`outlierDetection.failurePercentageThreshold field.` + "\n" +
																			`The other configuration fields for failure percentage based detection are` + "\n" +
																			`similar to the fields for success rate detection. As with success rate` + "\n" +
																			`detection, detection will not be performed for a host if its request` + "\n" +
																			`volume over the aggregation interval is less than the` + "\n" +
																			`outlierDetection.detectors.failurePercentage.requestVolume value.` + "\n" +
																			`Detection also will not be performed for a cluster if the number of hosts` + "\n" +
																			`with the minimum required request volume in an interval is less than the` + "\n" +
																			`outlierDetection.detectors.failurePercentage.minimumHosts value.`,
																	},
																	"gateway_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive gateway failures (502, 503, 504 status codes)` + "\n" +
																					`before a consecutive gateway failure ejection occurs.`,
																			},
																		},
																		MarkdownDescription: `In the default mode (outlierDetection.splitExternalLocalOriginErrors is` + "\n" +
																			`false) this detection type takes into account a subset of 5xx errors,` + "\n" +
																			`called "gateway errors" (502, 503 or 504 status code) and local origin` + "\n" +
																			`failures, such as timeout, TCP reset etc.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true)` + "\n" +
																			`this detection type takes into account a subset of 5xx errors, called` + "\n" +
																			`"gateway errors" (502, 503 or 504 status code) and is supported only by` + "\n" +
																			`the http router.`,
																	},
																	"local_origin_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive locally originated failures before ejection` + "\n" +
																					`occurs. Parameter takes effect only when splitExternalAndLocalErrors` + "\n" +
																					`is set to true.`,
																			},
																		},
																		MarkdownDescription: `This detection type is enabled only when` + "\n" +
																			`outlierDetection.splitExternalLocalOriginErrors is true and takes into` + "\n" +
																			`account only locally originated errors (timeout, reset, etc).` + "\n" +
																			`If Envoy repeatedly cannot connect to an upstream host or communication` + "\n" +
																			`with the upstream host is repeatedly interrupted, it will be ejected.` + "\n" +
																			`Various locally originated problems are detected: timeout, TCP reset,` + "\n" +
																			`ICMP errors, etc. This detection type is supported by http router and` + "\n" +
																			`tcp proxy.`,
																	},
																	"success_rate": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"minimum_hosts": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of hosts in a cluster that must have enough request volume to` + "\n" +
																					`detect success rate outliers. If the number of hosts is less than this` + "\n" +
																					`setting, outlier detection via success rate statistics is not performed` + "\n" +
																					`for any host in the cluster.`,
																			},
																			"request_volume": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of total requests that must be collected in one` + "\n" +
																					`interval (as defined by the interval duration configured in` + "\n" +
																					`outlierDetection section) to include this host in success rate based` + "\n" +
																					`outlier detection. If the volume is lower than this setting, outlier` + "\n" +
																					`detection via success rate statistics is not performed for that host.`,
																			},
																			"standard_deviation_factor": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"integer": schema.Int64Attribute{
																						Computed: true,
																					},
																					"str": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																				MarkdownDescription: `This factor is used to determine the ejection threshold for success rate` + "\n" +
																					`outlier ejection. The ejection threshold is the difference between` + "\n" +
																					`the mean success rate, and the product of this factor and the standard` + "\n" +
																					`deviation of the mean success rate: mean - (standard_deviation *` + "\n" +
																					`success_rate_standard_deviation_factor).` + "\n" +
																					`Either int or decimal represented as string.`,
																			},
																		},
																		MarkdownDescription: `Success Rate based outlier detection aggregates success rate data from` + "\n" +
																			`every host in a cluster. Then at given intervals ejects hosts based on` + "\n" +
																			`statistical outlier detection. Success Rate outlier detection will not be` + "\n" +
																			`calculated for a host if its request volume over the aggregation interval` + "\n" +
																			`is less than the outlierDetection.detectors.successRate.requestVolume` + "\n" +
																			`value.` + "\n" +
																			`Moreover, detection will not be performed for a cluster if the number of` + "\n" +
																			`hosts with the minimum required request volume in an interval is less` + "\n" +
																			`than the outlierDetection.detectors.successRate.minimumHosts value.` + "\n" +
																			`In the default configuration mode` + "\n" +
																			`(outlierDetection.splitExternalLocalOriginErrors is false) this detection` + "\n" +
																			`type takes into account all types of errors: locally and externally` + "\n" +
																			`originated.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true),` + "\n" +
																			`locally originated errors and externally originated (transaction) errors` + "\n" +
																			`are counted and treated separately.`,
																	},
																	"total_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive server-side error responses (for HTTP traffic,` + "\n" +
																					`5xx responses; for TCP traffic, connection failures; for Redis, failure` + "\n" +
																					`to respond PONG; etc.) before a consecutive total failure ejection` + "\n" +
																					`occurs.`,
																			},
																		},
																		MarkdownDescription: `In the default mode (outlierDetection.splitExternalAndLocalErrors is` + "\n" +
																			`false) this detection type takes into account all generated errors:` + "\n" +
																			`locally originated and externally originated (transaction) errors.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true)` + "\n" +
																			`this detection type takes into account only externally originated` + "\n" +
																			`(transaction) errors, ignoring locally originated errors.` + "\n" +
																			`If an upstream host is an HTTP-server, only 5xx types of error are taken` + "\n" +
																			`into account (see Consecutive Gateway Failure for exceptions).` + "\n" +
																			`Properly formatted responses, even when they carry an operational error` + "\n" +
																			`(like index not found, access denied) are not taken into account.`,
																	},
																},
																Description: `Contains configuration for supported outlier detectors`,
															},
															"disabled": schema.BoolAttribute{
																Computed:    true,
																Description: `When set to true, outlierDetection configuration won't take any effect`,
															},
															"healthy_panic_threshold": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"integer": schema.Int64Attribute{
																		Computed: true,
																	},
																	"str": schema.StringAttribute{
																		Computed: true,
																	},
																},
																MarkdownDescription: `Allows to configure panic threshold for Envoy cluster. If not specified,` + "\n" +
																	`the default is 50%. To disable panic mode, set to 0%.` + "\n" +
																	`Either int or decimal represented as string.`,
															},
															"interval": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The time interval between ejection analysis sweeps. This can result in` + "\n" +
																	`both new ejections and hosts being returned to service.`,
															},
															"max_ejection_percent": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum % of an upstream cluster that can be ejected due to outlier` + "\n" +
																	`detection. Defaults to 10% but will eject at least one host regardless of` + "\n" +
																	`the value.`,
															},
															"split_external_and_local_errors": schema.BoolAttribute{
																Computed: true,
																MarkdownDescription: `Determines whether to distinguish local origin failures from external` + "\n" +
																	`errors. If set to true the following configuration parameters are taken` + "\n" +
																	`into account: detectors.localOriginFailures.consecutive`,
															},
														},
														MarkdownDescription: `OutlierDetection contains the configuration of the process of dynamically` + "\n" +
															`determining whether some number of hosts in an upstream cluster are` + "\n" +
															`performing unlike the others and removing them from the healthy load` + "\n" +
															`balancing set. Performance might be along different axes such as` + "\n" +
															`consecutive failures, temporal success rate, temporal latency, etc.` + "\n" +
															`Outlier detection is a form of passive health checking.`,
													},
												},
												MarkdownDescription: `Default is a configuration specific to the group of destinations` + "\n" +
													`referenced in 'targetRef'`,
											},
											"target_ref": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"kind": schema.StringAttribute{
														Computed:    true,
														Description: `Kind of the referenced resource`,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
															`Name and Namespace can be used.`,
													},
													"mesh": schema.StringAttribute{
														Computed:    true,
														Description: `Mesh is reserved for future use to identify cross mesh resources.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
															`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
													},
													"namespace": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
															`will be targeted.`,
													},
													"proxy_types": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
															`all data plane types are targeted by the policy.`,
													},
													"section_name": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
															`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
													},
													"tags": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
															`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
													},
												},
												MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
													`destinations.`,
											},
										},
									},
									Description: `From list makes a match between clients and corresponding configurations`,
								},
								"rules": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"default": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"connection_limits": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"max_connection_pools": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of connection pools per cluster that are concurrently` + "\n" +
																	`supported at once. Set this for clusters which create a large number of` + "\n" +
																	`connection pools.`,
															},
															"max_connections": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of connections allowed to be made to the upstream` + "\n" +
																	`cluster.`,
															},
															"max_pending_requests": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of pending requests that are allowed to the upstream` + "\n" +
																	`cluster. This limit is applied as a connection limit for non-HTTP` + "\n" +
																	`traffic.`,
															},
															"max_requests": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of parallel requests that are allowed to be made` + "\n" +
																	`to the upstream cluster. This limit does not apply to non-HTTP traffic.`,
															},
															"max_retries": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of parallel retries that will be allowed to` + "\n" +
																	`the upstream cluster.`,
															},
														},
														MarkdownDescription: `ConnectionLimits contains configuration of each circuit breaking limit,` + "\n" +
															`which when exceeded makes the circuit breaker to become open (no traffic` + "\n" +
															`is allowed like no current is allowed in the circuits when physical` + "\n" +
															`circuit breaker ir open)`,
													},
													"outlier_detection": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"base_ejection_time": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The base time that a host is ejected for. The real time is equal to` + "\n" +
																	`the base time multiplied by the number of times the host has been` + "\n" +
																	`ejected.`,
															},
															"detectors": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"failure_percentage": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"minimum_hosts": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of hosts in a cluster in order to perform failure` + "\n" +
																					`percentage-based ejection. If the total number of hosts in the cluster is` + "\n" +
																					`less than this value, failure percentage-based ejection will not be` + "\n" +
																					`performed.`,
																			},
																			"request_volume": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of total requests that must be collected in one` + "\n" +
																					`interval (as defined by the interval duration above) to perform failure` + "\n" +
																					`percentage-based ejection for this host. If the volume is lower than this` + "\n" +
																					`setting, failure percentage-based ejection will not be performed for this` + "\n" +
																					`host.`,
																			},
																			"threshold": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The failure percentage to use when determining failure percentage-based` + "\n" +
																					`outlier detection. If the failure percentage of a given host is greater` + "\n" +
																					`than or equal to this value, it will be ejected.`,
																			},
																		},
																		MarkdownDescription: `Failure Percentage based outlier detection functions similarly to success` + "\n" +
																			`rate detection, in that it relies on success rate data from each host in` + "\n" +
																			`a cluster. However, rather than compare those values to the mean success` + "\n" +
																			`rate of the cluster as a whole, they are compared to a flat` + "\n" +
																			`user-configured threshold. This threshold is configured via the` + "\n" +
																			`outlierDetection.failurePercentageThreshold field.` + "\n" +
																			`The other configuration fields for failure percentage based detection are` + "\n" +
																			`similar to the fields for success rate detection. As with success rate` + "\n" +
																			`detection, detection will not be performed for a host if its request` + "\n" +
																			`volume over the aggregation interval is less than the` + "\n" +
																			`outlierDetection.detectors.failurePercentage.requestVolume value.` + "\n" +
																			`Detection also will not be performed for a cluster if the number of hosts` + "\n" +
																			`with the minimum required request volume in an interval is less than the` + "\n" +
																			`outlierDetection.detectors.failurePercentage.minimumHosts value.`,
																	},
																	"gateway_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive gateway failures (502, 503, 504 status codes)` + "\n" +
																					`before a consecutive gateway failure ejection occurs.`,
																			},
																		},
																		MarkdownDescription: `In the default mode (outlierDetection.splitExternalLocalOriginErrors is` + "\n" +
																			`false) this detection type takes into account a subset of 5xx errors,` + "\n" +
																			`called "gateway errors" (502, 503 or 504 status code) and local origin` + "\n" +
																			`failures, such as timeout, TCP reset etc.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true)` + "\n" +
																			`this detection type takes into account a subset of 5xx errors, called` + "\n" +
																			`"gateway errors" (502, 503 or 504 status code) and is supported only by` + "\n" +
																			`the http router.`,
																	},
																	"local_origin_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive locally originated failures before ejection` + "\n" +
																					`occurs. Parameter takes effect only when splitExternalAndLocalErrors` + "\n" +
																					`is set to true.`,
																			},
																		},
																		MarkdownDescription: `This detection type is enabled only when` + "\n" +
																			`outlierDetection.splitExternalLocalOriginErrors is true and takes into` + "\n" +
																			`account only locally originated errors (timeout, reset, etc).` + "\n" +
																			`If Envoy repeatedly cannot connect to an upstream host or communication` + "\n" +
																			`with the upstream host is repeatedly interrupted, it will be ejected.` + "\n" +
																			`Various locally originated problems are detected: timeout, TCP reset,` + "\n" +
																			`ICMP errors, etc. This detection type is supported by http router and` + "\n" +
																			`tcp proxy.`,
																	},
																	"success_rate": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"minimum_hosts": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of hosts in a cluster that must have enough request volume to` + "\n" +
																					`detect success rate outliers. If the number of hosts is less than this` + "\n" +
																					`setting, outlier detection via success rate statistics is not performed` + "\n" +
																					`for any host in the cluster.`,
																			},
																			"request_volume": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of total requests that must be collected in one` + "\n" +
																					`interval (as defined by the interval duration configured in` + "\n" +
																					`outlierDetection section) to include this host in success rate based` + "\n" +
																					`outlier detection. If the volume is lower than this setting, outlier` + "\n" +
																					`detection via success rate statistics is not performed for that host.`,
																			},
																			"standard_deviation_factor": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"integer": schema.Int64Attribute{
																						Computed: true,
																					},
																					"str": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																				MarkdownDescription: `This factor is used to determine the ejection threshold for success rate` + "\n" +
																					`outlier ejection. The ejection threshold is the difference between` + "\n" +
																					`the mean success rate, and the product of this factor and the standard` + "\n" +
																					`deviation of the mean success rate: mean - (standard_deviation *` + "\n" +
																					`success_rate_standard_deviation_factor).` + "\n" +
																					`Either int or decimal represented as string.`,
																			},
																		},
																		MarkdownDescription: `Success Rate based outlier detection aggregates success rate data from` + "\n" +
																			`every host in a cluster. Then at given intervals ejects hosts based on` + "\n" +
																			`statistical outlier detection. Success Rate outlier detection will not be` + "\n" +
																			`calculated for a host if its request volume over the aggregation interval` + "\n" +
																			`is less than the outlierDetection.detectors.successRate.requestVolume` + "\n" +
																			`value.` + "\n" +
																			`Moreover, detection will not be performed for a cluster if the number of` + "\n" +
																			`hosts with the minimum required request volume in an interval is less` + "\n" +
																			`than the outlierDetection.detectors.successRate.minimumHosts value.` + "\n" +
																			`In the default configuration mode` + "\n" +
																			`(outlierDetection.splitExternalLocalOriginErrors is false) this detection` + "\n" +
																			`type takes into account all types of errors: locally and externally` + "\n" +
																			`originated.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true),` + "\n" +
																			`locally originated errors and externally originated (transaction) errors` + "\n" +
																			`are counted and treated separately.`,
																	},
																	"total_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive server-side error responses (for HTTP traffic,` + "\n" +
																					`5xx responses; for TCP traffic, connection failures; for Redis, failure` + "\n" +
																					`to respond PONG; etc.) before a consecutive total failure ejection` + "\n" +
																					`occurs.`,
																			},
																		},
																		MarkdownDescription: `In the default mode (outlierDetection.splitExternalAndLocalErrors is` + "\n" +
																			`false) this detection type takes into account all generated errors:` + "\n" +
																			`locally originated and externally originated (transaction) errors.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true)` + "\n" +
																			`this detection type takes into account only externally originated` + "\n" +
																			`(transaction) errors, ignoring locally originated errors.` + "\n" +
																			`If an upstream host is an HTTP-server, only 5xx types of error are taken` + "\n" +
																			`into account (see Consecutive Gateway Failure for exceptions).` + "\n" +
																			`Properly formatted responses, even when they carry an operational error` + "\n" +
																			`(like index not found, access denied) are not taken into account.`,
																	},
																},
																Description: `Contains configuration for supported outlier detectors`,
															},
															"disabled": schema.BoolAttribute{
																Computed:    true,
																Description: `When set to true, outlierDetection configuration won't take any effect`,
															},
															"healthy_panic_threshold": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"integer": schema.Int64Attribute{
																		Computed: true,
																	},
																	"str": schema.StringAttribute{
																		Computed: true,
																	},
																},
																MarkdownDescription: `Allows to configure panic threshold for Envoy cluster. If not specified,` + "\n" +
																	`the default is 50%. To disable panic mode, set to 0%.` + "\n" +
																	`Either int or decimal represented as string.`,
															},
															"interval": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The time interval between ejection analysis sweeps. This can result in` + "\n" +
																	`both new ejections and hosts being returned to service.`,
															},
															"max_ejection_percent": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum % of an upstream cluster that can be ejected due to outlier` + "\n" +
																	`detection. Defaults to 10% but will eject at least one host regardless of` + "\n" +
																	`the value.`,
															},
															"split_external_and_local_errors": schema.BoolAttribute{
																Computed: true,
																MarkdownDescription: `Determines whether to distinguish local origin failures from external` + "\n" +
																	`errors. If set to true the following configuration parameters are taken` + "\n" +
																	`into account: detectors.localOriginFailures.consecutive`,
															},
														},
														MarkdownDescription: `OutlierDetection contains the configuration of the process of dynamically` + "\n" +
															`determining whether some number of hosts in an upstream cluster are` + "\n" +
															`performing unlike the others and removing them from the healthy load` + "\n" +
															`balancing set. Performance might be along different axes such as` + "\n" +
															`consecutive failures, temporal success rate, temporal latency, etc.` + "\n" +
															`Outlier detection is a form of passive health checking.`,
													},
												},
												Description: `Default contains configuration of the inbound circuit breaker`,
											},
										},
									},
									MarkdownDescription: `Rules defines inbound circuit breaker configurations. Currently limited to` + "\n" +
										`selecting all inbound traffic, as L7 matching is not yet implemented.`,
								},
								"target_ref": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Computed:    true,
											Description: `Kind of the referenced resource`,
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Computed:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
										},
										"section_name": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
										`The resource could be either a real store object or virtual resource` + "\n" +
										`defined in place.`,
								},
								"to": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"default": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"connection_limits": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"max_connection_pools": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of connection pools per cluster that are concurrently` + "\n" +
																	`supported at once. Set this for clusters which create a large number of` + "\n" +
																	`connection pools.`,
															},
															"max_connections": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of connections allowed to be made to the upstream` + "\n" +
																	`cluster.`,
															},
															"max_pending_requests": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of pending requests that are allowed to the upstream` + "\n" +
																	`cluster. This limit is applied as a connection limit for non-HTTP` + "\n" +
																	`traffic.`,
															},
															"max_requests": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of parallel requests that are allowed to be made` + "\n" +
																	`to the upstream cluster. This limit does not apply to non-HTTP traffic.`,
															},
															"max_retries": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum number of parallel retries that will be allowed to` + "\n" +
																	`the upstream cluster.`,
															},
														},
														MarkdownDescription: `ConnectionLimits contains configuration of each circuit breaking limit,` + "\n" +
															`which when exceeded makes the circuit breaker to become open (no traffic` + "\n" +
															`is allowed like no current is allowed in the circuits when physical` + "\n" +
															`circuit breaker ir open)`,
													},
													"outlier_detection": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"base_ejection_time": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The base time that a host is ejected for. The real time is equal to` + "\n" +
																	`the base time multiplied by the number of times the host has been` + "\n" +
																	`ejected.`,
															},
															"detectors": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"failure_percentage": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"minimum_hosts": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of hosts in a cluster in order to perform failure` + "\n" +
																					`percentage-based ejection. If the total number of hosts in the cluster is` + "\n" +
																					`less than this value, failure percentage-based ejection will not be` + "\n" +
																					`performed.`,
																			},
																			"request_volume": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of total requests that must be collected in one` + "\n" +
																					`interval (as defined by the interval duration above) to perform failure` + "\n" +
																					`percentage-based ejection for this host. If the volume is lower than this` + "\n" +
																					`setting, failure percentage-based ejection will not be performed for this` + "\n" +
																					`host.`,
																			},
																			"threshold": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The failure percentage to use when determining failure percentage-based` + "\n" +
																					`outlier detection. If the failure percentage of a given host is greater` + "\n" +
																					`than or equal to this value, it will be ejected.`,
																			},
																		},
																		MarkdownDescription: `Failure Percentage based outlier detection functions similarly to success` + "\n" +
																			`rate detection, in that it relies on success rate data from each host in` + "\n" +
																			`a cluster. However, rather than compare those values to the mean success` + "\n" +
																			`rate of the cluster as a whole, they are compared to a flat` + "\n" +
																			`user-configured threshold. This threshold is configured via the` + "\n" +
																			`outlierDetection.failurePercentageThreshold field.` + "\n" +
																			`The other configuration fields for failure percentage based detection are` + "\n" +
																			`similar to the fields for success rate detection. As with success rate` + "\n" +
																			`detection, detection will not be performed for a host if its request` + "\n" +
																			`volume over the aggregation interval is less than the` + "\n" +
																			`outlierDetection.detectors.failurePercentage.requestVolume value.` + "\n" +
																			`Detection also will not be performed for a cluster if the number of hosts` + "\n" +
																			`with the minimum required request volume in an interval is less than the` + "\n" +
																			`outlierDetection.detectors.failurePercentage.minimumHosts value.`,
																	},
																	"gateway_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive gateway failures (502, 503, 504 status codes)` + "\n" +
																					`before a consecutive gateway failure ejection occurs.`,
																			},
																		},
																		MarkdownDescription: `In the default mode (outlierDetection.splitExternalLocalOriginErrors is` + "\n" +
																			`false) this detection type takes into account a subset of 5xx errors,` + "\n" +
																			`called "gateway errors" (502, 503 or 504 status code) and local origin` + "\n" +
																			`failures, such as timeout, TCP reset etc.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true)` + "\n" +
																			`this detection type takes into account a subset of 5xx errors, called` + "\n" +
																			`"gateway errors" (502, 503 or 504 status code) and is supported only by` + "\n" +
																			`the http router.`,
																	},
																	"local_origin_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive locally originated failures before ejection` + "\n" +
																					`occurs. Parameter takes effect only when splitExternalAndLocalErrors` + "\n" +
																					`is set to true.`,
																			},
																		},
																		MarkdownDescription: `This detection type is enabled only when` + "\n" +
																			`outlierDetection.splitExternalLocalOriginErrors is true and takes into` + "\n" +
																			`account only locally originated errors (timeout, reset, etc).` + "\n" +
																			`If Envoy repeatedly cannot connect to an upstream host or communication` + "\n" +
																			`with the upstream host is repeatedly interrupted, it will be ejected.` + "\n" +
																			`Various locally originated problems are detected: timeout, TCP reset,` + "\n" +
																			`ICMP errors, etc. This detection type is supported by http router and` + "\n" +
																			`tcp proxy.`,
																	},
																	"success_rate": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"minimum_hosts": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of hosts in a cluster that must have enough request volume to` + "\n" +
																					`detect success rate outliers. If the number of hosts is less than this` + "\n" +
																					`setting, outlier detection via success rate statistics is not performed` + "\n" +
																					`for any host in the cluster.`,
																			},
																			"request_volume": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The minimum number of total requests that must be collected in one` + "\n" +
																					`interval (as defined by the interval duration configured in` + "\n" +
																					`outlierDetection section) to include this host in success rate based` + "\n" +
																					`outlier detection. If the volume is lower than this setting, outlier` + "\n" +
																					`detection via success rate statistics is not performed for that host.`,
																			},
																			"standard_deviation_factor": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"integer": schema.Int64Attribute{
																						Computed: true,
																					},
																					"str": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																				MarkdownDescription: `This factor is used to determine the ejection threshold for success rate` + "\n" +
																					`outlier ejection. The ejection threshold is the difference between` + "\n" +
																					`the mean success rate, and the product of this factor and the standard` + "\n" +
																					`deviation of the mean success rate: mean - (standard_deviation *` + "\n" +
																					`success_rate_standard_deviation_factor).` + "\n" +
																					`Either int or decimal represented as string.`,
																			},
																		},
																		MarkdownDescription: `Success Rate based outlier detection aggregates success rate data from` + "\n" +
																			`every host in a cluster. Then at given intervals ejects hosts based on` + "\n" +
																			`statistical outlier detection. Success Rate outlier detection will not be` + "\n" +
																			`calculated for a host if its request volume over the aggregation interval` + "\n" +
																			`is less than the outlierDetection.detectors.successRate.requestVolume` + "\n" +
																			`value.` + "\n" +
																			`Moreover, detection will not be performed for a cluster if the number of` + "\n" +
																			`hosts with the minimum required request volume in an interval is less` + "\n" +
																			`than the outlierDetection.detectors.successRate.minimumHosts value.` + "\n" +
																			`In the default configuration mode` + "\n" +
																			`(outlierDetection.splitExternalLocalOriginErrors is false) this detection` + "\n" +
																			`type takes into account all types of errors: locally and externally` + "\n" +
																			`originated.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true),` + "\n" +
																			`locally originated errors and externally originated (transaction) errors` + "\n" +
																			`are counted and treated separately.`,
																	},
																	"total_failures": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"consecutive": schema.Int32Attribute{
																				Computed: true,
																				MarkdownDescription: `The number of consecutive server-side error responses (for HTTP traffic,` + "\n" +
																					`5xx responses; for TCP traffic, connection failures; for Redis, failure` + "\n" +
																					`to respond PONG; etc.) before a consecutive total failure ejection` + "\n" +
																					`occurs.`,
																			},
																		},
																		MarkdownDescription: `In the default mode (outlierDetection.splitExternalAndLocalErrors is` + "\n" +
																			`false) this detection type takes into account all generated errors:` + "\n" +
																			`locally originated and externally originated (transaction) errors.` + "\n" +
																			`In split mode (outlierDetection.splitExternalLocalOriginErrors is true)` + "\n" +
																			`this detection type takes into account only externally originated` + "\n" +
																			`(transaction) errors, ignoring locally originated errors.` + "\n" +
																			`If an upstream host is an HTTP-server, only 5xx types of error are taken` + "\n" +
																			`into account (see Consecutive Gateway Failure for exceptions).` + "\n" +
																			`Properly formatted responses, even when they carry an operational error` + "\n" +
																			`(like index not found, access denied) are not taken into account.`,
																	},
																},
																Description: `Contains configuration for supported outlier detectors`,
															},
															"disabled": schema.BoolAttribute{
																Computed:    true,
																Description: `When set to true, outlierDetection configuration won't take any effect`,
															},
															"healthy_panic_threshold": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"integer": schema.Int64Attribute{
																		Computed: true,
																	},
																	"str": schema.StringAttribute{
																		Computed: true,
																	},
																},
																MarkdownDescription: `Allows to configure panic threshold for Envoy cluster. If not specified,` + "\n" +
																	`the default is 50%. To disable panic mode, set to 0%.` + "\n" +
																	`Either int or decimal represented as string.`,
															},
															"interval": schema.StringAttribute{
																Computed: true,
																MarkdownDescription: `The time interval between ejection analysis sweeps. This can result in` + "\n" +
																	`both new ejections and hosts being returned to service.`,
															},
															"max_ejection_percent": schema.Int32Attribute{
																Computed: true,
																MarkdownDescription: `The maximum % of an upstream cluster that can be ejected due to outlier` + "\n" +
																	`detection. Defaults to 10% but will eject at least one host regardless of` + "\n" +
																	`the value.`,
															},
															"split_external_and_local_errors": schema.BoolAttribute{
																Computed: true,
																MarkdownDescription: `Determines whether to distinguish local origin failures from external` + "\n" +
																	`errors. If set to true the following configuration parameters are taken` + "\n" +
																	`into account: detectors.localOriginFailures.consecutive`,
															},
														},
														MarkdownDescription: `OutlierDetection contains the configuration of the process of dynamically` + "\n" +
															`determining whether some number of hosts in an upstream cluster are` + "\n" +
															`performing unlike the others and removing them from the healthy load` + "\n" +
															`balancing set. Performance might be along different axes such as` + "\n" +
															`consecutive failures, temporal success rate, temporal latency, etc.` + "\n" +
															`Outlier detection is a form of passive health checking.`,
													},
												},
												MarkdownDescription: `Default is a configuration specific to the group of destinations` + "\n" +
													`referenced in 'targetRef'`,
											},
											"target_ref": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"kind": schema.StringAttribute{
														Computed:    true,
														Description: `Kind of the referenced resource`,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
															`Name and Namespace can be used.`,
													},
													"mesh": schema.StringAttribute{
														Computed:    true,
														Description: `Mesh is reserved for future use to identify cross mesh resources.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
															`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
													},
													"namespace": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
															`will be targeted.`,
													},
													"proxy_types": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
															`all data plane types are targeted by the policy.`,
													},
													"section_name": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
															`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
													},
													"tags": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
															`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
													},
												},
												MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
													`destinations.`,
											},
										},
									},
									MarkdownDescription: `To list makes a match between the consumed services and corresponding` + "\n" +
										`configurations`,
								},
							},
							Description: `Spec is the specification of the Kuma MeshCircuitBreaker resource.`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `the type of the resource`,
						},
					},
				},
			},
			"key": schema.StringAttribute{
				Optional: true,
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `name of the mesh`,
			},
			"next": schema.StringAttribute{
				Computed:    true,
				Description: `URL to the next page`,
			},
			"offset": schema.Int64Attribute{
				Optional:    true,
				Description: `offset in the list of entities`,
			},
			"size": schema.Int64Attribute{
				Optional:    true,
				Description: `the number of items per page`,
			},
			"total": schema.NumberAttribute{
				Computed:    true,
				Description: `The total number of entities`,
			},
			"value": schema.StringAttribute{
				Optional: true,
			},
		},
	}
}

func (r *MeshCircuitBreakerListDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshCircuitBreakerListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *MeshCircuitBreakerListDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	offset := new(int64)
	if !data.Offset.IsUnknown() && !data.Offset.IsNull() {
		*offset = data.Offset.ValueInt64()
	} else {
		offset = nil
	}
	size := new(int64)
	if !data.Size.IsUnknown() && !data.Size.IsNull() {
		*size = data.Size.ValueInt64()
	} else {
		size = nil
	}
	var filter *operations.GetMeshCircuitBreakerListQueryParamFilter
	key := new(string)
	if !data.Key.IsUnknown() && !data.Key.IsNull() {
		*key = data.Key.ValueString()
	} else {
		key = nil
	}
	value := new(string)
	if !data.Value.IsUnknown() && !data.Value.IsNull() {
		*value = data.Value.ValueString()
	} else {
		value = nil
	}
	filter = &operations.GetMeshCircuitBreakerListQueryParamFilter{
		Key:   key,
		Value: value,
	}
	var mesh string
	mesh = data.Mesh.ValueString()

	request := operations.GetMeshCircuitBreakerListRequest{
		CpID:   cpID,
		Offset: offset,
		Size:   size,
		Filter: filter,
		Mesh:   mesh,
	}
	res, err := r.client.MeshCircuitBreaker.GetMeshCircuitBreakerList(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshCircuitBreakerList != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshCircuitBreakerList(res.MeshCircuitBreakerList)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
