// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	custom_listplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/listplanmodifier"
	speakeasy_listplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/listplanmodifier"
	custom_stringplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/stringplanmodifier"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &MeshProxyPatchResource{}
var _ resource.ResourceWithImportState = &MeshProxyPatchResource{}

func NewMeshProxyPatchResource() resource.Resource {
	return &MeshProxyPatchResource{}
}

// MeshProxyPatchResource defines the resource implementation.
type MeshProxyPatchResource struct {
	client *sdk.Konnect
}

// MeshProxyPatchResourceModel describes the resource data model.
type MeshProxyPatchResourceModel struct {
	CpID             types.String                   `tfsdk:"cp_id"`
	CreationTime     types.String                   `tfsdk:"creation_time"`
	Labels           map[string]types.String        `tfsdk:"labels"`
	Mesh             types.String                   `tfsdk:"mesh"`
	ModificationTime types.String                   `tfsdk:"modification_time"`
	Name             types.String                   `tfsdk:"name"`
	Spec             tfTypes.MeshProxyPatchItemSpec `tfsdk:"spec"`
	Type             types.String                   `tfsdk:"type"`
	Warnings         []types.String                 `tfsdk:"warnings"`
}

func (r *MeshProxyPatchResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_proxy_patch"
}

func (r *MeshProxyPatchResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshProxyPatch Resource",
		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the Konnect resource`,
			},
			"creation_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was created`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"labels": schema.MapAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The labels to help identity resources`,
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `name of the mesh`,
			},
			"modification_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was updated`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					custom_stringplanmodifier.RequiresReplaceModifier(),
				},
				Description: `name of the MeshProxyPatch`,
			},
			"spec": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"default": schema.SingleNestedAttribute{
						Required: true,
						Attributes: map[string]schema.Attribute{
							"append_modifications": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.List{
									custom_listplanmodifier.SupressZeroNullModifier(),
								},
								NestedObject: schema.NestedAttributeObject{
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
									Attributes: map[string]schema.Attribute{
										"cluster": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"json_patches": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.List{
														custom_listplanmodifier.SupressZeroNullModifier(),
													},
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"from": schema.StringAttribute{
																Optional:    true,
																Description: `From is a jsonpatch from string, used by move and copy operations.`,
															},
															"op": schema.StringAttribute{
																Optional:    true,
																Description: `Op is a jsonpatch operation string. Not Null; must be one of ["add", "remove", "replace", "move", "copy"]`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.OneOf(
																		"add",
																		"remove",
																		"replace",
																		"move",
																		"copy",
																	),
																},
															},
															"path": schema.StringAttribute{
																Optional:    true,
																Description: `Path is a jsonpatch path string. Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"value": schema.StringAttribute{
																Optional:    true,
																Description: `Value must be a valid json value used by replace and add operations. Parsed as JSON.`,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
															},
														},
													},
													MarkdownDescription: `JsonPatches specifies list of jsonpatches to apply to on Envoy's Cluster` + "\n" +
														`resource`,
												},
												"match": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the cluster to match.`,
														},
														"origin": schema.StringAttribute{
															Optional: true,
															MarkdownDescription: `Origin is the name of the component or plugin that generated the resource.` + "\n" +
																`` + "\n" +
																`Here is the list of well-known origins:` + "\n" +
																`inbound - resources generated for handling incoming traffic.` + "\n" +
																`outbound - resources generated for handling outgoing traffic.` + "\n" +
																`transparent - resources generated for transparent proxy functionality.` + "\n" +
																`prometheus - resources generated when Prometheus metrics are enabled.` + "\n" +
																`direct-access - resources generated for Direct Access functionality.` + "\n" +
																`ingress - resources generated for Zone Ingress.` + "\n" +
																`egress - resources generated for Zone Egress.` + "\n" +
																`gateway - resources generated for MeshGateway.` + "\n" +
																`` + "\n" +
																`The list is not complete, because policy plugins can introduce new resources.` + "\n" +
																`For example MeshTrace plugin can create Cluster with "mesh-trace" origin.`,
														},
													},
													Description: `Match is a set of conditions that have to be matched for modification operation to happen.`,
												},
												"operation": schema.StringAttribute{
													Optional:    true,
													Description: `Operation to execute on matched cluster. Not Null; must be one of ["Add", "Remove", "Patch"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"Add",
															"Remove",
															"Patch",
														),
													},
												},
												"value": schema.StringAttribute{
													Optional:    true,
													Description: `Value of xDS resource in YAML format to add or patch.`,
												},
											},
											Description: `Cluster is a modification of Envoy's Cluster resource.`,
										},
										"http_filter": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"json_patches": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.List{
														custom_listplanmodifier.SupressZeroNullModifier(),
													},
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"from": schema.StringAttribute{
																Optional:    true,
																Description: `From is a jsonpatch from string, used by move and copy operations.`,
															},
															"op": schema.StringAttribute{
																Optional:    true,
																Description: `Op is a jsonpatch operation string. Not Null; must be one of ["add", "remove", "replace", "move", "copy"]`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.OneOf(
																		"add",
																		"remove",
																		"replace",
																		"move",
																		"copy",
																	),
																},
															},
															"path": schema.StringAttribute{
																Optional:    true,
																Description: `Path is a jsonpatch path string. Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"value": schema.StringAttribute{
																Optional:    true,
																Description: `Value must be a valid json value used by replace and add operations. Parsed as JSON.`,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
															},
														},
													},
													MarkdownDescription: `JsonPatches specifies list of jsonpatches to apply to on Envoy's` + "\n" +
														`HTTP Filter available in HTTP Connection Manager in a Listener resource.`,
												},
												"match": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"listener_name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the listener to match.`,
														},
														"listener_tags": schema.MapAttribute{
															Optional:    true,
															ElementType: types.StringType,
															Description: `Listener tags available in Listener#Metadata#FilterMetadata[io.kuma.tags]`,
														},
														"name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the HTTP filter. For example "envoy.filters.http.local_ratelimit"`,
														},
														"origin": schema.StringAttribute{
															Optional: true,
															MarkdownDescription: `Origin is the name of the component or plugin that generated the resource.` + "\n" +
																`` + "\n" +
																`Here is the list of well-known origins:` + "\n" +
																`inbound - resources generated for handling incoming traffic.` + "\n" +
																`outbound - resources generated for handling outgoing traffic.` + "\n" +
																`transparent - resources generated for transparent proxy functionality.` + "\n" +
																`prometheus - resources generated when Prometheus metrics are enabled.` + "\n" +
																`direct-access - resources generated for Direct Access functionality.` + "\n" +
																`ingress - resources generated for Zone Ingress.` + "\n" +
																`egress - resources generated for Zone Egress.` + "\n" +
																`gateway - resources generated for MeshGateway.` + "\n" +
																`` + "\n" +
																`The list is not complete, because policy plugins can introduce new resources.` + "\n" +
																`For example MeshTrace plugin can create Cluster with "mesh-trace" origin.`,
														},
													},
													Description: `Match is a set of conditions that have to be matched for modification operation to happen.`,
												},
												"operation": schema.StringAttribute{
													Optional:    true,
													Description: `Operation to execute on matched listener. Not Null; must be one of ["Remove", "Patch", "AddFirst", "AddBefore", "AddAfter", "AddLast"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"Remove",
															"Patch",
															"AddFirst",
															"AddBefore",
															"AddAfter",
															"AddLast",
														),
													},
												},
												"value": schema.StringAttribute{
													Optional:    true,
													Description: `Value of xDS resource in YAML format to add or patch.`,
												},
											},
											MarkdownDescription: `HTTPFilter is a modification of Envoy HTTP Filter` + "\n" +
												`available in HTTP Connection Manager in a Listener resource.`,
										},
										"listener": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"json_patches": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.List{
														custom_listplanmodifier.SupressZeroNullModifier(),
													},
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"from": schema.StringAttribute{
																Optional:    true,
																Description: `From is a jsonpatch from string, used by move and copy operations.`,
															},
															"op": schema.StringAttribute{
																Optional:    true,
																Description: `Op is a jsonpatch operation string. Not Null; must be one of ["add", "remove", "replace", "move", "copy"]`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.OneOf(
																		"add",
																		"remove",
																		"replace",
																		"move",
																		"copy",
																	),
																},
															},
															"path": schema.StringAttribute{
																Optional:    true,
																Description: `Path is a jsonpatch path string. Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"value": schema.StringAttribute{
																Optional:    true,
																Description: `Value must be a valid json value used by replace and add operations. Parsed as JSON.`,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
															},
														},
													},
													MarkdownDescription: `JsonPatches specifies list of jsonpatches to apply to on Envoy's Listener` + "\n" +
														`resource`,
												},
												"match": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the listener to match.`,
														},
														"origin": schema.StringAttribute{
															Optional: true,
															MarkdownDescription: `Origin is the name of the component or plugin that generated the resource.` + "\n" +
																`` + "\n" +
																`Here is the list of well-known origins:` + "\n" +
																`inbound - resources generated for handling incoming traffic.` + "\n" +
																`outbound - resources generated for handling outgoing traffic.` + "\n" +
																`transparent - resources generated for transparent proxy functionality.` + "\n" +
																`prometheus - resources generated when Prometheus metrics are enabled.` + "\n" +
																`direct-access - resources generated for Direct Access functionality.` + "\n" +
																`ingress - resources generated for Zone Ingress.` + "\n" +
																`egress - resources generated for Zone Egress.` + "\n" +
																`gateway - resources generated for MeshGateway.` + "\n" +
																`` + "\n" +
																`The list is not complete, because policy plugins can introduce new resources.` + "\n" +
																`For example MeshTrace plugin can create Cluster with "mesh-trace" origin.`,
														},
														"tags": schema.MapAttribute{
															Optional:    true,
															ElementType: types.StringType,
															Description: `Tags available in Listener#Metadata#FilterMetadata[io.kuma.tags]`,
														},
													},
													Description: `Match is a set of conditions that have to be matched for modification operation to happen.`,
												},
												"operation": schema.StringAttribute{
													Optional:    true,
													Description: `Operation to execute on matched listener. Not Null; must be one of ["Add", "Remove", "Patch"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"Add",
															"Remove",
															"Patch",
														),
													},
												},
												"value": schema.StringAttribute{
													Optional:    true,
													Description: `Value of xDS resource in YAML format to add or patch.`,
												},
											},
											Description: `Listener is a modification of Envoy's Listener resource.`,
										},
										"network_filter": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"json_patches": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.List{
														custom_listplanmodifier.SupressZeroNullModifier(),
													},
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"from": schema.StringAttribute{
																Optional:    true,
																Description: `From is a jsonpatch from string, used by move and copy operations.`,
															},
															"op": schema.StringAttribute{
																Optional:    true,
																Description: `Op is a jsonpatch operation string. Not Null; must be one of ["add", "remove", "replace", "move", "copy"]`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.OneOf(
																		"add",
																		"remove",
																		"replace",
																		"move",
																		"copy",
																	),
																},
															},
															"path": schema.StringAttribute{
																Optional:    true,
																Description: `Path is a jsonpatch path string. Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"value": schema.StringAttribute{
																Optional:    true,
																Description: `Value must be a valid json value used by replace and add operations. Parsed as JSON.`,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
															},
														},
													},
													MarkdownDescription: `JsonPatches specifies list of jsonpatches to apply to on Envoy Listener's` + "\n" +
														`filter.`,
												},
												"match": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"listener_name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the listener to match.`,
														},
														"listener_tags": schema.MapAttribute{
															Optional:    true,
															ElementType: types.StringType,
															Description: `Listener tags available in Listener#Metadata#FilterMetadata[io.kuma.tags]`,
														},
														"name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the network filter. For example "envoy.filters.network.ratelimit"`,
														},
														"origin": schema.StringAttribute{
															Optional: true,
															MarkdownDescription: `Origin is the name of the component or plugin that generated the resource.` + "\n" +
																`` + "\n" +
																`Here is the list of well-known origins:` + "\n" +
																`inbound - resources generated for handling incoming traffic.` + "\n" +
																`outbound - resources generated for handling outgoing traffic.` + "\n" +
																`transparent - resources generated for transparent proxy functionality.` + "\n" +
																`prometheus - resources generated when Prometheus metrics are enabled.` + "\n" +
																`direct-access - resources generated for Direct Access functionality.` + "\n" +
																`ingress - resources generated for Zone Ingress.` + "\n" +
																`egress - resources generated for Zone Egress.` + "\n" +
																`gateway - resources generated for MeshGateway.` + "\n" +
																`` + "\n" +
																`The list is not complete, because policy plugins can introduce new resources.` + "\n" +
																`For example MeshTrace plugin can create Cluster with "mesh-trace" origin.`,
														},
													},
													Description: `Match is a set of conditions that have to be matched for modification operation to happen.`,
												},
												"operation": schema.StringAttribute{
													Optional:    true,
													Description: `Operation to execute on matched listener. Not Null; must be one of ["Remove", "Patch", "AddFirst", "AddBefore", "AddAfter", "AddLast"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"Remove",
															"Patch",
															"AddFirst",
															"AddBefore",
															"AddAfter",
															"AddLast",
														),
													},
												},
												"value": schema.StringAttribute{
													Optional:    true,
													Description: `Value of xDS resource in YAML format to add or patch.`,
												},
											},
											Description: `NetworkFilter is a modification of Envoy Listener's filter.`,
										},
										"virtual_host": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"json_patches": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													PlanModifiers: []planmodifier.List{
														custom_listplanmodifier.SupressZeroNullModifier(),
													},
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"from": schema.StringAttribute{
																Optional:    true,
																Description: `From is a jsonpatch from string, used by move and copy operations.`,
															},
															"op": schema.StringAttribute{
																Optional:    true,
																Description: `Op is a jsonpatch operation string. Not Null; must be one of ["add", "remove", "replace", "move", "copy"]`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.OneOf(
																		"add",
																		"remove",
																		"replace",
																		"move",
																		"copy",
																	),
																},
															},
															"path": schema.StringAttribute{
																Optional:    true,
																Description: `Path is a jsonpatch path string. Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																},
															},
															"value": schema.StringAttribute{
																Optional:    true,
																Description: `Value must be a valid json value used by replace and add operations. Parsed as JSON.`,
																Validators: []validator.String{
																	validators.IsValidJSON(),
																},
															},
														},
													},
													MarkdownDescription: `JsonPatches specifies list of jsonpatches to apply to on Envoy's` + "\n" +
														`VirtualHost resource`,
												},
												"match": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the VirtualHost to match.`,
														},
														"origin": schema.StringAttribute{
															Optional: true,
															MarkdownDescription: `Origin is the name of the component or plugin that generated the resource.` + "\n" +
																`` + "\n" +
																`Here is the list of well-known origins:` + "\n" +
																`inbound - resources generated for handling incoming traffic.` + "\n" +
																`outbound - resources generated for handling outgoing traffic.` + "\n" +
																`transparent - resources generated for transparent proxy functionality.` + "\n" +
																`prometheus - resources generated when Prometheus metrics are enabled.` + "\n" +
																`direct-access - resources generated for Direct Access functionality.` + "\n" +
																`ingress - resources generated for Zone Ingress.` + "\n" +
																`egress - resources generated for Zone Egress.` + "\n" +
																`gateway - resources generated for MeshGateway.` + "\n" +
																`` + "\n" +
																`The list is not complete, because policy plugins can introduce new resources.` + "\n" +
																`For example MeshTrace plugin can create Cluster with "mesh-trace" origin.`,
														},
														"route_configuration_name": schema.StringAttribute{
															Optional:    true,
															Description: `Name of the RouteConfiguration resource to match.`,
														},
													},
													Description: `Match is a set of conditions that have to be matched for modification operation to happen. Not Null`,
													Validators: []validator.Object{
														speakeasy_objectvalidators.NotNull(),
													},
												},
												"operation": schema.StringAttribute{
													Optional:    true,
													Description: `Operation to execute on matched listener. Not Null; must be one of ["Add", "Remove", "Patch"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"Add",
															"Remove",
															"Patch",
														),
													},
												},
												"value": schema.StringAttribute{
													Optional:    true,
													Description: `Value of xDS resource in YAML format to add or patch.`,
												},
											},
											MarkdownDescription: `VirtualHost is a modification of Envoy's VirtualHost` + "\n" +
												`referenced in HTTP Connection Manager in a Listener resource.`,
										},
									},
								},
								Description: `AppendModifications is a list of modifications applied on the selected proxy.`,
							},
						},
						MarkdownDescription: `Default is a configuration specific to the group of destinations` + "\n" +
							`referenced in 'targetRef'.`,
					},
					"target_ref": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								Required:    true,
								Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"Mesh",
										"MeshSubset",
										"MeshGateway",
										"MeshService",
										"MeshExternalService",
										"MeshMultiZoneService",
										"MeshServiceSubset",
										"MeshHTTPRoute",
										"Dataplane",
									),
								},
							},
							"labels": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
									`Name and Namespace can be used.`,
							},
							"mesh": schema.StringAttribute{
								Optional:    true,
								Description: `Mesh is reserved for future use to identify cross mesh resources.`,
							},
							"name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
									`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
							},
							"namespace": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
									`will be targeted.`,
							},
							"proxy_types": schema.ListAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.List{
									custom_listplanmodifier.SupressZeroNullModifier(),
								},
								ElementType: types.StringType,
								MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
									`all data plane types are targeted by the policy.`,
							},
							"section_name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
									`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
							},
							"tags": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
									`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
							},
						},
						MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
							`The resource could be either a real store object or virtual resource` + "\n" +
							`defined inplace.`,
					},
				},
				Description: `Spec is the specification of the Kuma MeshProxyPatch resource.`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `the type of the resource. must be "MeshProxyPatch"`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"MeshProxyPatch",
					),
				},
			},
			"warnings": schema.ListAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					custom_listplanmodifier.SupressZeroNullModifier(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				MarkdownDescription: `warnings is a list of warning messages to return to the requesting Kuma API clients.` + "\n" +
					`Warning messages describe a problem the client making the API request should correct or be aware of.`,
			},
		},
	}
}

func (r *MeshProxyPatchResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshProxyPatchResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *MeshProxyPatchResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshProxyPatchItem := *data.ToSharedMeshProxyPatchItemInput()
	request := operations.CreateMeshProxyPatchRequest{
		CpID:               cpID,
		Mesh:               mesh,
		Name:               name,
		MeshProxyPatchItem: meshProxyPatchItem,
	}
	res, err := r.client.MeshProxyPatch.CreateMeshProxyPatch(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshProxyPatchCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshProxyPatchCreateOrUpdateSuccessResponse(res.MeshProxyPatchCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshProxyPatchRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshProxyPatch.GetMeshProxyPatch(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshProxyPatchItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshProxyPatchItem(res1.MeshProxyPatchItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshProxyPatchResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *MeshProxyPatchResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.GetMeshProxyPatchRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshProxyPatch.GetMeshProxyPatch(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshProxyPatchItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshProxyPatchItem(res.MeshProxyPatchItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshProxyPatchResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *MeshProxyPatchResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshProxyPatchItem := *data.ToSharedMeshProxyPatchItemInput()
	request := operations.UpdateMeshProxyPatchRequest{
		CpID:               cpID,
		Mesh:               mesh,
		Name:               name,
		MeshProxyPatchItem: meshProxyPatchItem,
	}
	res, err := r.client.MeshProxyPatch.UpdateMeshProxyPatch(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshProxyPatchCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshProxyPatchCreateOrUpdateSuccessResponse(res.MeshProxyPatchCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshProxyPatchRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshProxyPatch.GetMeshProxyPatch(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshProxyPatchItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshProxyPatchItem(res1.MeshProxyPatchItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshProxyPatchResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *MeshProxyPatchResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.DeleteMeshProxyPatchRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshProxyPatch.DeleteMeshProxyPatch(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *MeshProxyPatchResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		CpID string `json:"cp_id"`
		Mesh string `json:"mesh"`
		Name string `json:"name"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The ID is not valid. It's expected to be a JSON object alike '{ "cp_id": "bf138ba2-c9b1-4229-b268-04d9d8a6410b",  "mesh": "",  "name": ""}': `+err.Error())
		return
	}

	if len(data.CpID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field cp_id is required but was not found in the json encoded ID. It's expected to be a value alike '"bf138ba2-c9b1-4229-b268-04d9d8a6410b"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("cp_id"), data.CpID)...)
	if len(data.Mesh) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field mesh is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("mesh"), data.Mesh)...)
	if len(data.Name) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field name is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), data.Name)...)

}
