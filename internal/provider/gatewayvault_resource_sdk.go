// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayVaultResourceModel) RefreshFromSharedVault(ctx context.Context, resp *shared.Vault) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = jsontypes.NewNormalizedNull()
		} else {
			configResult, _ := json.Marshal(resp.Config)
			r.Config = jsontypes.NewNormalizedValue(string(configResult))
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.Prefix = types.StringValue(resp.Prefix)
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayVaultResourceModel) ToOperationsCreateVaultRequest(ctx context.Context) (*operations.CreateVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	vault, vaultDiags := r.ToSharedVault(ctx)
	diags.Append(vaultDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateVaultRequest{
		ControlPlaneID: controlPlaneID,
		Vault:          *vault,
	}

	return &out, diags
}

func (r *GatewayVaultResourceModel) ToOperationsDeleteVaultRequest(ctx context.Context) (*operations.DeleteVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var vaultID string
	vaultID = r.ID.ValueString()

	out := operations.DeleteVaultRequest{
		ControlPlaneID: controlPlaneID,
		VaultID:        vaultID,
	}

	return &out, diags
}

func (r *GatewayVaultResourceModel) ToOperationsGetVaultRequest(ctx context.Context) (*operations.GetVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var vaultID string
	vaultID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetVaultRequest{
		VaultID:        vaultID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayVaultResourceModel) ToOperationsUpsertVaultRequest(ctx context.Context) (*operations.UpsertVaultRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var vaultID string
	vaultID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	vault, vaultDiags := r.ToSharedVault(ctx)
	diags.Append(vaultDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpsertVaultRequest{
		VaultID:        vaultID,
		ControlPlaneID: controlPlaneID,
		Vault:          *vault,
	}

	return &out, diags
}

func (r *GatewayVaultResourceModel) ToSharedVault(ctx context.Context) (*shared.Vault, diag.Diagnostics) {
	var diags diag.Diagnostics

	var config interface{}
	if !r.Config.IsUnknown() && !r.Config.IsNull() {
		_ = json.Unmarshal([]byte(r.Config.ValueString()), &config)
	}
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	var name string
	name = r.Name.ValueString()

	var prefix string
	prefix = r.Prefix.ValueString()

	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	out := shared.Vault{
		Config:      config,
		CreatedAt:   createdAt,
		Description: description,
		ID:          id,
		Name:        name,
		Prefix:      prefix,
		Tags:        tags,
		UpdatedAt:   updatedAt,
	}

	return &out, diags
}
