// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginAiSemanticPromptGuardDataSourceModel) RefreshFromSharedAiSemanticPromptGuardPlugin(ctx context.Context, resp *shared.AiSemanticPromptGuardPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.AiSemanticPromptGuardPluginConfig{}
			if resp.Config.Embeddings == nil {
				r.Config.Embeddings = nil
			} else {
				r.Config.Embeddings = &tfTypes.AiSemanticCachePluginEmbeddings{}
				if resp.Config.Embeddings.Auth == nil {
					r.Config.Embeddings.Auth = nil
				} else {
					r.Config.Embeddings.Auth = &tfTypes.Auth{}
					r.Config.Embeddings.Auth.AllowOverride = types.BoolPointerValue(resp.Config.Embeddings.Auth.AllowOverride)
					r.Config.Embeddings.Auth.AwsAccessKeyID = types.StringPointerValue(resp.Config.Embeddings.Auth.AwsAccessKeyID)
					r.Config.Embeddings.Auth.AwsSecretAccessKey = types.StringPointerValue(resp.Config.Embeddings.Auth.AwsSecretAccessKey)
					r.Config.Embeddings.Auth.AzureClientID = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureClientID)
					r.Config.Embeddings.Auth.AzureClientSecret = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureClientSecret)
					r.Config.Embeddings.Auth.AzureTenantID = types.StringPointerValue(resp.Config.Embeddings.Auth.AzureTenantID)
					r.Config.Embeddings.Auth.AzureUseManagedIdentity = types.BoolPointerValue(resp.Config.Embeddings.Auth.AzureUseManagedIdentity)
					r.Config.Embeddings.Auth.GcpServiceAccountJSON = types.StringPointerValue(resp.Config.Embeddings.Auth.GcpServiceAccountJSON)
					r.Config.Embeddings.Auth.GcpUseServiceAccount = types.BoolPointerValue(resp.Config.Embeddings.Auth.GcpUseServiceAccount)
					r.Config.Embeddings.Auth.HeaderName = types.StringPointerValue(resp.Config.Embeddings.Auth.HeaderName)
					r.Config.Embeddings.Auth.HeaderValue = types.StringPointerValue(resp.Config.Embeddings.Auth.HeaderValue)
					if resp.Config.Embeddings.Auth.ParamLocation != nil {
						r.Config.Embeddings.Auth.ParamLocation = types.StringValue(string(*resp.Config.Embeddings.Auth.ParamLocation))
					} else {
						r.Config.Embeddings.Auth.ParamLocation = types.StringNull()
					}
					r.Config.Embeddings.Auth.ParamName = types.StringPointerValue(resp.Config.Embeddings.Auth.ParamName)
					r.Config.Embeddings.Auth.ParamValue = types.StringPointerValue(resp.Config.Embeddings.Auth.ParamValue)
				}
				if resp.Config.Embeddings.Model == nil {
					r.Config.Embeddings.Model = nil
				} else {
					r.Config.Embeddings.Model = &tfTypes.AiSemanticCachePluginModel{}
					r.Config.Embeddings.Model.Name = types.StringPointerValue(resp.Config.Embeddings.Model.Name)
					if resp.Config.Embeddings.Model.Options == nil {
						r.Config.Embeddings.Model.Options = nil
					} else {
						r.Config.Embeddings.Model.Options = &tfTypes.AiProxyAdvancedPluginOptions{}
						r.Config.Embeddings.Model.Options.UpstreamURL = types.StringPointerValue(resp.Config.Embeddings.Model.Options.UpstreamURL)
					}
					if resp.Config.Embeddings.Model.Provider != nil {
						r.Config.Embeddings.Model.Provider = types.StringValue(string(*resp.Config.Embeddings.Model.Provider))
					} else {
						r.Config.Embeddings.Model.Provider = types.StringNull()
					}
				}
			}
			if resp.Config.Rules == nil {
				r.Config.Rules = nil
			} else {
				r.Config.Rules = &tfTypes.Rules{}
				r.Config.Rules.AllowPrompts = make([]types.String, 0, len(resp.Config.Rules.AllowPrompts))
				for _, v := range resp.Config.Rules.AllowPrompts {
					r.Config.Rules.AllowPrompts = append(r.Config.Rules.AllowPrompts, types.StringValue(v))
				}
				r.Config.Rules.DenyPrompts = make([]types.String, 0, len(resp.Config.Rules.DenyPrompts))
				for _, v := range resp.Config.Rules.DenyPrompts {
					r.Config.Rules.DenyPrompts = append(r.Config.Rules.DenyPrompts, types.StringValue(v))
				}
				r.Config.Rules.MatchAllConversationHistory = types.BoolPointerValue(resp.Config.Rules.MatchAllConversationHistory)
				r.Config.Rules.MatchAllRoles = types.BoolPointerValue(resp.Config.Rules.MatchAllRoles)
				r.Config.Rules.MaxRequestBodySize = types.Int64PointerValue(resp.Config.Rules.MaxRequestBodySize)
			}
			if resp.Config.Search == nil {
				r.Config.Search = nil
			} else {
				r.Config.Search = &tfTypes.Search{}
				r.Config.Search.Threshold = types.Float64PointerValue(resp.Config.Search.Threshold)
			}
			if resp.Config.Vectordb == nil {
				r.Config.Vectordb = nil
			} else {
				r.Config.Vectordb = &tfTypes.AiSemanticCachePluginVectordb{}
				r.Config.Vectordb.Dimensions = types.Int64PointerValue(resp.Config.Vectordb.Dimensions)
				if resp.Config.Vectordb.DistanceMetric != nil {
					r.Config.Vectordb.DistanceMetric = types.StringValue(string(*resp.Config.Vectordb.DistanceMetric))
				} else {
					r.Config.Vectordb.DistanceMetric = types.StringNull()
				}
				if resp.Config.Vectordb.Redis == nil {
					r.Config.Vectordb.Redis = nil
				} else {
					r.Config.Vectordb.Redis = &tfTypes.AiProxyAdvancedPluginRedis{}
					r.Config.Vectordb.Redis.ClusterMaxRedirections = types.Int64PointerValue(resp.Config.Vectordb.Redis.ClusterMaxRedirections)
					r.Config.Vectordb.Redis.ClusterNodes = []tfTypes.AiProxyAdvancedPluginClusterNodes{}
					if len(r.Config.Vectordb.Redis.ClusterNodes) > len(resp.Config.Vectordb.Redis.ClusterNodes) {
						r.Config.Vectordb.Redis.ClusterNodes = r.Config.Vectordb.Redis.ClusterNodes[:len(resp.Config.Vectordb.Redis.ClusterNodes)]
					}
					for clusterNodesCount, clusterNodesItem := range resp.Config.Vectordb.Redis.ClusterNodes {
						var clusterNodes tfTypes.AiProxyAdvancedPluginClusterNodes
						clusterNodes.IP = types.StringPointerValue(clusterNodesItem.IP)
						clusterNodes.Port = types.Int64PointerValue(clusterNodesItem.Port)
						if clusterNodesCount+1 > len(r.Config.Vectordb.Redis.ClusterNodes) {
							r.Config.Vectordb.Redis.ClusterNodes = append(r.Config.Vectordb.Redis.ClusterNodes, clusterNodes)
						} else {
							r.Config.Vectordb.Redis.ClusterNodes[clusterNodesCount].IP = clusterNodes.IP
							r.Config.Vectordb.Redis.ClusterNodes[clusterNodesCount].Port = clusterNodes.Port
						}
					}
					r.Config.Vectordb.Redis.ConnectTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.ConnectTimeout)
					r.Config.Vectordb.Redis.ConnectionIsProxied = types.BoolPointerValue(resp.Config.Vectordb.Redis.ConnectionIsProxied)
					r.Config.Vectordb.Redis.Database = types.Int64PointerValue(resp.Config.Vectordb.Redis.Database)
					r.Config.Vectordb.Redis.Host = types.StringPointerValue(resp.Config.Vectordb.Redis.Host)
					r.Config.Vectordb.Redis.KeepaliveBacklog = types.Int64PointerValue(resp.Config.Vectordb.Redis.KeepaliveBacklog)
					r.Config.Vectordb.Redis.KeepalivePoolSize = types.Int64PointerValue(resp.Config.Vectordb.Redis.KeepalivePoolSize)
					r.Config.Vectordb.Redis.Password = types.StringPointerValue(resp.Config.Vectordb.Redis.Password)
					r.Config.Vectordb.Redis.Port = types.Int64PointerValue(resp.Config.Vectordb.Redis.Port)
					r.Config.Vectordb.Redis.ReadTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.ReadTimeout)
					r.Config.Vectordb.Redis.SendTimeout = types.Int64PointerValue(resp.Config.Vectordb.Redis.SendTimeout)
					r.Config.Vectordb.Redis.SentinelMaster = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelMaster)
					r.Config.Vectordb.Redis.SentinelNodes = []tfTypes.AiProxyAdvancedPluginSentinelNodes{}
					if len(r.Config.Vectordb.Redis.SentinelNodes) > len(resp.Config.Vectordb.Redis.SentinelNodes) {
						r.Config.Vectordb.Redis.SentinelNodes = r.Config.Vectordb.Redis.SentinelNodes[:len(resp.Config.Vectordb.Redis.SentinelNodes)]
					}
					for sentinelNodesCount, sentinelNodesItem := range resp.Config.Vectordb.Redis.SentinelNodes {
						var sentinelNodes tfTypes.AiProxyAdvancedPluginSentinelNodes
						sentinelNodes.Host = types.StringPointerValue(sentinelNodesItem.Host)
						sentinelNodes.Port = types.Int64PointerValue(sentinelNodesItem.Port)
						if sentinelNodesCount+1 > len(r.Config.Vectordb.Redis.SentinelNodes) {
							r.Config.Vectordb.Redis.SentinelNodes = append(r.Config.Vectordb.Redis.SentinelNodes, sentinelNodes)
						} else {
							r.Config.Vectordb.Redis.SentinelNodes[sentinelNodesCount].Host = sentinelNodes.Host
							r.Config.Vectordb.Redis.SentinelNodes[sentinelNodesCount].Port = sentinelNodes.Port
						}
					}
					r.Config.Vectordb.Redis.SentinelPassword = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelPassword)
					if resp.Config.Vectordb.Redis.SentinelRole != nil {
						r.Config.Vectordb.Redis.SentinelRole = types.StringValue(string(*resp.Config.Vectordb.Redis.SentinelRole))
					} else {
						r.Config.Vectordb.Redis.SentinelRole = types.StringNull()
					}
					r.Config.Vectordb.Redis.SentinelUsername = types.StringPointerValue(resp.Config.Vectordb.Redis.SentinelUsername)
					r.Config.Vectordb.Redis.ServerName = types.StringPointerValue(resp.Config.Vectordb.Redis.ServerName)
					r.Config.Vectordb.Redis.Ssl = types.BoolPointerValue(resp.Config.Vectordb.Redis.Ssl)
					r.Config.Vectordb.Redis.SslVerify = types.BoolPointerValue(resp.Config.Vectordb.Redis.SslVerify)
					r.Config.Vectordb.Redis.Username = types.StringPointerValue(resp.Config.Vectordb.Redis.Username)
				}
				if resp.Config.Vectordb.Strategy != nil {
					r.Config.Vectordb.Strategy = types.StringValue(string(*resp.Config.Vectordb.Strategy))
				} else {
					r.Config.Vectordb.Strategy = types.StringNull()
				}
				r.Config.Vectordb.Threshold = types.Float64PointerValue(resp.Config.Vectordb.Threshold)
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
