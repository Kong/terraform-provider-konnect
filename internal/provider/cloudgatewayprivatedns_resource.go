// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &CloudGatewayPrivateDNSResource{}
var _ resource.ResourceWithImportState = &CloudGatewayPrivateDNSResource{}

func NewCloudGatewayPrivateDNSResource() resource.Resource {
	return &CloudGatewayPrivateDNSResource{}
}

// CloudGatewayPrivateDNSResource defines the resource implementation.
type CloudGatewayPrivateDNSResource struct {
	client *sdk.Konnect
}

// CloudGatewayPrivateDNSResourceModel describes the resource data model.
type CloudGatewayPrivateDNSResourceModel struct {
	AwsPrivateDNSResolverResponse *tfTypes.AwsPrivateDNSResolverResponse `queryParam:"inline" tfsdk:"aws_private_dns_resolver_response" tfPlanOnly:"true"`
	AwsPrivateHostedZoneResponse  *tfTypes.AwsPrivateHostedZoneResponse  `queryParam:"inline" tfsdk:"aws_private_hosted_zone_response" tfPlanOnly:"true"`
	EntityVersion                 types.Int64                            `tfsdk:"entity_version"`
	ID                            types.String                           `tfsdk:"id"`
	Name                          types.String                           `tfsdk:"name"`
	NetworkID                     types.String                           `tfsdk:"network_id"`
	PrivateDNSAttachmentConfig    *tfTypes.PrivateDNSAttachmentConfig    `tfsdk:"private_dns_attachment_config"`
}

func (r *CloudGatewayPrivateDNSResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cloud_gateway_private_dns"
}

func (r *CloudGatewayPrivateDNSResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CloudGatewayPrivateDNS Resource",
		Attributes: map[string]schema.Attribute{
			"aws_private_dns_resolver_response": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS creation date.`,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"entity_version": schema.Int64Attribute{
						Computed: true,
						MarkdownDescription: `Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the` + "\n" +
							`Private DNS.`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Human-readable name of the Private DNS.`,
					},
					"private_dns_attachment_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"dns_config": schema.MapNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"remote_dns_server_ip_addresses": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `IP addresses of remote DNS servers used by the Private DNS Resolver for DNS resolution.`,
										},
									},
								},
								Description: `Object that contains mappings from proxied internal domains to remote DNS server IP address for a Private DNS Resolver.`,
							},
							"kind": schema.StringAttribute{
								Computed:    true,
								Description: `must be "aws-outbound-resolver"`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"aws-outbound-resolver",
									),
								},
							},
						},
					},
					"state": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The current state of the Private DNS attachment. Possible values:` + "\n" +
							`- ` + "`" + `created` + "`" + ` - The attachment has been created but is not attached to Private DNS.` + "\n" +
							`- ` + "`" + `initializing` + "`" + ` - The attachment is in the process of being initialized and is setting up necessary resources.` + "\n" +
							`- ` + "`" + `pending-association` + "`" + ` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.` + "\n" +
							`- ` + "`" + `ready` + "`" + ` - The attachment is fully operational and can route traffic as configured.` + "\n" +
							`- ` + "`" + `error` + "`" + ` - The attachment is in an error state, and is not operational.` + "\n" +
							`- ` + "`" + `terminating` + "`" + ` - The attachment is in the process of being deleted.` + "\n" +
							`- ` + "`" + `terminated` + "`" + ` - The attachment has been fully deleted and is no longer available.` + "\n" +
							`must be one of ["created", "initializing", "pending-association", "ready", "error", "terminating", "terminated"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"created",
								"initializing",
								"pending-association",
								"ready",
								"error",
								"terminating",
								"terminated",
							),
						},
					},
					"state_metadata": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"reason": schema.StringAttribute{
								Computed:    true,
								Description: `Reason why the Private Dns may be in an erroneous state, reported from backing infrastructure.`,
							},
							"reported_status": schema.StringAttribute{
								Computed:    true,
								Description: `Reported status of the Private Dns from backing infrastructure.`,
							},
						},
						Description: `Metadata describing the backing state of the Private Dns and why it may be in an erroneous state.`,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS update date.`,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("aws_private_hosted_zone_response"),
					}...),
				},
			},
			"aws_private_hosted_zone_response": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS creation date.`,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"entity_version": schema.Int64Attribute{
						Computed: true,
						MarkdownDescription: `Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the` + "\n" +
							`Private DNS.`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Human-readable name of the Private DNS.`,
					},
					"private_dns_attachment_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"hosted_zone_id": schema.StringAttribute{
								Computed:    true,
								Description: `AWS Hosted Zone to create attachment to.`,
							},
							"kind": schema.StringAttribute{
								Computed:    true,
								Description: `must be "aws-private-hosted-zone-attachment"`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"aws-private-hosted-zone-attachment",
									),
								},
							},
						},
					},
					"state": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The current state of the Private DNS attachment. Possible values:` + "\n" +
							`- ` + "`" + `created` + "`" + ` - The attachment has been created but is not attached to Private DNS.` + "\n" +
							`- ` + "`" + `initializing` + "`" + ` - The attachment is in the process of being initialized and is setting up necessary resources.` + "\n" +
							`- ` + "`" + `pending-association` + "`" + ` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.` + "\n" +
							`- ` + "`" + `ready` + "`" + ` - The attachment is fully operational and can route traffic as configured.` + "\n" +
							`- ` + "`" + `error` + "`" + ` - The attachment is in an error state, and is not operational.` + "\n" +
							`- ` + "`" + `terminating` + "`" + ` - The attachment is in the process of being deleted.` + "\n" +
							`- ` + "`" + `terminated` + "`" + ` - The attachment has been fully deleted and is no longer available.` + "\n" +
							`must be one of ["created", "initializing", "pending-association", "ready", "error", "terminating", "terminated"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"created",
								"initializing",
								"pending-association",
								"ready",
								"error",
								"terminating",
								"terminated",
							),
						},
					},
					"state_metadata": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"reason": schema.StringAttribute{
								Computed:    true,
								Description: `Reason why the Private Dns may be in an erroneous state, reported from backing infrastructure.`,
							},
							"reported_status": schema.StringAttribute{
								Computed:    true,
								Description: `Reported status of the Private Dns from backing infrastructure.`,
							},
						},
						Description: `Metadata describing the backing state of the Private Dns and why it may be in an erroneous state.`,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS update date.`,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
				},
				Validators: []validator.Object{
					objectvalidator.ConflictsWith(path.Expressions{
						path.MatchRelative().AtParent().AtName("aws_private_dns_resolver_response"),
					}...),
				},
			},
			"entity_version": schema.Int64Attribute{
				Computed: true,
				MarkdownDescription: `Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the` + "\n" +
					`Private DNS.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Human-readable name of the Private DNS. Requires replacement if changed.`,
			},
			"network_id": schema.StringAttribute{
				Required:    true,
				Description: `The network to operate on.`,
			},
			"private_dns_attachment_config": schema.SingleNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Attributes: map[string]schema.Attribute{
					"aws_private_dns_resolver_attachment_config": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"dns_config": schema.MapNestedAttribute{
								Required: true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.RequiresReplaceIfConfigured(),
								},
								NestedObject: schema.NestedAttributeObject{
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"remote_dns_server_ip_addresses": schema.ListAttribute{
											Required: true,
											PlanModifiers: []planmodifier.List{
												listplanmodifier.RequiresReplaceIfConfigured(),
											},
											ElementType: types.StringType,
											Description: `IP addresses of remote DNS servers used by the Private DNS Resolver for DNS resolution. Requires replacement if changed.`,
										},
									},
								},
								Description: `Object that contains mappings from proxied internal domains to remote DNS server IP address for a Private DNS Resolver. Requires replacement if changed.`,
							},
							"kind": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `must be "aws-outbound-resolver"; Requires replacement if changed.`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"aws-outbound-resolver",
									),
								},
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("aws_private_hosted_zone_attachment_config"),
							}...),
						},
					},
					"aws_private_hosted_zone_attachment_config": schema.SingleNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
						},
						Attributes: map[string]schema.Attribute{
							"hosted_zone_id": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `AWS Hosted Zone to create attachment to. Requires replacement if changed.`,
							},
							"kind": schema.StringAttribute{
								Required: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.RequiresReplaceIfConfigured(),
								},
								Description: `must be "aws-private-hosted-zone-attachment"; Requires replacement if changed.`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"aws-private-hosted-zone-attachment",
									),
								},
							},
						},
						Description: `Requires replacement if changed.`,
						Validators: []validator.Object{
							objectvalidator.ConflictsWith(path.Expressions{
								path.MatchRelative().AtParent().AtName("aws_private_dns_resolver_attachment_config"),
							}...),
						},
					},
				},
				Description: `Requires replacement if changed.`,
			},
		},
	}
}

func (r *CloudGatewayPrivateDNSResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CloudGatewayPrivateDNSResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *CloudGatewayPrivateDNSResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreatePrivateDNSRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CloudGateways.CreatePrivateDNS(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateDNSResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPrivateDNSResponse(ctx, res.PrivateDNSResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetPrivateDNSRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.CloudGateways.GetPrivateDNS(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.PrivateDNSResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPrivateDNSResponse(ctx, res1.PrivateDNSResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CloudGatewayPrivateDNSResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *CloudGatewayPrivateDNSResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPrivateDNSRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CloudGateways.GetPrivateDNS(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateDNSResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPrivateDNSResponse(ctx, res.PrivateDNSResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CloudGatewayPrivateDNSResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *CloudGatewayPrivateDNSResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdatePrivateDNSRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CloudGateways.UpdatePrivateDNS(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateDNSResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPrivateDNSResponse(ctx, res.PrivateDNSResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *CloudGatewayPrivateDNSResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *CloudGatewayPrivateDNSResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeletePrivateDNSRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CloudGateways.DeletePrivateDNS(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *CloudGatewayPrivateDNSResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		NetworkID string `json:"network_id"`
		ID        string `json:"id"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The import ID is not valid. It is expected to be a JSON object string with the format: '{ "network_id": "36ae63d3-efd1-4bec-b246-62aa5d3f5695",  "id": "1850820b-c69f-4a2a-b9be-bbcdbc5cd618"}': `+err.Error())
		return
	}

	if len(data.NetworkID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field network_id is required but was not found in the json encoded ID. It's expected to be a value alike '"36ae63d3-efd1-4bec-b246-62aa5d3f5695"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("network_id"), data.NetworkID)...)
	if len(data.ID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field id is required but was not found in the json encoded ID. It's expected to be a value alike '"1850820b-c69f-4a2a-b9be-bbcdbc5cd618"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), data.ID)...)

}
