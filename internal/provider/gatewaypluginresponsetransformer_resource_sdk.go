// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
)

func (r *GatewayPluginResponseTransformerResourceModel) ToSharedCreateResponseTransformerPlugin() *shared.CreateResponseTransformerPlugin {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var protocols []shared.CreateResponseTransformerPluginProtocols = []shared.CreateResponseTransformerPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.CreateResponseTransformerPluginProtocols(protocolsItem.ValueString()))
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var consumer *shared.CreateResponseTransformerPluginConsumer
	if r.Consumer != nil {
		id := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id = r.Consumer.ID.ValueString()
		} else {
			id = nil
		}
		consumer = &shared.CreateResponseTransformerPluginConsumer{
			ID: id,
		}
	}
	var route *shared.CreateResponseTransformerPluginRoute
	if r.Route != nil {
		id1 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id1 = r.Route.ID.ValueString()
		} else {
			id1 = nil
		}
		route = &shared.CreateResponseTransformerPluginRoute{
			ID: id1,
		}
	}
	var service *shared.CreateResponseTransformerPluginService
	if r.Service != nil {
		id2 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id2 = r.Service.ID.ValueString()
		} else {
			id2 = nil
		}
		service = &shared.CreateResponseTransformerPluginService{
			ID: id2,
		}
	}
	var remove *shared.CreateResponseTransformerPluginRemove
	if r.Config.Remove != nil {
		var json []string = []string{}
		for _, jsonItem := range r.Config.Remove.JSON {
			json = append(json, jsonItem.ValueString())
		}
		var headers []string = []string{}
		for _, headersItem := range r.Config.Remove.Headers {
			headers = append(headers, headersItem.ValueString())
		}
		remove = &shared.CreateResponseTransformerPluginRemove{
			JSON:    json,
			Headers: headers,
		}
	}
	var rename *shared.CreateResponseTransformerPluginRename
	if r.Config.Rename != nil {
		var headers1 []string = []string{}
		for _, headersItem1 := range r.Config.Rename.Headers {
			headers1 = append(headers1, headersItem1.ValueString())
		}
		rename = &shared.CreateResponseTransformerPluginRename{
			Headers: headers1,
		}
	}
	var replace *shared.CreateResponseTransformerPluginReplace
	if r.Config.Replace != nil {
		var json1 []string = []string{}
		for _, jsonItem1 := range r.Config.Replace.JSON {
			json1 = append(json1, jsonItem1.ValueString())
		}
		var jsonTypes []shared.CreateResponseTransformerPluginJSONTypes = []shared.CreateResponseTransformerPluginJSONTypes{}
		for _, jsonTypesItem := range r.Config.Replace.JSONTypes {
			jsonTypes = append(jsonTypes, shared.CreateResponseTransformerPluginJSONTypes(jsonTypesItem.ValueString()))
		}
		var headers2 []string = []string{}
		for _, headersItem2 := range r.Config.Replace.Headers {
			headers2 = append(headers2, headersItem2.ValueString())
		}
		replace = &shared.CreateResponseTransformerPluginReplace{
			JSON:      json1,
			JSONTypes: jsonTypes,
			Headers:   headers2,
		}
	}
	var add *shared.CreateResponseTransformerPluginAdd
	if r.Config.Add != nil {
		var json2 []string = []string{}
		for _, jsonItem2 := range r.Config.Add.JSON {
			json2 = append(json2, jsonItem2.ValueString())
		}
		var jsonTypes1 []shared.CreateResponseTransformerPluginConfigJSONTypes = []shared.CreateResponseTransformerPluginConfigJSONTypes{}
		for _, jsonTypesItem1 := range r.Config.Add.JSONTypes {
			jsonTypes1 = append(jsonTypes1, shared.CreateResponseTransformerPluginConfigJSONTypes(jsonTypesItem1.ValueString()))
		}
		var headers3 []string = []string{}
		for _, headersItem3 := range r.Config.Add.Headers {
			headers3 = append(headers3, headersItem3.ValueString())
		}
		add = &shared.CreateResponseTransformerPluginAdd{
			JSON:      json2,
			JSONTypes: jsonTypes1,
			Headers:   headers3,
		}
	}
	var append1 *shared.CreateResponseTransformerPluginAppend
	if r.Config.Append != nil {
		var json3 []string = []string{}
		for _, jsonItem3 := range r.Config.Append.JSON {
			json3 = append(json3, jsonItem3.ValueString())
		}
		var jsonTypes2 []shared.CreateResponseTransformerPluginConfigAppendJSONTypes = []shared.CreateResponseTransformerPluginConfigAppendJSONTypes{}
		for _, jsonTypesItem2 := range r.Config.Append.JSONTypes {
			jsonTypes2 = append(jsonTypes2, shared.CreateResponseTransformerPluginConfigAppendJSONTypes(jsonTypesItem2.ValueString()))
		}
		var headers4 []string = []string{}
		for _, headersItem4 := range r.Config.Append.Headers {
			headers4 = append(headers4, headersItem4.ValueString())
		}
		append1 = &shared.CreateResponseTransformerPluginAppend{
			JSON:      json3,
			JSONTypes: jsonTypes2,
			Headers:   headers4,
		}
	}
	config := shared.CreateResponseTransformerPluginConfig{
		Remove:  remove,
		Rename:  rename,
		Replace: replace,
		Add:     add,
		Append:  append1,
	}
	out := shared.CreateResponseTransformerPlugin{
		Enabled:   enabled,
		Protocols: protocols,
		Tags:      tags,
		Consumer:  consumer,
		Route:     route,
		Service:   service,
		Config:    config,
	}
	return &out
}

func (r *GatewayPluginResponseTransformerResourceModel) RefreshFromSharedResponseTransformerPlugin(resp *shared.ResponseTransformerPlugin) {
	if resp != nil {
		if resp.Config.Add == nil {
			r.Config.Add = nil
		} else {
			r.Config.Add = &tfTypes.CreateResponseTransformerPluginAdd{}
			r.Config.Add.Headers = []types.String{}
			for _, v := range resp.Config.Add.Headers {
				r.Config.Add.Headers = append(r.Config.Add.Headers, types.StringValue(v))
			}
			r.Config.Add.JSON = []types.String{}
			for _, v := range resp.Config.Add.JSON {
				r.Config.Add.JSON = append(r.Config.Add.JSON, types.StringValue(v))
			}
			r.Config.Add.JSONTypes = []types.String{}
			for _, v := range resp.Config.Add.JSONTypes {
				r.Config.Add.JSONTypes = append(r.Config.Add.JSONTypes, types.StringValue(string(v)))
			}
		}
		if resp.Config.Append == nil {
			r.Config.Append = nil
		} else {
			r.Config.Append = &tfTypes.CreateResponseTransformerPluginAdd{}
			r.Config.Append.Headers = []types.String{}
			for _, v := range resp.Config.Append.Headers {
				r.Config.Append.Headers = append(r.Config.Append.Headers, types.StringValue(v))
			}
			r.Config.Append.JSON = []types.String{}
			for _, v := range resp.Config.Append.JSON {
				r.Config.Append.JSON = append(r.Config.Append.JSON, types.StringValue(v))
			}
			r.Config.Append.JSONTypes = []types.String{}
			for _, v := range resp.Config.Append.JSONTypes {
				r.Config.Append.JSONTypes = append(r.Config.Append.JSONTypes, types.StringValue(string(v)))
			}
		}
		if resp.Config.Remove == nil {
			r.Config.Remove = nil
		} else {
			r.Config.Remove = &tfTypes.CreateResponseTransformerPluginRemove{}
			r.Config.Remove.Headers = []types.String{}
			for _, v := range resp.Config.Remove.Headers {
				r.Config.Remove.Headers = append(r.Config.Remove.Headers, types.StringValue(v))
			}
			r.Config.Remove.JSON = []types.String{}
			for _, v := range resp.Config.Remove.JSON {
				r.Config.Remove.JSON = append(r.Config.Remove.JSON, types.StringValue(v))
			}
		}
		if resp.Config.Rename == nil {
			r.Config.Rename = nil
		} else {
			r.Config.Rename = &tfTypes.CreateResponseTransformerPluginRename{}
			r.Config.Rename.Headers = []types.String{}
			for _, v := range resp.Config.Rename.Headers {
				r.Config.Rename.Headers = append(r.Config.Rename.Headers, types.StringValue(v))
			}
		}
		if resp.Config.Replace == nil {
			r.Config.Replace = nil
		} else {
			r.Config.Replace = &tfTypes.CreateResponseTransformerPluginAdd{}
			r.Config.Replace.Headers = []types.String{}
			for _, v := range resp.Config.Replace.Headers {
				r.Config.Replace.Headers = append(r.Config.Replace.Headers, types.StringValue(v))
			}
			r.Config.Replace.JSON = []types.String{}
			for _, v := range resp.Config.Replace.JSON {
				r.Config.Replace.JSON = append(r.Config.Replace.JSON, types.StringValue(v))
			}
			r.Config.Replace.JSONTypes = []types.String{}
			for _, v := range resp.Config.Replace.JSONTypes {
				r.Config.Replace.JSONTypes = append(r.Config.Replace.JSONTypes, types.StringValue(string(v)))
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.Protocols = []types.String{}
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = []types.String{}
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
	}
}
