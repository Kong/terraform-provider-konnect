// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
	"time"
)

func (r *PortalListDataSourceModel) RefreshFromSharedListPortalsResponse(resp *shared.ListPortalsResponse) {
	if resp != nil {
		r.Data = []tfTypes.Portal{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data1 tfTypes.Portal
			data1.ApplicationCount = types.NumberValue(big.NewFloat(float64(dataItem.ApplicationCount)))
			data1.AutoApproveApplications = types.BoolValue(dataItem.AutoApproveApplications)
			data1.AutoApproveDevelopers = types.BoolValue(dataItem.AutoApproveDevelopers)
			data1.CreatedAt = types.StringValue(dataItem.CreatedAt.Format(time.RFC3339Nano))
			data1.CustomClientDomain = types.StringPointerValue(dataItem.CustomClientDomain)
			data1.CustomDomain = types.StringPointerValue(dataItem.CustomDomain)
			data1.DefaultApplicationAuthStrategyID = types.StringPointerValue(dataItem.DefaultApplicationAuthStrategyID)
			data1.DefaultDomain = types.StringValue(dataItem.DefaultDomain)
			data1.Description = types.StringPointerValue(dataItem.Description)
			data1.DeveloperCount = types.NumberValue(big.NewFloat(float64(dataItem.DeveloperCount)))
			data1.DisplayName = types.StringValue(dataItem.DisplayName)
			data1.ID = types.StringValue(dataItem.ID)
			data1.IsPublic = types.BoolValue(dataItem.IsPublic)
			if len(dataItem.Labels) > 0 {
				data1.Labels = make(map[string]types.String)
				for key, value := range dataItem.Labels {
					data1.Labels[key] = types.StringValue(value)
				}
			}
			data1.Name = types.StringValue(dataItem.Name)
			data1.PublishedProductCount = types.NumberValue(big.NewFloat(float64(dataItem.PublishedProductCount)))
			data1.RbacEnabled = types.BoolValue(dataItem.RbacEnabled)
			data1.UpdatedAt = types.StringValue(dataItem.UpdatedAt.Format(time.RFC3339Nano))
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data1)
			} else {
				r.Data[dataCount].ApplicationCount = data1.ApplicationCount
				r.Data[dataCount].AutoApproveApplications = data1.AutoApproveApplications
				r.Data[dataCount].AutoApproveDevelopers = data1.AutoApproveDevelopers
				r.Data[dataCount].CreatedAt = data1.CreatedAt
				r.Data[dataCount].CustomClientDomain = data1.CustomClientDomain
				r.Data[dataCount].CustomDomain = data1.CustomDomain
				r.Data[dataCount].DefaultApplicationAuthStrategyID = data1.DefaultApplicationAuthStrategyID
				r.Data[dataCount].DefaultDomain = data1.DefaultDomain
				r.Data[dataCount].Description = data1.Description
				r.Data[dataCount].DeveloperCount = data1.DeveloperCount
				r.Data[dataCount].DisplayName = data1.DisplayName
				r.Data[dataCount].ID = data1.ID
				r.Data[dataCount].IsPublic = data1.IsPublic
				r.Data[dataCount].Labels = data1.Labels
				r.Data[dataCount].Name = data1.Name
				r.Data[dataCount].PublishedProductCount = data1.PublishedProductCount
				r.Data[dataCount].RbacEnabled = data1.RbacEnabled
				r.Data[dataCount].UpdatedAt = data1.UpdatedAt
			}
		}
		r.Meta.Page.Number = types.NumberValue(big.NewFloat(float64(resp.Meta.Page.Number)))
		r.Meta.Page.Size = types.NumberValue(big.NewFloat(float64(resp.Meta.Page.Size)))
		r.Meta.Page.Total = types.NumberValue(big.NewFloat(float64(resp.Meta.Page.Total)))
	}
}
