// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *PortalListDataSourceModel) RefreshFromSharedListPortalsResponse(ctx context.Context, resp *shared.ListPortalsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.Portal{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data tfTypes.Portal
			data.ApplicationCount = types.Float64Value(dataItem.ApplicationCount)
			data.AutoApproveApplications = types.BoolValue(dataItem.AutoApproveApplications)
			data.AutoApproveDevelopers = types.BoolValue(dataItem.AutoApproveDevelopers)
			data.CreatedAt = types.StringValue(typeconvert.TimeToString(dataItem.CreatedAt))
			data.CustomClientDomain = types.StringPointerValue(dataItem.CustomClientDomain)
			data.CustomDomain = types.StringPointerValue(dataItem.CustomDomain)
			data.DefaultApplicationAuthStrategyID = types.StringPointerValue(dataItem.DefaultApplicationAuthStrategyID)
			data.DefaultDomain = types.StringValue(dataItem.DefaultDomain)
			data.Description = types.StringPointerValue(dataItem.Description)
			data.DeveloperCount = types.Float64Value(dataItem.DeveloperCount)
			data.DisplayName = types.StringValue(dataItem.DisplayName)
			data.ID = types.StringValue(dataItem.ID)
			data.IsPublic = types.BoolValue(dataItem.IsPublic)
			if len(dataItem.Labels) > 0 {
				data.Labels = make(map[string]types.String, len(dataItem.Labels))
				for key, value := range dataItem.Labels {
					data.Labels[key] = types.StringPointerValue(value)
				}
			}
			data.Name = types.StringValue(dataItem.Name)
			data.PublishedProductCount = types.Float64Value(dataItem.PublishedProductCount)
			data.RbacEnabled = types.BoolValue(dataItem.RbacEnabled)
			data.UpdatedAt = types.StringValue(typeconvert.TimeToString(dataItem.UpdatedAt))
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data)
			} else {
				r.Data[dataCount].ApplicationCount = data.ApplicationCount
				r.Data[dataCount].AutoApproveApplications = data.AutoApproveApplications
				r.Data[dataCount].AutoApproveDevelopers = data.AutoApproveDevelopers
				r.Data[dataCount].CreatedAt = data.CreatedAt
				r.Data[dataCount].CustomClientDomain = data.CustomClientDomain
				r.Data[dataCount].CustomDomain = data.CustomDomain
				r.Data[dataCount].DefaultApplicationAuthStrategyID = data.DefaultApplicationAuthStrategyID
				r.Data[dataCount].DefaultDomain = data.DefaultDomain
				r.Data[dataCount].Description = data.Description
				r.Data[dataCount].DeveloperCount = data.DeveloperCount
				r.Data[dataCount].DisplayName = data.DisplayName
				r.Data[dataCount].ID = data.ID
				r.Data[dataCount].IsPublic = data.IsPublic
				r.Data[dataCount].Labels = data.Labels
				r.Data[dataCount].Name = data.Name
				r.Data[dataCount].PublishedProductCount = data.PublishedProductCount
				r.Data[dataCount].RbacEnabled = data.RbacEnabled
				r.Data[dataCount].UpdatedAt = data.UpdatedAt
			}
		}
		r.Meta.Page.Number = types.Float64Value(resp.Meta.Page.Number)
		r.Meta.Page.Size = types.Float64Value(resp.Meta.Page.Size)
		r.Meta.Page.Total = types.Float64Value(resp.Meta.Page.Total)
	}

	return diags
}
