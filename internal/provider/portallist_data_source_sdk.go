// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *PortalListDataSourceModel) RefreshFromSharedV2ListPortalsResponse(ctx context.Context, resp *shared.V2ListPortalsResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.V2Portal{}

		for _, dataItem := range resp.Data {
			var data tfTypes.V2Portal

			data.ApplicationCount = types.Float64Value(dataItem.ApplicationCount)
			data.AutoApproveApplications = types.BoolValue(dataItem.AutoApproveApplications)
			data.AutoApproveDevelopers = types.BoolValue(dataItem.AutoApproveDevelopers)
			data.CreatedAt = types.StringValue(typeconvert.TimeToString(dataItem.CreatedAt))
			data.CustomClientDomain = types.StringPointerValue(dataItem.CustomClientDomain)
			data.CustomDomain = types.StringPointerValue(dataItem.CustomDomain)
			data.DefaultApplicationAuthStrategyID = types.StringPointerValue(dataItem.DefaultApplicationAuthStrategyID)
			data.DefaultDomain = types.StringValue(dataItem.DefaultDomain)
			data.Description = types.StringPointerValue(dataItem.Description)
			data.DeveloperCount = types.Float64Value(dataItem.DeveloperCount)
			data.DisplayName = types.StringValue(dataItem.DisplayName)
			data.ID = types.StringValue(dataItem.ID)
			data.IsPublic = types.BoolValue(dataItem.IsPublic)
			if len(dataItem.Labels) > 0 {
				data.Labels = make(map[string]types.String, len(dataItem.Labels))
				for key, value := range dataItem.Labels {
					data.Labels[key] = types.StringValue(value)
				}
			}
			data.Name = types.StringValue(dataItem.Name)
			data.PublishedProductCount = types.Float64Value(dataItem.PublishedProductCount)
			data.RbacEnabled = types.BoolValue(dataItem.RbacEnabled)
			data.UpdatedAt = types.StringValue(typeconvert.TimeToString(dataItem.UpdatedAt))

			r.Data = append(r.Data, data)
		}
		r.Meta.Page.Number = types.Float64Value(resp.Meta.Page.Number)
		r.Meta.Page.Size = types.Float64Value(resp.Meta.Page.Size)
		r.Meta.Page.Total = types.Float64Value(resp.Meta.Page.Total)
	}

	return diags
}

func (r *PortalListDataSourceModel) ToOperationsListPortalsRequest(ctx context.Context) (*operations.ListPortalsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	pageNumber := new(int64)
	if !r.PageNumber.IsUnknown() && !r.PageNumber.IsNull() {
		*pageNumber = r.PageNumber.ValueInt64()
	} else {
		pageNumber = nil
	}
	sort := new(string)
	if !r.Sort.IsUnknown() && !r.Sort.IsNull() {
		*sort = r.Sort.ValueString()
	} else {
		sort = nil
	}
	out := operations.ListPortalsRequest{
		PageSize:   pageSize,
		PageNumber: pageNumber,
		Sort:       sort,
	}

	return &out, diags
}
