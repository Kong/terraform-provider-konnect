// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginConfluentConsumeDataSourceModel) ToOperationsGetConfluentconsumePluginRequest(ctx context.Context) (*operations.GetConfluentconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetConfluentconsumePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentConsumeDataSourceModel) RefreshFromSharedConfluentConsumePlugin(ctx context.Context, resp *shared.ConfluentConsumePlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.ConfluentConsumePluginConfig{}
			if resp.Config.AutoOffsetReset != nil {
				r.Config.AutoOffsetReset = types.StringValue(string(*resp.Config.AutoOffsetReset))
			} else {
				r.Config.AutoOffsetReset = types.StringNull()
			}
			r.Config.BootstrapServers = []tfTypes.BootstrapServers{}
			if len(r.Config.BootstrapServers) > len(resp.Config.BootstrapServers) {
				r.Config.BootstrapServers = r.Config.BootstrapServers[:len(resp.Config.BootstrapServers)]
			}
			for bootstrapServersCount, bootstrapServersItem := range resp.Config.BootstrapServers {
				var bootstrapServers tfTypes.BootstrapServers
				bootstrapServers.Host = types.StringValue(bootstrapServersItem.Host)
				bootstrapServers.Port = types.Int64Value(bootstrapServersItem.Port)
				if bootstrapServersCount+1 > len(r.Config.BootstrapServers) {
					r.Config.BootstrapServers = append(r.Config.BootstrapServers, bootstrapServers)
				} else {
					r.Config.BootstrapServers[bootstrapServersCount].Host = bootstrapServers.Host
					r.Config.BootstrapServers[bootstrapServersCount].Port = bootstrapServers.Port
				}
			}
			r.Config.ClusterAPIKey = types.StringPointerValue(resp.Config.ClusterAPIKey)
			r.Config.ClusterAPISecret = types.StringPointerValue(resp.Config.ClusterAPISecret)
			r.Config.ClusterName = types.StringPointerValue(resp.Config.ClusterName)
			if resp.Config.CommitStrategy != nil {
				r.Config.CommitStrategy = types.StringValue(string(*resp.Config.CommitStrategy))
			} else {
				r.Config.CommitStrategy = types.StringNull()
			}
			r.Config.ConfluentCloudAPIKey = types.StringPointerValue(resp.Config.ConfluentCloudAPIKey)
			r.Config.ConfluentCloudAPISecret = types.StringPointerValue(resp.Config.ConfluentCloudAPISecret)
			r.Config.Keepalive = types.Int64PointerValue(resp.Config.Keepalive)
			r.Config.KeepaliveEnabled = types.BoolPointerValue(resp.Config.KeepaliveEnabled)
			if resp.Config.MessageDeserializer != nil {
				r.Config.MessageDeserializer = types.StringValue(string(*resp.Config.MessageDeserializer))
			} else {
				r.Config.MessageDeserializer = types.StringNull()
			}
			if resp.Config.Mode != nil {
				r.Config.Mode = types.StringValue(string(*resp.Config.Mode))
			} else {
				r.Config.Mode = types.StringNull()
			}
			r.Config.Timeout = types.Int64PointerValue(resp.Config.Timeout)
			r.Config.Topics = []tfTypes.Topics{}
			if len(r.Config.Topics) > len(resp.Config.Topics) {
				r.Config.Topics = r.Config.Topics[:len(resp.Config.Topics)]
			}
			for topicsCount, topicsItem := range resp.Config.Topics {
				var topics tfTypes.Topics
				topics.Name = types.StringValue(topicsItem.Name)
				if topicsCount+1 > len(r.Config.Topics) {
					r.Config.Topics = append(r.Config.Topics, topics)
				} else {
					r.Config.Topics[topicsCount].Name = topics.Name
				}
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
