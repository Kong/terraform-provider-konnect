// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *PortalPageResourceModel) RefreshFromSharedPortalPageResponse(ctx context.Context, resp *shared.PortalPageResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Content = types.StringValue(resp.Content)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.ParentPageID = types.StringPointerValue(resp.ParentPageID)
		r.Slug = types.StringValue(resp.Slug)
		r.Status = types.StringValue(string(resp.Status))
		r.Title = types.StringValue(resp.Title)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Visibility = types.StringValue(string(resp.Visibility))
	}

	return diags
}

func (r *PortalPageResourceModel) ToOperationsCreatePortalPageRequest(ctx context.Context) (*operations.CreatePortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	createPortalPageRequest, createPortalPageRequestDiags := r.ToSharedCreatePortalPageRequest(ctx)
	diags.Append(createPortalPageRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePortalPageRequest{
		PortalID:                portalID,
		CreatePortalPageRequest: *createPortalPageRequest,
	}

	return &out, diags
}

func (r *PortalPageResourceModel) ToOperationsDeletePortalPageRequest(ctx context.Context) (*operations.DeletePortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	var pageID string
	pageID = r.ID.ValueString()

	out := operations.DeletePortalPageRequest{
		PortalID: portalID,
		PageID:   pageID,
	}

	return &out, diags
}

func (r *PortalPageResourceModel) ToOperationsGetPortalPageRequest(ctx context.Context) (*operations.GetPortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	var pageID string
	pageID = r.ID.ValueString()

	out := operations.GetPortalPageRequest{
		PortalID: portalID,
		PageID:   pageID,
	}

	return &out, diags
}

func (r *PortalPageResourceModel) ToOperationsUpdatePortalPageRequest(ctx context.Context) (*operations.UpdatePortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	var pageID string
	pageID = r.ID.ValueString()

	updatePortalPageRequest, updatePortalPageRequestDiags := r.ToSharedUpdatePortalPageRequest(ctx)
	diags.Append(updatePortalPageRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePortalPageRequest{
		PortalID:                portalID,
		PageID:                  pageID,
		UpdatePortalPageRequest: *updatePortalPageRequest,
	}

	return &out, diags
}

func (r *PortalPageResourceModel) ToSharedCreatePortalPageRequest(ctx context.Context) (*shared.CreatePortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var slug string
	slug = r.Slug.ValueString()

	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	var content string
	content = r.Content.ValueString()

	visibility := new(shared.PageVisibilityStatus)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.PageVisibilityStatus(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	status := new(shared.PublishedStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishedStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	parentPageID := new(string)
	if !r.ParentPageID.IsUnknown() && !r.ParentPageID.IsNull() {
		*parentPageID = r.ParentPageID.ValueString()
	} else {
		parentPageID = nil
	}
	out := shared.CreatePortalPageRequest{
		Slug:         slug,
		Title:        title,
		Content:      content,
		Visibility:   visibility,
		Status:       status,
		Description:  description,
		ParentPageID: parentPageID,
	}

	return &out, diags
}

func (r *PortalPageResourceModel) ToSharedUpdatePortalPageRequest(ctx context.Context) (*shared.UpdatePortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	content := new(string)
	if !r.Content.IsUnknown() && !r.Content.IsNull() {
		*content = r.Content.ValueString()
	} else {
		content = nil
	}
	visibility := new(shared.VisibilityStatus)
	if !r.Visibility.IsUnknown() && !r.Visibility.IsNull() {
		*visibility = shared.VisibilityStatus(r.Visibility.ValueString())
	} else {
		visibility = nil
	}
	status := new(shared.PublishedStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.PublishedStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	parentPageID := new(string)
	if !r.ParentPageID.IsUnknown() && !r.ParentPageID.IsNull() {
		*parentPageID = r.ParentPageID.ValueString()
	} else {
		parentPageID = nil
	}
	out := shared.UpdatePortalPageRequest{
		Slug:         slug,
		Title:        title,
		Content:      content,
		Visibility:   visibility,
		Status:       status,
		Description:  description,
		ParentPageID: parentPageID,
	}

	return &out, diags
}
