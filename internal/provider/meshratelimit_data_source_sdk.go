// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *MeshRateLimitDataSourceModel) RefreshFromSharedMeshRateLimitItem(resp *shared.MeshRateLimitItem) {
	if resp != nil {
		if resp.CreationTime != nil {
			r.CreationTime = types.StringValue(resp.CreationTime.Format(time.RFC3339Nano))
		} else {
			r.CreationTime = types.StringNull()
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringPointerValue(resp.Mesh)
		if resp.ModificationTime != nil {
			r.ModificationTime = types.StringValue(resp.ModificationTime.Format(time.RFC3339Nano))
		} else {
			r.ModificationTime = types.StringNull()
		}
		r.Name = types.StringValue(resp.Name)
		r.Spec.From = []tfTypes.MeshRateLimitItemFrom{}
		if len(r.Spec.From) > len(resp.Spec.From) {
			r.Spec.From = r.Spec.From[:len(resp.Spec.From)]
		}
		for fromCount, fromItem := range resp.Spec.From {
			var from1 tfTypes.MeshRateLimitItemFrom
			if fromItem.Default == nil {
				from1.Default = nil
			} else {
				from1.Default = &tfTypes.MeshRateLimitItemDefault{}
				if fromItem.Default.Local == nil {
					from1.Default.Local = nil
				} else {
					from1.Default.Local = &tfTypes.Local{}
					if fromItem.Default.Local.HTTP == nil {
						from1.Default.Local.HTTP = nil
					} else {
						from1.Default.Local.HTTP = &tfTypes.MeshRateLimitItemHTTP{}
						from1.Default.Local.HTTP.Disabled = types.BoolPointerValue(fromItem.Default.Local.HTTP.Disabled)
						if fromItem.Default.Local.HTTP.OnRateLimit == nil {
							from1.Default.Local.HTTP.OnRateLimit = nil
						} else {
							from1.Default.Local.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
							if fromItem.Default.Local.HTTP.OnRateLimit.Headers == nil {
								from1.Default.Local.HTTP.OnRateLimit.Headers = nil
							} else {
								from1.Default.Local.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemSpecHeaders{}
								from1.Default.Local.HTTP.OnRateLimit.Headers.Add = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
								for addCount, addItem := range fromItem.Default.Local.HTTP.OnRateLimit.Headers.Add {
									var add1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
									add1.Name = types.StringValue(addItem.Name)
									add1.Value = types.StringValue(addItem.Value)
									if addCount+1 > len(from1.Default.Local.HTTP.OnRateLimit.Headers.Add) {
										from1.Default.Local.HTTP.OnRateLimit.Headers.Add = append(from1.Default.Local.HTTP.OnRateLimit.Headers.Add, add1)
									} else {
										from1.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount].Name = add1.Name
										from1.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount].Value = add1.Value
									}
								}
								from1.Default.Local.HTTP.OnRateLimit.Headers.Set = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
								for setCount, setItem := range fromItem.Default.Local.HTTP.OnRateLimit.Headers.Set {
									var set1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
									set1.Name = types.StringValue(setItem.Name)
									set1.Value = types.StringValue(setItem.Value)
									if setCount+1 > len(from1.Default.Local.HTTP.OnRateLimit.Headers.Set) {
										from1.Default.Local.HTTP.OnRateLimit.Headers.Set = append(from1.Default.Local.HTTP.OnRateLimit.Headers.Set, set1)
									} else {
										from1.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount].Name = set1.Name
										from1.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount].Value = set1.Value
									}
								}
							}
							if fromItem.Default.Local.HTTP.OnRateLimit.Status != nil {
								from1.Default.Local.HTTP.OnRateLimit.Status = types.Int64Value(int64(*fromItem.Default.Local.HTTP.OnRateLimit.Status))
							} else {
								from1.Default.Local.HTTP.OnRateLimit.Status = types.Int64Null()
							}
						}
						if fromItem.Default.Local.HTTP.RequestRate == nil {
							from1.Default.Local.HTTP.RequestRate = nil
						} else {
							from1.Default.Local.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							from1.Default.Local.HTTP.RequestRate.Interval = types.StringValue(fromItem.Default.Local.HTTP.RequestRate.Interval)
							from1.Default.Local.HTTP.RequestRate.Num = types.Int64Value(int64(fromItem.Default.Local.HTTP.RequestRate.Num))
						}
					}
					if fromItem.Default.Local.TCP == nil {
						from1.Default.Local.TCP = nil
					} else {
						from1.Default.Local.TCP = &tfTypes.MeshRateLimitItemTCP{}
						if fromItem.Default.Local.TCP.ConnectionRate == nil {
							from1.Default.Local.TCP.ConnectionRate = nil
						} else {
							from1.Default.Local.TCP.ConnectionRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							from1.Default.Local.TCP.ConnectionRate.Interval = types.StringValue(fromItem.Default.Local.TCP.ConnectionRate.Interval)
							from1.Default.Local.TCP.ConnectionRate.Num = types.Int64Value(int64(fromItem.Default.Local.TCP.ConnectionRate.Num))
						}
						from1.Default.Local.TCP.Disabled = types.BoolPointerValue(fromItem.Default.Local.TCP.Disabled)
					}
				}
			}
			if fromItem.TargetRef.Kind != nil {
				from1.TargetRef.Kind = types.StringValue(string(*fromItem.TargetRef.Kind))
			} else {
				from1.TargetRef.Kind = types.StringNull()
			}
			if len(fromItem.TargetRef.Labels) > 0 {
				from1.TargetRef.Labels = make(map[string]types.String)
				for key1, value3 := range fromItem.TargetRef.Labels {
					from1.TargetRef.Labels[key1] = types.StringValue(value3)
				}
			}
			from1.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
			from1.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
			from1.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
			from1.TargetRef.ProxyTypes = []types.String{}
			for _, v := range fromItem.TargetRef.ProxyTypes {
				from1.TargetRef.ProxyTypes = append(from1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			from1.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
			if len(fromItem.TargetRef.Tags) > 0 {
				from1.TargetRef.Tags = make(map[string]types.String)
				for key2, value4 := range fromItem.TargetRef.Tags {
					from1.TargetRef.Tags[key2] = types.StringValue(value4)
				}
			}
			if fromCount+1 > len(r.Spec.From) {
				r.Spec.From = append(r.Spec.From, from1)
			} else {
				r.Spec.From[fromCount].Default = from1.Default
				r.Spec.From[fromCount].TargetRef = from1.TargetRef
			}
		}
		if resp.Spec.TargetRef == nil {
			r.Spec.TargetRef = nil
		} else {
			r.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
			if resp.Spec.TargetRef.Kind != nil {
				r.Spec.TargetRef.Kind = types.StringValue(string(*resp.Spec.TargetRef.Kind))
			} else {
				r.Spec.TargetRef.Kind = types.StringNull()
			}
			if len(resp.Spec.TargetRef.Labels) > 0 {
				r.Spec.TargetRef.Labels = make(map[string]types.String)
				for key3, value5 := range resp.Spec.TargetRef.Labels {
					r.Spec.TargetRef.Labels[key3] = types.StringValue(value5)
				}
			}
			r.Spec.TargetRef.Mesh = types.StringPointerValue(resp.Spec.TargetRef.Mesh)
			r.Spec.TargetRef.Name = types.StringPointerValue(resp.Spec.TargetRef.Name)
			r.Spec.TargetRef.Namespace = types.StringPointerValue(resp.Spec.TargetRef.Namespace)
			r.Spec.TargetRef.ProxyTypes = []types.String{}
			for _, v := range resp.Spec.TargetRef.ProxyTypes {
				r.Spec.TargetRef.ProxyTypes = append(r.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			r.Spec.TargetRef.SectionName = types.StringPointerValue(resp.Spec.TargetRef.SectionName)
			if len(resp.Spec.TargetRef.Tags) > 0 {
				r.Spec.TargetRef.Tags = make(map[string]types.String)
				for key4, value6 := range resp.Spec.TargetRef.Tags {
					r.Spec.TargetRef.Tags[key4] = types.StringValue(value6)
				}
			}
		}
		r.Spec.To = []tfTypes.MeshRateLimitItemFrom{}
		if len(r.Spec.To) > len(resp.Spec.To) {
			r.Spec.To = r.Spec.To[:len(resp.Spec.To)]
		}
		for toCount, toItem := range resp.Spec.To {
			var to1 tfTypes.MeshRateLimitItemFrom
			if toItem.Default == nil {
				to1.Default = nil
			} else {
				to1.Default = &tfTypes.MeshRateLimitItemDefault{}
				if toItem.Default.Local == nil {
					to1.Default.Local = nil
				} else {
					to1.Default.Local = &tfTypes.Local{}
					if toItem.Default.Local.HTTP == nil {
						to1.Default.Local.HTTP = nil
					} else {
						to1.Default.Local.HTTP = &tfTypes.MeshRateLimitItemHTTP{}
						to1.Default.Local.HTTP.Disabled = types.BoolPointerValue(toItem.Default.Local.HTTP.Disabled)
						if toItem.Default.Local.HTTP.OnRateLimit == nil {
							to1.Default.Local.HTTP.OnRateLimit = nil
						} else {
							to1.Default.Local.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
							if toItem.Default.Local.HTTP.OnRateLimit.Headers == nil {
								to1.Default.Local.HTTP.OnRateLimit.Headers = nil
							} else {
								to1.Default.Local.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemSpecHeaders{}
								to1.Default.Local.HTTP.OnRateLimit.Headers.Add = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
								for addCount1, addItem1 := range toItem.Default.Local.HTTP.OnRateLimit.Headers.Add {
									var add3 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
									add3.Name = types.StringValue(addItem1.Name)
									add3.Value = types.StringValue(addItem1.Value)
									if addCount1+1 > len(to1.Default.Local.HTTP.OnRateLimit.Headers.Add) {
										to1.Default.Local.HTTP.OnRateLimit.Headers.Add = append(to1.Default.Local.HTTP.OnRateLimit.Headers.Add, add3)
									} else {
										to1.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount1].Name = add3.Name
										to1.Default.Local.HTTP.OnRateLimit.Headers.Add[addCount1].Value = add3.Value
									}
								}
								to1.Default.Local.HTTP.OnRateLimit.Headers.Set = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
								for setCount1, setItem1 := range toItem.Default.Local.HTTP.OnRateLimit.Headers.Set {
									var set3 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
									set3.Name = types.StringValue(setItem1.Name)
									set3.Value = types.StringValue(setItem1.Value)
									if setCount1+1 > len(to1.Default.Local.HTTP.OnRateLimit.Headers.Set) {
										to1.Default.Local.HTTP.OnRateLimit.Headers.Set = append(to1.Default.Local.HTTP.OnRateLimit.Headers.Set, set3)
									} else {
										to1.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount1].Name = set3.Name
										to1.Default.Local.HTTP.OnRateLimit.Headers.Set[setCount1].Value = set3.Value
									}
								}
							}
							if toItem.Default.Local.HTTP.OnRateLimit.Status != nil {
								to1.Default.Local.HTTP.OnRateLimit.Status = types.Int64Value(int64(*toItem.Default.Local.HTTP.OnRateLimit.Status))
							} else {
								to1.Default.Local.HTTP.OnRateLimit.Status = types.Int64Null()
							}
						}
						if toItem.Default.Local.HTTP.RequestRate == nil {
							to1.Default.Local.HTTP.RequestRate = nil
						} else {
							to1.Default.Local.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							to1.Default.Local.HTTP.RequestRate.Interval = types.StringValue(toItem.Default.Local.HTTP.RequestRate.Interval)
							to1.Default.Local.HTTP.RequestRate.Num = types.Int64Value(int64(toItem.Default.Local.HTTP.RequestRate.Num))
						}
					}
					if toItem.Default.Local.TCP == nil {
						to1.Default.Local.TCP = nil
					} else {
						to1.Default.Local.TCP = &tfTypes.MeshRateLimitItemTCP{}
						if toItem.Default.Local.TCP.ConnectionRate == nil {
							to1.Default.Local.TCP.ConnectionRate = nil
						} else {
							to1.Default.Local.TCP.ConnectionRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
							to1.Default.Local.TCP.ConnectionRate.Interval = types.StringValue(toItem.Default.Local.TCP.ConnectionRate.Interval)
							to1.Default.Local.TCP.ConnectionRate.Num = types.Int64Value(int64(toItem.Default.Local.TCP.ConnectionRate.Num))
						}
						to1.Default.Local.TCP.Disabled = types.BoolPointerValue(toItem.Default.Local.TCP.Disabled)
					}
				}
			}
			if toItem.TargetRef.Kind != nil {
				to1.TargetRef.Kind = types.StringValue(string(*toItem.TargetRef.Kind))
			} else {
				to1.TargetRef.Kind = types.StringNull()
			}
			if len(toItem.TargetRef.Labels) > 0 {
				to1.TargetRef.Labels = make(map[string]types.String)
				for key5, value9 := range toItem.TargetRef.Labels {
					to1.TargetRef.Labels[key5] = types.StringValue(value9)
				}
			}
			to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
			to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
			to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
			to1.TargetRef.ProxyTypes = []types.String{}
			for _, v := range toItem.TargetRef.ProxyTypes {
				to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
			}
			to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
			if len(toItem.TargetRef.Tags) > 0 {
				to1.TargetRef.Tags = make(map[string]types.String)
				for key6, value10 := range toItem.TargetRef.Tags {
					to1.TargetRef.Tags[key6] = types.StringValue(value10)
				}
			}
			if toCount+1 > len(r.Spec.To) {
				r.Spec.To = append(r.Spec.To, to1)
			} else {
				r.Spec.To[toCount].Default = to1.Default
				r.Spec.To[toCount].TargetRef = to1.TargetRef
			}
		}
		r.Type = types.StringValue(string(resp.Type))
	}
}
