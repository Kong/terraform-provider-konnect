// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *MeshGatewayResourceModel) ToSharedMeshGatewayItem() *shared.MeshGatewayItem {
	var conf *shared.Conf
	if r.Conf != nil {
		var listeners []shared.Listeners = []shared.Listeners{}
		for _, listenersItem := range r.Conf.Listeners {
			crossMesh := new(bool)
			if !listenersItem.CrossMesh.IsUnknown() && !listenersItem.CrossMesh.IsNull() {
				*crossMesh = listenersItem.CrossMesh.ValueBool()
			} else {
				crossMesh = nil
			}
			hostname := new(string)
			if !listenersItem.Hostname.IsUnknown() && !listenersItem.Hostname.IsNull() {
				*hostname = listenersItem.Hostname.ValueString()
			} else {
				hostname = nil
			}
			port := new(int64)
			if !listenersItem.Port.IsUnknown() && !listenersItem.Port.IsNull() {
				*port = listenersItem.Port.ValueInt64()
			} else {
				port = nil
			}
			var protocol *shared.MeshGatewayItemProtocol
			if listenersItem.Protocol != nil {
				str := new(string)
				if !listenersItem.Protocol.Str.IsUnknown() && !listenersItem.Protocol.Str.IsNull() {
					*str = listenersItem.Protocol.Str.ValueString()
				} else {
					str = nil
				}
				if str != nil {
					protocol = &shared.MeshGatewayItemProtocol{
						Str: str,
					}
				}
				integer := new(int64)
				if !listenersItem.Protocol.Integer.IsUnknown() && !listenersItem.Protocol.Integer.IsNull() {
					*integer = listenersItem.Protocol.Integer.ValueInt64()
				} else {
					integer = nil
				}
				if integer != nil {
					protocol = &shared.MeshGatewayItemProtocol{
						Integer: integer,
					}
				}
			}
			var resources *shared.Resources
			if listenersItem.Resources != nil {
				connectionLimit := new(int64)
				if !listenersItem.Resources.ConnectionLimit.IsUnknown() && !listenersItem.Resources.ConnectionLimit.IsNull() {
					*connectionLimit = listenersItem.Resources.ConnectionLimit.ValueInt64()
				} else {
					connectionLimit = nil
				}
				resources = &shared.Resources{
					ConnectionLimit: connectionLimit,
				}
			}
			tags := make(map[string]string)
			for tagsKey, tagsValue := range listenersItem.Tags {
				var tagsInst string
				tagsInst = tagsValue.ValueString()

				tags[tagsKey] = tagsInst
			}
			var tls *shared.MeshGatewayItemTLS
			if listenersItem.TLS != nil {
				var certificates []shared.Certificates = []shared.Certificates{}
				for _, certificatesItem := range listenersItem.TLS.Certificates {
					var typeVar interface{}
					_ = json.Unmarshal([]byte(certificatesItem.Type.ValueString()), &typeVar)
					certificates = append(certificates, shared.Certificates{
						Type: typeVar,
					})
				}
				var mode *shared.MeshGatewayItemMode
				if listenersItem.TLS.Mode != nil {
					str1 := new(string)
					if !listenersItem.TLS.Mode.Str.IsUnknown() && !listenersItem.TLS.Mode.Str.IsNull() {
						*str1 = listenersItem.TLS.Mode.Str.ValueString()
					} else {
						str1 = nil
					}
					if str1 != nil {
						mode = &shared.MeshGatewayItemMode{
							Str: str1,
						}
					}
					integer1 := new(int64)
					if !listenersItem.TLS.Mode.Integer.IsUnknown() && !listenersItem.TLS.Mode.Integer.IsNull() {
						*integer1 = listenersItem.TLS.Mode.Integer.ValueInt64()
					} else {
						integer1 = nil
					}
					if integer1 != nil {
						mode = &shared.MeshGatewayItemMode{
							Integer: integer1,
						}
					}
				}
				var optionsVar *shared.OptionsObj
				if listenersItem.TLS.Options != nil {
					optionsVar = &shared.OptionsObj{}
				}
				tls = &shared.MeshGatewayItemTLS{
					Certificates: certificates,
					Mode:         mode,
					Options:      optionsVar,
				}
			}
			listeners = append(listeners, shared.Listeners{
				CrossMesh: crossMesh,
				Hostname:  hostname,
				Port:      port,
				Protocol:  protocol,
				Resources: resources,
				Tags:      tags,
				TLS:       tls,
			})
		}
		conf = &shared.Conf{
			Listeners: listeners,
		}
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	var selectors []shared.Selectors = []shared.Selectors{}
	for _, selectorsItem := range r.Selectors {
		match := make(map[string]string)
		for matchKey, matchValue := range selectorsItem.Match {
			var matchInst string
			matchInst = matchValue.ValueString()

			match[matchKey] = matchInst
		}
		selectors = append(selectors, shared.Selectors{
			Match: match,
		})
	}
	tags1 := make(map[string]string)
	for tagsKey1, tagsValue1 := range r.Tags {
		var tagsInst1 string
		tagsInst1 = tagsValue1.ValueString()

		tags1[tagsKey1] = tagsInst1
	}
	var typeVar1 string
	typeVar1 = r.Type.ValueString()

	out := shared.MeshGatewayItem{
		Conf:      conf,
		Labels:    labels,
		Mesh:      mesh,
		Name:      name,
		Selectors: selectors,
		Tags:      tags1,
		Type:      typeVar1,
	}
	return &out
}

func (r *MeshGatewayResourceModel) RefreshFromSharedMeshGatewayCreateOrUpdateSuccessResponse(resp *shared.MeshGatewayCreateOrUpdateSuccessResponse) {
	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}
}

func (r *MeshGatewayResourceModel) RefreshFromSharedMeshGatewayItem(resp *shared.MeshGatewayItem) {
	if resp != nil {
		if resp.Conf == nil {
			r.Conf = nil
		} else {
			r.Conf = &tfTypes.Conf{}
			r.Conf.Listeners = []tfTypes.Listeners{}
			if len(r.Conf.Listeners) > len(resp.Conf.Listeners) {
				r.Conf.Listeners = r.Conf.Listeners[:len(resp.Conf.Listeners)]
			}
			for listenersCount, listenersItem := range resp.Conf.Listeners {
				var listeners1 tfTypes.Listeners
				listeners1.CrossMesh = types.BoolPointerValue(listenersItem.CrossMesh)
				listeners1.Hostname = types.StringPointerValue(listenersItem.Hostname)
				listeners1.Port = types.Int64PointerValue(listenersItem.Port)
				if listenersItem.Protocol == nil {
					listeners1.Protocol = nil
				} else {
					listeners1.Protocol = &tfTypes.Mode{}
					if listenersItem.Protocol.Str != nil {
						listeners1.Protocol.Str = types.StringPointerValue(listenersItem.Protocol.Str)
					}
					if listenersItem.Protocol.Integer != nil {
						listeners1.Protocol.Integer = types.Int64PointerValue(listenersItem.Protocol.Integer)
					}
				}
				if listenersItem.Resources == nil {
					listeners1.Resources = nil
				} else {
					listeners1.Resources = &tfTypes.Resources{}
					listeners1.Resources.ConnectionLimit = types.Int64PointerValue(listenersItem.Resources.ConnectionLimit)
				}
				if len(listenersItem.Tags) > 0 {
					listeners1.Tags = make(map[string]types.String)
					for key, value := range listenersItem.Tags {
						listeners1.Tags[key] = types.StringValue(value)
					}
				}
				if listenersItem.TLS == nil {
					listeners1.TLS = nil
				} else {
					listeners1.TLS = &tfTypes.MeshGatewayItemTLS{}
					listeners1.TLS.Certificates = []tfTypes.AccessKey{}
					for certificatesCount, certificatesItem := range listenersItem.TLS.Certificates {
						var certificates1 tfTypes.AccessKey
						typeVarResult, _ := json.Marshal(certificatesItem.Type)
						certificates1.Type = types.StringValue(string(typeVarResult))
						if certificatesCount+1 > len(listeners1.TLS.Certificates) {
							listeners1.TLS.Certificates = append(listeners1.TLS.Certificates, certificates1)
						} else {
							listeners1.TLS.Certificates[certificatesCount].Type = certificates1.Type
						}
					}
					if listenersItem.TLS.Mode == nil {
						listeners1.TLS.Mode = nil
					} else {
						listeners1.TLS.Mode = &tfTypes.Mode{}
						if listenersItem.TLS.Mode.Str != nil {
							listeners1.TLS.Mode.Str = types.StringPointerValue(listenersItem.TLS.Mode.Str)
						}
						if listenersItem.TLS.Mode.Integer != nil {
							listeners1.TLS.Mode.Integer = types.Int64PointerValue(listenersItem.TLS.Mode.Integer)
						}
					}
					if listenersItem.TLS.Options == nil {
						listeners1.TLS.Options = nil
					} else {
						listeners1.TLS.Options = &tfTypes.OptionsObj{}
					}
				}
				if listenersCount+1 > len(r.Conf.Listeners) {
					r.Conf.Listeners = append(r.Conf.Listeners, listeners1)
				} else {
					r.Conf.Listeners[listenersCount].CrossMesh = listeners1.CrossMesh
					r.Conf.Listeners[listenersCount].Hostname = listeners1.Hostname
					r.Conf.Listeners[listenersCount].Port = listeners1.Port
					r.Conf.Listeners[listenersCount].Protocol = listeners1.Protocol
					r.Conf.Listeners[listenersCount].Resources = listeners1.Resources
					r.Conf.Listeners[listenersCount].Tags = listeners1.Tags
					r.Conf.Listeners[listenersCount].TLS = listeners1.TLS
				}
			}
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key1, value1 := range resp.Labels {
				r.Labels[key1] = types.StringValue(value1)
			}
		}
		r.Mesh = types.StringValue(resp.Mesh)
		r.Name = types.StringValue(resp.Name)
		r.Selectors = []tfTypes.Selectors{}
		if len(r.Selectors) > len(resp.Selectors) {
			r.Selectors = r.Selectors[:len(resp.Selectors)]
		}
		for selectorsCount, selectorsItem := range resp.Selectors {
			var selectors1 tfTypes.Selectors
			if len(selectorsItem.Match) > 0 {
				selectors1.Match = make(map[string]types.String)
				for key2, value2 := range selectorsItem.Match {
					selectors1.Match[key2] = types.StringValue(value2)
				}
			}
			if selectorsCount+1 > len(r.Selectors) {
				r.Selectors = append(r.Selectors, selectors1)
			} else {
				r.Selectors[selectorsCount].Match = selectors1.Match
			}
		}
		if len(resp.Tags) > 0 {
			r.Tags = make(map[string]types.String)
			for key3, value3 := range resp.Tags {
				r.Tags[key3] = types.StringValue(value3)
			}
		}
		r.Type = types.StringValue(resp.Type)
	}
}
