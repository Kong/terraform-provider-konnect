// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *ApplicationAuthStrategyResourceModel) RefreshFromSharedCreateAppAuthStrategyResponse(ctx context.Context, resp *shared.CreateAppAuthStrategyResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AppAuthStrategyKeyAuthResponse != nil {
			r.KeyAuth = &tfTypes.AppAuthStrategyKeyAuthRequest{}
			r.KeyAuth.Active = types.BoolValue(resp.AppAuthStrategyKeyAuthResponse.Active)
			r.Active = r.KeyAuth.Active
			if resp.AppAuthStrategyKeyAuthResponse.Configs.KeyAuth.KeyNames != nil {
				r.KeyAuth.Configs.KeyAuth.KeyNames = make([]types.String, 0, len(resp.AppAuthStrategyKeyAuthResponse.Configs.KeyAuth.KeyNames))
				for _, v := range resp.AppAuthStrategyKeyAuthResponse.Configs.KeyAuth.KeyNames {
					r.KeyAuth.Configs.KeyAuth.KeyNames = append(r.KeyAuth.Configs.KeyAuth.KeyNames, types.StringValue(v))
				}
			}
			r.KeyAuth.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AppAuthStrategyKeyAuthResponse.CreatedAt))
			if resp.AppAuthStrategyKeyAuthResponse.DcrProvider == nil {
				r.KeyAuth.DcrProvider = nil
			} else {
				r.KeyAuth.DcrProvider = &tfTypes.DcrProvider{}
				r.KeyAuth.DcrProvider.DisplayName = types.StringPointerValue(resp.AppAuthStrategyKeyAuthResponse.DcrProvider.DisplayName)
				r.KeyAuth.DcrProvider.ID = types.StringValue(resp.AppAuthStrategyKeyAuthResponse.DcrProvider.ID)
				r.KeyAuth.DcrProvider.Name = types.StringValue(resp.AppAuthStrategyKeyAuthResponse.DcrProvider.Name)
				r.KeyAuth.DcrProvider.ProviderType = types.StringValue(string(resp.AppAuthStrategyKeyAuthResponse.DcrProvider.ProviderType))
			}
			r.KeyAuth.DisplayName = types.StringValue(resp.AppAuthStrategyKeyAuthResponse.DisplayName)
			r.DisplayName = r.KeyAuth.DisplayName
			r.KeyAuth.ID = types.StringValue(resp.AppAuthStrategyKeyAuthResponse.ID)
			r.ID = r.KeyAuth.ID
			if len(resp.AppAuthStrategyKeyAuthResponse.Labels) > 0 {
				r.KeyAuth.Labels = make(map[string]types.String, len(resp.AppAuthStrategyKeyAuthResponse.Labels))
				for key, value := range resp.AppAuthStrategyKeyAuthResponse.Labels {
					r.KeyAuth.Labels[key] = types.StringPointerValue(value)
				}
			}
			r.KeyAuth.Name = types.StringValue(resp.AppAuthStrategyKeyAuthResponse.Name)
			r.Name = r.KeyAuth.Name
			r.KeyAuth.StrategyType = types.StringValue(string(resp.AppAuthStrategyKeyAuthResponse.StrategyType))
			r.KeyAuth.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AppAuthStrategyKeyAuthResponse.UpdatedAt))
		}
		if resp.AppAuthStrategyOpenIDConnectResponse != nil {
			r.OpenidConnect = &tfTypes.AppAuthStrategyOpenIDConnectRequest{}
			r.OpenidConnect.Active = types.BoolValue(resp.AppAuthStrategyOpenIDConnectResponse.Active)
			r.Active = r.OpenidConnect.Active
			if resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.AdditionalProperties == nil {
				r.OpenidConnect.Configs.OpenidConnect.AdditionalProperties = types.StringNull()
			} else {
				additionalPropertiesResult, _ := json.Marshal(resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.AdditionalProperties)
				r.OpenidConnect.Configs.OpenidConnect.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
			}
			r.OpenidConnect.Configs.OpenidConnect.AuthMethods = make([]types.String, 0, len(resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.AuthMethods))
			for _, v := range resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.AuthMethods {
				r.OpenidConnect.Configs.OpenidConnect.AuthMethods = append(r.OpenidConnect.Configs.OpenidConnect.AuthMethods, types.StringValue(v))
			}
			r.OpenidConnect.Configs.OpenidConnect.CredentialClaim = make([]types.String, 0, len(resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.CredentialClaim))
			for _, v := range resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.CredentialClaim {
				r.OpenidConnect.Configs.OpenidConnect.CredentialClaim = append(r.OpenidConnect.Configs.OpenidConnect.CredentialClaim, types.StringValue(v))
			}
			r.OpenidConnect.Configs.OpenidConnect.Issuer = types.StringValue(resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.Issuer)
			r.OpenidConnect.Configs.OpenidConnect.Scopes = make([]types.String, 0, len(resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.Scopes))
			for _, v := range resp.AppAuthStrategyOpenIDConnectResponse.Configs.OpenidConnect.Scopes {
				r.OpenidConnect.Configs.OpenidConnect.Scopes = append(r.OpenidConnect.Configs.OpenidConnect.Scopes, types.StringValue(v))
			}
			r.OpenidConnect.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AppAuthStrategyOpenIDConnectResponse.CreatedAt))
			if resp.AppAuthStrategyOpenIDConnectResponse.DcrProvider == nil {
				r.OpenidConnect.DcrProvider = nil
			} else {
				r.OpenidConnect.DcrProvider = &tfTypes.DcrProvider{}
				r.OpenidConnect.DcrProvider.DisplayName = types.StringPointerValue(resp.AppAuthStrategyOpenIDConnectResponse.DcrProvider.DisplayName)
				r.OpenidConnect.DcrProvider.ID = types.StringValue(resp.AppAuthStrategyOpenIDConnectResponse.DcrProvider.ID)
				r.OpenidConnect.DcrProvider.Name = types.StringValue(resp.AppAuthStrategyOpenIDConnectResponse.DcrProvider.Name)
				r.OpenidConnect.DcrProvider.ProviderType = types.StringValue(string(resp.AppAuthStrategyOpenIDConnectResponse.DcrProvider.ProviderType))
			}
			r.OpenidConnect.DisplayName = types.StringValue(resp.AppAuthStrategyOpenIDConnectResponse.DisplayName)
			r.DisplayName = r.OpenidConnect.DisplayName
			r.OpenidConnect.ID = types.StringValue(resp.AppAuthStrategyOpenIDConnectResponse.ID)
			r.ID = r.OpenidConnect.ID
			if len(resp.AppAuthStrategyOpenIDConnectResponse.Labels) > 0 {
				r.OpenidConnect.Labels = make(map[string]types.String, len(resp.AppAuthStrategyOpenIDConnectResponse.Labels))
				for key1, value1 := range resp.AppAuthStrategyOpenIDConnectResponse.Labels {
					r.OpenidConnect.Labels[key1] = types.StringPointerValue(value1)
				}
			}
			r.OpenidConnect.Name = types.StringValue(resp.AppAuthStrategyOpenIDConnectResponse.Name)
			r.Name = r.OpenidConnect.Name
			r.OpenidConnect.StrategyType = types.StringValue(string(resp.AppAuthStrategyOpenIDConnectResponse.StrategyType))
			r.OpenidConnect.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AppAuthStrategyOpenIDConnectResponse.UpdatedAt))
		}
	}

	return diags
}

func (r *ApplicationAuthStrategyResourceModel) ToOperationsDeleteAppAuthStrategyRequest(ctx context.Context) (*operations.DeleteAppAuthStrategyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authStrategyID string
	authStrategyID = r.ID.ValueString()

	out := operations.DeleteAppAuthStrategyRequest{
		AuthStrategyID: authStrategyID,
	}

	return &out, diags
}

func (r *ApplicationAuthStrategyResourceModel) ToOperationsGetAppAuthStrategyRequest(ctx context.Context) (*operations.GetAppAuthStrategyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authStrategyID string
	authStrategyID = r.ID.ValueString()

	out := operations.GetAppAuthStrategyRequest{
		AuthStrategyID: authStrategyID,
	}

	return &out, diags
}

func (r *ApplicationAuthStrategyResourceModel) ToOperationsUpdateAppAuthStrategyRequest(ctx context.Context) (*operations.UpdateAppAuthStrategyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var authStrategyID string
	authStrategyID = r.ID.ValueString()

	updateAppAuthStrategyRequest, updateAppAuthStrategyRequestDiags := r.ToSharedUpdateAppAuthStrategyRequest(ctx)
	diags.Append(updateAppAuthStrategyRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAppAuthStrategyRequest{
		AuthStrategyID:               authStrategyID,
		UpdateAppAuthStrategyRequest: *updateAppAuthStrategyRequest,
	}

	return &out, diags
}

func (r *ApplicationAuthStrategyResourceModel) ToSharedCreateAppAuthStrategyRequest(ctx context.Context) (*shared.CreateAppAuthStrategyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.CreateAppAuthStrategyRequest
	var appAuthStrategyKeyAuthRequest *shared.AppAuthStrategyKeyAuthRequest
	if r.KeyAuth != nil {
		var name string
		name = r.KeyAuth.Name.ValueString()

		var displayName string
		displayName = r.KeyAuth.DisplayName.ValueString()

		strategyType := shared.StrategyType(r.KeyAuth.StrategyType.ValueString())
		var keyNames []string
		if r.KeyAuth.Configs.KeyAuth.KeyNames != nil {
			keyNames = make([]string, 0, len(r.KeyAuth.Configs.KeyAuth.KeyNames))
			for _, keyNamesItem := range r.KeyAuth.Configs.KeyAuth.KeyNames {
				keyNames = append(keyNames, keyNamesItem.ValueString())
			}
		}
		keyAuth := shared.AppAuthStrategyConfigKeyAuth{
			KeyNames: keyNames,
		}
		configs := shared.AppAuthStrategyKeyAuthRequestConfigs{
			KeyAuth: keyAuth,
		}
		labels := make(map[string]*string)
		for labelsKey, labelsValue := range r.KeyAuth.Labels {
			labelsInst := new(string)
			if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
				*labelsInst = labelsValue.ValueString()
			} else {
				labelsInst = nil
			}
			labels[labelsKey] = labelsInst
		}
		appAuthStrategyKeyAuthRequest = &shared.AppAuthStrategyKeyAuthRequest{
			Name:         name,
			DisplayName:  displayName,
			StrategyType: strategyType,
			Configs:      configs,
			Labels:       labels,
		}
	}
	if appAuthStrategyKeyAuthRequest != nil {
		out = shared.CreateAppAuthStrategyRequest{
			AppAuthStrategyKeyAuthRequest: appAuthStrategyKeyAuthRequest,
		}
	}
	var appAuthStrategyOpenIDConnectRequest *shared.AppAuthStrategyOpenIDConnectRequest
	if r.OpenidConnect != nil {
		var name1 string
		name1 = r.OpenidConnect.Name.ValueString()

		var displayName1 string
		displayName1 = r.OpenidConnect.DisplayName.ValueString()

		strategyType1 := shared.AppAuthStrategyOpenIDConnectRequestStrategyType(r.OpenidConnect.StrategyType.ValueString())
		var issuer string
		issuer = r.OpenidConnect.Configs.OpenidConnect.Issuer.ValueString()

		credentialClaim := make([]string, 0, len(r.OpenidConnect.Configs.OpenidConnect.CredentialClaim))
		for _, credentialClaimItem := range r.OpenidConnect.Configs.OpenidConnect.CredentialClaim {
			credentialClaim = append(credentialClaim, credentialClaimItem.ValueString())
		}
		scopes := make([]string, 0, len(r.OpenidConnect.Configs.OpenidConnect.Scopes))
		for _, scopesItem := range r.OpenidConnect.Configs.OpenidConnect.Scopes {
			scopes = append(scopes, scopesItem.ValueString())
		}
		authMethods := make([]string, 0, len(r.OpenidConnect.Configs.OpenidConnect.AuthMethods))
		for _, authMethodsItem := range r.OpenidConnect.Configs.OpenidConnect.AuthMethods {
			authMethods = append(authMethods, authMethodsItem.ValueString())
		}
		var additionalProperties interface{}
		if !r.OpenidConnect.Configs.OpenidConnect.AdditionalProperties.IsUnknown() && !r.OpenidConnect.Configs.OpenidConnect.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(r.OpenidConnect.Configs.OpenidConnect.AdditionalProperties.ValueString()), &additionalProperties)
		}
		openidConnect := shared.AppAuthStrategyConfigOpenIDConnect{
			Issuer:               issuer,
			CredentialClaim:      credentialClaim,
			Scopes:               scopes,
			AuthMethods:          authMethods,
			AdditionalProperties: additionalProperties,
		}
		configs1 := shared.AppAuthStrategyOpenIDConnectRequestConfigs{
			OpenidConnect: openidConnect,
		}
		dcrProviderID := new(string)
		if !r.OpenidConnect.DcrProviderID.IsUnknown() && !r.OpenidConnect.DcrProviderID.IsNull() {
			*dcrProviderID = r.OpenidConnect.DcrProviderID.ValueString()
		} else {
			dcrProviderID = nil
		}
		labels1 := make(map[string]*string)
		for labelsKey1, labelsValue1 := range r.OpenidConnect.Labels {
			labelsInst1 := new(string)
			if !labelsValue1.IsUnknown() && !labelsValue1.IsNull() {
				*labelsInst1 = labelsValue1.ValueString()
			} else {
				labelsInst1 = nil
			}
			labels1[labelsKey1] = labelsInst1
		}
		appAuthStrategyOpenIDConnectRequest = &shared.AppAuthStrategyOpenIDConnectRequest{
			Name:          name1,
			DisplayName:   displayName1,
			StrategyType:  strategyType1,
			Configs:       configs1,
			DcrProviderID: dcrProviderID,
			Labels:        labels1,
		}
	}
	if appAuthStrategyOpenIDConnectRequest != nil {
		out = shared.CreateAppAuthStrategyRequest{
			AppAuthStrategyOpenIDConnectRequest: appAuthStrategyOpenIDConnectRequest,
		}
	}

	return &out, diags
}

func (r *ApplicationAuthStrategyResourceModel) ToSharedUpdateAppAuthStrategyRequest(ctx context.Context) (*shared.UpdateAppAuthStrategyRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	out := shared.UpdateAppAuthStrategyRequest{
		Name:        name,
		DisplayName: displayName,
	}

	return &out, diags
}
