// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &CloudGatewayPrivateDNSDataSource{}
var _ datasource.DataSourceWithConfigure = &CloudGatewayPrivateDNSDataSource{}

func NewCloudGatewayPrivateDNSDataSource() datasource.DataSource {
	return &CloudGatewayPrivateDNSDataSource{}
}

// CloudGatewayPrivateDNSDataSource is the data source implementation.
type CloudGatewayPrivateDNSDataSource struct {
	client *sdk.Konnect
}

// CloudGatewayPrivateDNSDataSourceModel describes the data model.
type CloudGatewayPrivateDNSDataSourceModel struct {
	AwsPrivateDNSResolverResponse *tfTypes.AwsPrivateDNSResolverResponse `queryParam:"inline" tfsdk:"aws_private_dns_resolver_response" tfPlanOnly:"true"`
	AwsPrivateHostedZoneResponse  *tfTypes.AwsPrivateHostedZoneResponse  `queryParam:"inline" tfsdk:"aws_private_hosted_zone_response" tfPlanOnly:"true"`
	EntityVersion                 types.Int64                            `tfsdk:"entity_version"`
	ID                            types.String                           `tfsdk:"id"`
	Name                          types.String                           `tfsdk:"name"`
	NetworkID                     types.String                           `tfsdk:"network_id"`
}

// Metadata returns the data source type name.
func (r *CloudGatewayPrivateDNSDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cloud_gateway_private_dns"
}

// Schema defines the schema for the data source.
func (r *CloudGatewayPrivateDNSDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "CloudGatewayPrivateDNS DataSource",

		Attributes: map[string]schema.Attribute{
			"aws_private_dns_resolver_response": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS creation date.`,
					},
					"entity_version": schema.Int64Attribute{
						Computed: true,
						MarkdownDescription: `Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the` + "\n" +
							`Private DNS.`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Human-readable name of the Private DNS.`,
					},
					"private_dns_attachment_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"dns_config": schema.MapNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"remote_dns_server_ip_addresses": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `IP addresses of remote DNS servers used by the Private DNS Resolver for DNS resolution.`,
										},
									},
								},
								Description: `Object that contains mappings from proxied internal domains to remote DNS server IP address for a Private DNS Resolver.`,
							},
							"kind": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"state": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The current state of the Private DNS attachment. Possible values:` + "\n" +
							`- ` + "`" + `created` + "`" + ` - The attachment has been created but is not attached to Private DNS.` + "\n" +
							`- ` + "`" + `initializing` + "`" + ` - The attachment is in the process of being initialized and is setting up necessary resources.` + "\n" +
							`- ` + "`" + `pending-association` + "`" + ` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.` + "\n" +
							`- ` + "`" + `ready` + "`" + ` - The attachment is fully operational and can route traffic as configured.` + "\n" +
							`- ` + "`" + `error` + "`" + ` - The attachment is in an error state, and is not operational.` + "\n" +
							`- ` + "`" + `terminating` + "`" + ` - The attachment is in the process of being deleted.` + "\n" +
							`- ` + "`" + `terminated` + "`" + ` - The attachment has been fully deleted and is no longer available.`,
					},
					"state_metadata": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"reason": schema.StringAttribute{
								Computed:    true,
								Description: `Reason why the Private Dns may be in an erroneous state, reported from backing infrastructure.`,
							},
							"reported_status": schema.StringAttribute{
								Computed:    true,
								Description: `Reported status of the Private Dns from backing infrastructure.`,
							},
						},
						Description: `Metadata describing the backing state of the Private Dns and why it may be in an erroneous state.`,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS update date.`,
					},
				},
			},
			"aws_private_hosted_zone_response": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS creation date.`,
					},
					"entity_version": schema.Int64Attribute{
						Computed: true,
						MarkdownDescription: `Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the` + "\n" +
							`Private DNS.`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"name": schema.StringAttribute{
						Computed:    true,
						Description: `Human-readable name of the Private DNS.`,
					},
					"private_dns_attachment_config": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"hosted_zone_id": schema.StringAttribute{
								Computed:    true,
								Description: `AWS Hosted Zone to create attachment to.`,
							},
							"kind": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"state": schema.StringAttribute{
						Computed: true,
						MarkdownDescription: `The current state of the Private DNS attachment. Possible values:` + "\n" +
							`- ` + "`" + `created` + "`" + ` - The attachment has been created but is not attached to Private DNS.` + "\n" +
							`- ` + "`" + `initializing` + "`" + ` - The attachment is in the process of being initialized and is setting up necessary resources.` + "\n" +
							`- ` + "`" + `pending-association` + "`" + ` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.` + "\n" +
							`- ` + "`" + `ready` + "`" + ` - The attachment is fully operational and can route traffic as configured.` + "\n" +
							`- ` + "`" + `error` + "`" + ` - The attachment is in an error state, and is not operational.` + "\n" +
							`- ` + "`" + `terminating` + "`" + ` - The attachment is in the process of being deleted.` + "\n" +
							`- ` + "`" + `terminated` + "`" + ` - The attachment has been fully deleted and is no longer available.`,
					},
					"state_metadata": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"reason": schema.StringAttribute{
								Computed:    true,
								Description: `Reason why the Private Dns may be in an erroneous state, reported from backing infrastructure.`,
							},
							"reported_status": schema.StringAttribute{
								Computed:    true,
								Description: `Reported status of the Private Dns from backing infrastructure.`,
							},
						},
						Description: `Metadata describing the backing state of the Private Dns and why it may be in an erroneous state.`,
					},
					"updated_at": schema.StringAttribute{
						Computed:    true,
						Description: `An RFC-3339 timestamp representation of Private DNS update date.`,
					},
				},
			},
			"entity_version": schema.Int64Attribute{
				Computed: true,
				MarkdownDescription: `Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the` + "\n" +
					`Private DNS.`,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `Human-readable name of the Private DNS.`,
			},
			"network_id": schema.StringAttribute{
				Required:    true,
				Description: `The network to operate on.`,
			},
		},
	}
}

func (r *CloudGatewayPrivateDNSDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *CloudGatewayPrivateDNSDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *CloudGatewayPrivateDNSDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPrivateDNSRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.CloudGateways.GetPrivateDNS(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PrivateDNSResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPrivateDNSResponse(ctx, res.PrivateDNSResponse)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
