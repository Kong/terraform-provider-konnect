// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
	"time"
)

func (r *MeshGlobalRateLimitListDataSourceModel) RefreshFromSharedMeshGlobalRateLimitList(resp *shared.MeshGlobalRateLimitList) {
	if resp != nil {
		r.Items = []tfTypes.MeshGlobalRateLimitItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items1 tfTypes.MeshGlobalRateLimitItem
			if itemsItem.CreationTime != nil {
				items1.CreationTime = types.StringValue(itemsItem.CreationTime.Format(time.RFC3339Nano))
			} else {
				items1.CreationTime = types.StringNull()
			}
			if len(itemsItem.Labels) > 0 {
				items1.Labels = make(map[string]types.String)
				for key, value := range itemsItem.Labels {
					items1.Labels[key] = types.StringValue(value)
				}
			}
			items1.Mesh = types.StringPointerValue(itemsItem.Mesh)
			if itemsItem.ModificationTime != nil {
				items1.ModificationTime = types.StringValue(itemsItem.ModificationTime.Format(time.RFC3339Nano))
			} else {
				items1.ModificationTime = types.StringNull()
			}
			items1.Name = types.StringValue(itemsItem.Name)
			items1.Spec.From = []tfTypes.MeshGlobalRateLimitItemFrom{}
			for fromCount, fromItem := range itemsItem.Spec.From {
				var from1 tfTypes.MeshGlobalRateLimitItemFrom
				if fromItem.Default == nil {
					from1.Default = nil
				} else {
					from1.Default = &tfTypes.MeshGlobalRateLimitItemDefault{}
					from1.Default.Backend.RateLimitService.LimitOnServiceFail = types.BoolPointerValue(fromItem.Default.Backend.RateLimitService.LimitOnServiceFail)
					from1.Default.Backend.RateLimitService.Timeout = types.StringPointerValue(fromItem.Default.Backend.RateLimitService.Timeout)
					from1.Default.Backend.RateLimitService.URL = types.StringPointerValue(fromItem.Default.Backend.RateLimitService.URL)
					from1.Default.HTTP.Disabled = types.BoolPointerValue(fromItem.Default.HTTP.Disabled)
					if fromItem.Default.HTTP.OnRateLimit == nil {
						from1.Default.HTTP.OnRateLimit = nil
					} else {
						from1.Default.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
						if fromItem.Default.HTTP.OnRateLimit.Headers == nil {
							from1.Default.HTTP.OnRateLimit.Headers = nil
						} else {
							from1.Default.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemSpecHeaders{}
							from1.Default.HTTP.OnRateLimit.Headers.Add = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
							for addCount, addItem := range fromItem.Default.HTTP.OnRateLimit.Headers.Add {
								var add1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
								add1.Name = types.StringValue(addItem.Name)
								add1.Value = types.StringValue(addItem.Value)
								if addCount+1 > len(from1.Default.HTTP.OnRateLimit.Headers.Add) {
									from1.Default.HTTP.OnRateLimit.Headers.Add = append(from1.Default.HTTP.OnRateLimit.Headers.Add, add1)
								} else {
									from1.Default.HTTP.OnRateLimit.Headers.Add[addCount].Name = add1.Name
									from1.Default.HTTP.OnRateLimit.Headers.Add[addCount].Value = add1.Value
								}
							}
							from1.Default.HTTP.OnRateLimit.Headers.Set = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
							for setCount, setItem := range fromItem.Default.HTTP.OnRateLimit.Headers.Set {
								var set1 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
								set1.Name = types.StringValue(setItem.Name)
								set1.Value = types.StringValue(setItem.Value)
								if setCount+1 > len(from1.Default.HTTP.OnRateLimit.Headers.Set) {
									from1.Default.HTTP.OnRateLimit.Headers.Set = append(from1.Default.HTTP.OnRateLimit.Headers.Set, set1)
								} else {
									from1.Default.HTTP.OnRateLimit.Headers.Set[setCount].Name = set1.Name
									from1.Default.HTTP.OnRateLimit.Headers.Set[setCount].Value = set1.Value
								}
							}
						}
						if fromItem.Default.HTTP.OnRateLimit.Status != nil {
							from1.Default.HTTP.OnRateLimit.Status = types.Int64Value(int64(*fromItem.Default.HTTP.OnRateLimit.Status))
						} else {
							from1.Default.HTTP.OnRateLimit.Status = types.Int64Null()
						}
					}
					from1.Default.HTTP.RatelimitOnRequest = []tfTypes.RatelimitOnRequest{}
					for ratelimitOnRequestCount, ratelimitOnRequestItem := range fromItem.Default.HTTP.RatelimitOnRequest {
						var ratelimitOnRequest1 tfTypes.RatelimitOnRequest
						ratelimitOnRequest1.Kind = types.StringValue(string(ratelimitOnRequestItem.Kind))
						ratelimitOnRequest1.Limits = []tfTypes.Limits{}
						for limitsCount, limitsItem := range ratelimitOnRequestItem.Limits {
							var limits1 tfTypes.Limits
							if limitsItem.RequestRate == nil {
								limits1.RequestRate = nil
							} else {
								limits1.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
								limits1.RequestRate.Interval = types.StringValue(limitsItem.RequestRate.Interval)
								limits1.RequestRate.Num = types.Int64Value(int64(limitsItem.RequestRate.Num))
							}
							limits1.Value = types.StringValue(limitsItem.Value)
							if limitsCount+1 > len(ratelimitOnRequest1.Limits) {
								ratelimitOnRequest1.Limits = append(ratelimitOnRequest1.Limits, limits1)
							} else {
								ratelimitOnRequest1.Limits[limitsCount].RequestRate = limits1.RequestRate
								ratelimitOnRequest1.Limits[limitsCount].Value = limits1.Value
							}
						}
						ratelimitOnRequest1.Name = types.StringValue(ratelimitOnRequestItem.Name)
						if ratelimitOnRequestCount+1 > len(from1.Default.HTTP.RatelimitOnRequest) {
							from1.Default.HTTP.RatelimitOnRequest = append(from1.Default.HTTP.RatelimitOnRequest, ratelimitOnRequest1)
						} else {
							from1.Default.HTTP.RatelimitOnRequest[ratelimitOnRequestCount].Kind = ratelimitOnRequest1.Kind
							from1.Default.HTTP.RatelimitOnRequest[ratelimitOnRequestCount].Limits = ratelimitOnRequest1.Limits
							from1.Default.HTTP.RatelimitOnRequest[ratelimitOnRequestCount].Name = ratelimitOnRequest1.Name
						}
					}
					if fromItem.Default.HTTP.RequestRate == nil {
						from1.Default.HTTP.RequestRate = nil
					} else {
						from1.Default.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
						from1.Default.HTTP.RequestRate.Interval = types.StringValue(fromItem.Default.HTTP.RequestRate.Interval)
						from1.Default.HTTP.RequestRate.Num = types.Int64Value(int64(fromItem.Default.HTTP.RequestRate.Num))
					}
					if fromItem.Default.Mode != nil {
						from1.Default.Mode = types.StringValue(string(*fromItem.Default.Mode))
					} else {
						from1.Default.Mode = types.StringNull()
					}
				}
				if fromItem.TargetRef.Kind != nil {
					from1.TargetRef.Kind = types.StringValue(string(*fromItem.TargetRef.Kind))
				} else {
					from1.TargetRef.Kind = types.StringNull()
				}
				if len(fromItem.TargetRef.Labels) > 0 {
					from1.TargetRef.Labels = make(map[string]types.String)
					for key1, value4 := range fromItem.TargetRef.Labels {
						from1.TargetRef.Labels[key1] = types.StringValue(value4)
					}
				}
				from1.TargetRef.Mesh = types.StringPointerValue(fromItem.TargetRef.Mesh)
				from1.TargetRef.Name = types.StringPointerValue(fromItem.TargetRef.Name)
				from1.TargetRef.Namespace = types.StringPointerValue(fromItem.TargetRef.Namespace)
				from1.TargetRef.ProxyTypes = make([]types.String, 0, len(fromItem.TargetRef.ProxyTypes))
				for _, v := range fromItem.TargetRef.ProxyTypes {
					from1.TargetRef.ProxyTypes = append(from1.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				from1.TargetRef.SectionName = types.StringPointerValue(fromItem.TargetRef.SectionName)
				if len(fromItem.TargetRef.Tags) > 0 {
					from1.TargetRef.Tags = make(map[string]types.String)
					for key2, value5 := range fromItem.TargetRef.Tags {
						from1.TargetRef.Tags[key2] = types.StringValue(value5)
					}
				}
				if fromCount+1 > len(items1.Spec.From) {
					items1.Spec.From = append(items1.Spec.From, from1)
				} else {
					items1.Spec.From[fromCount].Default = from1.Default
					items1.Spec.From[fromCount].TargetRef = from1.TargetRef
				}
			}
			if itemsItem.Spec.TargetRef == nil {
				items1.Spec.TargetRef = nil
			} else {
				items1.Spec.TargetRef = &tfTypes.MeshAccessLogItemTargetRef{}
				if itemsItem.Spec.TargetRef.Kind != nil {
					items1.Spec.TargetRef.Kind = types.StringValue(string(*itemsItem.Spec.TargetRef.Kind))
				} else {
					items1.Spec.TargetRef.Kind = types.StringNull()
				}
				if len(itemsItem.Spec.TargetRef.Labels) > 0 {
					items1.Spec.TargetRef.Labels = make(map[string]types.String)
					for key3, value6 := range itemsItem.Spec.TargetRef.Labels {
						items1.Spec.TargetRef.Labels[key3] = types.StringValue(value6)
					}
				}
				items1.Spec.TargetRef.Mesh = types.StringPointerValue(itemsItem.Spec.TargetRef.Mesh)
				items1.Spec.TargetRef.Name = types.StringPointerValue(itemsItem.Spec.TargetRef.Name)
				items1.Spec.TargetRef.Namespace = types.StringPointerValue(itemsItem.Spec.TargetRef.Namespace)
				items1.Spec.TargetRef.ProxyTypes = make([]types.String, 0, len(itemsItem.Spec.TargetRef.ProxyTypes))
				for _, v := range itemsItem.Spec.TargetRef.ProxyTypes {
					items1.Spec.TargetRef.ProxyTypes = append(items1.Spec.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				items1.Spec.TargetRef.SectionName = types.StringPointerValue(itemsItem.Spec.TargetRef.SectionName)
				if len(itemsItem.Spec.TargetRef.Tags) > 0 {
					items1.Spec.TargetRef.Tags = make(map[string]types.String)
					for key4, value7 := range itemsItem.Spec.TargetRef.Tags {
						items1.Spec.TargetRef.Tags[key4] = types.StringValue(value7)
					}
				}
			}
			items1.Spec.To = []tfTypes.MeshGlobalRateLimitItemFrom{}
			for toCount, toItem := range itemsItem.Spec.To {
				var to1 tfTypes.MeshGlobalRateLimitItemFrom
				if toItem.Default == nil {
					to1.Default = nil
				} else {
					to1.Default = &tfTypes.MeshGlobalRateLimitItemDefault{}
					to1.Default.Backend.RateLimitService.LimitOnServiceFail = types.BoolPointerValue(toItem.Default.Backend.RateLimitService.LimitOnServiceFail)
					to1.Default.Backend.RateLimitService.Timeout = types.StringPointerValue(toItem.Default.Backend.RateLimitService.Timeout)
					to1.Default.Backend.RateLimitService.URL = types.StringPointerValue(toItem.Default.Backend.RateLimitService.URL)
					to1.Default.HTTP.Disabled = types.BoolPointerValue(toItem.Default.HTTP.Disabled)
					if toItem.Default.HTTP.OnRateLimit == nil {
						to1.Default.HTTP.OnRateLimit = nil
					} else {
						to1.Default.HTTP.OnRateLimit = &tfTypes.OnRateLimit{}
						if toItem.Default.HTTP.OnRateLimit.Headers == nil {
							to1.Default.HTTP.OnRateLimit.Headers = nil
						} else {
							to1.Default.HTTP.OnRateLimit.Headers = &tfTypes.MeshGlobalRateLimitItemSpecHeaders{}
							to1.Default.HTTP.OnRateLimit.Headers.Add = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
							for addCount1, addItem1 := range toItem.Default.HTTP.OnRateLimit.Headers.Add {
								var add3 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
								add3.Name = types.StringValue(addItem1.Name)
								add3.Value = types.StringValue(addItem1.Value)
								if addCount1+1 > len(to1.Default.HTTP.OnRateLimit.Headers.Add) {
									to1.Default.HTTP.OnRateLimit.Headers.Add = append(to1.Default.HTTP.OnRateLimit.Headers.Add, add3)
								} else {
									to1.Default.HTTP.OnRateLimit.Headers.Add[addCount1].Name = add3.Name
									to1.Default.HTTP.OnRateLimit.Headers.Add[addCount1].Value = add3.Value
								}
							}
							to1.Default.HTTP.OnRateLimit.Headers.Set = []tfTypes.ConfigurationDataPlaneGroupEnvironmentField{}
							for setCount1, setItem1 := range toItem.Default.HTTP.OnRateLimit.Headers.Set {
								var set3 tfTypes.ConfigurationDataPlaneGroupEnvironmentField
								set3.Name = types.StringValue(setItem1.Name)
								set3.Value = types.StringValue(setItem1.Value)
								if setCount1+1 > len(to1.Default.HTTP.OnRateLimit.Headers.Set) {
									to1.Default.HTTP.OnRateLimit.Headers.Set = append(to1.Default.HTTP.OnRateLimit.Headers.Set, set3)
								} else {
									to1.Default.HTTP.OnRateLimit.Headers.Set[setCount1].Name = set3.Name
									to1.Default.HTTP.OnRateLimit.Headers.Set[setCount1].Value = set3.Value
								}
							}
						}
						if toItem.Default.HTTP.OnRateLimit.Status != nil {
							to1.Default.HTTP.OnRateLimit.Status = types.Int64Value(int64(*toItem.Default.HTTP.OnRateLimit.Status))
						} else {
							to1.Default.HTTP.OnRateLimit.Status = types.Int64Null()
						}
					}
					to1.Default.HTTP.RatelimitOnRequest = []tfTypes.RatelimitOnRequest{}
					for ratelimitOnRequestCount1, ratelimitOnRequestItem1 := range toItem.Default.HTTP.RatelimitOnRequest {
						var ratelimitOnRequest3 tfTypes.RatelimitOnRequest
						ratelimitOnRequest3.Kind = types.StringValue(string(ratelimitOnRequestItem1.Kind))
						ratelimitOnRequest3.Limits = []tfTypes.Limits{}
						for limitsCount1, limitsItem1 := range ratelimitOnRequestItem1.Limits {
							var limits3 tfTypes.Limits
							if limitsItem1.RequestRate == nil {
								limits3.RequestRate = nil
							} else {
								limits3.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
								limits3.RequestRate.Interval = types.StringValue(limitsItem1.RequestRate.Interval)
								limits3.RequestRate.Num = types.Int64Value(int64(limitsItem1.RequestRate.Num))
							}
							limits3.Value = types.StringValue(limitsItem1.Value)
							if limitsCount1+1 > len(ratelimitOnRequest3.Limits) {
								ratelimitOnRequest3.Limits = append(ratelimitOnRequest3.Limits, limits3)
							} else {
								ratelimitOnRequest3.Limits[limitsCount1].RequestRate = limits3.RequestRate
								ratelimitOnRequest3.Limits[limitsCount1].Value = limits3.Value
							}
						}
						ratelimitOnRequest3.Name = types.StringValue(ratelimitOnRequestItem1.Name)
						if ratelimitOnRequestCount1+1 > len(to1.Default.HTTP.RatelimitOnRequest) {
							to1.Default.HTTP.RatelimitOnRequest = append(to1.Default.HTTP.RatelimitOnRequest, ratelimitOnRequest3)
						} else {
							to1.Default.HTTP.RatelimitOnRequest[ratelimitOnRequestCount1].Kind = ratelimitOnRequest3.Kind
							to1.Default.HTTP.RatelimitOnRequest[ratelimitOnRequestCount1].Limits = ratelimitOnRequest3.Limits
							to1.Default.HTTP.RatelimitOnRequest[ratelimitOnRequestCount1].Name = ratelimitOnRequest3.Name
						}
					}
					if toItem.Default.HTTP.RequestRate == nil {
						to1.Default.HTTP.RequestRate = nil
					} else {
						to1.Default.HTTP.RequestRate = &tfTypes.MeshGlobalRateLimitItemSpecFromRequestRate{}
						to1.Default.HTTP.RequestRate.Interval = types.StringValue(toItem.Default.HTTP.RequestRate.Interval)
						to1.Default.HTTP.RequestRate.Num = types.Int64Value(int64(toItem.Default.HTTP.RequestRate.Num))
					}
					if toItem.Default.Mode != nil {
						to1.Default.Mode = types.StringValue(string(*toItem.Default.Mode))
					} else {
						to1.Default.Mode = types.StringNull()
					}
				}
				if toItem.TargetRef.Kind != nil {
					to1.TargetRef.Kind = types.StringValue(string(*toItem.TargetRef.Kind))
				} else {
					to1.TargetRef.Kind = types.StringNull()
				}
				if len(toItem.TargetRef.Labels) > 0 {
					to1.TargetRef.Labels = make(map[string]types.String)
					for key5, value11 := range toItem.TargetRef.Labels {
						to1.TargetRef.Labels[key5] = types.StringValue(value11)
					}
				}
				to1.TargetRef.Mesh = types.StringPointerValue(toItem.TargetRef.Mesh)
				to1.TargetRef.Name = types.StringPointerValue(toItem.TargetRef.Name)
				to1.TargetRef.Namespace = types.StringPointerValue(toItem.TargetRef.Namespace)
				to1.TargetRef.ProxyTypes = make([]types.String, 0, len(toItem.TargetRef.ProxyTypes))
				for _, v := range toItem.TargetRef.ProxyTypes {
					to1.TargetRef.ProxyTypes = append(to1.TargetRef.ProxyTypes, types.StringValue(string(v)))
				}
				to1.TargetRef.SectionName = types.StringPointerValue(toItem.TargetRef.SectionName)
				if len(toItem.TargetRef.Tags) > 0 {
					to1.TargetRef.Tags = make(map[string]types.String)
					for key6, value12 := range toItem.TargetRef.Tags {
						to1.TargetRef.Tags[key6] = types.StringValue(value12)
					}
				}
				if toCount+1 > len(items1.Spec.To) {
					items1.Spec.To = append(items1.Spec.To, to1)
				} else {
					items1.Spec.To[toCount].Default = to1.Default
					items1.Spec.To[toCount].TargetRef = to1.TargetRef
				}
			}
			items1.Type = types.StringValue(string(itemsItem.Type))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items1)
			} else {
				r.Items[itemsCount].CreationTime = items1.CreationTime
				r.Items[itemsCount].Labels = items1.Labels
				r.Items[itemsCount].Mesh = items1.Mesh
				r.Items[itemsCount].ModificationTime = items1.ModificationTime
				r.Items[itemsCount].Name = items1.Name
				r.Items[itemsCount].Spec = items1.Spec
				r.Items[itemsCount].Type = items1.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		if resp.Total != nil {
			r.Total = types.NumberValue(big.NewFloat(float64(*resp.Total)))
		} else {
			r.Total = types.NumberNull()
		}
	}
}
