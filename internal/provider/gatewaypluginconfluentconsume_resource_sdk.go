// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginConfluentConsumeResourceModel) RefreshFromSharedConfluentConsumePlugin(ctx context.Context, resp *shared.ConfluentConsumePlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config.AutoOffsetReset != nil {
			r.Config.AutoOffsetReset = types.StringValue(string(*resp.Config.AutoOffsetReset))
		} else {
			r.Config.AutoOffsetReset = types.StringNull()
		}
		if resp.Config.BootstrapServers != nil {
			r.Config.BootstrapServers = []tfTypes.BootstrapServers{}

			for _, bootstrapServersItem := range resp.Config.BootstrapServers {
				var bootstrapServers tfTypes.BootstrapServers

				bootstrapServers.Host = types.StringValue(bootstrapServersItem.Host)
				bootstrapServers.Port = types.Int64Value(bootstrapServersItem.Port)

				r.Config.BootstrapServers = append(r.Config.BootstrapServers, bootstrapServers)
			}
		}
		r.Config.ClusterAPIKey = types.StringValue(resp.Config.ClusterAPIKey)
		r.Config.ClusterAPISecret = types.StringValue(resp.Config.ClusterAPISecret)
		r.Config.ClusterName = types.StringPointerValue(resp.Config.ClusterName)
		if resp.Config.CommitStrategy != nil {
			r.Config.CommitStrategy = types.StringValue(string(*resp.Config.CommitStrategy))
		} else {
			r.Config.CommitStrategy = types.StringNull()
		}
		r.Config.ConfluentCloudAPIKey = types.StringPointerValue(resp.Config.ConfluentCloudAPIKey)
		r.Config.ConfluentCloudAPISecret = types.StringPointerValue(resp.Config.ConfluentCloudAPISecret)
		r.Config.Keepalive = types.Int64PointerValue(resp.Config.Keepalive)
		r.Config.KeepaliveEnabled = types.BoolPointerValue(resp.Config.KeepaliveEnabled)
		if resp.Config.MessageDeserializer != nil {
			r.Config.MessageDeserializer = types.StringValue(string(*resp.Config.MessageDeserializer))
		} else {
			r.Config.MessageDeserializer = types.StringNull()
		}
		if resp.Config.Mode != nil {
			r.Config.Mode = types.StringValue(string(*resp.Config.Mode))
		} else {
			r.Config.Mode = types.StringNull()
		}
		if resp.Config.SchemaRegistry == nil {
			r.Config.SchemaRegistry = nil
		} else {
			r.Config.SchemaRegistry = &tfTypes.ConfluentConsumePluginSchemaRegistry{}
			if resp.Config.SchemaRegistry.Confluent == nil {
				r.Config.SchemaRegistry.Confluent = nil
			} else {
				r.Config.SchemaRegistry.Confluent = &tfTypes.ConfluentConsumePluginConfluent{}
				if resp.Config.SchemaRegistry.Confluent.Authentication.Basic == nil {
					r.Config.SchemaRegistry.Confluent.Authentication.Basic = nil
				} else {
					r.Config.SchemaRegistry.Confluent.Authentication.Basic = &tfTypes.Basic{}
					r.Config.SchemaRegistry.Confluent.Authentication.Basic.Password = types.StringValue(resp.Config.SchemaRegistry.Confluent.Authentication.Basic.Password)
					r.Config.SchemaRegistry.Confluent.Authentication.Basic.Username = types.StringValue(resp.Config.SchemaRegistry.Confluent.Authentication.Basic.Username)
				}
				if resp.Config.SchemaRegistry.Confluent.Authentication.Mode != nil {
					r.Config.SchemaRegistry.Confluent.Authentication.Mode = types.StringValue(string(*resp.Config.SchemaRegistry.Confluent.Authentication.Mode))
				} else {
					r.Config.SchemaRegistry.Confluent.Authentication.Mode = types.StringNull()
				}
				r.Config.SchemaRegistry.Confluent.SslVerify = types.BoolPointerValue(resp.Config.SchemaRegistry.Confluent.SslVerify)
				r.Config.SchemaRegistry.Confluent.TTL = types.Float64PointerValue(resp.Config.SchemaRegistry.Confluent.TTL)
				r.Config.SchemaRegistry.Confluent.URL = types.StringPointerValue(resp.Config.SchemaRegistry.Confluent.URL)
			}
		}
		r.Config.Timeout = types.Int64PointerValue(resp.Config.Timeout)
		r.Config.Topics = []tfTypes.Topics{}

		for _, topicsItem := range resp.Config.Topics {
			var topics tfTypes.Topics

			topics.Name = types.StringValue(topicsItem.Name)
			if topicsItem.SchemaRegistry.Confluent == nil {
				topics.SchemaRegistry.Confluent = nil
			} else {
				topics.SchemaRegistry.Confluent = &tfTypes.ConfluentConsumePluginConfluent{}
				if topicsItem.SchemaRegistry.Confluent.Authentication.Basic == nil {
					topics.SchemaRegistry.Confluent.Authentication.Basic = nil
				} else {
					topics.SchemaRegistry.Confluent.Authentication.Basic = &tfTypes.Basic{}
					topics.SchemaRegistry.Confluent.Authentication.Basic.Password = types.StringValue(topicsItem.SchemaRegistry.Confluent.Authentication.Basic.Password)
					topics.SchemaRegistry.Confluent.Authentication.Basic.Username = types.StringValue(topicsItem.SchemaRegistry.Confluent.Authentication.Basic.Username)
				}
				if topicsItem.SchemaRegistry.Confluent.Authentication.Mode != nil {
					topics.SchemaRegistry.Confluent.Authentication.Mode = types.StringValue(string(*topicsItem.SchemaRegistry.Confluent.Authentication.Mode))
				} else {
					topics.SchemaRegistry.Confluent.Authentication.Mode = types.StringNull()
				}
				topics.SchemaRegistry.Confluent.SslVerify = types.BoolPointerValue(topicsItem.SchemaRegistry.Confluent.SslVerify)
				topics.SchemaRegistry.Confluent.TTL = types.Float64PointerValue(topicsItem.SchemaRegistry.Confluent.TTL)
				topics.SchemaRegistry.Confluent.URL = types.StringPointerValue(topicsItem.SchemaRegistry.Confluent.URL)
			}

			r.Config.Topics = append(r.Config.Topics, topics)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.Set{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.After.Access != nil {
					r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
					for _, v := range resp.Ordering.After.Access {
						r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
					}
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				if resp.Ordering.Before.Access != nil {
					r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
					for _, v := range resp.Ordering.Before.Access {
						r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
					}
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginConfluentConsumeResourceModel) ToOperationsCreateConfluentconsumePluginRequest(ctx context.Context) (*operations.CreateConfluentconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	confluentConsumePlugin, confluentConsumePluginDiags := r.ToSharedConfluentConsumePlugin(ctx)
	diags.Append(confluentConsumePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateConfluentconsumePluginRequest{
		ControlPlaneID:         controlPlaneID,
		ConfluentConsumePlugin: *confluentConsumePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentConsumeResourceModel) ToOperationsDeleteConfluentconsumePluginRequest(ctx context.Context) (*operations.DeleteConfluentconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteConfluentconsumePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentConsumeResourceModel) ToOperationsGetConfluentconsumePluginRequest(ctx context.Context) (*operations.GetConfluentconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetConfluentconsumePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentConsumeResourceModel) ToOperationsUpdateConfluentconsumePluginRequest(ctx context.Context) (*operations.UpdateConfluentconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	confluentConsumePlugin, confluentConsumePluginDiags := r.ToSharedConfluentConsumePlugin(ctx)
	diags.Append(confluentConsumePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateConfluentconsumePluginRequest{
		PluginID:               pluginID,
		ControlPlaneID:         controlPlaneID,
		ConfluentConsumePlugin: *confluentConsumePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginConfluentConsumeResourceModel) ToSharedConfluentConsumePlugin(ctx context.Context) (*shared.ConfluentConsumePlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.ConfluentConsumePluginOrdering
	if r.Ordering != nil {
		var after *shared.ConfluentConsumePluginAfter
		if r.Ordering.After != nil {
			var access []string
			if r.Ordering.After.Access != nil {
				access = make([]string, 0, len(r.Ordering.After.Access))
				for _, accessItem := range r.Ordering.After.Access {
					access = append(access, accessItem.ValueString())
				}
			}
			after = &shared.ConfluentConsumePluginAfter{
				Access: access,
			}
		}
		var before *shared.ConfluentConsumePluginBefore
		if r.Ordering.Before != nil {
			var access1 []string
			if r.Ordering.Before.Access != nil {
				access1 = make([]string, 0, len(r.Ordering.Before.Access))
				for _, accessItem1 := range r.Ordering.Before.Access {
					access1 = append(access1, accessItem1.ValueString())
				}
			}
			before = &shared.ConfluentConsumePluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.ConfluentConsumePluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.ConfluentConsumePluginPartials
	if r.Partials != nil {
		partials = make([]shared.ConfluentConsumePluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.ConfluentConsumePluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	autoOffsetReset := new(shared.AutoOffsetReset)
	if !r.Config.AutoOffsetReset.IsUnknown() && !r.Config.AutoOffsetReset.IsNull() {
		*autoOffsetReset = shared.AutoOffsetReset(r.Config.AutoOffsetReset.ValueString())
	} else {
		autoOffsetReset = nil
	}
	var bootstrapServers []shared.ConfluentConsumePluginBootstrapServers
	if r.Config.BootstrapServers != nil {
		bootstrapServers = make([]shared.ConfluentConsumePluginBootstrapServers, 0, len(r.Config.BootstrapServers))
		for _, bootstrapServersItem := range r.Config.BootstrapServers {
			var host string
			host = bootstrapServersItem.Host.ValueString()

			var port int64
			port = bootstrapServersItem.Port.ValueInt64()

			bootstrapServers = append(bootstrapServers, shared.ConfluentConsumePluginBootstrapServers{
				Host: host,
				Port: port,
			})
		}
	}
	var clusterAPIKey string
	clusterAPIKey = r.Config.ClusterAPIKey.ValueString()

	var clusterAPISecret string
	clusterAPISecret = r.Config.ClusterAPISecret.ValueString()

	clusterName := new(string)
	if !r.Config.ClusterName.IsUnknown() && !r.Config.ClusterName.IsNull() {
		*clusterName = r.Config.ClusterName.ValueString()
	} else {
		clusterName = nil
	}
	commitStrategy := new(shared.CommitStrategy)
	if !r.Config.CommitStrategy.IsUnknown() && !r.Config.CommitStrategy.IsNull() {
		*commitStrategy = shared.CommitStrategy(r.Config.CommitStrategy.ValueString())
	} else {
		commitStrategy = nil
	}
	confluentCloudAPIKey := new(string)
	if !r.Config.ConfluentCloudAPIKey.IsUnknown() && !r.Config.ConfluentCloudAPIKey.IsNull() {
		*confluentCloudAPIKey = r.Config.ConfluentCloudAPIKey.ValueString()
	} else {
		confluentCloudAPIKey = nil
	}
	confluentCloudAPISecret := new(string)
	if !r.Config.ConfluentCloudAPISecret.IsUnknown() && !r.Config.ConfluentCloudAPISecret.IsNull() {
		*confluentCloudAPISecret = r.Config.ConfluentCloudAPISecret.ValueString()
	} else {
		confluentCloudAPISecret = nil
	}
	keepalive := new(int64)
	if !r.Config.Keepalive.IsUnknown() && !r.Config.Keepalive.IsNull() {
		*keepalive = r.Config.Keepalive.ValueInt64()
	} else {
		keepalive = nil
	}
	keepaliveEnabled := new(bool)
	if !r.Config.KeepaliveEnabled.IsUnknown() && !r.Config.KeepaliveEnabled.IsNull() {
		*keepaliveEnabled = r.Config.KeepaliveEnabled.ValueBool()
	} else {
		keepaliveEnabled = nil
	}
	messageDeserializer := new(shared.MessageDeserializer)
	if !r.Config.MessageDeserializer.IsUnknown() && !r.Config.MessageDeserializer.IsNull() {
		*messageDeserializer = shared.MessageDeserializer(r.Config.MessageDeserializer.ValueString())
	} else {
		messageDeserializer = nil
	}
	mode := new(shared.Mode)
	if !r.Config.Mode.IsUnknown() && !r.Config.Mode.IsNull() {
		*mode = shared.Mode(r.Config.Mode.ValueString())
	} else {
		mode = nil
	}
	var schemaRegistry *shared.ConfluentConsumePluginSchemaRegistry
	if r.Config.SchemaRegistry != nil {
		var confluent *shared.ConfluentConsumePluginConfluent
		if r.Config.SchemaRegistry.Confluent != nil {
			var basic *shared.ConfluentConsumePluginBasic
			if r.Config.SchemaRegistry.Confluent.Authentication.Basic != nil {
				var password string
				password = r.Config.SchemaRegistry.Confluent.Authentication.Basic.Password.ValueString()

				var username string
				username = r.Config.SchemaRegistry.Confluent.Authentication.Basic.Username.ValueString()

				basic = &shared.ConfluentConsumePluginBasic{
					Password: password,
					Username: username,
				}
			}
			mode1 := new(shared.ConfluentConsumePluginMode)
			if !r.Config.SchemaRegistry.Confluent.Authentication.Mode.IsUnknown() && !r.Config.SchemaRegistry.Confluent.Authentication.Mode.IsNull() {
				*mode1 = shared.ConfluentConsumePluginMode(r.Config.SchemaRegistry.Confluent.Authentication.Mode.ValueString())
			} else {
				mode1 = nil
			}
			authentication := shared.ConfluentConsumePluginAuthentication{
				Basic: basic,
				Mode:  mode1,
			}
			sslVerify := new(bool)
			if !r.Config.SchemaRegistry.Confluent.SslVerify.IsUnknown() && !r.Config.SchemaRegistry.Confluent.SslVerify.IsNull() {
				*sslVerify = r.Config.SchemaRegistry.Confluent.SslVerify.ValueBool()
			} else {
				sslVerify = nil
			}
			ttl := new(float64)
			if !r.Config.SchemaRegistry.Confluent.TTL.IsUnknown() && !r.Config.SchemaRegistry.Confluent.TTL.IsNull() {
				*ttl = r.Config.SchemaRegistry.Confluent.TTL.ValueFloat64()
			} else {
				ttl = nil
			}
			url := new(string)
			if !r.Config.SchemaRegistry.Confluent.URL.IsUnknown() && !r.Config.SchemaRegistry.Confluent.URL.IsNull() {
				*url = r.Config.SchemaRegistry.Confluent.URL.ValueString()
			} else {
				url = nil
			}
			confluent = &shared.ConfluentConsumePluginConfluent{
				Authentication: authentication,
				SslVerify:      sslVerify,
				TTL:            ttl,
				URL:            url,
			}
		}
		schemaRegistry = &shared.ConfluentConsumePluginSchemaRegistry{
			Confluent: confluent,
		}
	}
	timeout := new(int64)
	if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
		*timeout = r.Config.Timeout.ValueInt64()
	} else {
		timeout = nil
	}
	topics := make([]shared.Topics, 0, len(r.Config.Topics))
	for _, topicsItem := range r.Config.Topics {
		var name1 string
		name1 = topicsItem.Name.ValueString()

		var confluent1 *shared.ConfluentConsumePluginConfigConfluent
		if topicsItem.SchemaRegistry.Confluent != nil {
			var basic1 *shared.ConfluentConsumePluginConfigBasic
			if topicsItem.SchemaRegistry.Confluent.Authentication.Basic != nil {
				var password1 string
				password1 = topicsItem.SchemaRegistry.Confluent.Authentication.Basic.Password.ValueString()

				var username1 string
				username1 = topicsItem.SchemaRegistry.Confluent.Authentication.Basic.Username.ValueString()

				basic1 = &shared.ConfluentConsumePluginConfigBasic{
					Password: password1,
					Username: username1,
				}
			}
			mode2 := new(shared.ConfluentConsumePluginConfigMode)
			if !topicsItem.SchemaRegistry.Confluent.Authentication.Mode.IsUnknown() && !topicsItem.SchemaRegistry.Confluent.Authentication.Mode.IsNull() {
				*mode2 = shared.ConfluentConsumePluginConfigMode(topicsItem.SchemaRegistry.Confluent.Authentication.Mode.ValueString())
			} else {
				mode2 = nil
			}
			authentication1 := shared.ConfluentConsumePluginConfigAuthentication{
				Basic: basic1,
				Mode:  mode2,
			}
			sslVerify1 := new(bool)
			if !topicsItem.SchemaRegistry.Confluent.SslVerify.IsUnknown() && !topicsItem.SchemaRegistry.Confluent.SslVerify.IsNull() {
				*sslVerify1 = topicsItem.SchemaRegistry.Confluent.SslVerify.ValueBool()
			} else {
				sslVerify1 = nil
			}
			ttl1 := new(float64)
			if !topicsItem.SchemaRegistry.Confluent.TTL.IsUnknown() && !topicsItem.SchemaRegistry.Confluent.TTL.IsNull() {
				*ttl1 = topicsItem.SchemaRegistry.Confluent.TTL.ValueFloat64()
			} else {
				ttl1 = nil
			}
			url1 := new(string)
			if !topicsItem.SchemaRegistry.Confluent.URL.IsUnknown() && !topicsItem.SchemaRegistry.Confluent.URL.IsNull() {
				*url1 = topicsItem.SchemaRegistry.Confluent.URL.ValueString()
			} else {
				url1 = nil
			}
			confluent1 = &shared.ConfluentConsumePluginConfigConfluent{
				Authentication: authentication1,
				SslVerify:      sslVerify1,
				TTL:            ttl1,
				URL:            url1,
			}
		}
		schemaRegistry1 := shared.ConfluentConsumePluginConfigSchemaRegistry{
			Confluent: confluent1,
		}
		topics = append(topics, shared.Topics{
			Name:           name1,
			SchemaRegistry: schemaRegistry1,
		})
	}
	config := shared.ConfluentConsumePluginConfig{
		AutoOffsetReset:         autoOffsetReset,
		BootstrapServers:        bootstrapServers,
		ClusterAPIKey:           clusterAPIKey,
		ClusterAPISecret:        clusterAPISecret,
		ClusterName:             clusterName,
		CommitStrategy:          commitStrategy,
		ConfluentCloudAPIKey:    confluentCloudAPIKey,
		ConfluentCloudAPISecret: confluentCloudAPISecret,
		Keepalive:               keepalive,
		KeepaliveEnabled:        keepaliveEnabled,
		MessageDeserializer:     messageDeserializer,
		Mode:                    mode,
		SchemaRegistry:          schemaRegistry,
		Timeout:                 timeout,
		Topics:                  topics,
	}
	var consumer *shared.ConfluentConsumePluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.ConfluentConsumePluginConsumer{
			ID: id2,
		}
	}
	protocols := make([]shared.ConfluentConsumePluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.ConfluentConsumePluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.ConfluentConsumePluginRoute
	if r.Route != nil {
		id3 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id3 = r.Route.ID.ValueString()
		} else {
			id3 = nil
		}
		route = &shared.ConfluentConsumePluginRoute{
			ID: id3,
		}
	}
	var service *shared.ConfluentConsumePluginService
	if r.Service != nil {
		id4 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id4 = r.Service.ID.ValueString()
		} else {
			id4 = nil
		}
		service = &shared.ConfluentConsumePluginService{
			ID: id4,
		}
	}
	out := shared.ConfluentConsumePlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
