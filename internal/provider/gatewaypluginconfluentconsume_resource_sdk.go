// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginConfluentConsumeResourceModel) ToSharedConfluentConsumePlugin() *shared.ConfluentConsumePlugin {
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.ConfluentConsumePluginOrdering
	if r.Ordering != nil {
		var after *shared.ConfluentConsumePluginAfter
		if r.Ordering.After != nil {
			var access []string = []string{}
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.ConfluentConsumePluginAfter{
				Access: access,
			}
		}
		var before *shared.ConfluentConsumePluginBefore
		if r.Ordering.Before != nil {
			var access1 []string = []string{}
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.ConfluentConsumePluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.ConfluentConsumePluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.ConfluentConsumePluginConfig
	if r.Config != nil {
		autoOffsetReset := new(shared.AutoOffsetReset)
		if !r.Config.AutoOffsetReset.IsUnknown() && !r.Config.AutoOffsetReset.IsNull() {
			*autoOffsetReset = shared.AutoOffsetReset(r.Config.AutoOffsetReset.ValueString())
		} else {
			autoOffsetReset = nil
		}
		var bootstrapServers []shared.ConfluentConsumePluginBootstrapServers = []shared.ConfluentConsumePluginBootstrapServers{}
		for _, bootstrapServersItem := range r.Config.BootstrapServers {
			var host string
			host = bootstrapServersItem.Host.ValueString()

			var port int64
			port = bootstrapServersItem.Port.ValueInt64()

			bootstrapServers = append(bootstrapServers, shared.ConfluentConsumePluginBootstrapServers{
				Host: host,
				Port: port,
			})
		}
		clusterAPIKey := new(string)
		if !r.Config.ClusterAPIKey.IsUnknown() && !r.Config.ClusterAPIKey.IsNull() {
			*clusterAPIKey = r.Config.ClusterAPIKey.ValueString()
		} else {
			clusterAPIKey = nil
		}
		clusterAPISecret := new(string)
		if !r.Config.ClusterAPISecret.IsUnknown() && !r.Config.ClusterAPISecret.IsNull() {
			*clusterAPISecret = r.Config.ClusterAPISecret.ValueString()
		} else {
			clusterAPISecret = nil
		}
		clusterName := new(string)
		if !r.Config.ClusterName.IsUnknown() && !r.Config.ClusterName.IsNull() {
			*clusterName = r.Config.ClusterName.ValueString()
		} else {
			clusterName = nil
		}
		commitStrategy := new(shared.CommitStrategy)
		if !r.Config.CommitStrategy.IsUnknown() && !r.Config.CommitStrategy.IsNull() {
			*commitStrategy = shared.CommitStrategy(r.Config.CommitStrategy.ValueString())
		} else {
			commitStrategy = nil
		}
		confluentCloudAPIKey := new(string)
		if !r.Config.ConfluentCloudAPIKey.IsUnknown() && !r.Config.ConfluentCloudAPIKey.IsNull() {
			*confluentCloudAPIKey = r.Config.ConfluentCloudAPIKey.ValueString()
		} else {
			confluentCloudAPIKey = nil
		}
		confluentCloudAPISecret := new(string)
		if !r.Config.ConfluentCloudAPISecret.IsUnknown() && !r.Config.ConfluentCloudAPISecret.IsNull() {
			*confluentCloudAPISecret = r.Config.ConfluentCloudAPISecret.ValueString()
		} else {
			confluentCloudAPISecret = nil
		}
		keepalive := new(int64)
		if !r.Config.Keepalive.IsUnknown() && !r.Config.Keepalive.IsNull() {
			*keepalive = r.Config.Keepalive.ValueInt64()
		} else {
			keepalive = nil
		}
		keepaliveEnabled := new(bool)
		if !r.Config.KeepaliveEnabled.IsUnknown() && !r.Config.KeepaliveEnabled.IsNull() {
			*keepaliveEnabled = r.Config.KeepaliveEnabled.ValueBool()
		} else {
			keepaliveEnabled = nil
		}
		messageDeserializer := new(shared.MessageDeserializer)
		if !r.Config.MessageDeserializer.IsUnknown() && !r.Config.MessageDeserializer.IsNull() {
			*messageDeserializer = shared.MessageDeserializer(r.Config.MessageDeserializer.ValueString())
		} else {
			messageDeserializer = nil
		}
		mode := new(shared.Mode)
		if !r.Config.Mode.IsUnknown() && !r.Config.Mode.IsNull() {
			*mode = shared.Mode(r.Config.Mode.ValueString())
		} else {
			mode = nil
		}
		timeout := new(int64)
		if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
			*timeout = r.Config.Timeout.ValueInt64()
		} else {
			timeout = nil
		}
		var topics []shared.Topics = []shared.Topics{}
		for _, topicsItem := range r.Config.Topics {
			var name string
			name = topicsItem.Name.ValueString()

			topics = append(topics, shared.Topics{
				Name: name,
			})
		}
		config = &shared.ConfluentConsumePluginConfig{
			AutoOffsetReset:         autoOffsetReset,
			BootstrapServers:        bootstrapServers,
			ClusterAPIKey:           clusterAPIKey,
			ClusterAPISecret:        clusterAPISecret,
			ClusterName:             clusterName,
			CommitStrategy:          commitStrategy,
			ConfluentCloudAPIKey:    confluentCloudAPIKey,
			ConfluentCloudAPISecret: confluentCloudAPISecret,
			Keepalive:               keepalive,
			KeepaliveEnabled:        keepaliveEnabled,
			MessageDeserializer:     messageDeserializer,
			Mode:                    mode,
			Timeout:                 timeout,
			Topics:                  topics,
		}
	}
	var consumer *shared.ConfluentConsumePluginConsumer
	if r.Consumer != nil {
		id1 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id1 = r.Consumer.ID.ValueString()
		} else {
			id1 = nil
		}
		consumer = &shared.ConfluentConsumePluginConsumer{
			ID: id1,
		}
	}
	var protocols []shared.ConfluentConsumePluginProtocols = []shared.ConfluentConsumePluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.ConfluentConsumePluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.ConfluentConsumePluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.ConfluentConsumePluginRoute{
			ID: id2,
		}
	}
	var service *shared.ConfluentConsumePluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.ConfluentConsumePluginService{
			ID: id3,
		}
	}
	out := shared.ConfluentConsumePlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}
	return &out
}

func (r *GatewayPluginConfluentConsumeResourceModel) RefreshFromSharedConfluentConsumePlugin(ctx context.Context, resp *shared.ConfluentConsumePlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.ConfluentConsumePluginConfig{}
			if resp.Config.AutoOffsetReset != nil {
				r.Config.AutoOffsetReset = types.StringValue(string(*resp.Config.AutoOffsetReset))
			} else {
				r.Config.AutoOffsetReset = types.StringNull()
			}
			r.Config.BootstrapServers = []tfTypes.BootstrapServers{}
			if len(r.Config.BootstrapServers) > len(resp.Config.BootstrapServers) {
				r.Config.BootstrapServers = r.Config.BootstrapServers[:len(resp.Config.BootstrapServers)]
			}
			for bootstrapServersCount, bootstrapServersItem := range resp.Config.BootstrapServers {
				var bootstrapServers tfTypes.BootstrapServers
				bootstrapServers.Host = types.StringValue(bootstrapServersItem.Host)
				bootstrapServers.Port = types.Int64Value(bootstrapServersItem.Port)
				if bootstrapServersCount+1 > len(r.Config.BootstrapServers) {
					r.Config.BootstrapServers = append(r.Config.BootstrapServers, bootstrapServers)
				} else {
					r.Config.BootstrapServers[bootstrapServersCount].Host = bootstrapServers.Host
					r.Config.BootstrapServers[bootstrapServersCount].Port = bootstrapServers.Port
				}
			}
			r.Config.ClusterAPIKey = types.StringPointerValue(resp.Config.ClusterAPIKey)
			r.Config.ClusterAPISecret = types.StringPointerValue(resp.Config.ClusterAPISecret)
			r.Config.ClusterName = types.StringPointerValue(resp.Config.ClusterName)
			if resp.Config.CommitStrategy != nil {
				r.Config.CommitStrategy = types.StringValue(string(*resp.Config.CommitStrategy))
			} else {
				r.Config.CommitStrategy = types.StringNull()
			}
			r.Config.ConfluentCloudAPIKey = types.StringPointerValue(resp.Config.ConfluentCloudAPIKey)
			r.Config.ConfluentCloudAPISecret = types.StringPointerValue(resp.Config.ConfluentCloudAPISecret)
			r.Config.Keepalive = types.Int64PointerValue(resp.Config.Keepalive)
			r.Config.KeepaliveEnabled = types.BoolPointerValue(resp.Config.KeepaliveEnabled)
			if resp.Config.MessageDeserializer != nil {
				r.Config.MessageDeserializer = types.StringValue(string(*resp.Config.MessageDeserializer))
			} else {
				r.Config.MessageDeserializer = types.StringNull()
			}
			if resp.Config.Mode != nil {
				r.Config.Mode = types.StringValue(string(*resp.Config.Mode))
			} else {
				r.Config.Mode = types.StringNull()
			}
			r.Config.Timeout = types.Int64PointerValue(resp.Config.Timeout)
			r.Config.Topics = []tfTypes.Topics{}
			if len(r.Config.Topics) > len(resp.Config.Topics) {
				r.Config.Topics = r.Config.Topics[:len(resp.Config.Topics)]
			}
			for topicsCount, topicsItem := range resp.Config.Topics {
				var topics tfTypes.Topics
				topics.Name = types.StringValue(topicsItem.Name)
				if topicsCount+1 > len(r.Config.Topics) {
					r.Config.Topics = append(r.Config.Topics, topics)
				} else {
					r.Config.Topics[topicsCount].Name = topics.Name
				}
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
