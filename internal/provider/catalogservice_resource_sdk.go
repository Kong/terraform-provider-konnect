// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *CatalogServiceResourceModel) RefreshFromSharedCatalogService(ctx context.Context, resp *shared.CatalogService) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		customFieldsResult, _ := json.Marshal(resp.CustomFields)
		r.CustomFields = jsontypes.NewNormalizedValue(string(customFieldsResult))
		r.Description = types.StringPointerValue(resp.Description)
		r.DisplayName = types.StringValue(resp.DisplayName)
		r.ID = types.StringValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringPointerValue(value)
			}
		}
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *CatalogServiceResourceModel) ToOperationsDeleteCatalogServiceRequest(ctx context.Context) (*operations.DeleteCatalogServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteCatalogServiceRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CatalogServiceResourceModel) ToOperationsFetchCatalogServiceRequest(ctx context.Context) (*operations.FetchCatalogServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.FetchCatalogServiceRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CatalogServiceResourceModel) ToOperationsUpdateCatalogServiceRequest(ctx context.Context) (*operations.UpdateCatalogServiceRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateCatalogService, updateCatalogServiceDiags := r.ToSharedUpdateCatalogService(ctx)
	diags.Append(updateCatalogServiceDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateCatalogServiceRequest{
		ID:                   id,
		UpdateCatalogService: *updateCatalogService,
	}

	return &out, diags
}

func (r *CatalogServiceResourceModel) ToSharedCreateCatalogService(ctx context.Context) (*shared.CreateCatalogService, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var displayName string
	displayName = r.DisplayName.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	var customFields interface{}
	if !r.CustomFields.IsUnknown() && !r.CustomFields.IsNull() {
		_ = json.Unmarshal([]byte(r.CustomFields.ValueString()), &customFields)
	}
	out := shared.CreateCatalogService{
		Name:         name,
		DisplayName:  displayName,
		Description:  description,
		Labels:       labels,
		CustomFields: customFields,
	}

	return &out, diags
}

func (r *CatalogServiceResourceModel) ToSharedUpdateCatalogService(ctx context.Context) (*shared.UpdateCatalogService, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	labels := make(map[string]*string)
	for labelsKey, labelsValue := range r.Labels {
		labelsInst := new(string)
		if !labelsValue.IsUnknown() && !labelsValue.IsNull() {
			*labelsInst = labelsValue.ValueString()
		} else {
			labelsInst = nil
		}
		labels[labelsKey] = labelsInst
	}
	var customFields interface{}
	if !r.CustomFields.IsUnknown() && !r.CustomFields.IsNull() {
		_ = json.Unmarshal([]byte(r.CustomFields.ValueString()), &customFields)
	}
	out := shared.UpdateCatalogService{
		Name:         name,
		DisplayName:  displayName,
		Description:  description,
		Labels:       labels,
		CustomFields: customFields,
	}

	return &out, diags
}
