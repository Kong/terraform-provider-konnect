// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *PortalCustomizationResourceModel) RefreshFromSharedPortalCustomization(ctx context.Context, resp *shared.PortalCustomization) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CSS = types.StringPointerValue(resp.CSS)
		r.Layout = types.StringPointerValue(resp.Layout)
		if resp.Menu == nil {
			r.Menu = nil
		} else {
			r.Menu = &tfTypes.Menu{}
			if resp.Menu.FooterBottom != nil {
				r.Menu.FooterBottom = []tfTypes.PortalMenuItem{}

				for _, footerBottomItem := range resp.Menu.FooterBottom {
					var footerBottom tfTypes.PortalMenuItem

					footerBottom.External = types.BoolValue(footerBottomItem.External)
					footerBottom.Path = types.StringValue(footerBottomItem.Path)
					footerBottom.Title = types.StringValue(footerBottomItem.Title)
					footerBottom.Visibility = types.StringValue(string(footerBottomItem.Visibility))

					r.Menu.FooterBottom = append(r.Menu.FooterBottom, footerBottom)
				}
			}
			if resp.Menu.FooterSections != nil {
				r.Menu.FooterSections = []tfTypes.PortalFooterMenuSection{}

				for _, footerSectionsItem := range resp.Menu.FooterSections {
					var footerSections tfTypes.PortalFooterMenuSection

					footerSections.Items = []tfTypes.PortalMenuItem{}

					for _, itemsItem := range footerSectionsItem.Items {
						var items tfTypes.PortalMenuItem

						items.External = types.BoolValue(itemsItem.External)
						items.Path = types.StringValue(itemsItem.Path)
						items.Title = types.StringValue(itemsItem.Title)
						items.Visibility = types.StringValue(string(itemsItem.Visibility))

						footerSections.Items = append(footerSections.Items, items)
					}
					footerSections.Title = types.StringValue(footerSectionsItem.Title)

					r.Menu.FooterSections = append(r.Menu.FooterSections, footerSections)
				}
			}
			if resp.Menu.Main != nil {
				r.Menu.Main = []tfTypes.PortalMenuItem{}

				for _, mainItem := range resp.Menu.Main {
					var main tfTypes.PortalMenuItem

					main.External = types.BoolValue(mainItem.External)
					main.Path = types.StringValue(mainItem.Path)
					main.Title = types.StringValue(mainItem.Title)
					main.Visibility = types.StringValue(string(mainItem.Visibility))

					r.Menu.Main = append(r.Menu.Main, main)
				}
			}
		}
		r.Robots = types.StringPointerValue(resp.Robots)
		if resp.SpecRenderer == nil {
			r.SpecRenderer = nil
		} else {
			r.SpecRenderer = &tfTypes.SpecRenderer{}
			r.SpecRenderer.HideDeprecated = types.BoolPointerValue(resp.SpecRenderer.HideDeprecated)
			r.SpecRenderer.HideInternal = types.BoolPointerValue(resp.SpecRenderer.HideInternal)
			r.SpecRenderer.InfiniteScroll = types.BoolPointerValue(resp.SpecRenderer.InfiniteScroll)
			r.SpecRenderer.ShowSchemas = types.BoolPointerValue(resp.SpecRenderer.ShowSchemas)
			r.SpecRenderer.TryItInsomnia = types.BoolPointerValue(resp.SpecRenderer.TryItInsomnia)
			r.SpecRenderer.TryItUI = types.BoolPointerValue(resp.SpecRenderer.TryItUI)
		}
		if resp.Theme == nil {
			r.Theme = nil
		} else {
			r.Theme = &tfTypes.Theme{}
			if resp.Theme.Colors == nil {
				r.Theme.Colors = nil
			} else {
				r.Theme.Colors = &tfTypes.Colors{}
				r.Theme.Colors.Primary = types.StringPointerValue(resp.Theme.Colors.Primary)
			}
			if resp.Theme.Mode != nil {
				r.Theme.Mode = types.StringValue(string(*resp.Theme.Mode))
			} else {
				r.Theme.Mode = types.StringNull()
			}
			r.Theme.Name = types.StringPointerValue(resp.Theme.Name)
		}
	}

	return diags
}

func (r *PortalCustomizationResourceModel) ToOperationsGetPortalCustomizationRequest(ctx context.Context) (*operations.GetPortalCustomizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.GetPortalCustomizationRequest{
		PortalID: portalID,
	}

	return &out, diags
}

func (r *PortalCustomizationResourceModel) ToOperationsReplacePortalCustomizationRequest(ctx context.Context) (*operations.ReplacePortalCustomizationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	portalCustomization, portalCustomizationDiags := r.ToSharedPortalCustomization(ctx)
	diags.Append(portalCustomizationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.ReplacePortalCustomizationRequest{
		PortalID:            portalID,
		PortalCustomization: portalCustomization,
	}

	return &out, diags
}

func (r *PortalCustomizationResourceModel) ToSharedPortalCustomization(ctx context.Context) (*shared.PortalCustomization, diag.Diagnostics) {
	var diags diag.Diagnostics

	var theme *shared.Theme
	if r.Theme != nil {
		name := new(string)
		if !r.Theme.Name.IsUnknown() && !r.Theme.Name.IsNull() {
			*name = r.Theme.Name.ValueString()
		} else {
			name = nil
		}
		mode := new(shared.PortalCustomizationMode)
		if !r.Theme.Mode.IsUnknown() && !r.Theme.Mode.IsNull() {
			*mode = shared.PortalCustomizationMode(r.Theme.Mode.ValueString())
		} else {
			mode = nil
		}
		var colors *shared.Colors
		if r.Theme.Colors != nil {
			primary := new(string)
			if !r.Theme.Colors.Primary.IsUnknown() && !r.Theme.Colors.Primary.IsNull() {
				*primary = r.Theme.Colors.Primary.ValueString()
			} else {
				primary = nil
			}
			colors = &shared.Colors{
				Primary: primary,
			}
		}
		theme = &shared.Theme{
			Name:   name,
			Mode:   mode,
			Colors: colors,
		}
	}
	layout := new(string)
	if !r.Layout.IsUnknown() && !r.Layout.IsNull() {
		*layout = r.Layout.ValueString()
	} else {
		layout = nil
	}
	css := new(string)
	if !r.CSS.IsUnknown() && !r.CSS.IsNull() {
		*css = r.CSS.ValueString()
	} else {
		css = nil
	}
	var menu *shared.Menu
	if r.Menu != nil {
		var main []shared.PortalMenuItem
		if r.Menu.Main != nil {
			main = make([]shared.PortalMenuItem, 0, len(r.Menu.Main))
			for _, mainItem := range r.Menu.Main {
				var path string
				path = mainItem.Path.ValueString()

				var title string
				title = mainItem.Title.ValueString()

				visibility := shared.Visibility(mainItem.Visibility.ValueString())
				var external bool
				external = mainItem.External.ValueBool()

				main = append(main, shared.PortalMenuItem{
					Path:       path,
					Title:      title,
					Visibility: visibility,
					External:   external,
				})
			}
		}
		var footerSections []shared.PortalFooterMenuSection
		if r.Menu.FooterSections != nil {
			footerSections = make([]shared.PortalFooterMenuSection, 0, len(r.Menu.FooterSections))
			for _, footerSectionsItem := range r.Menu.FooterSections {
				var title1 string
				title1 = footerSectionsItem.Title.ValueString()

				items := make([]shared.PortalMenuItem, 0, len(footerSectionsItem.Items))
				for _, itemsItem := range footerSectionsItem.Items {
					var path1 string
					path1 = itemsItem.Path.ValueString()

					var title2 string
					title2 = itemsItem.Title.ValueString()

					visibility1 := shared.Visibility(itemsItem.Visibility.ValueString())
					var external1 bool
					external1 = itemsItem.External.ValueBool()

					items = append(items, shared.PortalMenuItem{
						Path:       path1,
						Title:      title2,
						Visibility: visibility1,
						External:   external1,
					})
				}
				footerSections = append(footerSections, shared.PortalFooterMenuSection{
					Title: title1,
					Items: items,
				})
			}
		}
		var footerBottom []shared.PortalMenuItem
		if r.Menu.FooterBottom != nil {
			footerBottom = make([]shared.PortalMenuItem, 0, len(r.Menu.FooterBottom))
			for _, footerBottomItem := range r.Menu.FooterBottom {
				var path2 string
				path2 = footerBottomItem.Path.ValueString()

				var title3 string
				title3 = footerBottomItem.Title.ValueString()

				visibility2 := shared.Visibility(footerBottomItem.Visibility.ValueString())
				var external2 bool
				external2 = footerBottomItem.External.ValueBool()

				footerBottom = append(footerBottom, shared.PortalMenuItem{
					Path:       path2,
					Title:      title3,
					Visibility: visibility2,
					External:   external2,
				})
			}
		}
		menu = &shared.Menu{
			Main:           main,
			FooterSections: footerSections,
			FooterBottom:   footerBottom,
		}
	}
	var specRenderer *shared.SpecRenderer
	if r.SpecRenderer != nil {
		tryItUI := new(bool)
		if !r.SpecRenderer.TryItUI.IsUnknown() && !r.SpecRenderer.TryItUI.IsNull() {
			*tryItUI = r.SpecRenderer.TryItUI.ValueBool()
		} else {
			tryItUI = nil
		}
		tryItInsomnia := new(bool)
		if !r.SpecRenderer.TryItInsomnia.IsUnknown() && !r.SpecRenderer.TryItInsomnia.IsNull() {
			*tryItInsomnia = r.SpecRenderer.TryItInsomnia.ValueBool()
		} else {
			tryItInsomnia = nil
		}
		infiniteScroll := new(bool)
		if !r.SpecRenderer.InfiniteScroll.IsUnknown() && !r.SpecRenderer.InfiniteScroll.IsNull() {
			*infiniteScroll = r.SpecRenderer.InfiniteScroll.ValueBool()
		} else {
			infiniteScroll = nil
		}
		showSchemas := new(bool)
		if !r.SpecRenderer.ShowSchemas.IsUnknown() && !r.SpecRenderer.ShowSchemas.IsNull() {
			*showSchemas = r.SpecRenderer.ShowSchemas.ValueBool()
		} else {
			showSchemas = nil
		}
		hideInternal := new(bool)
		if !r.SpecRenderer.HideInternal.IsUnknown() && !r.SpecRenderer.HideInternal.IsNull() {
			*hideInternal = r.SpecRenderer.HideInternal.ValueBool()
		} else {
			hideInternal = nil
		}
		hideDeprecated := new(bool)
		if !r.SpecRenderer.HideDeprecated.IsUnknown() && !r.SpecRenderer.HideDeprecated.IsNull() {
			*hideDeprecated = r.SpecRenderer.HideDeprecated.ValueBool()
		} else {
			hideDeprecated = nil
		}
		specRenderer = &shared.SpecRenderer{
			TryItUI:        tryItUI,
			TryItInsomnia:  tryItInsomnia,
			InfiniteScroll: infiniteScroll,
			ShowSchemas:    showSchemas,
			HideInternal:   hideInternal,
			HideDeprecated: hideDeprecated,
		}
	}
	robots := new(string)
	if !r.Robots.IsUnknown() && !r.Robots.IsNull() {
		*robots = r.Robots.ValueString()
	} else {
		robots = nil
	}
	out := shared.PortalCustomization{
		Theme:        theme,
		Layout:       layout,
		CSS:          css,
		Menu:         menu,
		SpecRenderer: specRenderer,
		Robots:       robots,
	}

	return &out, diags
}
