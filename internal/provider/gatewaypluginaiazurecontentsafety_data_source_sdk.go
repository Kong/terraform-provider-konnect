// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginAiAzureContentSafetyDataSourceModel) RefreshFromSharedAiAzureContentSafetyPlugin(resp *shared.AiAzureContentSafetyPlugin) {
	if resp != nil {
		r.Config.AzureAPIVersion = types.StringPointerValue(resp.Config.AzureAPIVersion)
		r.Config.AzureClientID = types.StringPointerValue(resp.Config.AzureClientID)
		r.Config.AzureClientSecret = types.StringPointerValue(resp.Config.AzureClientSecret)
		r.Config.AzureTenantID = types.StringPointerValue(resp.Config.AzureTenantID)
		r.Config.AzureUseManagedIdentity = types.BoolPointerValue(resp.Config.AzureUseManagedIdentity)
		r.Config.BlocklistNames = make([]types.String, 0, len(resp.Config.BlocklistNames))
		for _, v := range resp.Config.BlocklistNames {
			r.Config.BlocklistNames = append(r.Config.BlocklistNames, types.StringValue(v))
		}
		r.Config.Categories = []tfTypes.Categories{}
		if len(r.Config.Categories) > len(resp.Config.Categories) {
			r.Config.Categories = r.Config.Categories[:len(resp.Config.Categories)]
		}
		for categoriesCount, categoriesItem := range resp.Config.Categories {
			var categories1 tfTypes.Categories
			categories1.Name = types.StringValue(categoriesItem.Name)
			categories1.RejectionLevel = types.Int64Value(categoriesItem.RejectionLevel)
			if categoriesCount+1 > len(r.Config.Categories) {
				r.Config.Categories = append(r.Config.Categories, categories1)
			} else {
				r.Config.Categories[categoriesCount].Name = categories1.Name
				r.Config.Categories[categoriesCount].RejectionLevel = categories1.RejectionLevel
			}
		}
		r.Config.ContentSafetyKey = types.StringPointerValue(resp.Config.ContentSafetyKey)
		r.Config.ContentSafetyURL = types.StringPointerValue(resp.Config.ContentSafetyURL)
		r.Config.HaltOnBlocklistHit = types.BoolPointerValue(resp.Config.HaltOnBlocklistHit)
		if resp.Config.OutputType != nil {
			r.Config.OutputType = types.StringValue(string(*resp.Config.OutputType))
		} else {
			r.Config.OutputType = types.StringNull()
		}
		r.Config.RevealFailureReason = types.BoolPointerValue(resp.Config.RevealFailureReason)
		if resp.Config.TextSource != nil {
			r.Config.TextSource = types.StringValue(string(*resp.Config.TextSource))
		} else {
			r.Config.TextSource = types.StringNull()
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
