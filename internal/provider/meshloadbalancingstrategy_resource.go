// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	custom_boolplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/boolplanmodifier"
	custom_listplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/listplanmodifier"
	speakeasy_listplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/listplanmodifier"
	speakeasy_stringplanmodifier "github.com/kong/terraform-provider-konnect/v2/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/validators"
	speakeasy_listvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/listvalidators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/stringvalidators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &MeshLoadBalancingStrategyResource{}
var _ resource.ResourceWithImportState = &MeshLoadBalancingStrategyResource{}

func NewMeshLoadBalancingStrategyResource() resource.Resource {
	return &MeshLoadBalancingStrategyResource{}
}

// MeshLoadBalancingStrategyResource defines the resource implementation.
type MeshLoadBalancingStrategyResource struct {
	client *sdk.Konnect
}

// MeshLoadBalancingStrategyResourceModel describes the resource data model.
type MeshLoadBalancingStrategyResourceModel struct {
	CpID             types.String                              `tfsdk:"cp_id"`
	CreationTime     types.String                              `tfsdk:"creation_time"`
	Labels           map[string]types.String                   `tfsdk:"labels"`
	Mesh             types.String                              `tfsdk:"mesh"`
	ModificationTime types.String                              `tfsdk:"modification_time"`
	Name             types.String                              `tfsdk:"name"`
	Spec             tfTypes.MeshLoadBalancingStrategyItemSpec `tfsdk:"spec"`
	Type             types.String                              `tfsdk:"type"`
	Warnings         []types.String                            `tfsdk:"warnings"`
}

func (r *MeshLoadBalancingStrategyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_load_balancing_strategy"
}

func (r *MeshLoadBalancingStrategyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshLoadBalancingStrategy Resource",
		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the Konnect resource`,
			},
			"creation_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was created`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"labels": schema.MapAttribute{
				Optional:    true,
				ElementType: types.StringType,
				Description: `The labels to help identity resources`,
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `name of the mesh`,
			},
			"modification_time": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Time at which the resource was updated`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `name of the MeshLoadBalancingStrategy`,
			},
			"spec": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"target_ref": schema.SingleNestedAttribute{
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								Optional:    true,
								Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"Mesh",
										"MeshSubset",
										"MeshGateway",
										"MeshService",
										"MeshExternalService",
										"MeshMultiZoneService",
										"MeshServiceSubset",
										"MeshHTTPRoute",
										"Dataplane",
									),
								},
							},
							"labels": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
									`Name and Namespace can be used.`,
							},
							"mesh": schema.StringAttribute{
								Optional:    true,
								Description: `Mesh is reserved for future use to identify cross mesh resources.`,
							},
							"name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
									`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
							},
							"namespace": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
									`will be targeted.`,
							},
							"proxy_types": schema.ListAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.List{
									custom_listplanmodifier.SupressZeroNullModifier(),
								},
								ElementType: types.StringType,
								MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
									`all data plane types are targeted by the policy.`,
								Validators: []validator.List{
									listvalidator.SizeAtLeast(1),
								},
							},
							"section_name": schema.StringAttribute{
								Optional: true,
								MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
									`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
							},
							"tags": schema.MapAttribute{
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
									`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
							},
						},
						MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
							`The resource could be either a real store object or virtual resource` + "\n" +
							`defined inplace.`,
					},
					"to": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							custom_listplanmodifier.SupressZeroNullModifier(),
						},
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"default": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"load_balancer": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"least_request": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"active_request_bias": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"integer": schema.Int64Attribute{
																	Optional: true,
																	Validators: []validator.Int64{
																		int64validator.ConflictsWith(path.Expressions{
																			path.MatchRelative().AtParent().AtName("str"),
																		}...),
																	},
																},
																"str": schema.StringAttribute{
																	Optional: true,
																	Validators: []validator.String{
																		stringvalidator.ConflictsWith(path.Expressions{
																			path.MatchRelative().AtParent().AtName("integer"),
																		}...),
																	},
																},
															},
															MarkdownDescription: `ActiveRequestBias refers to dynamic weights applied when hosts have varying load` + "\n" +
																`balancing weights. A higher value here aggressively reduces the weight of endpoints` + "\n" +
																`that are currently handling active requests. In essence, the higher the ActiveRequestBias` + "\n" +
																`value, the more forcefully it reduces the load balancing weight of endpoints that are` + "\n" +
																`actively serving requests.`,
														},
														"choice_count": schema.Int64Attribute{
															Optional: true,
															MarkdownDescription: `ChoiceCount is the number of random healthy hosts from which the host with` + "\n" +
																`the fewest active requests will be chosen. Defaults to 2 so that Envoy performs` + "\n" +
																`two-choice selection if the field is not set.`,
															Validators: []validator.Int64{
																int64validator.AtLeast(2),
															},
														},
													},
													MarkdownDescription: `LeastRequest selects N random available hosts as specified in 'choiceCount' (2 by default)` + "\n" +
														`and picks the host which has the fewest active requests`,
												},
												"maglev": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"hash_policies": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																custom_listplanmodifier.SupressZeroNullModifier(),
															},
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"connection": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"source_ip": schema.BoolAttribute{
																				Optional: true,
																				PlanModifiers: []planmodifier.Bool{
																					custom_boolplanmodifier.SupressZeroNullModifier(),
																				},
																				Description: `Hash on source IP address.`,
																			},
																		},
																	},
																	"cookie": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Optional:    true,
																				Description: `The name of the cookie that will be used to obtain the hash key. Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																			"path": schema.StringAttribute{
																				Optional:    true,
																				Description: `The name of the path for the cookie.`,
																			},
																			"ttl": schema.StringAttribute{
																				Optional:    true,
																				Description: `If specified, a cookie with the TTL will be generated if the cookie is not present.`,
																			},
																		},
																	},
																	"filter_state": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"key": schema.StringAttribute{
																				Optional: true,
																				MarkdownDescription: `The name of the Object in the per-request filterState, which is` + "\n" +
																					`an Envoy::Hashable object. If there is no data associated with the key,` + "\n" +
																					`or the stored object is not Envoy::Hashable, no hash will be produced.` + "\n" +
																					`Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																		},
																	},
																	"header": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Optional:    true,
																				Description: `The name of the request header that will be used to obtain the hash key. Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																		},
																	},
																	"query_parameter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Optional: true,
																				MarkdownDescription: `The name of the URL query parameter that will be used to obtain the hash key.` + "\n" +
																					`If the parameter is not present, no hash will be produced. Query parameter names` + "\n" +
																					`are case-sensitive.` + "\n" +
																					`Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																		},
																	},
																	"terminal": schema.BoolAttribute{
																		Optional: true,
																		PlanModifiers: []planmodifier.Bool{
																			custom_boolplanmodifier.SupressZeroNullModifier(),
																		},
																		MarkdownDescription: `Terminal is a flag that short-circuits the hash computing. This field provides` + "\n" +
																			`a ‘fallback’ style of configuration: “if a terminal policy doesn’t work, fallback` + "\n" +
																			`to rest of the policy list”, it saves time when the terminal policy works.` + "\n" +
																			`If true, and there is already a hash computed, ignore rest of the list of hash polices.`,
																	},
																	"type": schema.StringAttribute{
																		Optional:    true,
																		Description: `Not Null; must be one of ["Header", "Cookie", "Connection", "SourceIP", "QueryParameter", "FilterState"]`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.OneOf(
																				"Header",
																				"Cookie",
																				"Connection",
																				"SourceIP",
																				"QueryParameter",
																				"FilterState",
																			),
																		},
																	},
																},
															},
															MarkdownDescription: `HashPolicies specify a list of request/connection properties that are used to calculate a hash.` + "\n" +
																`These hash policies are executed in the specified order. If a hash policy has the “terminal” attribute` + "\n" +
																`set to true, and there is already a hash generated, the hash is returned immediately,` + "\n" +
																`ignoring the rest of the hash policy list.`,
														},
														"table_size": schema.Int64Attribute{
															Optional: true,
															MarkdownDescription: `The table size for Maglev hashing. Maglev aims for “minimal disruption”` + "\n" +
																`rather than an absolute guarantee. Minimal disruption means that when` + "\n" +
																`the set of upstream hosts change, a connection will likely be sent` + "\n" +
																`to the same upstream as it was before. Increasing the table size reduces` + "\n" +
																`the amount of disruption. The table size must be prime number limited to 5000011.` + "\n" +
																`If it is not specified, the default is 65537.`,
															Validators: []validator.Int64{
																int64validator.Between(1, 5000011),
															},
														},
													},
													MarkdownDescription: `Maglev implements consistent hashing to upstream hosts. Maglev can be used as` + "\n" +
														`a drop in replacement for the ring hash load balancer any place in which` + "\n" +
														`consistent hashing is desired.`,
												},
												"random": schema.SingleNestedAttribute{
													Optional: true,
													MarkdownDescription: `Random selects a random available host. The random load balancer generally` + "\n" +
														`performs better than round-robin if no health checking policy is configured.` + "\n" +
														`Random selection avoids bias towards the host in the set that comes after a failed host.`,
												},
												"ring_hash": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"hash_function": schema.StringAttribute{
															Optional: true,
															MarkdownDescription: `HashFunction is a function used to hash hosts onto the ketama ring.` + "\n" +
																`The value defaults to XX_HASH. Available values – XX_HASH, MURMUR_HASH_2.` + "\n" +
																`must be one of ["XXHash", "MurmurHash2"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"XXHash",
																	"MurmurHash2",
																),
															},
														},
														"hash_policies": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																custom_listplanmodifier.SupressZeroNullModifier(),
															},
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"connection": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"source_ip": schema.BoolAttribute{
																				Optional: true,
																				PlanModifiers: []planmodifier.Bool{
																					custom_boolplanmodifier.SupressZeroNullModifier(),
																				},
																				Description: `Hash on source IP address.`,
																			},
																		},
																	},
																	"cookie": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Optional:    true,
																				Description: `The name of the cookie that will be used to obtain the hash key. Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																			"path": schema.StringAttribute{
																				Optional:    true,
																				Description: `The name of the path for the cookie.`,
																			},
																			"ttl": schema.StringAttribute{
																				Optional:    true,
																				Description: `If specified, a cookie with the TTL will be generated if the cookie is not present.`,
																			},
																		},
																	},
																	"filter_state": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"key": schema.StringAttribute{
																				Optional: true,
																				MarkdownDescription: `The name of the Object in the per-request filterState, which is` + "\n" +
																					`an Envoy::Hashable object. If there is no data associated with the key,` + "\n" +
																					`or the stored object is not Envoy::Hashable, no hash will be produced.` + "\n" +
																					`Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																		},
																	},
																	"header": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Optional:    true,
																				Description: `The name of the request header that will be used to obtain the hash key. Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																		},
																	},
																	"query_parameter": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Optional: true,
																				MarkdownDescription: `The name of the URL query parameter that will be used to obtain the hash key.` + "\n" +
																					`If the parameter is not present, no hash will be produced. Query parameter names` + "\n" +
																					`are case-sensitive.` + "\n" +
																					`Not Null`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.UTF8LengthAtLeast(1),
																				},
																			},
																		},
																	},
																	"terminal": schema.BoolAttribute{
																		Optional: true,
																		PlanModifiers: []planmodifier.Bool{
																			custom_boolplanmodifier.SupressZeroNullModifier(),
																		},
																		MarkdownDescription: `Terminal is a flag that short-circuits the hash computing. This field provides` + "\n" +
																			`a ‘fallback’ style of configuration: “if a terminal policy doesn’t work, fallback` + "\n" +
																			`to rest of the policy list”, it saves time when the terminal policy works.` + "\n" +
																			`If true, and there is already a hash computed, ignore rest of the list of hash polices.`,
																	},
																	"type": schema.StringAttribute{
																		Optional:    true,
																		Description: `Not Null; must be one of ["Header", "Cookie", "Connection", "SourceIP", "QueryParameter", "FilterState"]`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.OneOf(
																				"Header",
																				"Cookie",
																				"Connection",
																				"SourceIP",
																				"QueryParameter",
																				"FilterState",
																			),
																		},
																	},
																},
															},
															MarkdownDescription: `HashPolicies specify a list of request/connection properties that are used to calculate a hash.` + "\n" +
																`These hash policies are executed in the specified order. If a hash policy has the “terminal” attribute` + "\n" +
																`set to true, and there is already a hash generated, the hash is returned immediately,` + "\n" +
																`ignoring the rest of the hash policy list.`,
														},
														"max_ring_size": schema.Int64Attribute{
															Optional: true,
															MarkdownDescription: `Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries,` + "\n" +
																`but can be lowered to further constrain resource use.`,
															Validators: []validator.Int64{
																int64validator.Between(1, 8000000),
															},
														},
														"min_ring_size": schema.Int64Attribute{
															Optional: true,
															MarkdownDescription: `Minimum hash ring size. The larger the ring is (that is,` + "\n" +
																`the more hashes there are for each provided host) the better the request distribution` + "\n" +
																`will reflect the desired weights. Defaults to 1024 entries, and limited to 8M entries.`,
															Validators: []validator.Int64{
																int64validator.Between(1, 8000000),
															},
														},
													},
													MarkdownDescription: `RingHash  implements consistent hashing to upstream hosts. Each host is mapped` + "\n" +
														`onto a circle (the “ring”) by hashing its address; each request is then routed` + "\n" +
														`to a host by hashing some property of the request, and finding the nearest` + "\n" +
														`corresponding host clockwise around the ring.`,
												},
												"round_robin": schema.SingleNestedAttribute{
													Optional: true,
													MarkdownDescription: `RoundRobin is a load balancing algorithm that distributes requests` + "\n" +
														`across available upstream hosts in round-robin order.`,
												},
												"type": schema.StringAttribute{
													Optional:    true,
													Description: `Not Null; must be one of ["RoundRobin", "LeastRequest", "RingHash", "Random", "Maglev"]`,
													Validators: []validator.String{
														speakeasy_stringvalidators.NotNull(),
														stringvalidator.OneOf(
															"RoundRobin",
															"LeastRequest",
															"RingHash",
															"Random",
															"Maglev",
														),
													},
												},
											},
											Description: `LoadBalancer allows to specify load balancing algorithm.`,
										},
										"locality_awareness": schema.SingleNestedAttribute{
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"cross_zone": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"failover": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																custom_listplanmodifier.SupressZeroNullModifier(),
															},
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"from": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"zones": schema.ListAttribute{
																				Computed: true,
																				Optional: true,
																				PlanModifiers: []planmodifier.List{
																					custom_listplanmodifier.SupressZeroNullModifier(),
																				},
																				ElementType: types.StringType,
																				Description: `Not Null`,
																				Validators: []validator.List{
																					speakeasy_listvalidators.NotNull(),
																				},
																			},
																		},
																		Description: `From defines the list of zones to which the rule applies`,
																	},
																	"to": schema.SingleNestedAttribute{
																		Optional: true,
																		Attributes: map[string]schema.Attribute{
																			"type": schema.StringAttribute{
																				Optional:    true,
																				Description: `Type defines how target zones will be picked from available zones. Not Null; must be one of ["None", "Only", "Any", "AnyExcept"]`,
																				Validators: []validator.String{
																					speakeasy_stringvalidators.NotNull(),
																					stringvalidator.OneOf(
																						"None",
																						"Only",
																						"Any",
																						"AnyExcept",
																					),
																				},
																			},
																			"zones": schema.ListAttribute{
																				Computed: true,
																				Optional: true,
																				PlanModifiers: []planmodifier.List{
																					custom_listplanmodifier.SupressZeroNullModifier(),
																				},
																				ElementType: types.StringType,
																			},
																		},
																		Description: `To defines to which zones the traffic should be load balanced. Not Null`,
																		Validators: []validator.Object{
																			speakeasy_objectvalidators.NotNull(),
																		},
																	},
																},
															},
															Description: `Failover defines list of load balancing rules in order of priority`,
														},
														"failover_threshold": schema.SingleNestedAttribute{
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"percentage": schema.SingleNestedAttribute{
																	Optional: true,
																	Attributes: map[string]schema.Attribute{
																		"integer": schema.Int64Attribute{
																			Optional: true,
																			Validators: []validator.Int64{
																				int64validator.ConflictsWith(path.Expressions{
																					path.MatchRelative().AtParent().AtName("str"),
																				}...),
																			},
																		},
																		"str": schema.StringAttribute{
																			Optional: true,
																			Validators: []validator.String{
																				stringvalidator.ConflictsWith(path.Expressions{
																					path.MatchRelative().AtParent().AtName("integer"),
																				}...),
																			},
																		},
																	},
																	Description: `Not Null`,
																	Validators: []validator.Object{
																		speakeasy_objectvalidators.NotNull(),
																	},
																},
															},
															MarkdownDescription: `FailoverThreshold defines the percentage of live destination dataplane proxies below which load balancing to the` + "\n" +
																`next priority starts.` + "\n" +
																`Example: If you configure failoverThreshold to 70, and you have deployed 10 destination dataplane proxies.` + "\n" +
																`Load balancing to next priority will start when number of live destination dataplane proxies drops below 7.` + "\n" +
																`Default 50`,
														},
													},
													MarkdownDescription: `CrossZone defines locality aware load balancing priorities when dataplane proxies inside local zone` + "\n" +
														`are unavailable`,
												},
												"disabled": schema.BoolAttribute{
													Optional: true,
													PlanModifiers: []planmodifier.Bool{
														custom_boolplanmodifier.SupressZeroNullModifier(),
													},
													MarkdownDescription: `Disabled allows to disable locality-aware load balancing.` + "\n" +
														`When disabled requests are distributed across all endpoints regardless of locality.`,
												},
												"local_zone": schema.SingleNestedAttribute{
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"affinity_tags": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															PlanModifiers: []planmodifier.List{
																custom_listplanmodifier.SupressZeroNullModifier(),
															},
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"key": schema.StringAttribute{
																		Optional:    true,
																		Description: `Key defines tag for which affinity is configured. Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																		},
																	},
																	"weight": schema.Int64Attribute{
																		Optional: true,
																		MarkdownDescription: `Weight of the tag used for load balancing. The bigger the weight the bigger the priority.` + "\n" +
																			`Percentage of local traffic load balanced to tag is computed by dividing weight by sum of weights from all tags.` + "\n" +
																			`For example with two affinity tags first with weight 80 and second with weight 20,` + "\n" +
																			`then 80% of traffic will be redirected to the first tag, and 20% of traffic will be redirected to second one.` + "\n" +
																			`Setting weights is not mandatory. When weights are not set control plane will compute default weight based on list order.` + "\n" +
																			`Default: If you do not specify weight we will adjust them so that 90% traffic goes to first tag, 9% to next, and 1% to third and so on.`,
																	},
																},
															},
															Description: `AffinityTags list of tags for local zone load balancing.`,
														},
													},
													Description: `LocalZone defines locality aware load balancing priorities between dataplane proxies inside a zone`,
												},
											},
											Description: `LocalityAwareness contains configuration for locality aware load balancing.`,
										},
									},
									MarkdownDescription: `Default is a configuration specific to the group of destinations referenced in` + "\n" +
										`'targetRef'`,
								},
								"target_ref": schema.SingleNestedAttribute{
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Optional:    true,
											Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"Mesh",
													"MeshSubset",
													"MeshGateway",
													"MeshService",
													"MeshExternalService",
													"MeshMultiZoneService",
													"MeshServiceSubset",
													"MeshHTTPRoute",
													"Dataplane",
												),
											},
										},
										"labels": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Optional:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed: true,
											Optional: true,
											PlanModifiers: []planmodifier.List{
												custom_listplanmodifier.SupressZeroNullModifier(),
											},
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
											Validators: []validator.List{
												listvalidator.SizeAtLeast(1),
											},
										},
										"section_name": schema.StringAttribute{
											Optional: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
										`destinations.` + "\n" +
										`Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
							},
						},
						Description: `To list makes a match between the consumed services and corresponding configurations`,
					},
				},
				Description: `Spec is the specification of the Kuma MeshLoadBalancingStrategy resource.`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `the type of the resource. must be "MeshLoadBalancingStrategy"`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"MeshLoadBalancingStrategy",
					),
				},
			},
			"warnings": schema.ListAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.List{
					custom_listplanmodifier.SupressZeroNullModifier(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				MarkdownDescription: `warnings is a list of warning messages to return to the requesting Kuma API clients.` + "\n" +
					`Warning messages describe a problem the client making the API request should correct or be aware of.`,
			},
		},
	}
}

func (r *MeshLoadBalancingStrategyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshLoadBalancingStrategyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *MeshLoadBalancingStrategyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshLoadBalancingStrategyItem := *data.ToSharedMeshLoadBalancingStrategyItemInput()
	request := operations.CreateMeshLoadBalancingStrategyRequest{
		CpID:                          cpID,
		Mesh:                          mesh,
		Name:                          name,
		MeshLoadBalancingStrategyItem: meshLoadBalancingStrategyItem,
	}
	res, err := r.client.MeshLoadBalancingStrategy.CreateMeshLoadBalancingStrategy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshLoadBalancingStrategyCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshLoadBalancingStrategyCreateOrUpdateSuccessResponse(res.MeshLoadBalancingStrategyCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshLoadBalancingStrategyRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshLoadBalancingStrategy.GetMeshLoadBalancingStrategy(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshLoadBalancingStrategyItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshLoadBalancingStrategyItem(res1.MeshLoadBalancingStrategyItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshLoadBalancingStrategyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *MeshLoadBalancingStrategyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.GetMeshLoadBalancingStrategyRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshLoadBalancingStrategy.GetMeshLoadBalancingStrategy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshLoadBalancingStrategyItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshLoadBalancingStrategyItem(res.MeshLoadBalancingStrategyItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshLoadBalancingStrategyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *MeshLoadBalancingStrategyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshLoadBalancingStrategyItem := *data.ToSharedMeshLoadBalancingStrategyItemInput()
	request := operations.UpdateMeshLoadBalancingStrategyRequest{
		CpID:                          cpID,
		Mesh:                          mesh,
		Name:                          name,
		MeshLoadBalancingStrategyItem: meshLoadBalancingStrategyItem,
	}
	res, err := r.client.MeshLoadBalancingStrategy.UpdateMeshLoadBalancingStrategy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshLoadBalancingStrategyCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshLoadBalancingStrategyCreateOrUpdateSuccessResponse(res.MeshLoadBalancingStrategyCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshLoadBalancingStrategyRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshLoadBalancingStrategy.GetMeshLoadBalancingStrategy(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshLoadBalancingStrategyItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshLoadBalancingStrategyItem(res1.MeshLoadBalancingStrategyItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshLoadBalancingStrategyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *MeshLoadBalancingStrategyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.DeleteMeshLoadBalancingStrategyRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshLoadBalancingStrategy.DeleteMeshLoadBalancingStrategy(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *MeshLoadBalancingStrategyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		CpID string `json:"cp_id"`
		Mesh string `json:"mesh"`
		Name string `json:"name"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The ID is not valid. It's expected to be a JSON object alike '{ "cp_id": "bf138ba2-c9b1-4229-b268-04d9d8a6410b",  "mesh": "",  "name": ""}': `+err.Error())
		return
	}

	if len(data.CpID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field cp_id is required but was not found in the json encoded ID. It's expected to be a value alike '"bf138ba2-c9b1-4229-b268-04d9d8a6410b"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("cp_id"), data.CpID)...)
	if len(data.Mesh) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field mesh is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("mesh"), data.Mesh)...)
	if len(data.Name) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field name is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), data.Name)...)

}
