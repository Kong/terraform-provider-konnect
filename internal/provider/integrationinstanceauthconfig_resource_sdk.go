// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *IntegrationInstanceAuthConfigResourceModel) RefreshFromSharedIntegrationInstanceAuthConfig(ctx context.Context, resp *shared.IntegrationInstanceAuthConfig) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.OauthAuthConfig != nil {
			r.OauthAuthConfig = &tfTypes.OauthAuthConfig{}
			r.OauthAuthConfig.AuthorizationEndpoint = types.StringValue(resp.OauthAuthConfig.AuthorizationEndpoint)
			r.AuthorizationEndpoint = r.OauthAuthConfig.AuthorizationEndpoint
			r.OauthAuthConfig.ClientID = types.StringValue(resp.OauthAuthConfig.ClientID)
			r.ClientID = r.OauthAuthConfig.ClientID
			r.OauthAuthConfig.TokenEndpoint = types.StringValue(resp.OauthAuthConfig.TokenEndpoint)
			r.TokenEndpoint = r.OauthAuthConfig.TokenEndpoint
		}
	}

	return diags
}

func (r *IntegrationInstanceAuthConfigResourceModel) ToOperationsDeleteIntegrationInstanceAuthConfigRequest(ctx context.Context) (*operations.DeleteIntegrationInstanceAuthConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	out := operations.DeleteIntegrationInstanceAuthConfigRequest{
		IntegrationInstanceID: integrationInstanceID,
	}

	return &out, diags
}

func (r *IntegrationInstanceAuthConfigResourceModel) ToOperationsGetIntegrationInstanceAuthConfigRequest(ctx context.Context) (*operations.GetIntegrationInstanceAuthConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	out := operations.GetIntegrationInstanceAuthConfigRequest{
		IntegrationInstanceID: integrationInstanceID,
	}

	return &out, diags
}

func (r *IntegrationInstanceAuthConfigResourceModel) ToOperationsUpsertIntegrationInstanceAuthConfigRequest(ctx context.Context) (*operations.UpsertIntegrationInstanceAuthConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var integrationInstanceID string
	integrationInstanceID = r.IntegrationInstanceID.ValueString()

	upsertIntegrationInstanceAuthConfig, upsertIntegrationInstanceAuthConfigDiags := r.ToSharedUpsertIntegrationInstanceAuthConfig(ctx)
	diags.Append(upsertIntegrationInstanceAuthConfigDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpsertIntegrationInstanceAuthConfigRequest{
		IntegrationInstanceID:               integrationInstanceID,
		UpsertIntegrationInstanceAuthConfig: *upsertIntegrationInstanceAuthConfig,
	}

	return &out, diags
}

func (r *IntegrationInstanceAuthConfigResourceModel) ToSharedUpsertIntegrationInstanceAuthConfig(ctx context.Context) (*shared.UpsertIntegrationInstanceAuthConfig, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.UpsertIntegrationInstanceAuthConfig
	var oauthConfig *shared.OauthConfig
	if r.OauthConfig != nil {
		var clientID string
		clientID = r.OauthConfig.ClientID.ValueString()

		var clientSecret string
		clientSecret = r.OauthConfig.ClientSecret.ValueString()

		var authorizationEndpoint string
		authorizationEndpoint = r.OauthConfig.AuthorizationEndpoint.ValueString()

		var tokenEndpoint string
		tokenEndpoint = r.OauthConfig.TokenEndpoint.ValueString()

		oauthConfig = &shared.OauthConfig{
			ClientID:              clientID,
			ClientSecret:          clientSecret,
			AuthorizationEndpoint: authorizationEndpoint,
			TokenEndpoint:         tokenEndpoint,
		}
	}
	if oauthConfig != nil {
		out = shared.UpsertIntegrationInstanceAuthConfig{
			OauthConfig: oauthConfig,
		}
	}

	return &out, diags
}
