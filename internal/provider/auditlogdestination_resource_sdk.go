// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"time"
)

func (r *AuditLogDestinationResourceModel) ToSharedCreateAuditLogDestination() *shared.CreateAuditLogDestination {
	var name string
	name = r.Name.ValueString()

	var endpoint string
	endpoint = r.Endpoint.ValueString()

	authorization := new(string)
	if !r.Authorization.IsUnknown() && !r.Authorization.IsNull() {
		*authorization = r.Authorization.ValueString()
	} else {
		authorization = nil
	}
	logFormat := shared.LogFormat(r.LogFormat.ValueString())
	skipSslVerification := new(bool)
	if !r.SkipSslVerification.IsUnknown() && !r.SkipSslVerification.IsNull() {
		*skipSslVerification = r.SkipSslVerification.ValueBool()
	} else {
		skipSslVerification = nil
	}
	out := shared.CreateAuditLogDestination{
		Name:                name,
		Endpoint:            endpoint,
		Authorization:       authorization,
		LogFormat:           logFormat,
		SkipSslVerification: skipSslVerification,
	}
	return &out
}

func (r *AuditLogDestinationResourceModel) RefreshFromSharedAuditLogDestination(resp *shared.AuditLogDestination) {
	if resp != nil {
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.Endpoint = types.StringPointerValue(resp.Endpoint)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.LogFormat != nil {
			r.LogFormat = types.StringValue(string(*resp.LogFormat))
		} else {
			r.LogFormat = types.StringNull()
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.SkipSslVerification = types.BoolPointerValue(resp.SkipSslVerification)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *AuditLogDestinationResourceModel) ToSharedUpdateAuditLogDestination() *shared.UpdateAuditLogDestination {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	endpoint := new(string)
	if !r.Endpoint.IsUnknown() && !r.Endpoint.IsNull() {
		*endpoint = r.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	authorization := new(string)
	if !r.Authorization.IsUnknown() && !r.Authorization.IsNull() {
		*authorization = r.Authorization.ValueString()
	} else {
		authorization = nil
	}
	logFormat := new(shared.UpdateAuditLogDestinationLogFormat)
	if !r.LogFormat.IsUnknown() && !r.LogFormat.IsNull() {
		*logFormat = shared.UpdateAuditLogDestinationLogFormat(r.LogFormat.ValueString())
	} else {
		logFormat = nil
	}
	skipSslVerification := new(bool)
	if !r.SkipSslVerification.IsUnknown() && !r.SkipSslVerification.IsNull() {
		*skipSslVerification = r.SkipSslVerification.ValueBool()
	} else {
		skipSslVerification = nil
	}
	out := shared.UpdateAuditLogDestination{
		Name:                name,
		Endpoint:            endpoint,
		Authorization:       authorization,
		LogFormat:           logFormat,
		SkipSslVerification: skipSslVerification,
	}
	return &out
}
