// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *AuditLogDestinationResourceModel) RefreshFromSharedAuditLogDestination(ctx context.Context, resp *shared.AuditLogDestination) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Endpoint = types.StringPointerValue(resp.Endpoint)
		r.ID = types.StringPointerValue(resp.ID)
		if resp.LogFormat != nil {
			r.LogFormat = types.StringValue(string(*resp.LogFormat))
		} else {
			r.LogFormat = types.StringNull()
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.SkipSslVerification = types.BoolPointerValue(resp.SkipSslVerification)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}

func (r *AuditLogDestinationResourceModel) ToOperationsDeleteAuditLogDestinationRequest(ctx context.Context) (*operations.DeleteAuditLogDestinationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var auditLogDestinationID string
	auditLogDestinationID = r.ID.ValueString()

	out := operations.DeleteAuditLogDestinationRequest{
		AuditLogDestinationID: auditLogDestinationID,
	}

	return &out, diags
}

func (r *AuditLogDestinationResourceModel) ToOperationsGetAuditLogDestinationRequest(ctx context.Context) (*operations.GetAuditLogDestinationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var auditLogDestinationID string
	auditLogDestinationID = r.ID.ValueString()

	out := operations.GetAuditLogDestinationRequest{
		AuditLogDestinationID: auditLogDestinationID,
	}

	return &out, diags
}

func (r *AuditLogDestinationResourceModel) ToOperationsUpdateAuditLogDestinationRequest(ctx context.Context) (*operations.UpdateAuditLogDestinationRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var auditLogDestinationID string
	auditLogDestinationID = r.ID.ValueString()

	updateAuditLogDestination, updateAuditLogDestinationDiags := r.ToSharedUpdateAuditLogDestination(ctx)
	diags.Append(updateAuditLogDestinationDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAuditLogDestinationRequest{
		AuditLogDestinationID:     auditLogDestinationID,
		UpdateAuditLogDestination: updateAuditLogDestination,
	}

	return &out, diags
}

func (r *AuditLogDestinationResourceModel) ToSharedCreateAuditLogDestination(ctx context.Context) (*shared.CreateAuditLogDestination, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var endpoint string
	endpoint = r.Endpoint.ValueString()

	authorization := new(string)
	if !r.Authorization.IsUnknown() && !r.Authorization.IsNull() {
		*authorization = r.Authorization.ValueString()
	} else {
		authorization = nil
	}
	logFormat := new(shared.LogFormat)
	if !r.LogFormat.IsUnknown() && !r.LogFormat.IsNull() {
		*logFormat = shared.LogFormat(r.LogFormat.ValueString())
	} else {
		logFormat = nil
	}
	skipSslVerification := new(bool)
	if !r.SkipSslVerification.IsUnknown() && !r.SkipSslVerification.IsNull() {
		*skipSslVerification = r.SkipSslVerification.ValueBool()
	} else {
		skipSslVerification = nil
	}
	out := shared.CreateAuditLogDestination{
		Name:                name,
		Endpoint:            endpoint,
		Authorization:       authorization,
		LogFormat:           logFormat,
		SkipSslVerification: skipSslVerification,
	}

	return &out, diags
}

func (r *AuditLogDestinationResourceModel) ToSharedUpdateAuditLogDestination(ctx context.Context) (*shared.UpdateAuditLogDestination, diag.Diagnostics) {
	var diags diag.Diagnostics

	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	endpoint := new(string)
	if !r.Endpoint.IsUnknown() && !r.Endpoint.IsNull() {
		*endpoint = r.Endpoint.ValueString()
	} else {
		endpoint = nil
	}
	authorization := new(string)
	if !r.Authorization.IsUnknown() && !r.Authorization.IsNull() {
		*authorization = r.Authorization.ValueString()
	} else {
		authorization = nil
	}
	logFormat := new(shared.LogFormat)
	if !r.LogFormat.IsUnknown() && !r.LogFormat.IsNull() {
		*logFormat = shared.LogFormat(r.LogFormat.ValueString())
	} else {
		logFormat = nil
	}
	skipSslVerification := new(bool)
	if !r.SkipSslVerification.IsUnknown() && !r.SkipSslVerification.IsNull() {
		*skipSslVerification = r.SkipSslVerification.ValueBool()
	} else {
		skipSslVerification = nil
	}
	out := shared.UpdateAuditLogDestination{
		Name:                name,
		Endpoint:            endpoint,
		Authorization:       authorization,
		LogFormat:           logFormat,
		SkipSslVerification: skipSslVerification,
	}

	return &out, diags
}
