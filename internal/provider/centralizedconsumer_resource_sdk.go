// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *CentralizedConsumerResourceModel) RefreshFromSharedCentralizedConsumer(ctx context.Context, resp *shared.CentralizedConsumer) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ConsumerGroups = make([]types.String, 0, len(resp.ConsumerGroups))
		for _, v := range resp.ConsumerGroups {
			r.ConsumerGroups = append(r.ConsumerGroups, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.CustomID = types.StringPointerValue(resp.CustomID)
		r.ID = types.StringValue(resp.ID)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
		r.Username = types.StringPointerValue(resp.Username)
	}

	return diags
}

func (r *CentralizedConsumerResourceModel) ToOperationsCreateConsumerInRealmRequest(ctx context.Context) (*operations.CreateConsumerInRealmRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var realmID string
	realmID = r.RealmID.ValueString()

	consumerCreateRequest, consumerCreateRequestDiags := r.ToSharedConsumerCreateRequest(ctx)
	diags.Append(consumerCreateRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateConsumerInRealmRequest{
		RealmID:               realmID,
		ConsumerCreateRequest: *consumerCreateRequest,
	}

	return &out, diags
}

func (r *CentralizedConsumerResourceModel) ToOperationsDeleteConsumerInRealmRequest(ctx context.Context) (*operations.DeleteConsumerInRealmRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var realmID string
	realmID = r.RealmID.ValueString()

	var consumerID string
	consumerID = r.ID.ValueString()

	out := operations.DeleteConsumerInRealmRequest{
		RealmID:    realmID,
		ConsumerID: consumerID,
	}

	return &out, diags
}

func (r *CentralizedConsumerResourceModel) ToOperationsGetConsumerFromRealmRequest(ctx context.Context) (*operations.GetConsumerFromRealmRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var realmID string
	realmID = r.RealmID.ValueString()

	var consumerID string
	consumerID = r.ID.ValueString()

	out := operations.GetConsumerFromRealmRequest{
		RealmID:    realmID,
		ConsumerID: consumerID,
	}

	return &out, diags
}

func (r *CentralizedConsumerResourceModel) ToOperationsUpdateConsumerInRealmRequest(ctx context.Context) (*operations.UpdateConsumerInRealmRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var realmID string
	realmID = r.RealmID.ValueString()

	var consumerID string
	consumerID = r.ID.ValueString()

	updateConsumerPayload, updateConsumerPayloadDiags := r.ToSharedUpdateConsumerPayload(ctx)
	diags.Append(updateConsumerPayloadDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateConsumerInRealmRequest{
		RealmID:               realmID,
		ConsumerID:            consumerID,
		UpdateConsumerPayload: *updateConsumerPayload,
	}

	return &out, diags
}

func (r *CentralizedConsumerResourceModel) ToSharedConsumerCreateRequest(ctx context.Context) (*shared.ConsumerCreateRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var username string
	username = r.Username.ValueString()

	customID := new(string)
	if !r.CustomID.IsUnknown() && !r.CustomID.IsNull() {
		*customID = r.CustomID.ValueString()
	} else {
		customID = nil
	}
	consumerGroups := make([]string, 0, len(r.ConsumerGroups))
	for _, consumerGroupsItem := range r.ConsumerGroups {
		consumerGroups = append(consumerGroups, consumerGroupsItem.ValueString())
	}
	typeVar := new(shared.ConsumerType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ConsumerType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.ConsumerCreateRequest{
		Username:       username,
		CustomID:       customID,
		ConsumerGroups: consumerGroups,
		Type:           typeVar,
		Tags:           tags,
	}

	return &out, diags
}

func (r *CentralizedConsumerResourceModel) ToSharedUpdateConsumerPayload(ctx context.Context) (*shared.UpdateConsumerPayload, diag.Diagnostics) {
	var diags diag.Diagnostics

	username := new(string)
	if !r.Username.IsUnknown() && !r.Username.IsNull() {
		*username = r.Username.ValueString()
	} else {
		username = nil
	}
	customID := new(string)
	if !r.CustomID.IsUnknown() && !r.CustomID.IsNull() {
		*customID = r.CustomID.ValueString()
	} else {
		customID = nil
	}
	var consumerGroups []string
	if r.ConsumerGroups != nil {
		consumerGroups = make([]string, 0, len(r.ConsumerGroups))
		for _, consumerGroupsItem := range r.ConsumerGroups {
			consumerGroups = append(consumerGroups, consumerGroupsItem.ValueString())
		}
	}
	typeVar := new(shared.ConsumerType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.ConsumerType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	out := shared.UpdateConsumerPayload{
		Username:       username,
		CustomID:       customID,
		ConsumerGroups: consumerGroups,
		Type:           typeVar,
		Tags:           tags,
	}

	return &out, diags
}
