// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *GatewayPluginSolaceConsumeResourceModel) RefreshFromSharedSolaceConsumePlugin(ctx context.Context, resp *shared.SolaceConsumePlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config.Flow.AckMode != nil {
			r.Config.Flow.AckMode = types.StringValue(string(*resp.Config.Flow.AckMode))
		} else {
			r.Config.Flow.AckMode = types.StringNull()
		}
		r.Config.Flow.Binds = []tfTypes.Binds{}

		for _, bindsItem := range resp.Config.Flow.Binds {
			var binds tfTypes.Binds

			binds.Name = types.StringValue(bindsItem.Name)
			if bindsItem.Type != nil {
				binds.Type = types.StringValue(string(*bindsItem.Type))
			} else {
				binds.Type = types.StringNull()
			}

			r.Config.Flow.Binds = append(r.Config.Flow.Binds, binds)
		}
		if resp.Config.Flow.Functions != nil {
			r.Config.Flow.Functions = make([]types.String, 0, len(resp.Config.Flow.Functions))
			for _, v := range resp.Config.Flow.Functions {
				r.Config.Flow.Functions = append(r.Config.Flow.Functions, types.StringValue(v))
			}
		}
		r.Config.Flow.MaxUnackedMessages = types.Int64PointerValue(resp.Config.Flow.MaxUnackedMessages)
		if len(resp.Config.Flow.Properties) > 0 {
			r.Config.Flow.Properties = make(map[string]jsontypes.Normalized, len(resp.Config.Flow.Properties))
			for key, value := range resp.Config.Flow.Properties {
				result, _ := json.Marshal(value)
				r.Config.Flow.Properties[key] = jsontypes.NewNormalizedValue(string(result))
			}
		}
		r.Config.Flow.Selector = types.StringPointerValue(resp.Config.Flow.Selector)
		r.Config.Flow.WaitTimeout = types.Int64PointerValue(resp.Config.Flow.WaitTimeout)
		r.Config.Flow.WindowSize = types.Int64PointerValue(resp.Config.Flow.WindowSize)
		if resp.Config.Mode != nil {
			r.Config.Mode = types.StringValue(string(*resp.Config.Mode))
		} else {
			r.Config.Mode = types.StringNull()
		}
		if resp.Config.Polling == nil {
			r.Config.Polling = nil
		} else {
			r.Config.Polling = &tfTypes.Polling{}
			r.Config.Polling.Timeout = types.Int64PointerValue(resp.Config.Polling.Timeout)
		}
		if resp.Config.Session.Authentication == nil {
			r.Config.Session.Authentication = nil
		} else {
			r.Config.Session.Authentication = &tfTypes.SolaceConsumePluginAuthentication{}
			r.Config.Session.Authentication.AccessToken = types.StringPointerValue(resp.Config.Session.Authentication.AccessToken)
			r.Config.Session.Authentication.AccessTokenHeader = types.StringPointerValue(resp.Config.Session.Authentication.AccessTokenHeader)
			r.Config.Session.Authentication.IDToken = types.StringPointerValue(resp.Config.Session.Authentication.IDToken)
			r.Config.Session.Authentication.IDTokenHeader = types.StringPointerValue(resp.Config.Session.Authentication.IDTokenHeader)
			r.Config.Session.Authentication.Password = types.StringPointerValue(resp.Config.Session.Authentication.Password)
			if resp.Config.Session.Authentication.Scheme != nil {
				r.Config.Session.Authentication.Scheme = types.StringValue(string(*resp.Config.Session.Authentication.Scheme))
			} else {
				r.Config.Session.Authentication.Scheme = types.StringNull()
			}
			r.Config.Session.Authentication.Username = types.StringPointerValue(resp.Config.Session.Authentication.Username)
		}
		r.Config.Session.CalculateMessageExpiry = types.BoolPointerValue(resp.Config.Session.CalculateMessageExpiry)
		r.Config.Session.ConnectTimeout = types.Int64PointerValue(resp.Config.Session.ConnectTimeout)
		r.Config.Session.GenerateRcvTimestamps = types.BoolPointerValue(resp.Config.Session.GenerateRcvTimestamps)
		r.Config.Session.GenerateSendTimestamps = types.BoolPointerValue(resp.Config.Session.GenerateSendTimestamps)
		r.Config.Session.GenerateSenderID = types.BoolPointerValue(resp.Config.Session.GenerateSenderID)
		r.Config.Session.GenerateSequenceNumber = types.BoolPointerValue(resp.Config.Session.GenerateSequenceNumber)
		r.Config.Session.Host = types.StringValue(resp.Config.Session.Host)
		if len(resp.Config.Session.Properties) > 0 {
			r.Config.Session.Properties = make(map[string]jsontypes.Normalized, len(resp.Config.Session.Properties))
			for key1, value1 := range resp.Config.Session.Properties {
				result1, _ := json.Marshal(value1)
				r.Config.Session.Properties[key1] = jsontypes.NewNormalizedValue(string(result1))
			}
		}
		r.Config.Session.SslValidateCertificate = types.BoolPointerValue(resp.Config.Session.SslValidateCertificate)
		r.Config.Session.VpnName = types.StringPointerValue(resp.Config.Session.VpnName)
		if resp.Config.Websocket == nil {
			r.Config.Websocket = nil
		} else {
			r.Config.Websocket = &tfTypes.Websocket{}
			r.Config.Websocket.MaxRecvLen = types.Int64PointerValue(resp.Config.Websocket.MaxRecvLen)
			r.Config.Websocket.MaxSendLen = types.Int64PointerValue(resp.Config.Websocket.MaxSendLen)
			r.Config.Websocket.Timeout = types.Int64PointerValue(resp.Config.Websocket.Timeout)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.AcePluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.AcePluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.AcePluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginSolaceConsumeResourceModel) ToOperationsCreateSolaceconsumePluginRequest(ctx context.Context) (*operations.CreateSolaceconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	solaceConsumePlugin, solaceConsumePluginDiags := r.ToSharedSolaceConsumePlugin(ctx)
	diags.Append(solaceConsumePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSolaceconsumePluginRequest{
		ControlPlaneID:      controlPlaneID,
		SolaceConsumePlugin: *solaceConsumePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceConsumeResourceModel) ToOperationsDeleteSolaceconsumePluginRequest(ctx context.Context) (*operations.DeleteSolaceconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteSolaceconsumePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceConsumeResourceModel) ToOperationsGetSolaceconsumePluginRequest(ctx context.Context) (*operations.GetSolaceconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetSolaceconsumePluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceConsumeResourceModel) ToOperationsUpdateSolaceconsumePluginRequest(ctx context.Context) (*operations.UpdateSolaceconsumePluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	solaceConsumePlugin, solaceConsumePluginDiags := r.ToSharedSolaceConsumePlugin(ctx)
	diags.Append(solaceConsumePluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSolaceconsumePluginRequest{
		PluginID:            pluginID,
		ControlPlaneID:      controlPlaneID,
		SolaceConsumePlugin: *solaceConsumePlugin,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceConsumeResourceModel) ToSharedSolaceConsumePlugin(ctx context.Context) (*shared.SolaceConsumePlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.SolaceConsumePluginOrdering
	if r.Ordering != nil {
		var after *shared.SolaceConsumePluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.SolaceConsumePluginAfter{
				Access: access,
			}
		}
		var before *shared.SolaceConsumePluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.SolaceConsumePluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.SolaceConsumePluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.SolaceConsumePluginPartials
	if r.Partials != nil {
		partials = make([]shared.SolaceConsumePluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.SolaceConsumePluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	ackMode := new(shared.AckMode)
	if !r.Config.Flow.AckMode.IsUnknown() && !r.Config.Flow.AckMode.IsNull() {
		*ackMode = shared.AckMode(r.Config.Flow.AckMode.ValueString())
	} else {
		ackMode = nil
	}
	binds := make([]shared.Binds, 0, len(r.Config.Flow.Binds))
	for _, bindsItem := range r.Config.Flow.Binds {
		var name1 string
		name1 = bindsItem.Name.ValueString()

		typeVar := new(shared.SolaceConsumePluginType)
		if !bindsItem.Type.IsUnknown() && !bindsItem.Type.IsNull() {
			*typeVar = shared.SolaceConsumePluginType(bindsItem.Type.ValueString())
		} else {
			typeVar = nil
		}
		binds = append(binds, shared.Binds{
			Name: name1,
			Type: typeVar,
		})
	}
	var functions []string
	if r.Config.Flow.Functions != nil {
		functions = make([]string, 0, len(r.Config.Flow.Functions))
		for _, functionsItem := range r.Config.Flow.Functions {
			functions = append(functions, functionsItem.ValueString())
		}
	}
	maxUnackedMessages := new(int64)
	if !r.Config.Flow.MaxUnackedMessages.IsUnknown() && !r.Config.Flow.MaxUnackedMessages.IsNull() {
		*maxUnackedMessages = r.Config.Flow.MaxUnackedMessages.ValueInt64()
	} else {
		maxUnackedMessages = nil
	}
	properties := make(map[string]interface{})
	for propertiesKey, propertiesValue := range r.Config.Flow.Properties {
		var propertiesInst interface{}
		_ = json.Unmarshal([]byte(propertiesValue.ValueString()), &propertiesInst)
		properties[propertiesKey] = propertiesInst
	}
	selector := new(string)
	if !r.Config.Flow.Selector.IsUnknown() && !r.Config.Flow.Selector.IsNull() {
		*selector = r.Config.Flow.Selector.ValueString()
	} else {
		selector = nil
	}
	waitTimeout := new(int64)
	if !r.Config.Flow.WaitTimeout.IsUnknown() && !r.Config.Flow.WaitTimeout.IsNull() {
		*waitTimeout = r.Config.Flow.WaitTimeout.ValueInt64()
	} else {
		waitTimeout = nil
	}
	windowSize := new(int64)
	if !r.Config.Flow.WindowSize.IsUnknown() && !r.Config.Flow.WindowSize.IsNull() {
		*windowSize = r.Config.Flow.WindowSize.ValueInt64()
	} else {
		windowSize = nil
	}
	flow := shared.Flow{
		AckMode:            ackMode,
		Binds:              binds,
		Functions:          functions,
		MaxUnackedMessages: maxUnackedMessages,
		Properties:         properties,
		Selector:           selector,
		WaitTimeout:        waitTimeout,
		WindowSize:         windowSize,
	}
	mode := new(shared.SolaceConsumePluginMode)
	if !r.Config.Mode.IsUnknown() && !r.Config.Mode.IsNull() {
		*mode = shared.SolaceConsumePluginMode(r.Config.Mode.ValueString())
	} else {
		mode = nil
	}
	var polling *shared.Polling
	if r.Config.Polling != nil {
		timeout := new(int64)
		if !r.Config.Polling.Timeout.IsUnknown() && !r.Config.Polling.Timeout.IsNull() {
			*timeout = r.Config.Polling.Timeout.ValueInt64()
		} else {
			timeout = nil
		}
		polling = &shared.Polling{
			Timeout: timeout,
		}
	}
	var authentication *shared.SolaceConsumePluginAuthentication
	if r.Config.Session.Authentication != nil {
		accessToken := new(string)
		if !r.Config.Session.Authentication.AccessToken.IsUnknown() && !r.Config.Session.Authentication.AccessToken.IsNull() {
			*accessToken = r.Config.Session.Authentication.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		accessTokenHeader := new(string)
		if !r.Config.Session.Authentication.AccessTokenHeader.IsUnknown() && !r.Config.Session.Authentication.AccessTokenHeader.IsNull() {
			*accessTokenHeader = r.Config.Session.Authentication.AccessTokenHeader.ValueString()
		} else {
			accessTokenHeader = nil
		}
		idToken := new(string)
		if !r.Config.Session.Authentication.IDToken.IsUnknown() && !r.Config.Session.Authentication.IDToken.IsNull() {
			*idToken = r.Config.Session.Authentication.IDToken.ValueString()
		} else {
			idToken = nil
		}
		idTokenHeader := new(string)
		if !r.Config.Session.Authentication.IDTokenHeader.IsUnknown() && !r.Config.Session.Authentication.IDTokenHeader.IsNull() {
			*idTokenHeader = r.Config.Session.Authentication.IDTokenHeader.ValueString()
		} else {
			idTokenHeader = nil
		}
		password := new(string)
		if !r.Config.Session.Authentication.Password.IsUnknown() && !r.Config.Session.Authentication.Password.IsNull() {
			*password = r.Config.Session.Authentication.Password.ValueString()
		} else {
			password = nil
		}
		scheme := new(shared.SolaceConsumePluginScheme)
		if !r.Config.Session.Authentication.Scheme.IsUnknown() && !r.Config.Session.Authentication.Scheme.IsNull() {
			*scheme = shared.SolaceConsumePluginScheme(r.Config.Session.Authentication.Scheme.ValueString())
		} else {
			scheme = nil
		}
		username := new(string)
		if !r.Config.Session.Authentication.Username.IsUnknown() && !r.Config.Session.Authentication.Username.IsNull() {
			*username = r.Config.Session.Authentication.Username.ValueString()
		} else {
			username = nil
		}
		authentication = &shared.SolaceConsumePluginAuthentication{
			AccessToken:       accessToken,
			AccessTokenHeader: accessTokenHeader,
			IDToken:           idToken,
			IDTokenHeader:     idTokenHeader,
			Password:          password,
			Scheme:            scheme,
			Username:          username,
		}
	}
	calculateMessageExpiry := new(bool)
	if !r.Config.Session.CalculateMessageExpiry.IsUnknown() && !r.Config.Session.CalculateMessageExpiry.IsNull() {
		*calculateMessageExpiry = r.Config.Session.CalculateMessageExpiry.ValueBool()
	} else {
		calculateMessageExpiry = nil
	}
	connectTimeout := new(int64)
	if !r.Config.Session.ConnectTimeout.IsUnknown() && !r.Config.Session.ConnectTimeout.IsNull() {
		*connectTimeout = r.Config.Session.ConnectTimeout.ValueInt64()
	} else {
		connectTimeout = nil
	}
	generateRcvTimestamps := new(bool)
	if !r.Config.Session.GenerateRcvTimestamps.IsUnknown() && !r.Config.Session.GenerateRcvTimestamps.IsNull() {
		*generateRcvTimestamps = r.Config.Session.GenerateRcvTimestamps.ValueBool()
	} else {
		generateRcvTimestamps = nil
	}
	generateSendTimestamps := new(bool)
	if !r.Config.Session.GenerateSendTimestamps.IsUnknown() && !r.Config.Session.GenerateSendTimestamps.IsNull() {
		*generateSendTimestamps = r.Config.Session.GenerateSendTimestamps.ValueBool()
	} else {
		generateSendTimestamps = nil
	}
	generateSenderID := new(bool)
	if !r.Config.Session.GenerateSenderID.IsUnknown() && !r.Config.Session.GenerateSenderID.IsNull() {
		*generateSenderID = r.Config.Session.GenerateSenderID.ValueBool()
	} else {
		generateSenderID = nil
	}
	generateSequenceNumber := new(bool)
	if !r.Config.Session.GenerateSequenceNumber.IsUnknown() && !r.Config.Session.GenerateSequenceNumber.IsNull() {
		*generateSequenceNumber = r.Config.Session.GenerateSequenceNumber.ValueBool()
	} else {
		generateSequenceNumber = nil
	}
	var host string
	host = r.Config.Session.Host.ValueString()

	properties1 := make(map[string]interface{})
	for propertiesKey1, propertiesValue1 := range r.Config.Session.Properties {
		var propertiesInst1 interface{}
		_ = json.Unmarshal([]byte(propertiesValue1.ValueString()), &propertiesInst1)
		properties1[propertiesKey1] = propertiesInst1
	}
	sslValidateCertificate := new(bool)
	if !r.Config.Session.SslValidateCertificate.IsUnknown() && !r.Config.Session.SslValidateCertificate.IsNull() {
		*sslValidateCertificate = r.Config.Session.SslValidateCertificate.ValueBool()
	} else {
		sslValidateCertificate = nil
	}
	vpnName := new(string)
	if !r.Config.Session.VpnName.IsUnknown() && !r.Config.Session.VpnName.IsNull() {
		*vpnName = r.Config.Session.VpnName.ValueString()
	} else {
		vpnName = nil
	}
	session := shared.Session{
		Authentication:         authentication,
		CalculateMessageExpiry: calculateMessageExpiry,
		ConnectTimeout:         connectTimeout,
		GenerateRcvTimestamps:  generateRcvTimestamps,
		GenerateSendTimestamps: generateSendTimestamps,
		GenerateSenderID:       generateSenderID,
		GenerateSequenceNumber: generateSequenceNumber,
		Host:                   host,
		Properties:             properties1,
		SslValidateCertificate: sslValidateCertificate,
		VpnName:                vpnName,
	}
	var websocket *shared.Websocket
	if r.Config.Websocket != nil {
		maxRecvLen := new(int64)
		if !r.Config.Websocket.MaxRecvLen.IsUnknown() && !r.Config.Websocket.MaxRecvLen.IsNull() {
			*maxRecvLen = r.Config.Websocket.MaxRecvLen.ValueInt64()
		} else {
			maxRecvLen = nil
		}
		maxSendLen := new(int64)
		if !r.Config.Websocket.MaxSendLen.IsUnknown() && !r.Config.Websocket.MaxSendLen.IsNull() {
			*maxSendLen = r.Config.Websocket.MaxSendLen.ValueInt64()
		} else {
			maxSendLen = nil
		}
		timeout1 := new(int64)
		if !r.Config.Websocket.Timeout.IsUnknown() && !r.Config.Websocket.Timeout.IsNull() {
			*timeout1 = r.Config.Websocket.Timeout.ValueInt64()
		} else {
			timeout1 = nil
		}
		websocket = &shared.Websocket{
			MaxRecvLen: maxRecvLen,
			MaxSendLen: maxSendLen,
			Timeout:    timeout1,
		}
	}
	config := shared.SolaceConsumePluginConfig{
		Flow:      flow,
		Mode:      mode,
		Polling:   polling,
		Session:   session,
		Websocket: websocket,
	}
	protocols := make([]shared.SolaceConsumePluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.SolaceConsumePluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.SolaceConsumePluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.SolaceConsumePluginRoute{
			ID: id2,
		}
	}
	var service *shared.SolaceConsumePluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.SolaceConsumePluginService{
			ID: id3,
		}
	}
	out := shared.SolaceConsumePlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
