// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *IdentityProviderResourceModel) ToSharedCreateIdentityProvider(ctx context.Context) (*shared.CreateIdentityProvider, diag.Diagnostics) {
	var diags diag.Diagnostics

	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	typeVar := new(shared.IdentityProviderType)
	if !r.Type.IsUnknown() && !r.Type.IsNull() {
		*typeVar = shared.IdentityProviderType(r.Type.ValueString())
	} else {
		typeVar = nil
	}
	var config *shared.CreateIdentityProviderConfig
	if r.Config != nil {
		var configureOIDCIdentityProviderConfig *shared.ConfigureOIDCIdentityProviderConfig
		if r.Config.ConfigureOIDCIdentityProviderConfig != nil {
			var issuerURL string
			issuerURL = r.Config.ConfigureOIDCIdentityProviderConfig.IssuerURL.ValueString()

			var clientID string
			clientID = r.Config.ConfigureOIDCIdentityProviderConfig.ClientID.ValueString()

			clientSecret := new(string)
			if !r.Config.ConfigureOIDCIdentityProviderConfig.ClientSecret.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClientSecret.IsNull() {
				*clientSecret = r.Config.ConfigureOIDCIdentityProviderConfig.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			scopes := make([]string, 0, len(r.Config.ConfigureOIDCIdentityProviderConfig.Scopes))
			for _, scopesItem := range r.Config.ConfigureOIDCIdentityProviderConfig.Scopes {
				scopes = append(scopes, scopesItem.ValueString())
			}
			var claimMappings *shared.OIDCIdentityProviderClaimMappings
			if r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings != nil {
				name := new(string)
				if !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Name.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Name.IsNull() {
					*name = r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Name.ValueString()
				} else {
					name = nil
				}
				email := new(string)
				if !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Email.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Email.IsNull() {
					*email = r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Email.ValueString()
				} else {
					email = nil
				}
				groups := new(string)
				if !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Groups.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Groups.IsNull() {
					*groups = r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Groups.ValueString()
				} else {
					groups = nil
				}
				claimMappings = &shared.OIDCIdentityProviderClaimMappings{
					Name:   name,
					Email:  email,
					Groups: groups,
				}
			}
			configureOIDCIdentityProviderConfig = &shared.ConfigureOIDCIdentityProviderConfig{
				IssuerURL:     issuerURL,
				ClientID:      clientID,
				ClientSecret:  clientSecret,
				Scopes:        scopes,
				ClaimMappings: claimMappings,
			}
		}
		if configureOIDCIdentityProviderConfig != nil {
			config = &shared.CreateIdentityProviderConfig{
				ConfigureOIDCIdentityProviderConfig: configureOIDCIdentityProviderConfig,
			}
		}
		var samlIdentityProviderConfigInput *shared.SAMLIdentityProviderConfigInput
		if r.Config.SAMLIdentityProviderConfig != nil {
			idpMetadataURL := new(string)
			if !r.Config.SAMLIdentityProviderConfig.IdpMetadataURL.IsUnknown() && !r.Config.SAMLIdentityProviderConfig.IdpMetadataURL.IsNull() {
				*idpMetadataURL = r.Config.SAMLIdentityProviderConfig.IdpMetadataURL.ValueString()
			} else {
				idpMetadataURL = nil
			}
			idpMetadataXML := new(string)
			if !r.Config.SAMLIdentityProviderConfig.IdpMetadataXML.IsUnknown() && !r.Config.SAMLIdentityProviderConfig.IdpMetadataXML.IsNull() {
				*idpMetadataXML = r.Config.SAMLIdentityProviderConfig.IdpMetadataXML.ValueString()
			} else {
				idpMetadataXML = nil
			}
			samlIdentityProviderConfigInput = &shared.SAMLIdentityProviderConfigInput{
				IdpMetadataURL: idpMetadataURL,
				IdpMetadataXML: idpMetadataXML,
			}
		}
		if samlIdentityProviderConfigInput != nil {
			config = &shared.CreateIdentityProviderConfig{
				SAMLIdentityProviderConfigInput: samlIdentityProviderConfigInput,
			}
		}
		var oidcIdentityProviderConfig *shared.OIDCIdentityProviderConfig
		if r.Config.OIDCIdentityProviderConfig != nil {
			var issuerUrl1 string
			issuerUrl1 = r.Config.OIDCIdentityProviderConfig.IssuerURL.ValueString()

			var clientId1 string
			clientId1 = r.Config.OIDCIdentityProviderConfig.ClientID.ValueString()

			scopes1 := make([]string, 0, len(r.Config.OIDCIdentityProviderConfig.Scopes))
			for _, scopesItem1 := range r.Config.OIDCIdentityProviderConfig.Scopes {
				scopes1 = append(scopes1, scopesItem1.ValueString())
			}
			var claimMappings1 *shared.OIDCIdentityProviderClaimMappings
			if r.Config.OIDCIdentityProviderConfig.ClaimMappings != nil {
				name1 := new(string)
				if !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name.IsNull() {
					*name1 = r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name.ValueString()
				} else {
					name1 = nil
				}
				email1 := new(string)
				if !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email.IsNull() {
					*email1 = r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email.ValueString()
				} else {
					email1 = nil
				}
				groups1 := new(string)
				if !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups.IsNull() {
					*groups1 = r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups.ValueString()
				} else {
					groups1 = nil
				}
				claimMappings1 = &shared.OIDCIdentityProviderClaimMappings{
					Name:   name1,
					Email:  email1,
					Groups: groups1,
				}
			}
			clientSecret1 := new(string)
			if !r.Config.OIDCIdentityProviderConfig.ClientSecret.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClientSecret.IsNull() {
				*clientSecret1 = r.Config.OIDCIdentityProviderConfig.ClientSecret.ValueString()
			} else {
				clientSecret1 = nil
			}
			oidcIdentityProviderConfig = &shared.OIDCIdentityProviderConfig{
				IssuerURL:     issuerUrl1,
				ClientID:      clientId1,
				Scopes:        scopes1,
				ClaimMappings: claimMappings1,
				ClientSecret:  clientSecret1,
			}
		}
		if oidcIdentityProviderConfig != nil {
			config = &shared.CreateIdentityProviderConfig{
				OIDCIdentityProviderConfig: oidcIdentityProviderConfig,
			}
		}
	}
	loginPath := new(string)
	if !r.LoginPath.IsUnknown() && !r.LoginPath.IsNull() {
		*loginPath = r.LoginPath.ValueString()
	} else {
		loginPath = nil
	}
	out := shared.CreateIdentityProvider{
		Enabled:   enabled,
		Type:      typeVar,
		Config:    config,
		LoginPath: loginPath,
	}

	return &out, diags
}

func (r *IdentityProviderResourceModel) ToSharedUpdateIdentityProvider(ctx context.Context) (*shared.UpdateIdentityProvider, diag.Diagnostics) {
	var diags diag.Diagnostics

	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	var config *shared.UpdateIdentityProviderConfig
	if r.Config != nil {
		var configureOIDCIdentityProviderConfig *shared.ConfigureOIDCIdentityProviderConfig
		if r.Config.ConfigureOIDCIdentityProviderConfig != nil {
			var issuerURL string
			issuerURL = r.Config.ConfigureOIDCIdentityProviderConfig.IssuerURL.ValueString()

			var clientID string
			clientID = r.Config.ConfigureOIDCIdentityProviderConfig.ClientID.ValueString()

			clientSecret := new(string)
			if !r.Config.ConfigureOIDCIdentityProviderConfig.ClientSecret.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClientSecret.IsNull() {
				*clientSecret = r.Config.ConfigureOIDCIdentityProviderConfig.ClientSecret.ValueString()
			} else {
				clientSecret = nil
			}
			scopes := make([]string, 0, len(r.Config.ConfigureOIDCIdentityProviderConfig.Scopes))
			for _, scopesItem := range r.Config.ConfigureOIDCIdentityProviderConfig.Scopes {
				scopes = append(scopes, scopesItem.ValueString())
			}
			var claimMappings *shared.OIDCIdentityProviderClaimMappings
			if r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings != nil {
				name := new(string)
				if !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Name.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Name.IsNull() {
					*name = r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Name.ValueString()
				} else {
					name = nil
				}
				email := new(string)
				if !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Email.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Email.IsNull() {
					*email = r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Email.ValueString()
				} else {
					email = nil
				}
				groups := new(string)
				if !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Groups.IsUnknown() && !r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Groups.IsNull() {
					*groups = r.Config.ConfigureOIDCIdentityProviderConfig.ClaimMappings.Groups.ValueString()
				} else {
					groups = nil
				}
				claimMappings = &shared.OIDCIdentityProviderClaimMappings{
					Name:   name,
					Email:  email,
					Groups: groups,
				}
			}
			configureOIDCIdentityProviderConfig = &shared.ConfigureOIDCIdentityProviderConfig{
				IssuerURL:     issuerURL,
				ClientID:      clientID,
				ClientSecret:  clientSecret,
				Scopes:        scopes,
				ClaimMappings: claimMappings,
			}
		}
		if configureOIDCIdentityProviderConfig != nil {
			config = &shared.UpdateIdentityProviderConfig{
				ConfigureOIDCIdentityProviderConfig: configureOIDCIdentityProviderConfig,
			}
		}
		var samlIdentityProviderConfigInput *shared.SAMLIdentityProviderConfigInput
		if r.Config.SAMLIdentityProviderConfig != nil {
			idpMetadataURL := new(string)
			if !r.Config.SAMLIdentityProviderConfig.IdpMetadataURL.IsUnknown() && !r.Config.SAMLIdentityProviderConfig.IdpMetadataURL.IsNull() {
				*idpMetadataURL = r.Config.SAMLIdentityProviderConfig.IdpMetadataURL.ValueString()
			} else {
				idpMetadataURL = nil
			}
			idpMetadataXML := new(string)
			if !r.Config.SAMLIdentityProviderConfig.IdpMetadataXML.IsUnknown() && !r.Config.SAMLIdentityProviderConfig.IdpMetadataXML.IsNull() {
				*idpMetadataXML = r.Config.SAMLIdentityProviderConfig.IdpMetadataXML.ValueString()
			} else {
				idpMetadataXML = nil
			}
			samlIdentityProviderConfigInput = &shared.SAMLIdentityProviderConfigInput{
				IdpMetadataURL: idpMetadataURL,
				IdpMetadataXML: idpMetadataXML,
			}
		}
		if samlIdentityProviderConfigInput != nil {
			config = &shared.UpdateIdentityProviderConfig{
				SAMLIdentityProviderConfigInput: samlIdentityProviderConfigInput,
			}
		}
		var oidcIdentityProviderConfig *shared.OIDCIdentityProviderConfig
		if r.Config.OIDCIdentityProviderConfig != nil {
			var issuerUrl1 string
			issuerUrl1 = r.Config.OIDCIdentityProviderConfig.IssuerURL.ValueString()

			var clientId1 string
			clientId1 = r.Config.OIDCIdentityProviderConfig.ClientID.ValueString()

			scopes1 := make([]string, 0, len(r.Config.OIDCIdentityProviderConfig.Scopes))
			for _, scopesItem1 := range r.Config.OIDCIdentityProviderConfig.Scopes {
				scopes1 = append(scopes1, scopesItem1.ValueString())
			}
			var claimMappings1 *shared.OIDCIdentityProviderClaimMappings
			if r.Config.OIDCIdentityProviderConfig.ClaimMappings != nil {
				name1 := new(string)
				if !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name.IsNull() {
					*name1 = r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name.ValueString()
				} else {
					name1 = nil
				}
				email1 := new(string)
				if !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email.IsNull() {
					*email1 = r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email.ValueString()
				} else {
					email1 = nil
				}
				groups1 := new(string)
				if !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups.IsNull() {
					*groups1 = r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups.ValueString()
				} else {
					groups1 = nil
				}
				claimMappings1 = &shared.OIDCIdentityProviderClaimMappings{
					Name:   name1,
					Email:  email1,
					Groups: groups1,
				}
			}
			clientSecret1 := new(string)
			if !r.Config.OIDCIdentityProviderConfig.ClientSecret.IsUnknown() && !r.Config.OIDCIdentityProviderConfig.ClientSecret.IsNull() {
				*clientSecret1 = r.Config.OIDCIdentityProviderConfig.ClientSecret.ValueString()
			} else {
				clientSecret1 = nil
			}
			oidcIdentityProviderConfig = &shared.OIDCIdentityProviderConfig{
				IssuerURL:     issuerUrl1,
				ClientID:      clientId1,
				Scopes:        scopes1,
				ClaimMappings: claimMappings1,
				ClientSecret:  clientSecret1,
			}
		}
		if oidcIdentityProviderConfig != nil {
			config = &shared.UpdateIdentityProviderConfig{
				OIDCIdentityProviderConfig: oidcIdentityProviderConfig,
			}
		}
	}
	loginPath := new(string)
	if !r.LoginPath.IsUnknown() && !r.LoginPath.IsNull() {
		*loginPath = r.LoginPath.ValueString()
	} else {
		loginPath = nil
	}
	out := shared.UpdateIdentityProvider{
		Enabled:   enabled,
		Config:    config,
		LoginPath: loginPath,
	}

	return &out, diags
}

func (r *IdentityProviderResourceModel) ToOperationsUpdateIdentityProviderRequest(ctx context.Context) (*operations.UpdateIdentityProviderRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	updateIdentityProvider, updateIdentityProviderDiags := r.ToSharedUpdateIdentityProvider(ctx)
	diags.Append(updateIdentityProviderDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateIdentityProviderRequest{
		ID:                     id,
		UpdateIdentityProvider: *updateIdentityProvider,
	}

	return &out, diags
}

func (r *IdentityProviderResourceModel) ToOperationsGetIdentityProviderRequest(ctx context.Context) (*operations.GetIdentityProviderRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetIdentityProviderRequest{
		ID: id,
	}

	return &out, diags
}

func (r *IdentityProviderResourceModel) ToOperationsDeleteIdentityProviderRequest(ctx context.Context) (*operations.DeleteIdentityProviderRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteIdentityProviderRequest{
		ID: id,
	}

	return &out, diags
}

func (r *IdentityProviderResourceModel) RefreshFromSharedIdentityProvider(ctx context.Context, resp *shared.IdentityProvider) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config != nil {
			r.Config = &tfTypes.CreateIdentityProviderConfig{}
			if resp.Config.OIDCIdentityProviderConfigOutput != nil {
				r.Config.OIDCIdentityProviderConfig = &tfTypes.ConfigureOIDCIdentityProviderConfig{}
				oidcIdentityProviderConfigPriorData := r.Config.OIDCIdentityProviderConfig
				if resp.Config.OIDCIdentityProviderConfigOutput.ClaimMappings == nil {
					r.Config.OIDCIdentityProviderConfig.ClaimMappings = nil
				} else {
					r.Config.OIDCIdentityProviderConfig.ClaimMappings = &tfTypes.OIDCIdentityProviderClaimMappings{}
					r.Config.OIDCIdentityProviderConfig.ClaimMappings.Email = types.StringPointerValue(resp.Config.OIDCIdentityProviderConfigOutput.ClaimMappings.Email)
					r.Config.OIDCIdentityProviderConfig.ClaimMappings.Groups = types.StringPointerValue(resp.Config.OIDCIdentityProviderConfigOutput.ClaimMappings.Groups)
					r.Config.OIDCIdentityProviderConfig.ClaimMappings.Name = types.StringPointerValue(resp.Config.OIDCIdentityProviderConfigOutput.ClaimMappings.Name)
				}
				r.Config.OIDCIdentityProviderConfig.ClientID = types.StringValue(resp.Config.OIDCIdentityProviderConfigOutput.ClientID)
				r.Config.OIDCIdentityProviderConfig.ClientSecret = oidcIdentityProviderConfigPriorData.ClientSecret
				r.Config.OIDCIdentityProviderConfig.IssuerURL = types.StringValue(resp.Config.OIDCIdentityProviderConfigOutput.IssuerURL)
				r.Config.OIDCIdentityProviderConfig.Scopes = make([]types.String, 0, len(resp.Config.OIDCIdentityProviderConfigOutput.Scopes))
				for _, v := range resp.Config.OIDCIdentityProviderConfigOutput.Scopes {
					r.Config.OIDCIdentityProviderConfig.Scopes = append(r.Config.OIDCIdentityProviderConfig.Scopes, types.StringValue(v))
				}
			}
			if resp.Config.SAMLIdentityProviderConfig != nil {
				r.Config.SAMLIdentityProviderConfig = &tfTypes.SAMLIdentityProviderConfig{}
				r.Config.SAMLIdentityProviderConfig.CallbackURL = types.StringPointerValue(resp.Config.SAMLIdentityProviderConfig.CallbackURL)
				r.Config.SAMLIdentityProviderConfig.IdpMetadataURL = types.StringPointerValue(resp.Config.SAMLIdentityProviderConfig.IdpMetadataURL)
				r.Config.SAMLIdentityProviderConfig.IdpMetadataXML = types.StringPointerValue(resp.Config.SAMLIdentityProviderConfig.IdpMetadataXML)
				r.Config.SAMLIdentityProviderConfig.LoginURL = types.StringPointerValue(resp.Config.SAMLIdentityProviderConfig.LoginURL)
				r.Config.SAMLIdentityProviderConfig.SpEntityID = types.StringPointerValue(resp.Config.SAMLIdentityProviderConfig.SpEntityID)
				r.Config.SAMLIdentityProviderConfig.SpMetadataURL = types.StringPointerValue(resp.Config.SAMLIdentityProviderConfig.SpMetadataURL)
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.LoginPath = types.StringPointerValue(resp.LoginPath)
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
	}

	return diags
}
