// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *CmekResourceModel) RefreshFromSharedCmek(ctx context.Context, resp *shared.Cmek) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		r.KeyArn = types.StringValue(resp.KeyArn)
		r.Name = types.StringValue(resp.Name)
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}

func (r *CmekResourceModel) ToOperationsDeleteCmekRequest(ctx context.Context) (*operations.DeleteCmekRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := shared.CmekID(r.ID.ValueString())
	out := operations.DeleteCmekRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CmekResourceModel) ToOperationsGetCmekRequest(ctx context.Context) (*operations.GetCmekRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := shared.CmekID(r.ID.ValueString())
	out := operations.GetCmekRequest{
		ID: id,
	}

	return &out, diags
}

func (r *CmekResourceModel) ToOperationsPutCmekRequest(ctx context.Context) (*operations.PutCmekRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	id := shared.CmekID(r.ID.ValueString())
	replaceCMEK, replaceCMEKDiags := r.ToSharedReplaceCMEK(ctx)
	diags.Append(replaceCMEKDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutCmekRequest{
		ID:          id,
		ReplaceCMEK: *replaceCMEK,
	}

	return &out, diags
}

func (r *CmekResourceModel) ToSharedReplaceCMEK(ctx context.Context) (*shared.ReplaceCMEK, diag.Diagnostics) {
	var diags diag.Diagnostics

	var keyArn string
	keyArn = r.KeyArn.ValueString()

	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.ReplaceCMEK{
		KeyArn:      keyArn,
		Name:        name,
		Description: description,
	}

	return &out, diags
}
