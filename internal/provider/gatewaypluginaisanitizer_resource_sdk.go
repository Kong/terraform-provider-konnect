// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginAiSanitizerResourceModel) ToSharedAiSanitizerPlugin(ctx context.Context) (*shared.AiSanitizerPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.AiSanitizerPluginOrdering
	if r.Ordering != nil {
		var after *shared.AiSanitizerPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.AiSanitizerPluginAfter{
				Access: access,
			}
		}
		var before *shared.AiSanitizerPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.AiSanitizerPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.AiSanitizerPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.AiSanitizerPluginPartials
	if r.Partials != nil {
		partials = make([]shared.AiSanitizerPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.AiSanitizerPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	tags := make([]string, 0, len(r.Tags))
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	var config *shared.AiSanitizerPluginConfig
	if r.Config != nil {
		anonymize := make([]shared.Anonymize, 0, len(r.Config.Anonymize))
		for _, anonymizeItem := range r.Config.Anonymize {
			anonymize = append(anonymize, shared.Anonymize(anonymizeItem.ValueString()))
		}
		customPatterns := make([]shared.CustomPatterns, 0, len(r.Config.CustomPatterns))
		for _, customPatternsItem := range r.Config.CustomPatterns {
			var name1 string
			name1 = customPatternsItem.Name.ValueString()

			var regex string
			regex = customPatternsItem.Regex.ValueString()

			score := new(float64)
			if !customPatternsItem.Score.IsUnknown() && !customPatternsItem.Score.IsNull() {
				*score = customPatternsItem.Score.ValueFloat64()
			} else {
				score = nil
			}
			customPatterns = append(customPatterns, shared.CustomPatterns{
				Name:  name1,
				Regex: regex,
				Score: score,
			})
		}
		host := new(string)
		if !r.Config.Host.IsUnknown() && !r.Config.Host.IsNull() {
			*host = r.Config.Host.ValueString()
		} else {
			host = nil
		}
		keepaliveTimeout := new(float64)
		if !r.Config.KeepaliveTimeout.IsUnknown() && !r.Config.KeepaliveTimeout.IsNull() {
			*keepaliveTimeout = r.Config.KeepaliveTimeout.ValueFloat64()
		} else {
			keepaliveTimeout = nil
		}
		port := new(float64)
		if !r.Config.Port.IsUnknown() && !r.Config.Port.IsNull() {
			*port = r.Config.Port.ValueFloat64()
		} else {
			port = nil
		}
		recoverRedacted := new(bool)
		if !r.Config.RecoverRedacted.IsUnknown() && !r.Config.RecoverRedacted.IsNull() {
			*recoverRedacted = r.Config.RecoverRedacted.ValueBool()
		} else {
			recoverRedacted = nil
		}
		redactType := new(shared.RedactType)
		if !r.Config.RedactType.IsUnknown() && !r.Config.RedactType.IsNull() {
			*redactType = shared.RedactType(r.Config.RedactType.ValueString())
		} else {
			redactType = nil
		}
		scheme := new(string)
		if !r.Config.Scheme.IsUnknown() && !r.Config.Scheme.IsNull() {
			*scheme = r.Config.Scheme.ValueString()
		} else {
			scheme = nil
		}
		stopOnError := new(bool)
		if !r.Config.StopOnError.IsUnknown() && !r.Config.StopOnError.IsNull() {
			*stopOnError = r.Config.StopOnError.ValueBool()
		} else {
			stopOnError = nil
		}
		timeout := new(float64)
		if !r.Config.Timeout.IsUnknown() && !r.Config.Timeout.IsNull() {
			*timeout = r.Config.Timeout.ValueFloat64()
		} else {
			timeout = nil
		}
		config = &shared.AiSanitizerPluginConfig{
			Anonymize:        anonymize,
			CustomPatterns:   customPatterns,
			Host:             host,
			KeepaliveTimeout: keepaliveTimeout,
			Port:             port,
			RecoverRedacted:  recoverRedacted,
			RedactType:       redactType,
			Scheme:           scheme,
			StopOnError:      stopOnError,
			Timeout:          timeout,
		}
	}
	var consumer *shared.AiSanitizerPluginConsumer
	if r.Consumer != nil {
		id2 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id2 = r.Consumer.ID.ValueString()
		} else {
			id2 = nil
		}
		consumer = &shared.AiSanitizerPluginConsumer{
			ID: id2,
		}
	}
	var consumerGroup *shared.AiSanitizerPluginConsumerGroup
	if r.ConsumerGroup != nil {
		id3 := new(string)
		if !r.ConsumerGroup.ID.IsUnknown() && !r.ConsumerGroup.ID.IsNull() {
			*id3 = r.ConsumerGroup.ID.ValueString()
		} else {
			id3 = nil
		}
		consumerGroup = &shared.AiSanitizerPluginConsumerGroup{
			ID: id3,
		}
	}
	protocols := make([]shared.AiSanitizerPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.AiSanitizerPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.AiSanitizerPluginRoute
	if r.Route != nil {
		id4 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id4 = r.Route.ID.ValueString()
		} else {
			id4 = nil
		}
		route = &shared.AiSanitizerPluginRoute{
			ID: id4,
		}
	}
	var service *shared.AiSanitizerPluginService
	if r.Service != nil {
		id5 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id5 = r.Service.ID.ValueString()
		} else {
			id5 = nil
		}
		service = &shared.AiSanitizerPluginService{
			ID: id5,
		}
	}
	out := shared.AiSanitizerPlugin{
		CreatedAt:     createdAt,
		Enabled:       enabled,
		ID:            id,
		InstanceName:  instanceName,
		Ordering:      ordering,
		Partials:      partials,
		Tags:          tags,
		UpdatedAt:     updatedAt,
		Config:        config,
		Consumer:      consumer,
		ConsumerGroup: consumerGroup,
		Protocols:     protocols,
		Route:         route,
		Service:       service,
	}

	return &out, diags
}

func (r *GatewayPluginAiSanitizerResourceModel) ToOperationsCreateAisanitizerPluginRequest(ctx context.Context) (*operations.CreateAisanitizerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiSanitizerPlugin, aiSanitizerPluginDiags := r.ToSharedAiSanitizerPlugin(ctx)
	diags.Append(aiSanitizerPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateAisanitizerPluginRequest{
		ControlPlaneID:    controlPlaneID,
		AiSanitizerPlugin: *aiSanitizerPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiSanitizerResourceModel) ToOperationsUpdateAisanitizerPluginRequest(ctx context.Context) (*operations.UpdateAisanitizerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	aiSanitizerPlugin, aiSanitizerPluginDiags := r.ToSharedAiSanitizerPlugin(ctx)
	diags.Append(aiSanitizerPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAisanitizerPluginRequest{
		PluginID:          pluginID,
		ControlPlaneID:    controlPlaneID,
		AiSanitizerPlugin: *aiSanitizerPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginAiSanitizerResourceModel) ToOperationsGetAisanitizerPluginRequest(ctx context.Context) (*operations.GetAisanitizerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetAisanitizerPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiSanitizerResourceModel) ToOperationsDeleteAisanitizerPluginRequest(ctx context.Context) (*operations.DeleteAisanitizerPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteAisanitizerPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginAiSanitizerResourceModel) RefreshFromSharedAiSanitizerPlugin(ctx context.Context, resp *shared.AiSanitizerPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Config == nil {
			r.Config = nil
		} else {
			r.Config = &tfTypes.AiSanitizerPluginConfig{}
			r.Config.Anonymize = make([]types.String, 0, len(resp.Config.Anonymize))
			for _, v := range resp.Config.Anonymize {
				r.Config.Anonymize = append(r.Config.Anonymize, types.StringValue(string(v)))
			}
			r.Config.CustomPatterns = []tfTypes.CustomPatterns{}
			if len(r.Config.CustomPatterns) > len(resp.Config.CustomPatterns) {
				r.Config.CustomPatterns = r.Config.CustomPatterns[:len(resp.Config.CustomPatterns)]
			}
			for customPatternsCount, customPatternsItem := range resp.Config.CustomPatterns {
				var customPatterns tfTypes.CustomPatterns
				customPatterns.Name = types.StringValue(customPatternsItem.Name)
				customPatterns.Regex = types.StringValue(customPatternsItem.Regex)
				customPatterns.Score = types.Float64PointerValue(customPatternsItem.Score)
				if customPatternsCount+1 > len(r.Config.CustomPatterns) {
					r.Config.CustomPatterns = append(r.Config.CustomPatterns, customPatterns)
				} else {
					r.Config.CustomPatterns[customPatternsCount].Name = customPatterns.Name
					r.Config.CustomPatterns[customPatternsCount].Regex = customPatterns.Regex
					r.Config.CustomPatterns[customPatternsCount].Score = customPatterns.Score
				}
			}
			r.Config.Host = types.StringPointerValue(resp.Config.Host)
			r.Config.KeepaliveTimeout = types.Float64PointerValue(resp.Config.KeepaliveTimeout)
			r.Config.Port = types.Float64PointerValue(resp.Config.Port)
			r.Config.RecoverRedacted = types.BoolPointerValue(resp.Config.RecoverRedacted)
			if resp.Config.RedactType != nil {
				r.Config.RedactType = types.StringValue(string(*resp.Config.RedactType))
			} else {
				r.Config.RedactType = types.StringNull()
			}
			r.Config.Scheme = types.StringPointerValue(resp.Config.Scheme)
			r.Config.StopOnError = types.BoolPointerValue(resp.Config.StopOnError)
			r.Config.Timeout = types.Float64PointerValue(resp.Config.Timeout)
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		if resp.ConsumerGroup == nil {
			r.ConsumerGroup = nil
		} else {
			r.ConsumerGroup = &tfTypes.ACLWithoutParentsConsumer{}
			r.ConsumerGroup.ID = types.StringPointerValue(resp.ConsumerGroup.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}
			if len(r.Partials) > len(resp.Partials) {
				r.Partials = r.Partials[:len(resp.Partials)]
			}
			for partialsCount, partialsItem := range resp.Partials {
				var partials tfTypes.Partials
				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)
				if partialsCount+1 > len(r.Partials) {
					r.Partials = append(r.Partials, partials)
				} else {
					r.Partials[partialsCount].ID = partials.ID
					r.Partials[partialsCount].Name = partials.Name
					r.Partials[partialsCount].Path = partials.Path
				}
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}
