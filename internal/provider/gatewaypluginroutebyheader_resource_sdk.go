// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginRouteByHeaderResourceModel) ToSharedRouteByHeaderPluginInput() *shared.RouteByHeaderPluginInput {
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	ordering := make(map[string]string)
	for orderingKey, orderingValue := range r.Ordering {
		var orderingInst string
		orderingInst = orderingValue.ValueString()

		ordering[orderingKey] = orderingInst
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	var rules []shared.RouteByHeaderPluginRules = []shared.RouteByHeaderPluginRules{}
	for _, rulesItem := range r.Config.Rules {
		condition := make(map[string]interface{})
		for conditionKey, conditionValue := range rulesItem.Condition {
			var conditionInst interface{}
			_ = json.Unmarshal([]byte(conditionValue.ValueString()), &conditionInst)
			condition[conditionKey] = conditionInst
		}
		var upstreamName string
		upstreamName = rulesItem.UpstreamName.ValueString()

		rules = append(rules, shared.RouteByHeaderPluginRules{
			Condition:    condition,
			UpstreamName: upstreamName,
		})
	}
	config := shared.RouteByHeaderPluginConfig{
		Rules: rules,
	}
	var consumer *shared.RouteByHeaderPluginConsumer
	if r.Consumer != nil {
		id1 := new(string)
		if !r.Consumer.ID.IsUnknown() && !r.Consumer.ID.IsNull() {
			*id1 = r.Consumer.ID.ValueString()
		} else {
			id1 = nil
		}
		consumer = &shared.RouteByHeaderPluginConsumer{
			ID: id1,
		}
	}
	var protocols []shared.RouteByHeaderPluginProtocols = []shared.RouteByHeaderPluginProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.RouteByHeaderPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.RouteByHeaderPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.RouteByHeaderPluginRoute{
			ID: id2,
		}
	}
	var service *shared.RouteByHeaderPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.RouteByHeaderPluginService{
			ID: id3,
		}
	}
	out := shared.RouteByHeaderPluginInput{
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Tags:         tags,
		Config:       config,
		Consumer:     consumer,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}
	return &out
}

func (r *GatewayPluginRouteByHeaderResourceModel) RefreshFromSharedRouteByHeaderPlugin(resp *shared.RouteByHeaderPlugin) {
	if resp != nil {
		r.Config.Rules = []tfTypes.RouteByHeaderPluginRules{}
		if len(r.Config.Rules) > len(resp.Config.Rules) {
			r.Config.Rules = r.Config.Rules[:len(resp.Config.Rules)]
		}
		for rulesCount, rulesItem := range resp.Config.Rules {
			var rules1 tfTypes.RouteByHeaderPluginRules
			if len(rulesItem.Condition) > 0 {
				rules1.Condition = make(map[string]types.String, len(rulesItem.Condition))
				for key, value := range rulesItem.Condition {
					result, _ := json.Marshal(value)
					rules1.Condition[key] = types.StringValue(string(result))
				}
			}
			rules1.UpstreamName = types.StringValue(rulesItem.UpstreamName)
			if rulesCount+1 > len(r.Config.Rules) {
				r.Config.Rules = append(r.Config.Rules, rules1)
			} else {
				r.Config.Rules[rulesCount].Condition = rules1.Condition
				r.Config.Rules[rulesCount].UpstreamName = rules1.UpstreamName
			}
		}
		if resp.Consumer == nil {
			r.Consumer = nil
		} else {
			r.Consumer = &tfTypes.ACLWithoutParentsConsumer{}
			r.Consumer.ID = types.StringPointerValue(resp.Consumer.ID)
		}
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering != nil {
			r.Ordering = make(map[string]types.String, len(resp.Ordering))
			for key1, value1 := range resp.Ordering {
				r.Ordering[key1] = types.StringValue(value1)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.ACLWithoutParentsConsumer{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
