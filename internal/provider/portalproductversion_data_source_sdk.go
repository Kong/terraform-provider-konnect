// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *PortalProductVersionDataSourceModel) ToOperationsGetPortalProductVersionRequest(ctx context.Context) (*operations.GetPortalProductVersionRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var productVersionID string
	productVersionID = r.ProductVersionID.ValueString()

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.GetPortalProductVersionRequest{
		ProductVersionID: productVersionID,
		PortalID:         portalID,
	}

	return &out, diags
}

func (r *PortalProductVersionDataSourceModel) RefreshFromSharedPortalProductVersion(ctx context.Context, resp *shared.PortalProductVersion) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.ApplicationRegistrationEnabled = types.BoolValue(resp.ApplicationRegistrationEnabled)
		r.AuthStrategies = []tfTypes.AuthStrategy{}
		if len(r.AuthStrategies) > len(resp.AuthStrategies) {
			r.AuthStrategies = r.AuthStrategies[:len(resp.AuthStrategies)]
		}
		for authStrategiesCount, authStrategiesItem := range resp.AuthStrategies {
			var authStrategies tfTypes.AuthStrategy
			if authStrategiesItem.AuthStrategyClientCredentials != nil {
				authStrategies.ClientCredentials = &tfTypes.AuthStrategyClientCredentials{}
				authStrategies.ClientCredentials.AuthMethods = make([]types.String, 0, len(authStrategiesItem.AuthStrategyClientCredentials.AuthMethods))
				for _, v := range authStrategiesItem.AuthStrategyClientCredentials.AuthMethods {
					authStrategies.ClientCredentials.AuthMethods = append(authStrategies.ClientCredentials.AuthMethods, types.StringValue(v))
				}
				authStrategies.ClientCredentials.AvailableScopes = make([]types.String, 0, len(authStrategiesItem.AuthStrategyClientCredentials.AvailableScopes))
				for _, v := range authStrategiesItem.AuthStrategyClientCredentials.AvailableScopes {
					authStrategies.ClientCredentials.AvailableScopes = append(authStrategies.ClientCredentials.AvailableScopes, types.StringValue(v))
				}
				authStrategies.ClientCredentials.CredentialType = types.StringValue(string(authStrategiesItem.AuthStrategyClientCredentials.CredentialType))
				authStrategies.ClientCredentials.ID = types.StringValue(authStrategiesItem.AuthStrategyClientCredentials.ID)
				authStrategies.ClientCredentials.Name = types.StringValue(authStrategiesItem.AuthStrategyClientCredentials.Name)
			}
			if authStrategiesItem.AuthStrategyKeyAuth != nil {
				authStrategies.KeyAuth = &tfTypes.AuthStrategyKeyAuth{}
				authStrategies.KeyAuth.CredentialType = types.StringValue(string(authStrategiesItem.AuthStrategyKeyAuth.CredentialType))
				authStrategies.KeyAuth.ID = types.StringValue(authStrategiesItem.AuthStrategyKeyAuth.ID)
				authStrategies.KeyAuth.KeyNames = make([]types.String, 0, len(authStrategiesItem.AuthStrategyKeyAuth.KeyNames))
				for _, v := range authStrategiesItem.AuthStrategyKeyAuth.KeyNames {
					authStrategies.KeyAuth.KeyNames = append(authStrategies.KeyAuth.KeyNames, types.StringValue(v))
				}
				authStrategies.KeyAuth.Name = types.StringValue(authStrategiesItem.AuthStrategyKeyAuth.Name)
			}
			if authStrategiesCount+1 > len(r.AuthStrategies) {
				r.AuthStrategies = append(r.AuthStrategies, authStrategies)
			} else {
				r.AuthStrategies[authStrategiesCount].ClientCredentials = authStrategies.ClientCredentials
				r.AuthStrategies[authStrategiesCount].KeyAuth = authStrategies.KeyAuth
			}
		}
		r.AutoApproveRegistration = types.BoolValue(resp.AutoApproveRegistration)
		r.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.CreatedAt))
		r.Deprecated = types.BoolValue(resp.Deprecated)
		r.ID = types.StringValue(resp.ID)
		r.ProductVersionID = types.StringValue(resp.ProductVersionID)
		r.PublishStatus = types.StringValue(string(resp.PublishStatus))
		r.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.UpdatedAt))
	}

	return diags
}
