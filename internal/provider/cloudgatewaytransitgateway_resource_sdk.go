// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *CloudGatewayTransitGatewayResourceModel) ToSharedCreateTransitGatewayRequest(ctx context.Context) (*shared.CreateTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.CreateTransitGatewayRequest
	var awsTransitGateway *shared.AWSTransitGateway
	if r.AWSTransitGateway != nil {
		var name string
		name = r.AWSTransitGateway.Name.ValueString()

		dnsConfig := make([]shared.TransitGatewayDNSConfig, 0, len(r.AWSTransitGateway.DNSConfig))
		for _, dnsConfigItem := range r.AWSTransitGateway.DNSConfig {
			remoteDNSServerIPAddresses := make([]string, 0, len(dnsConfigItem.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem := range dnsConfigItem.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses = append(remoteDNSServerIPAddresses, remoteDNSServerIPAddressesItem.ValueString())
			}
			domainProxyList := make([]string, 0, len(dnsConfigItem.DomainProxyList))
			for _, domainProxyListItem := range dnsConfigItem.DomainProxyList {
				domainProxyList = append(domainProxyList, domainProxyListItem.ValueString())
			}
			dnsConfig = append(dnsConfig, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses,
				DomainProxyList:            domainProxyList,
			})
		}
		cidrBlocks := make([]string, 0, len(r.AWSTransitGateway.CidrBlocks))
		for _, cidrBlocksItem := range r.AWSTransitGateway.CidrBlocks {
			cidrBlocks = append(cidrBlocks, cidrBlocksItem.ValueString())
		}
		kind := shared.AWSTransitGatewayAttachmentType(r.AWSTransitGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var transitGatewayID string
		transitGatewayID = r.AWSTransitGateway.TransitGatewayAttachmentConfig.TransitGatewayID.ValueString()

		var ramShareArn string
		ramShareArn = r.AWSTransitGateway.TransitGatewayAttachmentConfig.RAMShareArn.ValueString()

		transitGatewayAttachmentConfig := shared.AwsTransitGatewayAttachmentConfig{
			Kind:             kind,
			TransitGatewayID: transitGatewayID,
			RAMShareArn:      ramShareArn,
		}
		awsTransitGateway = &shared.AWSTransitGateway{
			Name:                           name,
			DNSConfig:                      dnsConfig,
			CidrBlocks:                     cidrBlocks,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig,
		}
	}
	if awsTransitGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AWSTransitGateway: awsTransitGateway,
		}
	}
	var awsVpcPeeringGateway *shared.AWSVpcPeeringGateway
	if r.AWSVpcPeeringGateway != nil {
		var name1 string
		name1 = r.AWSVpcPeeringGateway.Name.ValueString()

		dnsConfig1 := make([]shared.TransitGatewayDNSConfig, 0, len(r.AWSVpcPeeringGateway.DNSConfig))
		for _, dnsConfigItem1 := range r.AWSVpcPeeringGateway.DNSConfig {
			remoteDNSServerIPAddresses1 := make([]string, 0, len(dnsConfigItem1.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem1 := range dnsConfigItem1.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses1 = append(remoteDNSServerIPAddresses1, remoteDNSServerIPAddressesItem1.ValueString())
			}
			domainProxyList1 := make([]string, 0, len(dnsConfigItem1.DomainProxyList))
			for _, domainProxyListItem1 := range dnsConfigItem1.DomainProxyList {
				domainProxyList1 = append(domainProxyList1, domainProxyListItem1.ValueString())
			}
			dnsConfig1 = append(dnsConfig1, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses1,
				DomainProxyList:            domainProxyList1,
			})
		}
		cidrBlocks1 := make([]string, 0, len(r.AWSVpcPeeringGateway.CidrBlocks))
		for _, cidrBlocksItem1 := range r.AWSVpcPeeringGateway.CidrBlocks {
			cidrBlocks1 = append(cidrBlocks1, cidrBlocksItem1.ValueString())
		}
		kind1 := shared.AWSVPCPeeringAttachmentConfig(r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var peerAccountID string
		peerAccountID = r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.PeerAccountID.ValueString()

		var peerVpcID string
		peerVpcID = r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.PeerVpcID.ValueString()

		var peerVpcRegion string
		peerVpcRegion = r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.PeerVpcRegion.ValueString()

		transitGatewayAttachmentConfig1 := shared.AwsVpcPeeringGatewayAttachmentConfig{
			Kind:          kind1,
			PeerAccountID: peerAccountID,
			PeerVpcID:     peerVpcID,
			PeerVpcRegion: peerVpcRegion,
		}
		awsVpcPeeringGateway = &shared.AWSVpcPeeringGateway{
			Name:                           name1,
			DNSConfig:                      dnsConfig1,
			CidrBlocks:                     cidrBlocks1,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig1,
		}
	}
	if awsVpcPeeringGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AWSVpcPeeringGateway: awsVpcPeeringGateway,
		}
	}
	var azureTransitGateway *shared.AzureTransitGateway
	if r.AzureTransitGateway != nil {
		var name2 string
		name2 = r.AzureTransitGateway.Name.ValueString()

		dnsConfig2 := make([]shared.TransitGatewayDNSConfig, 0, len(r.AzureTransitGateway.DNSConfig))
		for _, dnsConfigItem2 := range r.AzureTransitGateway.DNSConfig {
			remoteDNSServerIPAddresses2 := make([]string, 0, len(dnsConfigItem2.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem2 := range dnsConfigItem2.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses2 = append(remoteDNSServerIPAddresses2, remoteDNSServerIPAddressesItem2.ValueString())
			}
			domainProxyList2 := make([]string, 0, len(dnsConfigItem2.DomainProxyList))
			for _, domainProxyListItem2 := range dnsConfigItem2.DomainProxyList {
				domainProxyList2 = append(domainProxyList2, domainProxyListItem2.ValueString())
			}
			dnsConfig2 = append(dnsConfig2, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses2,
				DomainProxyList:            domainProxyList2,
			})
		}
		kind2 := shared.AzureVNETPeeringAttachmentType(r.AzureTransitGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var tenantID string
		tenantID = r.AzureTransitGateway.TransitGatewayAttachmentConfig.TenantID.ValueString()

		var subscriptionID string
		subscriptionID = r.AzureTransitGateway.TransitGatewayAttachmentConfig.SubscriptionID.ValueString()

		var resourceGroupName string
		resourceGroupName = r.AzureTransitGateway.TransitGatewayAttachmentConfig.ResourceGroupName.ValueString()

		var vnetName string
		vnetName = r.AzureTransitGateway.TransitGatewayAttachmentConfig.VnetName.ValueString()

		transitGatewayAttachmentConfig2 := shared.AzureVNETPeeringAttachmentConfig{
			Kind:              kind2,
			TenantID:          tenantID,
			SubscriptionID:    subscriptionID,
			ResourceGroupName: resourceGroupName,
			VnetName:          vnetName,
		}
		azureTransitGateway = &shared.AzureTransitGateway{
			Name:                           name2,
			DNSConfig:                      dnsConfig2,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig2,
		}
	}
	if azureTransitGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AzureTransitGateway: azureTransitGateway,
		}
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsCreateTransitGatewayRequest(ctx context.Context) (*operations.CreateTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	createTransitGatewayRequest, createTransitGatewayRequestDiags := r.ToSharedCreateTransitGatewayRequest(ctx)
	diags.Append(createTransitGatewayRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTransitGatewayRequest{
		NetworkID:                   networkID,
		CreateTransitGatewayRequest: *createTransitGatewayRequest,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsGetTransitGatewayRequest(ctx context.Context) (*operations.GetTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	var transitGatewayID string
	transitGatewayID = r.ID.ValueString()

	out := operations.GetTransitGatewayRequest{
		NetworkID:        networkID,
		TransitGatewayID: transitGatewayID,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsDeleteTransitGatewayRequest(ctx context.Context) (*operations.DeleteTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	var transitGatewayID string
	transitGatewayID = r.ID.ValueString()

	out := operations.DeleteTransitGatewayRequest{
		NetworkID:        networkID,
		TransitGatewayID: transitGatewayID,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) RefreshFromSharedTransitGatewayResponse(ctx context.Context, resp *shared.TransitGatewayResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AwsTransitGatewayResponse != nil {
			r.AwsTransitGatewayResponse = &tfTypes.AwsTransitGatewayResponse{}
			r.AwsTransitGatewayResponse.CidrBlocks = make([]types.String, 0, len(resp.AwsTransitGatewayResponse.CidrBlocks))
			for _, v := range resp.AwsTransitGatewayResponse.CidrBlocks {
				r.AwsTransitGatewayResponse.CidrBlocks = append(r.AwsTransitGatewayResponse.CidrBlocks, types.StringValue(v))
			}
			r.AwsTransitGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsTransitGatewayResponse.CreatedAt))
			r.AwsTransitGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}
			if len(r.AwsTransitGatewayResponse.DNSConfig) > len(resp.AwsTransitGatewayResponse.DNSConfig) {
				r.AwsTransitGatewayResponse.DNSConfig = r.AwsTransitGatewayResponse.DNSConfig[:len(resp.AwsTransitGatewayResponse.DNSConfig)]
			}
			for dnsConfigCount, dnsConfigItem := range resp.AwsTransitGatewayResponse.DNSConfig {
				var dnsConfig tfTypes.TransitGatewayDNSConfig
				dnsConfig.DomainProxyList = make([]types.String, 0, len(dnsConfigItem.DomainProxyList))
				for _, v := range dnsConfigItem.DomainProxyList {
					dnsConfig.DomainProxyList = append(dnsConfig.DomainProxyList, types.StringValue(v))
				}
				dnsConfig.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem.RemoteDNSServerIPAddresses {
					dnsConfig.RemoteDNSServerIPAddresses = append(dnsConfig.RemoteDNSServerIPAddresses, types.StringValue(v))
				}
				if dnsConfigCount+1 > len(r.AwsTransitGatewayResponse.DNSConfig) {
					r.AwsTransitGatewayResponse.DNSConfig = append(r.AwsTransitGatewayResponse.DNSConfig, dnsConfig)
				} else {
					r.AwsTransitGatewayResponse.DNSConfig[dnsConfigCount].DomainProxyList = dnsConfig.DomainProxyList
					r.AwsTransitGatewayResponse.DNSConfig[dnsConfigCount].RemoteDNSServerIPAddresses = dnsConfig.RemoteDNSServerIPAddresses
				}
			}
			r.AwsTransitGatewayResponse.EntityVersion = types.Int64Value(resp.AwsTransitGatewayResponse.EntityVersion)
			r.EntityVersion = r.AwsTransitGatewayResponse.EntityVersion
			r.AwsTransitGatewayResponse.ID = types.StringValue(resp.AwsTransitGatewayResponse.ID)
			r.ID = r.AwsTransitGatewayResponse.ID
			r.AwsTransitGatewayResponse.Name = types.StringValue(resp.AwsTransitGatewayResponse.Name)
			r.Name = r.AwsTransitGatewayResponse.Name
			r.AwsTransitGatewayResponse.State = types.StringValue(string(resp.AwsTransitGatewayResponse.State))
			if resp.AwsTransitGatewayResponse.StateMetadata == nil {
				r.AwsTransitGatewayResponse.StateMetadata = nil
			} else {
				r.AwsTransitGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AwsTransitGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AwsTransitGatewayResponse.StateMetadata.Reason)
				r.AwsTransitGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AwsTransitGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn = types.StringValue(resp.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn)
			r.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.TransitGatewayID = types.StringValue(resp.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.TransitGatewayID)
			r.AwsTransitGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsTransitGatewayResponse.UpdatedAt))
		}
		if resp.AwsVpcPeeringGatewayResponse != nil {
			r.AwsVpcPeeringGatewayResponse = &tfTypes.AwsVpcPeeringGatewayResponse{}
			r.AwsVpcPeeringGatewayResponse.CidrBlocks = make([]types.String, 0, len(resp.AwsVpcPeeringGatewayResponse.CidrBlocks))
			for _, v := range resp.AwsVpcPeeringGatewayResponse.CidrBlocks {
				r.AwsVpcPeeringGatewayResponse.CidrBlocks = append(r.AwsVpcPeeringGatewayResponse.CidrBlocks, types.StringValue(v))
			}
			r.AwsVpcPeeringGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsVpcPeeringGatewayResponse.CreatedAt))
			r.AwsVpcPeeringGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}
			if len(r.AwsVpcPeeringGatewayResponse.DNSConfig) > len(resp.AwsVpcPeeringGatewayResponse.DNSConfig) {
				r.AwsVpcPeeringGatewayResponse.DNSConfig = r.AwsVpcPeeringGatewayResponse.DNSConfig[:len(resp.AwsVpcPeeringGatewayResponse.DNSConfig)]
			}
			for dnsConfigCount1, dnsConfigItem1 := range resp.AwsVpcPeeringGatewayResponse.DNSConfig {
				var dnsConfig1 tfTypes.TransitGatewayDNSConfig
				dnsConfig1.DomainProxyList = make([]types.String, 0, len(dnsConfigItem1.DomainProxyList))
				for _, v := range dnsConfigItem1.DomainProxyList {
					dnsConfig1.DomainProxyList = append(dnsConfig1.DomainProxyList, types.StringValue(v))
				}
				dnsConfig1.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem1.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem1.RemoteDNSServerIPAddresses {
					dnsConfig1.RemoteDNSServerIPAddresses = append(dnsConfig1.RemoteDNSServerIPAddresses, types.StringValue(v))
				}
				if dnsConfigCount1+1 > len(r.AwsVpcPeeringGatewayResponse.DNSConfig) {
					r.AwsVpcPeeringGatewayResponse.DNSConfig = append(r.AwsVpcPeeringGatewayResponse.DNSConfig, dnsConfig1)
				} else {
					r.AwsVpcPeeringGatewayResponse.DNSConfig[dnsConfigCount1].DomainProxyList = dnsConfig1.DomainProxyList
					r.AwsVpcPeeringGatewayResponse.DNSConfig[dnsConfigCount1].RemoteDNSServerIPAddresses = dnsConfig1.RemoteDNSServerIPAddresses
				}
			}
			r.AwsVpcPeeringGatewayResponse.EntityVersion = types.Int64Value(resp.AwsVpcPeeringGatewayResponse.EntityVersion)
			r.EntityVersion = r.AwsVpcPeeringGatewayResponse.EntityVersion
			r.AwsVpcPeeringGatewayResponse.ID = types.StringValue(resp.AwsVpcPeeringGatewayResponse.ID)
			r.ID = r.AwsVpcPeeringGatewayResponse.ID
			r.AwsVpcPeeringGatewayResponse.Name = types.StringValue(resp.AwsVpcPeeringGatewayResponse.Name)
			r.Name = r.AwsVpcPeeringGatewayResponse.Name
			r.AwsVpcPeeringGatewayResponse.State = types.StringValue(string(resp.AwsVpcPeeringGatewayResponse.State))
			if resp.AwsVpcPeeringGatewayResponse.StateMetadata == nil {
				r.AwsVpcPeeringGatewayResponse.StateMetadata = nil
			} else {
				r.AwsVpcPeeringGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AwsVpcPeeringGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AwsVpcPeeringGatewayResponse.StateMetadata.Reason)
				r.AwsVpcPeeringGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AwsVpcPeeringGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerAccountID = types.StringValue(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerAccountID)
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcID = types.StringValue(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcID)
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcRegion = types.StringValue(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcRegion)
			r.AwsVpcPeeringGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsVpcPeeringGatewayResponse.UpdatedAt))
		}
		if resp.AzureTransitGatewayResponse != nil {
			r.AzureTransitGatewayResponse = &tfTypes.AzureTransitGatewayResponse{}
			r.AzureTransitGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AzureTransitGatewayResponse.CreatedAt))
			r.AzureTransitGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}
			if len(r.AzureTransitGatewayResponse.DNSConfig) > len(resp.AzureTransitGatewayResponse.DNSConfig) {
				r.AzureTransitGatewayResponse.DNSConfig = r.AzureTransitGatewayResponse.DNSConfig[:len(resp.AzureTransitGatewayResponse.DNSConfig)]
			}
			for dnsConfigCount2, dnsConfigItem2 := range resp.AzureTransitGatewayResponse.DNSConfig {
				var dnsConfig2 tfTypes.TransitGatewayDNSConfig
				dnsConfig2.DomainProxyList = make([]types.String, 0, len(dnsConfigItem2.DomainProxyList))
				for _, v := range dnsConfigItem2.DomainProxyList {
					dnsConfig2.DomainProxyList = append(dnsConfig2.DomainProxyList, types.StringValue(v))
				}
				dnsConfig2.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem2.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem2.RemoteDNSServerIPAddresses {
					dnsConfig2.RemoteDNSServerIPAddresses = append(dnsConfig2.RemoteDNSServerIPAddresses, types.StringValue(v))
				}
				if dnsConfigCount2+1 > len(r.AzureTransitGatewayResponse.DNSConfig) {
					r.AzureTransitGatewayResponse.DNSConfig = append(r.AzureTransitGatewayResponse.DNSConfig, dnsConfig2)
				} else {
					r.AzureTransitGatewayResponse.DNSConfig[dnsConfigCount2].DomainProxyList = dnsConfig2.DomainProxyList
					r.AzureTransitGatewayResponse.DNSConfig[dnsConfigCount2].RemoteDNSServerIPAddresses = dnsConfig2.RemoteDNSServerIPAddresses
				}
			}
			r.AzureTransitGatewayResponse.EntityVersion = types.Int64Value(resp.AzureTransitGatewayResponse.EntityVersion)
			r.EntityVersion = r.AzureTransitGatewayResponse.EntityVersion
			r.AzureTransitGatewayResponse.ID = types.StringValue(resp.AzureTransitGatewayResponse.ID)
			r.ID = r.AzureTransitGatewayResponse.ID
			r.AzureTransitGatewayResponse.Name = types.StringValue(resp.AzureTransitGatewayResponse.Name)
			r.Name = r.AzureTransitGatewayResponse.Name
			r.AzureTransitGatewayResponse.State = types.StringValue(string(resp.AzureTransitGatewayResponse.State))
			if resp.AzureTransitGatewayResponse.StateMetadata == nil {
				r.AzureTransitGatewayResponse.StateMetadata = nil
			} else {
				r.AzureTransitGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AzureTransitGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AzureTransitGatewayResponse.StateMetadata.Reason)
				r.AzureTransitGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AzureTransitGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.ResourceGroupName = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.ResourceGroupName)
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.SubscriptionID = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.SubscriptionID)
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.TenantID = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.TenantID)
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.VnetName = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.VnetName)
			r.AzureTransitGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AzureTransitGatewayResponse.UpdatedAt))
		}
	}

	return diags
}
