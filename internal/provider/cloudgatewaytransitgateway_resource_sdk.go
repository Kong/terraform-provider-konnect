// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v3/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
)

func (r *CloudGatewayTransitGatewayResourceModel) RefreshFromSharedPatchTransitGatewayResponse(ctx context.Context, resp *shared.PatchTransitGatewayResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AwsResourceEndpointGatewayResponse != nil {
			r.AwsResourceEndpointGatewayResponse = &tfTypes.AwsResourceEndpointGatewayResponse{}
			r.AwsResourceEndpointGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsResourceEndpointGatewayResponse.CreatedAt))
			r.AwsResourceEndpointGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}

			for _, dnsConfigItem := range resp.AwsResourceEndpointGatewayResponse.DNSConfig {
				var dnsConfig tfTypes.TransitGatewayDNSConfig

				dnsConfig.DomainProxyList = make([]types.String, 0, len(dnsConfigItem.DomainProxyList))
				for _, v := range dnsConfigItem.DomainProxyList {
					dnsConfig.DomainProxyList = append(dnsConfig.DomainProxyList, types.StringValue(v))
				}
				dnsConfig.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem.RemoteDNSServerIPAddresses {
					dnsConfig.RemoteDNSServerIPAddresses = append(dnsConfig.RemoteDNSServerIPAddresses, types.StringValue(v))
				}

				r.AwsResourceEndpointGatewayResponse.DNSConfig = append(r.AwsResourceEndpointGatewayResponse.DNSConfig, dnsConfig)
			}
			r.AwsResourceEndpointGatewayResponse.EntityVersion = types.Int64Value(resp.AwsResourceEndpointGatewayResponse.EntityVersion)
			r.EntityVersion = r.AwsResourceEndpointGatewayResponse.EntityVersion
			r.AwsResourceEndpointGatewayResponse.ID = types.StringValue(resp.AwsResourceEndpointGatewayResponse.ID)
			r.ID = r.AwsResourceEndpointGatewayResponse.ID
			r.AwsResourceEndpointGatewayResponse.Name = types.StringValue(resp.AwsResourceEndpointGatewayResponse.Name)
			r.Name = r.AwsResourceEndpointGatewayResponse.Name
			r.AwsResourceEndpointGatewayResponse.State = types.StringValue(string(resp.AwsResourceEndpointGatewayResponse.State))
			if resp.AwsResourceEndpointGatewayResponse.StateMetadata == nil {
				r.AwsResourceEndpointGatewayResponse.StateMetadata = nil
			} else {
				r.AwsResourceEndpointGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AwsResourceEndpointGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AwsResourceEndpointGatewayResponse.StateMetadata.Reason)
				r.AwsResourceEndpointGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AwsResourceEndpointGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn = types.StringValue(resp.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn)
			r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig = []tfTypes.AwsResourceEndpointConfigResponse{}

			for _, resourceConfigItem := range resp.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig {
				var resourceConfig tfTypes.AwsResourceEndpointConfigResponse

				resourceConfig.DomainName = types.StringValue(resourceConfigItem.DomainName)
				resourceConfig.ResourceConfigID = types.StringValue(resourceConfigItem.ResourceConfigID)
				resourceConfig.State = types.StringValue(string(resourceConfigItem.State))

				r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig = append(r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig, resourceConfig)
			}
			r.AwsResourceEndpointGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsResourceEndpointGatewayResponse.UpdatedAt))
		}
	}

	return diags
}

func (r *CloudGatewayTransitGatewayResourceModel) RefreshFromSharedTransitGatewayResponse(ctx context.Context, resp *shared.TransitGatewayResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AwsResourceEndpointGatewayResponse != nil {
			r.AwsResourceEndpointGatewayResponse = &tfTypes.AwsResourceEndpointGatewayResponse{}
			r.AwsResourceEndpointGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsResourceEndpointGatewayResponse.CreatedAt))
			r.AwsResourceEndpointGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}

			for _, dnsConfigItem := range resp.AwsResourceEndpointGatewayResponse.DNSConfig {
				var dnsConfig tfTypes.TransitGatewayDNSConfig

				dnsConfig.DomainProxyList = make([]types.String, 0, len(dnsConfigItem.DomainProxyList))
				for _, v := range dnsConfigItem.DomainProxyList {
					dnsConfig.DomainProxyList = append(dnsConfig.DomainProxyList, types.StringValue(v))
				}
				dnsConfig.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem.RemoteDNSServerIPAddresses {
					dnsConfig.RemoteDNSServerIPAddresses = append(dnsConfig.RemoteDNSServerIPAddresses, types.StringValue(v))
				}

				r.AwsResourceEndpointGatewayResponse.DNSConfig = append(r.AwsResourceEndpointGatewayResponse.DNSConfig, dnsConfig)
			}
			r.AwsResourceEndpointGatewayResponse.EntityVersion = types.Int64Value(resp.AwsResourceEndpointGatewayResponse.EntityVersion)
			r.EntityVersion = r.AwsResourceEndpointGatewayResponse.EntityVersion
			r.AwsResourceEndpointGatewayResponse.ID = types.StringValue(resp.AwsResourceEndpointGatewayResponse.ID)
			r.ID = r.AwsResourceEndpointGatewayResponse.ID
			r.AwsResourceEndpointGatewayResponse.Name = types.StringValue(resp.AwsResourceEndpointGatewayResponse.Name)
			r.Name = r.AwsResourceEndpointGatewayResponse.Name
			r.AwsResourceEndpointGatewayResponse.State = types.StringValue(string(resp.AwsResourceEndpointGatewayResponse.State))
			if resp.AwsResourceEndpointGatewayResponse.StateMetadata == nil {
				r.AwsResourceEndpointGatewayResponse.StateMetadata = nil
			} else {
				r.AwsResourceEndpointGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AwsResourceEndpointGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AwsResourceEndpointGatewayResponse.StateMetadata.Reason)
				r.AwsResourceEndpointGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AwsResourceEndpointGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn = types.StringValue(resp.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn)
			r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig = []tfTypes.AwsResourceEndpointConfigResponse{}

			for _, resourceConfigItem := range resp.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig {
				var resourceConfig tfTypes.AwsResourceEndpointConfigResponse

				resourceConfig.DomainName = types.StringValue(resourceConfigItem.DomainName)
				resourceConfig.ResourceConfigID = types.StringValue(resourceConfigItem.ResourceConfigID)
				resourceConfig.State = types.StringValue(string(resourceConfigItem.State))

				r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig = append(r.AwsResourceEndpointGatewayResponse.TransitGatewayAttachmentConfig.ResourceConfig, resourceConfig)
			}
			r.AwsResourceEndpointGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsResourceEndpointGatewayResponse.UpdatedAt))
		}
		if resp.AwsTransitGatewayResponse != nil {
			r.AwsTransitGatewayResponse = &tfTypes.AwsTransitGatewayResponse{}
			r.AwsTransitGatewayResponse.CidrBlocks = make([]types.String, 0, len(resp.AwsTransitGatewayResponse.CidrBlocks))
			for _, v := range resp.AwsTransitGatewayResponse.CidrBlocks {
				r.AwsTransitGatewayResponse.CidrBlocks = append(r.AwsTransitGatewayResponse.CidrBlocks, types.StringValue(v))
			}
			r.AwsTransitGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsTransitGatewayResponse.CreatedAt))
			r.AwsTransitGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}

			for _, dnsConfigItem1 := range resp.AwsTransitGatewayResponse.DNSConfig {
				var dnsConfig1 tfTypes.TransitGatewayDNSConfig

				dnsConfig1.DomainProxyList = make([]types.String, 0, len(dnsConfigItem1.DomainProxyList))
				for _, v := range dnsConfigItem1.DomainProxyList {
					dnsConfig1.DomainProxyList = append(dnsConfig1.DomainProxyList, types.StringValue(v))
				}
				dnsConfig1.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem1.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem1.RemoteDNSServerIPAddresses {
					dnsConfig1.RemoteDNSServerIPAddresses = append(dnsConfig1.RemoteDNSServerIPAddresses, types.StringValue(v))
				}

				r.AwsTransitGatewayResponse.DNSConfig = append(r.AwsTransitGatewayResponse.DNSConfig, dnsConfig1)
			}
			r.AwsTransitGatewayResponse.EntityVersion = types.Int64Value(resp.AwsTransitGatewayResponse.EntityVersion)
			r.EntityVersion = r.AwsTransitGatewayResponse.EntityVersion
			r.AwsTransitGatewayResponse.ID = types.StringValue(resp.AwsTransitGatewayResponse.ID)
			r.ID = r.AwsTransitGatewayResponse.ID
			r.AwsTransitGatewayResponse.Name = types.StringValue(resp.AwsTransitGatewayResponse.Name)
			r.Name = r.AwsTransitGatewayResponse.Name
			r.AwsTransitGatewayResponse.State = types.StringValue(string(resp.AwsTransitGatewayResponse.State))
			if resp.AwsTransitGatewayResponse.StateMetadata == nil {
				r.AwsTransitGatewayResponse.StateMetadata = nil
			} else {
				r.AwsTransitGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AwsTransitGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AwsTransitGatewayResponse.StateMetadata.Reason)
				r.AwsTransitGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AwsTransitGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn = types.StringValue(resp.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.RAMShareArn)
			r.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.TransitGatewayID = types.StringValue(resp.AwsTransitGatewayResponse.TransitGatewayAttachmentConfig.TransitGatewayID)
			r.AwsTransitGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsTransitGatewayResponse.UpdatedAt))
		}
		if resp.AwsVpcPeeringGatewayResponse != nil {
			r.AwsVpcPeeringGatewayResponse = &tfTypes.AwsVpcPeeringGatewayResponse{}
			r.AwsVpcPeeringGatewayResponse.CidrBlocks = make([]types.String, 0, len(resp.AwsVpcPeeringGatewayResponse.CidrBlocks))
			for _, v := range resp.AwsVpcPeeringGatewayResponse.CidrBlocks {
				r.AwsVpcPeeringGatewayResponse.CidrBlocks = append(r.AwsVpcPeeringGatewayResponse.CidrBlocks, types.StringValue(v))
			}
			r.AwsVpcPeeringGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsVpcPeeringGatewayResponse.CreatedAt))
			r.AwsVpcPeeringGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}

			for _, dnsConfigItem2 := range resp.AwsVpcPeeringGatewayResponse.DNSConfig {
				var dnsConfig2 tfTypes.TransitGatewayDNSConfig

				dnsConfig2.DomainProxyList = make([]types.String, 0, len(dnsConfigItem2.DomainProxyList))
				for _, v := range dnsConfigItem2.DomainProxyList {
					dnsConfig2.DomainProxyList = append(dnsConfig2.DomainProxyList, types.StringValue(v))
				}
				dnsConfig2.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem2.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem2.RemoteDNSServerIPAddresses {
					dnsConfig2.RemoteDNSServerIPAddresses = append(dnsConfig2.RemoteDNSServerIPAddresses, types.StringValue(v))
				}

				r.AwsVpcPeeringGatewayResponse.DNSConfig = append(r.AwsVpcPeeringGatewayResponse.DNSConfig, dnsConfig2)
			}
			r.AwsVpcPeeringGatewayResponse.EntityVersion = types.Int64Value(resp.AwsVpcPeeringGatewayResponse.EntityVersion)
			r.EntityVersion = r.AwsVpcPeeringGatewayResponse.EntityVersion
			r.AwsVpcPeeringGatewayResponse.ID = types.StringValue(resp.AwsVpcPeeringGatewayResponse.ID)
			r.ID = r.AwsVpcPeeringGatewayResponse.ID
			r.AwsVpcPeeringGatewayResponse.Name = types.StringValue(resp.AwsVpcPeeringGatewayResponse.Name)
			r.Name = r.AwsVpcPeeringGatewayResponse.Name
			r.AwsVpcPeeringGatewayResponse.State = types.StringValue(string(resp.AwsVpcPeeringGatewayResponse.State))
			if resp.AwsVpcPeeringGatewayResponse.StateMetadata == nil {
				r.AwsVpcPeeringGatewayResponse.StateMetadata = nil
			} else {
				r.AwsVpcPeeringGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AwsVpcPeeringGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AwsVpcPeeringGatewayResponse.StateMetadata.Reason)
				r.AwsVpcPeeringGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AwsVpcPeeringGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerAccountID = types.StringValue(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerAccountID)
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcID = types.StringValue(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcID)
			r.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcRegion = types.StringValue(resp.AwsVpcPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcRegion)
			r.AwsVpcPeeringGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AwsVpcPeeringGatewayResponse.UpdatedAt))
		}
		if resp.AzureTransitGatewayResponse != nil {
			r.AzureTransitGatewayResponse = &tfTypes.AzureTransitGatewayResponse{}
			r.AzureTransitGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.AzureTransitGatewayResponse.CreatedAt))
			r.AzureTransitGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}

			for _, dnsConfigItem3 := range resp.AzureTransitGatewayResponse.DNSConfig {
				var dnsConfig3 tfTypes.TransitGatewayDNSConfig

				dnsConfig3.DomainProxyList = make([]types.String, 0, len(dnsConfigItem3.DomainProxyList))
				for _, v := range dnsConfigItem3.DomainProxyList {
					dnsConfig3.DomainProxyList = append(dnsConfig3.DomainProxyList, types.StringValue(v))
				}
				dnsConfig3.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem3.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem3.RemoteDNSServerIPAddresses {
					dnsConfig3.RemoteDNSServerIPAddresses = append(dnsConfig3.RemoteDNSServerIPAddresses, types.StringValue(v))
				}

				r.AzureTransitGatewayResponse.DNSConfig = append(r.AzureTransitGatewayResponse.DNSConfig, dnsConfig3)
			}
			r.AzureTransitGatewayResponse.EntityVersion = types.Int64Value(resp.AzureTransitGatewayResponse.EntityVersion)
			r.EntityVersion = r.AzureTransitGatewayResponse.EntityVersion
			r.AzureTransitGatewayResponse.ID = types.StringValue(resp.AzureTransitGatewayResponse.ID)
			r.ID = r.AzureTransitGatewayResponse.ID
			r.AzureTransitGatewayResponse.Name = types.StringValue(resp.AzureTransitGatewayResponse.Name)
			r.Name = r.AzureTransitGatewayResponse.Name
			r.AzureTransitGatewayResponse.State = types.StringValue(string(resp.AzureTransitGatewayResponse.State))
			if resp.AzureTransitGatewayResponse.StateMetadata == nil {
				r.AzureTransitGatewayResponse.StateMetadata = nil
			} else {
				r.AzureTransitGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.AzureTransitGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.AzureTransitGatewayResponse.StateMetadata.Reason)
				r.AzureTransitGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.AzureTransitGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.ResourceGroupName = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.ResourceGroupName)
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.SubscriptionID = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.SubscriptionID)
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.TenantID = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.TenantID)
			r.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.VnetName = types.StringValue(resp.AzureTransitGatewayResponse.TransitGatewayAttachmentConfig.VnetName)
			r.AzureTransitGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.AzureTransitGatewayResponse.UpdatedAt))
		}
		if resp.GCPVPCPeeringGatewayResponse != nil {
			r.GCPVPCPeeringGatewayResponse = &tfTypes.GCPVPCPeeringGatewayResponse{}
			r.GCPVPCPeeringGatewayResponse.CreatedAt = types.StringValue(typeconvert.TimeToString(resp.GCPVPCPeeringGatewayResponse.CreatedAt))
			r.GCPVPCPeeringGatewayResponse.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}

			for _, dnsConfigItem4 := range resp.GCPVPCPeeringGatewayResponse.DNSConfig {
				var dnsConfig4 tfTypes.TransitGatewayDNSConfig

				dnsConfig4.DomainProxyList = make([]types.String, 0, len(dnsConfigItem4.DomainProxyList))
				for _, v := range dnsConfigItem4.DomainProxyList {
					dnsConfig4.DomainProxyList = append(dnsConfig4.DomainProxyList, types.StringValue(v))
				}
				dnsConfig4.RemoteDNSServerIPAddresses = make([]types.String, 0, len(dnsConfigItem4.RemoteDNSServerIPAddresses))
				for _, v := range dnsConfigItem4.RemoteDNSServerIPAddresses {
					dnsConfig4.RemoteDNSServerIPAddresses = append(dnsConfig4.RemoteDNSServerIPAddresses, types.StringValue(v))
				}

				r.GCPVPCPeeringGatewayResponse.DNSConfig = append(r.GCPVPCPeeringGatewayResponse.DNSConfig, dnsConfig4)
			}
			r.GCPVPCPeeringGatewayResponse.EntityVersion = types.Int64Value(resp.GCPVPCPeeringGatewayResponse.EntityVersion)
			r.EntityVersion = r.GCPVPCPeeringGatewayResponse.EntityVersion
			r.GCPVPCPeeringGatewayResponse.ID = types.StringValue(resp.GCPVPCPeeringGatewayResponse.ID)
			r.ID = r.GCPVPCPeeringGatewayResponse.ID
			r.GCPVPCPeeringGatewayResponse.Name = types.StringValue(resp.GCPVPCPeeringGatewayResponse.Name)
			r.Name = r.GCPVPCPeeringGatewayResponse.Name
			r.GCPVPCPeeringGatewayResponse.State = types.StringValue(string(resp.GCPVPCPeeringGatewayResponse.State))
			if resp.GCPVPCPeeringGatewayResponse.StateMetadata == nil {
				r.GCPVPCPeeringGatewayResponse.StateMetadata = nil
			} else {
				r.GCPVPCPeeringGatewayResponse.StateMetadata = &tfTypes.CustomDomainStateMetadata{}
				r.GCPVPCPeeringGatewayResponse.StateMetadata.Reason = types.StringPointerValue(resp.GCPVPCPeeringGatewayResponse.StateMetadata.Reason)
				r.GCPVPCPeeringGatewayResponse.StateMetadata.ReportedStatus = types.StringPointerValue(resp.GCPVPCPeeringGatewayResponse.StateMetadata.ReportedStatus)
			}
			r.GCPVPCPeeringGatewayResponse.TransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.GCPVPCPeeringGatewayResponse.TransitGatewayAttachmentConfig.Kind))
			r.GCPVPCPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerProjectID = types.StringValue(resp.GCPVPCPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerProjectID)
			r.GCPVPCPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcName = types.StringValue(resp.GCPVPCPeeringGatewayResponse.TransitGatewayAttachmentConfig.PeerVpcName)
			r.GCPVPCPeeringGatewayResponse.UpdatedAt = types.StringValue(typeconvert.TimeToString(resp.GCPVPCPeeringGatewayResponse.UpdatedAt))
		}
	}

	return diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsCreateTransitGatewayRequest(ctx context.Context) (*operations.CreateTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	createTransitGatewayRequest, createTransitGatewayRequestDiags := r.ToSharedCreateTransitGatewayRequest(ctx)
	diags.Append(createTransitGatewayRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateTransitGatewayRequest{
		NetworkID:                   networkID,
		CreateTransitGatewayRequest: *createTransitGatewayRequest,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsDeleteTransitGatewayRequest(ctx context.Context) (*operations.DeleteTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	var transitGatewayID string
	transitGatewayID = r.ID.ValueString()

	out := operations.DeleteTransitGatewayRequest{
		NetworkID:        networkID,
		TransitGatewayID: transitGatewayID,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsGetTransitGatewayRequest(ctx context.Context) (*operations.GetTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	var transitGatewayID string
	transitGatewayID = r.ID.ValueString()

	out := operations.GetTransitGatewayRequest{
		NetworkID:        networkID,
		TransitGatewayID: transitGatewayID,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToOperationsUpdateTransitGatewayRequest(ctx context.Context) (*operations.UpdateTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var networkID string
	networkID = r.NetworkID.ValueString()

	var transitGatewayID string
	transitGatewayID = r.ID.ValueString()

	patchTransitGatewayRequest, patchTransitGatewayRequestDiags := r.ToSharedPatchTransitGatewayRequest(ctx)
	diags.Append(patchTransitGatewayRequestDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateTransitGatewayRequest{
		NetworkID:                  networkID,
		TransitGatewayID:           transitGatewayID,
		PatchTransitGatewayRequest: *patchTransitGatewayRequest,
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToSharedCreateTransitGatewayRequest(ctx context.Context) (*shared.CreateTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.CreateTransitGatewayRequest
	var awsTransitGateway *shared.AWSTransitGateway
	if r.AWSTransitGateway != nil {
		var name string
		name = r.AWSTransitGateway.Name.ValueString()

		dnsConfig := make([]shared.TransitGatewayDNSConfig, 0, len(r.AWSTransitGateway.DNSConfig))
		for _, dnsConfigItem := range r.AWSTransitGateway.DNSConfig {
			remoteDNSServerIPAddresses := make([]string, 0, len(dnsConfigItem.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem := range dnsConfigItem.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses = append(remoteDNSServerIPAddresses, remoteDNSServerIPAddressesItem.ValueString())
			}
			domainProxyList := make([]string, 0, len(dnsConfigItem.DomainProxyList))
			for _, domainProxyListItem := range dnsConfigItem.DomainProxyList {
				domainProxyList = append(domainProxyList, domainProxyListItem.ValueString())
			}
			dnsConfig = append(dnsConfig, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses,
				DomainProxyList:            domainProxyList,
			})
		}
		cidrBlocks := make([]string, 0, len(r.AWSTransitGateway.CidrBlocks))
		for _, cidrBlocksItem := range r.AWSTransitGateway.CidrBlocks {
			cidrBlocks = append(cidrBlocks, cidrBlocksItem.ValueString())
		}
		kind := shared.AWSTransitGatewayAttachmentType(r.AWSTransitGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var transitGatewayID string
		transitGatewayID = r.AWSTransitGateway.TransitGatewayAttachmentConfig.TransitGatewayID.ValueString()

		var ramShareArn string
		ramShareArn = r.AWSTransitGateway.TransitGatewayAttachmentConfig.RAMShareArn.ValueString()

		transitGatewayAttachmentConfig := shared.AwsTransitGatewayAttachmentConfig{
			Kind:             kind,
			TransitGatewayID: transitGatewayID,
			RAMShareArn:      ramShareArn,
		}
		awsTransitGateway = &shared.AWSTransitGateway{
			Name:                           name,
			DNSConfig:                      dnsConfig,
			CidrBlocks:                     cidrBlocks,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig,
		}
	}
	if awsTransitGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AWSTransitGateway: awsTransitGateway,
		}
	}
	var awsVpcPeeringGateway *shared.AWSVpcPeeringGateway
	if r.AWSVpcPeeringGateway != nil {
		var name1 string
		name1 = r.AWSVpcPeeringGateway.Name.ValueString()

		dnsConfig1 := make([]shared.TransitGatewayDNSConfig, 0, len(r.AWSVpcPeeringGateway.DNSConfig))
		for _, dnsConfigItem1 := range r.AWSVpcPeeringGateway.DNSConfig {
			remoteDNSServerIPAddresses1 := make([]string, 0, len(dnsConfigItem1.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem1 := range dnsConfigItem1.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses1 = append(remoteDNSServerIPAddresses1, remoteDNSServerIPAddressesItem1.ValueString())
			}
			domainProxyList1 := make([]string, 0, len(dnsConfigItem1.DomainProxyList))
			for _, domainProxyListItem1 := range dnsConfigItem1.DomainProxyList {
				domainProxyList1 = append(domainProxyList1, domainProxyListItem1.ValueString())
			}
			dnsConfig1 = append(dnsConfig1, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses1,
				DomainProxyList:            domainProxyList1,
			})
		}
		cidrBlocks1 := make([]string, 0, len(r.AWSVpcPeeringGateway.CidrBlocks))
		for _, cidrBlocksItem1 := range r.AWSVpcPeeringGateway.CidrBlocks {
			cidrBlocks1 = append(cidrBlocks1, cidrBlocksItem1.ValueString())
		}
		kind1 := shared.AWSVPCPeeringAttachmentConfig(r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var peerAccountID string
		peerAccountID = r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.PeerAccountID.ValueString()

		var peerVpcID string
		peerVpcID = r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.PeerVpcID.ValueString()

		var peerVpcRegion string
		peerVpcRegion = r.AWSVpcPeeringGateway.TransitGatewayAttachmentConfig.PeerVpcRegion.ValueString()

		transitGatewayAttachmentConfig1 := shared.AwsVpcPeeringGatewayAttachmentConfig{
			Kind:          kind1,
			PeerAccountID: peerAccountID,
			PeerVpcID:     peerVpcID,
			PeerVpcRegion: peerVpcRegion,
		}
		awsVpcPeeringGateway = &shared.AWSVpcPeeringGateway{
			Name:                           name1,
			DNSConfig:                      dnsConfig1,
			CidrBlocks:                     cidrBlocks1,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig1,
		}
	}
	if awsVpcPeeringGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AWSVpcPeeringGateway: awsVpcPeeringGateway,
		}
	}
	var awsResourceEndpointGateway *shared.AWSResourceEndpointGateway
	if r.AWSResourceEndpointGateway != nil {
		var name2 string
		name2 = r.AWSResourceEndpointGateway.Name.ValueString()

		dnsConfig2 := make([]shared.TransitGatewayDNSConfig, 0, len(r.AWSResourceEndpointGateway.DNSConfig))
		for _, dnsConfigItem2 := range r.AWSResourceEndpointGateway.DNSConfig {
			remoteDNSServerIPAddresses2 := make([]string, 0, len(dnsConfigItem2.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem2 := range dnsConfigItem2.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses2 = append(remoteDNSServerIPAddresses2, remoteDNSServerIPAddressesItem2.ValueString())
			}
			domainProxyList2 := make([]string, 0, len(dnsConfigItem2.DomainProxyList))
			for _, domainProxyListItem2 := range dnsConfigItem2.DomainProxyList {
				domainProxyList2 = append(domainProxyList2, domainProxyListItem2.ValueString())
			}
			dnsConfig2 = append(dnsConfig2, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses2,
				DomainProxyList:            domainProxyList2,
			})
		}
		kind2 := shared.AWSResourceEndpointAttachmentType(r.AWSResourceEndpointGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var ramShareArn1 string
		ramShareArn1 = r.AWSResourceEndpointGateway.TransitGatewayAttachmentConfig.RAMShareArn.ValueString()

		resourceConfig := make([]shared.AwsResourceEndpointConfig, 0, len(r.AWSResourceEndpointGateway.TransitGatewayAttachmentConfig.ResourceConfig))
		for _, resourceConfigItem := range r.AWSResourceEndpointGateway.TransitGatewayAttachmentConfig.ResourceConfig {
			var resourceConfigID string
			resourceConfigID = resourceConfigItem.ResourceConfigID.ValueString()

			var domainName string
			domainName = resourceConfigItem.DomainName.ValueString()

			resourceConfig = append(resourceConfig, shared.AwsResourceEndpointConfig{
				ResourceConfigID: resourceConfigID,
				DomainName:       domainName,
			})
		}
		transitGatewayAttachmentConfig2 := shared.AwsResourceEndpointAttachmentConfig{
			Kind:           kind2,
			RAMShareArn:    ramShareArn1,
			ResourceConfig: resourceConfig,
		}
		awsResourceEndpointGateway = &shared.AWSResourceEndpointGateway{
			Name:                           name2,
			DNSConfig:                      dnsConfig2,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig2,
		}
	}
	if awsResourceEndpointGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AWSResourceEndpointGateway: awsResourceEndpointGateway,
		}
	}
	var azureTransitGateway *shared.AzureTransitGateway
	if r.AzureTransitGateway != nil {
		var name3 string
		name3 = r.AzureTransitGateway.Name.ValueString()

		dnsConfig3 := make([]shared.TransitGatewayDNSConfig, 0, len(r.AzureTransitGateway.DNSConfig))
		for _, dnsConfigItem3 := range r.AzureTransitGateway.DNSConfig {
			remoteDNSServerIPAddresses3 := make([]string, 0, len(dnsConfigItem3.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem3 := range dnsConfigItem3.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses3 = append(remoteDNSServerIPAddresses3, remoteDNSServerIPAddressesItem3.ValueString())
			}
			domainProxyList3 := make([]string, 0, len(dnsConfigItem3.DomainProxyList))
			for _, domainProxyListItem3 := range dnsConfigItem3.DomainProxyList {
				domainProxyList3 = append(domainProxyList3, domainProxyListItem3.ValueString())
			}
			dnsConfig3 = append(dnsConfig3, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses3,
				DomainProxyList:            domainProxyList3,
			})
		}
		kind3 := shared.AzureVNETPeeringAttachmentType(r.AzureTransitGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var tenantID string
		tenantID = r.AzureTransitGateway.TransitGatewayAttachmentConfig.TenantID.ValueString()

		var subscriptionID string
		subscriptionID = r.AzureTransitGateway.TransitGatewayAttachmentConfig.SubscriptionID.ValueString()

		var resourceGroupName string
		resourceGroupName = r.AzureTransitGateway.TransitGatewayAttachmentConfig.ResourceGroupName.ValueString()

		var vnetName string
		vnetName = r.AzureTransitGateway.TransitGatewayAttachmentConfig.VnetName.ValueString()

		transitGatewayAttachmentConfig3 := shared.AzureVNETPeeringAttachmentConfig{
			Kind:              kind3,
			TenantID:          tenantID,
			SubscriptionID:    subscriptionID,
			ResourceGroupName: resourceGroupName,
			VnetName:          vnetName,
		}
		azureTransitGateway = &shared.AzureTransitGateway{
			Name:                           name3,
			DNSConfig:                      dnsConfig3,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig3,
		}
	}
	if azureTransitGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			AzureTransitGateway: azureTransitGateway,
		}
	}
	var gcpVpcPeeringTransitGateway *shared.GcpVpcPeeringTransitGateway
	if r.GcpVpcPeeringTransitGateway != nil {
		var name4 string
		name4 = r.GcpVpcPeeringTransitGateway.Name.ValueString()

		dnsConfig4 := make([]shared.TransitGatewayDNSConfig, 0, len(r.GcpVpcPeeringTransitGateway.DNSConfig))
		for _, dnsConfigItem4 := range r.GcpVpcPeeringTransitGateway.DNSConfig {
			remoteDNSServerIPAddresses4 := make([]string, 0, len(dnsConfigItem4.RemoteDNSServerIPAddresses))
			for _, remoteDNSServerIPAddressesItem4 := range dnsConfigItem4.RemoteDNSServerIPAddresses {
				remoteDNSServerIPAddresses4 = append(remoteDNSServerIPAddresses4, remoteDNSServerIPAddressesItem4.ValueString())
			}
			domainProxyList4 := make([]string, 0, len(dnsConfigItem4.DomainProxyList))
			for _, domainProxyListItem4 := range dnsConfigItem4.DomainProxyList {
				domainProxyList4 = append(domainProxyList4, domainProxyListItem4.ValueString())
			}
			dnsConfig4 = append(dnsConfig4, shared.TransitGatewayDNSConfig{
				RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses4,
				DomainProxyList:            domainProxyList4,
			})
		}
		kind4 := shared.GCPVPCPeeringAttachmentType(r.GcpVpcPeeringTransitGateway.TransitGatewayAttachmentConfig.Kind.ValueString())
		var peerProjectID string
		peerProjectID = r.GcpVpcPeeringTransitGateway.TransitGatewayAttachmentConfig.PeerProjectID.ValueString()

		var peerVpcName string
		peerVpcName = r.GcpVpcPeeringTransitGateway.TransitGatewayAttachmentConfig.PeerVpcName.ValueString()

		transitGatewayAttachmentConfig4 := shared.GCPVPCPeeringAttachmentConfig{
			Kind:          kind4,
			PeerProjectID: peerProjectID,
			PeerVpcName:   peerVpcName,
		}
		gcpVpcPeeringTransitGateway = &shared.GcpVpcPeeringTransitGateway{
			Name:                           name4,
			DNSConfig:                      dnsConfig4,
			TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig4,
		}
	}
	if gcpVpcPeeringTransitGateway != nil {
		out = shared.CreateTransitGatewayRequest{
			GcpVpcPeeringTransitGateway: gcpVpcPeeringTransitGateway,
		}
	}

	return &out, diags
}

func (r *CloudGatewayTransitGatewayResourceModel) ToSharedPatchTransitGatewayRequest(ctx context.Context) (*shared.PatchTransitGatewayRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.PatchTransitGatewayRequest

	return &out, diags
}
