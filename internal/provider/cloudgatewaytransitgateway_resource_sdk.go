// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/internal/sdk/models/shared"
	"time"
)

func (r *CloudGatewayTransitGatewayResourceModel) ToSharedCreateTransitGatewayRequest() *shared.CreateTransitGatewayRequest {
	name := r.Name.ValueString()
	var cidrBlocks []string = []string{}
	for _, cidrBlocksItem := range r.CidrBlocks {
		cidrBlocks = append(cidrBlocks, cidrBlocksItem.ValueString())
	}
	var transitGatewayAttachmentConfig shared.TransitGatewayAttachmentConfig
	var awsTransitGatewayAttachmentConfig *shared.AwsTransitGatewayAttachmentConfig
	if r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig != nil {
		kind := shared.AWSTransitGatewayAttachmentType(r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.Kind.ValueString())
		transitGatewayID := r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.TransitGatewayID.ValueString()
		ramShareArn := r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.RAMShareArn.ValueString()
		awsTransitGatewayAttachmentConfig = &shared.AwsTransitGatewayAttachmentConfig{
			Kind:             kind,
			TransitGatewayID: transitGatewayID,
			RAMShareArn:      ramShareArn,
		}
	}
	if awsTransitGatewayAttachmentConfig != nil {
		transitGatewayAttachmentConfig = shared.TransitGatewayAttachmentConfig{
			AwsTransitGatewayAttachmentConfig: awsTransitGatewayAttachmentConfig,
		}
	}
	var dnsConfig []shared.TransitGatewayDNSConfig = []shared.TransitGatewayDNSConfig{}
	for _, dnsConfigItem := range r.DNSConfig {
		var remoteDNSServerIPAddresses []string = []string{}
		for _, remoteDNSServerIPAddressesItem := range dnsConfigItem.RemoteDNSServerIPAddresses {
			remoteDNSServerIPAddresses = append(remoteDNSServerIPAddresses, remoteDNSServerIPAddressesItem.ValueString())
		}
		var domainProxyList []string = []string{}
		for _, domainProxyListItem := range dnsConfigItem.DomainProxyList {
			domainProxyList = append(domainProxyList, domainProxyListItem.ValueString())
		}
		dnsConfig = append(dnsConfig, shared.TransitGatewayDNSConfig{
			RemoteDNSServerIPAddresses: remoteDNSServerIPAddresses,
			DomainProxyList:            domainProxyList,
		})
	}
	out := shared.CreateTransitGatewayRequest{
		Name:                           name,
		CidrBlocks:                     cidrBlocks,
		TransitGatewayAttachmentConfig: transitGatewayAttachmentConfig,
		DNSConfig:                      dnsConfig,
	}
	return &out
}

func (r *CloudGatewayTransitGatewayResourceModel) RefreshFromSharedTransitGateway(resp *shared.TransitGateway) {
	if resp != nil {
		r.CidrBlocks = []types.String{}
		for _, v := range resp.CidrBlocks {
			r.CidrBlocks = append(r.CidrBlocks, types.StringValue(v))
		}
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		r.DNSConfig = []tfTypes.TransitGatewayDNSConfig{}
		if len(r.DNSConfig) > len(resp.DNSConfig) {
			r.DNSConfig = r.DNSConfig[:len(resp.DNSConfig)]
		}
		for dnsConfigCount, dnsConfigItem := range resp.DNSConfig {
			var dnsConfig1 tfTypes.TransitGatewayDNSConfig
			dnsConfig1.DomainProxyList = []types.String{}
			for _, v := range dnsConfigItem.DomainProxyList {
				dnsConfig1.DomainProxyList = append(dnsConfig1.DomainProxyList, types.StringValue(v))
			}
			dnsConfig1.RemoteDNSServerIPAddresses = []types.String{}
			for _, v := range dnsConfigItem.RemoteDNSServerIPAddresses {
				dnsConfig1.RemoteDNSServerIPAddresses = append(dnsConfig1.RemoteDNSServerIPAddresses, types.StringValue(v))
			}
			if dnsConfigCount+1 > len(r.DNSConfig) {
				r.DNSConfig = append(r.DNSConfig, dnsConfig1)
			} else {
				r.DNSConfig[dnsConfigCount].DomainProxyList = dnsConfig1.DomainProxyList
				r.DNSConfig[dnsConfigCount].RemoteDNSServerIPAddresses = dnsConfig1.RemoteDNSServerIPAddresses
			}
		}
		r.EntityVersion = types.Int64Value(resp.EntityVersion)
		r.ID = types.StringValue(resp.ID)
		r.Name = types.StringValue(resp.Name)
		r.State = types.StringValue(string(resp.State))
		if resp.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig != nil {
			r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig = &tfTypes.AwsTransitGatewayAttachmentConfig{}
			r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.Kind = types.StringValue(string(resp.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.Kind))
			r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.RAMShareArn = types.StringValue(resp.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.RAMShareArn)
			r.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.TransitGatewayID = types.StringValue(resp.TransitGatewayAttachmentConfig.AwsTransitGatewayAttachmentConfig.TransitGatewayID)
		}
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	}
}
