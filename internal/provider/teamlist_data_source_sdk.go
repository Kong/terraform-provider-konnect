// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/provider/typeconvert"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *TeamListDataSourceModel) ToOperationsListTeamsRequest(ctx context.Context) (*operations.ListTeamsRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	pageSize := new(int64)
	if !r.PageSize.IsUnknown() && !r.PageSize.IsNull() {
		*pageSize = r.PageSize.ValueInt64()
	} else {
		pageSize = nil
	}
	pageNumber := new(int64)
	if !r.PageNumber.IsUnknown() && !r.PageNumber.IsNull() {
		*pageNumber = r.PageNumber.ValueInt64()
	} else {
		pageNumber = nil
	}
	var filter *shared.ListTeamsFilterParameters
	if r.Filter != nil {
		var name *shared.StringFieldFilter
		if r.Filter.Name != nil {
			eq := new(string)
			if !r.Filter.Name.Eq.IsUnknown() && !r.Filter.Name.Eq.IsNull() {
				*eq = r.Filter.Name.Eq.ValueString()
			} else {
				eq = nil
			}
			contains := new(string)
			if !r.Filter.Name.Contains.IsUnknown() && !r.Filter.Name.Contains.IsNull() {
				*contains = r.Filter.Name.Contains.ValueString()
			} else {
				contains = nil
			}
			ocontains := new(string)
			if !r.Filter.Name.Ocontains.IsUnknown() && !r.Filter.Name.Ocontains.IsNull() {
				*ocontains = r.Filter.Name.Ocontains.ValueString()
			} else {
				ocontains = nil
			}
			oeq := new(string)
			if !r.Filter.Name.Oeq.IsUnknown() && !r.Filter.Name.Oeq.IsNull() {
				*oeq = r.Filter.Name.Oeq.ValueString()
			} else {
				oeq = nil
			}
			neq := new(string)
			if !r.Filter.Name.Neq.IsUnknown() && !r.Filter.Name.Neq.IsNull() {
				*neq = r.Filter.Name.Neq.ValueString()
			} else {
				neq = nil
			}
			name = &shared.StringFieldFilter{
				Eq:        eq,
				Contains:  contains,
				Ocontains: ocontains,
				Oeq:       oeq,
				Neq:       neq,
			}
		}
		filter = &shared.ListTeamsFilterParameters{
			Name: name,
		}
	}
	out := operations.ListTeamsRequest{
		PageSize:   pageSize,
		PageNumber: pageNumber,
		Filter:     filter,
	}

	return &out, diags
}

func (r *TeamListDataSourceModel) RefreshFromSharedTeamCollection(ctx context.Context, resp *shared.TeamCollection) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = []tfTypes.Team{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data tfTypes.Team
			data.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(dataItem.CreatedAt))
			data.Description = types.StringPointerValue(dataItem.Description)
			data.ID = types.StringPointerValue(dataItem.ID)
			if len(dataItem.Labels) > 0 {
				data.Labels = make(map[string]types.String, len(dataItem.Labels))
				for key, value := range dataItem.Labels {
					data.Labels[key] = types.StringPointerValue(value)
				}
			}
			data.Name = types.StringPointerValue(dataItem.Name)
			data.SystemTeam = types.BoolPointerValue(dataItem.SystemTeam)
			data.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(dataItem.UpdatedAt))
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data)
			} else {
				r.Data[dataCount].CreatedAt = data.CreatedAt
				r.Data[dataCount].Description = data.Description
				r.Data[dataCount].ID = data.ID
				r.Data[dataCount].Labels = data.Labels
				r.Data[dataCount].Name = data.Name
				r.Data[dataCount].SystemTeam = data.SystemTeam
				r.Data[dataCount].UpdatedAt = data.UpdatedAt
			}
		}
		if resp.Meta == nil {
			r.Meta = nil
		} else {
			r.Meta = &tfTypes.PaginatedMeta{}
			r.Meta.Page.Number = types.Float64Value(resp.Meta.Page.Number)
			r.Meta.Page.Size = types.Float64Value(resp.Meta.Page.Size)
			r.Meta.Page.Total = types.Float64Value(resp.Meta.Page.Total)
		}
	}

	return diags
}
