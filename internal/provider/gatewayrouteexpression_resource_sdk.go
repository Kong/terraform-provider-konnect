// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayRouteExpressionResourceModel) ToSharedRouteExpression() *shared.RouteExpression {
	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	expression := new(string)
	if !r.Expression.IsUnknown() && !r.Expression.IsNull() {
		*expression = r.Expression.ValueString()
	} else {
		expression = nil
	}
	httpsRedirectStatusCode := new(shared.RouteExpressionHTTPSRedirectStatusCode)
	if !r.HTTPSRedirectStatusCode.IsUnknown() && !r.HTTPSRedirectStatusCode.IsNull() {
		*httpsRedirectStatusCode = shared.RouteExpressionHTTPSRedirectStatusCode(r.HTTPSRedirectStatusCode.ValueInt64())
	} else {
		httpsRedirectStatusCode = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	pathHandling := new(shared.RouteExpressionPathHandling)
	if !r.PathHandling.IsUnknown() && !r.PathHandling.IsNull() {
		*pathHandling = shared.RouteExpressionPathHandling(r.PathHandling.ValueString())
	} else {
		pathHandling = nil
	}
	preserveHost := new(bool)
	if !r.PreserveHost.IsUnknown() && !r.PreserveHost.IsNull() {
		*preserveHost = r.PreserveHost.ValueBool()
	} else {
		preserveHost = nil
	}
	priority := new(int64)
	if !r.Priority.IsUnknown() && !r.Priority.IsNull() {
		*priority = r.Priority.ValueInt64()
	} else {
		priority = nil
	}
	var protocols []shared.RouteExpressionProtocols = []shared.RouteExpressionProtocols{}
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.RouteExpressionProtocols(protocolsItem.ValueString()))
	}
	requestBuffering := new(bool)
	if !r.RequestBuffering.IsUnknown() && !r.RequestBuffering.IsNull() {
		*requestBuffering = r.RequestBuffering.ValueBool()
	} else {
		requestBuffering = nil
	}
	responseBuffering := new(bool)
	if !r.ResponseBuffering.IsUnknown() && !r.ResponseBuffering.IsNull() {
		*responseBuffering = r.ResponseBuffering.ValueBool()
	} else {
		responseBuffering = nil
	}
	var service *shared.RouteExpressionService
	if r.Service != nil {
		id1 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id1 = r.Service.ID.ValueString()
		} else {
			id1 = nil
		}
		service = &shared.RouteExpressionService{
			ID: id1,
		}
	}
	stripPath := new(bool)
	if !r.StripPath.IsUnknown() && !r.StripPath.IsNull() {
		*stripPath = r.StripPath.ValueBool()
	} else {
		stripPath = nil
	}
	var tags []string = []string{}
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	out := shared.RouteExpression{
		CreatedAt:               createdAt,
		Expression:              expression,
		HTTPSRedirectStatusCode: httpsRedirectStatusCode,
		ID:                      id,
		Name:                    name,
		PathHandling:            pathHandling,
		PreserveHost:            preserveHost,
		Priority:                priority,
		Protocols:               protocols,
		RequestBuffering:        requestBuffering,
		ResponseBuffering:       responseBuffering,
		Service:                 service,
		StripPath:               stripPath,
		Tags:                    tags,
		UpdatedAt:               updatedAt,
	}
	return &out
}

func (r *GatewayRouteExpressionResourceModel) RefreshFromSharedRouteExpression(resp *shared.RouteExpression) {
	if resp != nil {
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Expression = types.StringPointerValue(resp.Expression)
		if resp.HTTPSRedirectStatusCode != nil {
			r.HTTPSRedirectStatusCode = types.Int64Value(int64(*resp.HTTPSRedirectStatusCode))
		} else {
			r.HTTPSRedirectStatusCode = types.Int64Null()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.PathHandling != nil {
			r.PathHandling = types.StringValue(string(*resp.PathHandling))
		} else {
			r.PathHandling = types.StringNull()
		}
		r.PreserveHost = types.BoolPointerValue(resp.PreserveHost)
		r.Priority = types.Int64PointerValue(resp.Priority)
		if resp.Protocols != nil {
			r.Protocols = make([]types.String, 0, len(resp.Protocols))
			for _, v := range resp.Protocols {
				r.Protocols = append(r.Protocols, types.StringValue(string(v)))
			}
		}
		r.RequestBuffering = types.BoolPointerValue(resp.RequestBuffering)
		r.ResponseBuffering = types.BoolPointerValue(resp.ResponseBuffering)
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.ACLWithoutParentsConsumer{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		r.StripPath = types.BoolPointerValue(resp.StripPath)
		r.Tags = make([]types.String, 0, len(resp.Tags))
		for _, v := range resp.Tags {
			r.Tags = append(r.Tags, types.StringValue(v))
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}
}
