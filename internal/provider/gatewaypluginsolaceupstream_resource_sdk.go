// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayPluginSolaceUpstreamResourceModel) RefreshFromSharedSolaceUpstreamPlugin(ctx context.Context, resp *shared.SolaceUpstreamPlugin) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Config.Message.AckTimeout = types.Int64PointerValue(resp.Config.Message.AckTimeout)
		r.Config.Message.DefaultContent = types.StringPointerValue(resp.Config.Message.DefaultContent)
		if resp.Config.Message.DeliveryMode != nil {
			r.Config.Message.DeliveryMode = types.StringValue(string(*resp.Config.Message.DeliveryMode))
		} else {
			r.Config.Message.DeliveryMode = types.StringNull()
		}
		r.Config.Message.Destinations = []tfTypes.SolaceUpstreamPluginDestinations{}

		for _, destinationsItem := range resp.Config.Message.Destinations {
			var destinations tfTypes.SolaceUpstreamPluginDestinations

			destinations.Name = types.StringValue(destinationsItem.Name)
			if destinationsItem.Type != nil {
				destinations.Type = types.StringValue(string(*destinationsItem.Type))
			} else {
				destinations.Type = types.StringNull()
			}

			r.Config.Message.Destinations = append(r.Config.Message.Destinations, destinations)
		}
		r.Config.Message.DmqEligible = types.BoolPointerValue(resp.Config.Message.DmqEligible)
		r.Config.Message.ForwardBody = types.BoolPointerValue(resp.Config.Message.ForwardBody)
		r.Config.Message.ForwardHeaders = types.BoolPointerValue(resp.Config.Message.ForwardHeaders)
		r.Config.Message.ForwardMethod = types.BoolPointerValue(resp.Config.Message.ForwardMethod)
		r.Config.Message.ForwardURI = types.BoolPointerValue(resp.Config.Message.ForwardURI)
		if resp.Config.Message.Functions != nil {
			r.Config.Message.Functions = make([]types.String, 0, len(resp.Config.Message.Functions))
			for _, v := range resp.Config.Message.Functions {
				r.Config.Message.Functions = append(r.Config.Message.Functions, types.StringValue(v))
			}
		}
		r.Config.Message.Priority = types.Int64PointerValue(resp.Config.Message.Priority)
		r.Config.Message.SenderID = types.StringPointerValue(resp.Config.Message.SenderID)
		r.Config.Message.Tracing = types.BoolPointerValue(resp.Config.Message.Tracing)
		r.Config.Message.TracingSampled = types.BoolPointerValue(resp.Config.Message.TracingSampled)
		r.Config.Message.TTL = types.Int64PointerValue(resp.Config.Message.TTL)
		if resp.Config.Session.Authentication == nil {
			r.Config.Session.Authentication = nil
		} else {
			r.Config.Session.Authentication = &tfTypes.SolaceUpstreamPluginAuthentication{}
			r.Config.Session.Authentication.AccessToken = types.StringPointerValue(resp.Config.Session.Authentication.AccessToken)
			r.Config.Session.Authentication.AccessTokenHeader = types.StringPointerValue(resp.Config.Session.Authentication.AccessTokenHeader)
			r.Config.Session.Authentication.IDToken = types.StringPointerValue(resp.Config.Session.Authentication.IDToken)
			r.Config.Session.Authentication.IDTokenHeader = types.StringPointerValue(resp.Config.Session.Authentication.IDTokenHeader)
			r.Config.Session.Authentication.Password = types.StringPointerValue(resp.Config.Session.Authentication.Password)
			if resp.Config.Session.Authentication.Scheme != nil {
				r.Config.Session.Authentication.Scheme = types.StringValue(string(*resp.Config.Session.Authentication.Scheme))
			} else {
				r.Config.Session.Authentication.Scheme = types.StringNull()
			}
			r.Config.Session.Authentication.Username = types.StringPointerValue(resp.Config.Session.Authentication.Username)
		}
		r.Config.Session.ConnectTimeout = types.Int64PointerValue(resp.Config.Session.ConnectTimeout)
		r.Config.Session.Host = types.StringValue(resp.Config.Session.Host)
		if resp.Config.Session.Properties != nil {
			r.Config.Session.Properties = make(map[string]jsontypes.Normalized, len(resp.Config.Session.Properties))
			for key, value := range resp.Config.Session.Properties {
				result, _ := json.Marshal(value)
				r.Config.Session.Properties[key] = jsontypes.NewNormalizedValue(string(result))
			}
		}
		r.Config.Session.SslValidateCertificate = types.BoolPointerValue(resp.Config.Session.SslValidateCertificate)
		r.Config.Session.VpnName = types.StringPointerValue(resp.Config.Session.VpnName)
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.ID = types.StringPointerValue(resp.ID)
		r.InstanceName = types.StringPointerValue(resp.InstanceName)
		if resp.Ordering == nil {
			r.Ordering = nil
		} else {
			r.Ordering = &tfTypes.ACLPluginOrdering{}
			if resp.Ordering.After == nil {
				r.Ordering.After = nil
			} else {
				r.Ordering.After = &tfTypes.ACLPluginAfter{}
				r.Ordering.After.Access = make([]types.String, 0, len(resp.Ordering.After.Access))
				for _, v := range resp.Ordering.After.Access {
					r.Ordering.After.Access = append(r.Ordering.After.Access, types.StringValue(v))
				}
			}
			if resp.Ordering.Before == nil {
				r.Ordering.Before = nil
			} else {
				r.Ordering.Before = &tfTypes.ACLPluginAfter{}
				r.Ordering.Before.Access = make([]types.String, 0, len(resp.Ordering.Before.Access))
				for _, v := range resp.Ordering.Before.Access {
					r.Ordering.Before.Access = append(r.Ordering.Before.Access, types.StringValue(v))
				}
			}
		}
		if resp.Partials != nil {
			r.Partials = []tfTypes.Partials{}

			for _, partialsItem := range resp.Partials {
				var partials tfTypes.Partials

				partials.ID = types.StringPointerValue(partialsItem.ID)
				partials.Name = types.StringPointerValue(partialsItem.Name)
				partials.Path = types.StringPointerValue(partialsItem.Path)

				r.Partials = append(r.Partials, partials)
			}
		}
		r.Protocols = make([]types.String, 0, len(resp.Protocols))
		for _, v := range resp.Protocols {
			r.Protocols = append(r.Protocols, types.StringValue(string(v)))
		}
		if resp.Route == nil {
			r.Route = nil
		} else {
			r.Route = &tfTypes.Set{}
			r.Route.ID = types.StringPointerValue(resp.Route.ID)
		}
		if resp.Service == nil {
			r.Service = nil
		} else {
			r.Service = &tfTypes.Set{}
			r.Service.ID = types.StringPointerValue(resp.Service.ID)
		}
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayPluginSolaceUpstreamResourceModel) ToOperationsCreateSolaceupstreamPluginRequest(ctx context.Context) (*operations.CreateSolaceupstreamPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	solaceUpstreamPlugin, solaceUpstreamPluginDiags := r.ToSharedSolaceUpstreamPlugin(ctx)
	diags.Append(solaceUpstreamPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateSolaceupstreamPluginRequest{
		ControlPlaneID:       controlPlaneID,
		SolaceUpstreamPlugin: *solaceUpstreamPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceUpstreamResourceModel) ToOperationsDeleteSolaceupstreamPluginRequest(ctx context.Context) (*operations.DeleteSolaceupstreamPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.DeleteSolaceupstreamPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceUpstreamResourceModel) ToOperationsGetSolaceupstreamPluginRequest(ctx context.Context) (*operations.GetSolaceupstreamPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	out := operations.GetSolaceupstreamPluginRequest{
		PluginID:       pluginID,
		ControlPlaneID: controlPlaneID,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceUpstreamResourceModel) ToOperationsUpdateSolaceupstreamPluginRequest(ctx context.Context) (*operations.UpdateSolaceupstreamPluginRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var pluginID string
	pluginID = r.ID.ValueString()

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	solaceUpstreamPlugin, solaceUpstreamPluginDiags := r.ToSharedSolaceUpstreamPlugin(ctx)
	diags.Append(solaceUpstreamPluginDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateSolaceupstreamPluginRequest{
		PluginID:             pluginID,
		ControlPlaneID:       controlPlaneID,
		SolaceUpstreamPlugin: *solaceUpstreamPlugin,
	}

	return &out, diags
}

func (r *GatewayPluginSolaceUpstreamResourceModel) ToSharedSolaceUpstreamPlugin(ctx context.Context) (*shared.SolaceUpstreamPlugin, diag.Diagnostics) {
	var diags diag.Diagnostics

	createdAt := new(int64)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt = r.CreatedAt.ValueInt64()
	} else {
		createdAt = nil
	}
	enabled := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled = r.Enabled.ValueBool()
	} else {
		enabled = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	instanceName := new(string)
	if !r.InstanceName.IsUnknown() && !r.InstanceName.IsNull() {
		*instanceName = r.InstanceName.ValueString()
	} else {
		instanceName = nil
	}
	var ordering *shared.SolaceUpstreamPluginOrdering
	if r.Ordering != nil {
		var after *shared.SolaceUpstreamPluginAfter
		if r.Ordering.After != nil {
			access := make([]string, 0, len(r.Ordering.After.Access))
			for _, accessItem := range r.Ordering.After.Access {
				access = append(access, accessItem.ValueString())
			}
			after = &shared.SolaceUpstreamPluginAfter{
				Access: access,
			}
		}
		var before *shared.SolaceUpstreamPluginBefore
		if r.Ordering.Before != nil {
			access1 := make([]string, 0, len(r.Ordering.Before.Access))
			for _, accessItem1 := range r.Ordering.Before.Access {
				access1 = append(access1, accessItem1.ValueString())
			}
			before = &shared.SolaceUpstreamPluginBefore{
				Access: access1,
			}
		}
		ordering = &shared.SolaceUpstreamPluginOrdering{
			After:  after,
			Before: before,
		}
	}
	var partials []shared.SolaceUpstreamPluginPartials
	if r.Partials != nil {
		partials = make([]shared.SolaceUpstreamPluginPartials, 0, len(r.Partials))
		for _, partialsItem := range r.Partials {
			id1 := new(string)
			if !partialsItem.ID.IsUnknown() && !partialsItem.ID.IsNull() {
				*id1 = partialsItem.ID.ValueString()
			} else {
				id1 = nil
			}
			name := new(string)
			if !partialsItem.Name.IsUnknown() && !partialsItem.Name.IsNull() {
				*name = partialsItem.Name.ValueString()
			} else {
				name = nil
			}
			path := new(string)
			if !partialsItem.Path.IsUnknown() && !partialsItem.Path.IsNull() {
				*path = partialsItem.Path.ValueString()
			} else {
				path = nil
			}
			partials = append(partials, shared.SolaceUpstreamPluginPartials{
				ID:   id1,
				Name: name,
				Path: path,
			})
		}
	}
	var tags []string
	if r.Tags != nil {
		tags = make([]string, 0, len(r.Tags))
		for _, tagsItem := range r.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
	}
	updatedAt := new(int64)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt = r.UpdatedAt.ValueInt64()
	} else {
		updatedAt = nil
	}
	ackTimeout := new(int64)
	if !r.Config.Message.AckTimeout.IsUnknown() && !r.Config.Message.AckTimeout.IsNull() {
		*ackTimeout = r.Config.Message.AckTimeout.ValueInt64()
	} else {
		ackTimeout = nil
	}
	defaultContent := new(string)
	if !r.Config.Message.DefaultContent.IsUnknown() && !r.Config.Message.DefaultContent.IsNull() {
		*defaultContent = r.Config.Message.DefaultContent.ValueString()
	} else {
		defaultContent = nil
	}
	deliveryMode := new(shared.DeliveryMode)
	if !r.Config.Message.DeliveryMode.IsUnknown() && !r.Config.Message.DeliveryMode.IsNull() {
		*deliveryMode = shared.DeliveryMode(r.Config.Message.DeliveryMode.ValueString())
	} else {
		deliveryMode = nil
	}
	destinations := make([]shared.SolaceUpstreamPluginDestinations, 0, len(r.Config.Message.Destinations))
	for _, destinationsItem := range r.Config.Message.Destinations {
		var name1 string
		name1 = destinationsItem.Name.ValueString()

		typeVar := new(shared.SolaceUpstreamPluginType)
		if !destinationsItem.Type.IsUnknown() && !destinationsItem.Type.IsNull() {
			*typeVar = shared.SolaceUpstreamPluginType(destinationsItem.Type.ValueString())
		} else {
			typeVar = nil
		}
		destinations = append(destinations, shared.SolaceUpstreamPluginDestinations{
			Name: name1,
			Type: typeVar,
		})
	}
	dmqEligible := new(bool)
	if !r.Config.Message.DmqEligible.IsUnknown() && !r.Config.Message.DmqEligible.IsNull() {
		*dmqEligible = r.Config.Message.DmqEligible.ValueBool()
	} else {
		dmqEligible = nil
	}
	forwardBody := new(bool)
	if !r.Config.Message.ForwardBody.IsUnknown() && !r.Config.Message.ForwardBody.IsNull() {
		*forwardBody = r.Config.Message.ForwardBody.ValueBool()
	} else {
		forwardBody = nil
	}
	forwardHeaders := new(bool)
	if !r.Config.Message.ForwardHeaders.IsUnknown() && !r.Config.Message.ForwardHeaders.IsNull() {
		*forwardHeaders = r.Config.Message.ForwardHeaders.ValueBool()
	} else {
		forwardHeaders = nil
	}
	forwardMethod := new(bool)
	if !r.Config.Message.ForwardMethod.IsUnknown() && !r.Config.Message.ForwardMethod.IsNull() {
		*forwardMethod = r.Config.Message.ForwardMethod.ValueBool()
	} else {
		forwardMethod = nil
	}
	forwardURI := new(bool)
	if !r.Config.Message.ForwardURI.IsUnknown() && !r.Config.Message.ForwardURI.IsNull() {
		*forwardURI = r.Config.Message.ForwardURI.ValueBool()
	} else {
		forwardURI = nil
	}
	var functions []string
	if r.Config.Message.Functions != nil {
		functions = make([]string, 0, len(r.Config.Message.Functions))
		for _, functionsItem := range r.Config.Message.Functions {
			functions = append(functions, functionsItem.ValueString())
		}
	}
	priority := new(int64)
	if !r.Config.Message.Priority.IsUnknown() && !r.Config.Message.Priority.IsNull() {
		*priority = r.Config.Message.Priority.ValueInt64()
	} else {
		priority = nil
	}
	senderID := new(string)
	if !r.Config.Message.SenderID.IsUnknown() && !r.Config.Message.SenderID.IsNull() {
		*senderID = r.Config.Message.SenderID.ValueString()
	} else {
		senderID = nil
	}
	tracing := new(bool)
	if !r.Config.Message.Tracing.IsUnknown() && !r.Config.Message.Tracing.IsNull() {
		*tracing = r.Config.Message.Tracing.ValueBool()
	} else {
		tracing = nil
	}
	tracingSampled := new(bool)
	if !r.Config.Message.TracingSampled.IsUnknown() && !r.Config.Message.TracingSampled.IsNull() {
		*tracingSampled = r.Config.Message.TracingSampled.ValueBool()
	} else {
		tracingSampled = nil
	}
	ttl := new(int64)
	if !r.Config.Message.TTL.IsUnknown() && !r.Config.Message.TTL.IsNull() {
		*ttl = r.Config.Message.TTL.ValueInt64()
	} else {
		ttl = nil
	}
	message := shared.Message{
		AckTimeout:     ackTimeout,
		DefaultContent: defaultContent,
		DeliveryMode:   deliveryMode,
		Destinations:   destinations,
		DmqEligible:    dmqEligible,
		ForwardBody:    forwardBody,
		ForwardHeaders: forwardHeaders,
		ForwardMethod:  forwardMethod,
		ForwardURI:     forwardURI,
		Functions:      functions,
		Priority:       priority,
		SenderID:       senderID,
		Tracing:        tracing,
		TracingSampled: tracingSampled,
		TTL:            ttl,
	}
	var authentication *shared.SolaceUpstreamPluginAuthentication
	if r.Config.Session.Authentication != nil {
		accessToken := new(string)
		if !r.Config.Session.Authentication.AccessToken.IsUnknown() && !r.Config.Session.Authentication.AccessToken.IsNull() {
			*accessToken = r.Config.Session.Authentication.AccessToken.ValueString()
		} else {
			accessToken = nil
		}
		accessTokenHeader := new(string)
		if !r.Config.Session.Authentication.AccessTokenHeader.IsUnknown() && !r.Config.Session.Authentication.AccessTokenHeader.IsNull() {
			*accessTokenHeader = r.Config.Session.Authentication.AccessTokenHeader.ValueString()
		} else {
			accessTokenHeader = nil
		}
		idToken := new(string)
		if !r.Config.Session.Authentication.IDToken.IsUnknown() && !r.Config.Session.Authentication.IDToken.IsNull() {
			*idToken = r.Config.Session.Authentication.IDToken.ValueString()
		} else {
			idToken = nil
		}
		idTokenHeader := new(string)
		if !r.Config.Session.Authentication.IDTokenHeader.IsUnknown() && !r.Config.Session.Authentication.IDTokenHeader.IsNull() {
			*idTokenHeader = r.Config.Session.Authentication.IDTokenHeader.ValueString()
		} else {
			idTokenHeader = nil
		}
		password := new(string)
		if !r.Config.Session.Authentication.Password.IsUnknown() && !r.Config.Session.Authentication.Password.IsNull() {
			*password = r.Config.Session.Authentication.Password.ValueString()
		} else {
			password = nil
		}
		scheme := new(shared.Scheme)
		if !r.Config.Session.Authentication.Scheme.IsUnknown() && !r.Config.Session.Authentication.Scheme.IsNull() {
			*scheme = shared.Scheme(r.Config.Session.Authentication.Scheme.ValueString())
		} else {
			scheme = nil
		}
		username := new(string)
		if !r.Config.Session.Authentication.Username.IsUnknown() && !r.Config.Session.Authentication.Username.IsNull() {
			*username = r.Config.Session.Authentication.Username.ValueString()
		} else {
			username = nil
		}
		authentication = &shared.SolaceUpstreamPluginAuthentication{
			AccessToken:       accessToken,
			AccessTokenHeader: accessTokenHeader,
			IDToken:           idToken,
			IDTokenHeader:     idTokenHeader,
			Password:          password,
			Scheme:            scheme,
			Username:          username,
		}
	}
	connectTimeout := new(int64)
	if !r.Config.Session.ConnectTimeout.IsUnknown() && !r.Config.Session.ConnectTimeout.IsNull() {
		*connectTimeout = r.Config.Session.ConnectTimeout.ValueInt64()
	} else {
		connectTimeout = nil
	}
	var host string
	host = r.Config.Session.Host.ValueString()

	properties := make(map[string]interface{})
	for propertiesKey, propertiesValue := range r.Config.Session.Properties {
		var propertiesInst interface{}
		_ = json.Unmarshal([]byte(propertiesValue.ValueString()), &propertiesInst)
		properties[propertiesKey] = propertiesInst
	}
	sslValidateCertificate := new(bool)
	if !r.Config.Session.SslValidateCertificate.IsUnknown() && !r.Config.Session.SslValidateCertificate.IsNull() {
		*sslValidateCertificate = r.Config.Session.SslValidateCertificate.ValueBool()
	} else {
		sslValidateCertificate = nil
	}
	vpnName := new(string)
	if !r.Config.Session.VpnName.IsUnknown() && !r.Config.Session.VpnName.IsNull() {
		*vpnName = r.Config.Session.VpnName.ValueString()
	} else {
		vpnName = nil
	}
	session := shared.Session{
		Authentication:         authentication,
		ConnectTimeout:         connectTimeout,
		Host:                   host,
		Properties:             properties,
		SslValidateCertificate: sslValidateCertificate,
		VpnName:                vpnName,
	}
	config := shared.SolaceUpstreamPluginConfig{
		Message: message,
		Session: session,
	}
	protocols := make([]shared.SolaceUpstreamPluginProtocols, 0, len(r.Protocols))
	for _, protocolsItem := range r.Protocols {
		protocols = append(protocols, shared.SolaceUpstreamPluginProtocols(protocolsItem.ValueString()))
	}
	var route *shared.SolaceUpstreamPluginRoute
	if r.Route != nil {
		id2 := new(string)
		if !r.Route.ID.IsUnknown() && !r.Route.ID.IsNull() {
			*id2 = r.Route.ID.ValueString()
		} else {
			id2 = nil
		}
		route = &shared.SolaceUpstreamPluginRoute{
			ID: id2,
		}
	}
	var service *shared.SolaceUpstreamPluginService
	if r.Service != nil {
		id3 := new(string)
		if !r.Service.ID.IsUnknown() && !r.Service.ID.IsNull() {
			*id3 = r.Service.ID.ValueString()
		} else {
			id3 = nil
		}
		service = &shared.SolaceUpstreamPluginService{
			ID: id3,
		}
	}
	out := shared.SolaceUpstreamPlugin{
		CreatedAt:    createdAt,
		Enabled:      enabled,
		ID:           id,
		InstanceName: instanceName,
		Ordering:     ordering,
		Partials:     partials,
		Tags:         tags,
		UpdatedAt:    updatedAt,
		Config:       config,
		Protocols:    protocols,
		Route:        route,
		Service:      service,
	}

	return &out, diags
}
