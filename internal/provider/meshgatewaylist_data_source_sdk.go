// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"math/big"
)

func (r *MeshGatewayListDataSourceModel) RefreshFromSharedMeshGatewayList(resp *shared.MeshGatewayList) {
	if resp != nil {
		r.Items = []tfTypes.MeshGatewayItem{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items1 tfTypes.MeshGatewayItem
			if itemsItem.Conf == nil {
				items1.Conf = nil
			} else {
				items1.Conf = &tfTypes.Conf{}
				items1.Conf.Listeners = []tfTypes.Listeners{}
				for listenersCount, listenersItem := range itemsItem.Conf.Listeners {
					var listeners1 tfTypes.Listeners
					listeners1.CrossMesh = types.BoolPointerValue(listenersItem.CrossMesh)
					listeners1.Hostname = types.StringPointerValue(listenersItem.Hostname)
					listeners1.Port = types.Int64PointerValue(listenersItem.Port)
					if listenersItem.Protocol == nil {
						listeners1.Protocol = nil
					} else {
						listeners1.Protocol = &tfTypes.Mode{}
						if listenersItem.Protocol.Str != nil {
							listeners1.Protocol.Str = types.StringPointerValue(listenersItem.Protocol.Str)
						}
						if listenersItem.Protocol.Integer != nil {
							listeners1.Protocol.Integer = types.Int64PointerValue(listenersItem.Protocol.Integer)
						}
					}
					if listenersItem.Resources == nil {
						listeners1.Resources = nil
					} else {
						listeners1.Resources = &tfTypes.Resources{}
						listeners1.Resources.ConnectionLimit = types.Int64PointerValue(listenersItem.Resources.ConnectionLimit)
					}
					if len(listenersItem.Tags) > 0 {
						listeners1.Tags = make(map[string]types.String, len(listenersItem.Tags))
						for key, value := range listenersItem.Tags {
							listeners1.Tags[key] = types.StringValue(value)
						}
					}
					if listenersItem.TLS == nil {
						listeners1.TLS = nil
					} else {
						listeners1.TLS = &tfTypes.MeshGatewayItemTLS{}
						listeners1.TLS.Certificates = []tfTypes.AccessKey{}
						for certificatesCount, certificatesItem := range listenersItem.TLS.Certificates {
							var certificates1 tfTypes.AccessKey
							typeVarResult, _ := json.Marshal(certificatesItem.Type)
							certificates1.Type = types.StringValue(string(typeVarResult))
							if certificatesCount+1 > len(listeners1.TLS.Certificates) {
								listeners1.TLS.Certificates = append(listeners1.TLS.Certificates, certificates1)
							} else {
								listeners1.TLS.Certificates[certificatesCount].Type = certificates1.Type
							}
						}
						if listenersItem.TLS.Mode == nil {
							listeners1.TLS.Mode = nil
						} else {
							listeners1.TLS.Mode = &tfTypes.Mode{}
							if listenersItem.TLS.Mode.Str != nil {
								listeners1.TLS.Mode.Str = types.StringPointerValue(listenersItem.TLS.Mode.Str)
							}
							if listenersItem.TLS.Mode.Integer != nil {
								listeners1.TLS.Mode.Integer = types.Int64PointerValue(listenersItem.TLS.Mode.Integer)
							}
						}
						if listenersItem.TLS.Options == nil {
							listeners1.TLS.Options = nil
						} else {
							listeners1.TLS.Options = &tfTypes.Metadata{}
						}
					}
					if listenersCount+1 > len(items1.Conf.Listeners) {
						items1.Conf.Listeners = append(items1.Conf.Listeners, listeners1)
					} else {
						items1.Conf.Listeners[listenersCount].CrossMesh = listeners1.CrossMesh
						items1.Conf.Listeners[listenersCount].Hostname = listeners1.Hostname
						items1.Conf.Listeners[listenersCount].Port = listeners1.Port
						items1.Conf.Listeners[listenersCount].Protocol = listeners1.Protocol
						items1.Conf.Listeners[listenersCount].Resources = listeners1.Resources
						items1.Conf.Listeners[listenersCount].Tags = listeners1.Tags
						items1.Conf.Listeners[listenersCount].TLS = listeners1.TLS
					}
				}
			}
			if len(itemsItem.Labels) > 0 {
				items1.Labels = make(map[string]types.String, len(itemsItem.Labels))
				for key1, value1 := range itemsItem.Labels {
					items1.Labels[key1] = types.StringValue(value1)
				}
			}
			items1.Mesh = types.StringValue(itemsItem.Mesh)
			items1.Name = types.StringValue(itemsItem.Name)
			items1.Selectors = []tfTypes.Selectors{}
			for selectorsCount, selectorsItem := range itemsItem.Selectors {
				var selectors1 tfTypes.Selectors
				if len(selectorsItem.Match) > 0 {
					selectors1.Match = make(map[string]types.String, len(selectorsItem.Match))
					for key2, value2 := range selectorsItem.Match {
						selectors1.Match[key2] = types.StringValue(value2)
					}
				}
				if selectorsCount+1 > len(items1.Selectors) {
					items1.Selectors = append(items1.Selectors, selectors1)
				} else {
					items1.Selectors[selectorsCount].Match = selectors1.Match
				}
			}
			if len(itemsItem.Tags) > 0 {
				items1.Tags = make(map[string]types.String, len(itemsItem.Tags))
				for key3, value3 := range itemsItem.Tags {
					items1.Tags[key3] = types.StringValue(value3)
				}
			}
			items1.Type = types.StringValue(itemsItem.Type)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items1)
			} else {
				r.Items[itemsCount].Conf = items1.Conf
				r.Items[itemsCount].Labels = items1.Labels
				r.Items[itemsCount].Mesh = items1.Mesh
				r.Items[itemsCount].Name = items1.Name
				r.Items[itemsCount].Selectors = items1.Selectors
				r.Items[itemsCount].Tags = items1.Tags
				r.Items[itemsCount].Type = items1.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		if resp.Total != nil {
			r.Total = types.NumberValue(big.NewFloat(float64(*resp.Total)))
		} else {
			r.Total = types.NumberNull()
		}
	}
}
