// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-konnect/v2/internal/provider/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/validators"
	speakeasy_objectvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/kong/terraform-provider-konnect/v2/internal/validators/stringvalidators"
	"regexp"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &MeshRetryResource{}
var _ resource.ResourceWithImportState = &MeshRetryResource{}

func NewMeshRetryResource() resource.Resource {
	return &MeshRetryResource{}
}

// MeshRetryResource defines the resource implementation.
type MeshRetryResource struct {
	client *sdk.Konnect
}

// MeshRetryResourceModel describes the resource data model.
type MeshRetryResourceModel struct {
	CpID             types.String              `tfsdk:"cp_id"`
	CreationTime     types.String              `tfsdk:"creation_time"`
	Labels           map[string]types.String   `tfsdk:"labels"`
	Mesh             types.String              `tfsdk:"mesh"`
	ModificationTime types.String              `tfsdk:"modification_time"`
	Name             types.String              `tfsdk:"name"`
	Spec             tfTypes.MeshRetryItemSpec `tfsdk:"spec"`
	Type             types.String              `tfsdk:"type"`
	Warnings         []types.String            `tfsdk:"warnings"`
}

func (r *MeshRetryResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mesh_retry"
}

func (r *MeshRetryResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "MeshRetry Resource",
		Attributes: map[string]schema.Attribute{
			"cp_id": schema.StringAttribute{
				Required:    true,
				Description: `Id of the Konnect resource`,
			},
			"creation_time": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Time at which the resource was created`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Description: `The labels to help identity resources`,
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `name of the mesh`,
			},
			"modification_time": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Time at which the resource was updated`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `name of the MeshRetry`,
			},
			"spec": schema.SingleNestedAttribute{
				Required: true,
				Attributes: map[string]schema.Attribute{
					"target_ref": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"kind": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"Mesh",
										"MeshSubset",
										"MeshGateway",
										"MeshService",
										"MeshExternalService",
										"MeshMultiZoneService",
										"MeshServiceSubset",
										"MeshHTTPRoute",
										"Dataplane",
									),
								},
							},
							"labels": schema.MapAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
									`Name and Namespace can be used.`,
							},
							"mesh": schema.StringAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Mesh is reserved for future use to identify cross mesh resources.`,
							},
							"name": schema.StringAttribute{
								Computed: true,
								Optional: true,
								MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
									`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
							},
							"namespace": schema.StringAttribute{
								Computed: true,
								Optional: true,
								MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
									`will be targeted.`,
							},
							"proxy_types": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
									`all data plane types are targeted by the policy.`,
								Validators: []validator.List{
									listvalidator.SizeAtLeast(1),
								},
							},
							"section_name": schema.StringAttribute{
								Computed: true,
								Optional: true,
								MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
									`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
							},
							"tags": schema.MapAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
									`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
							},
						},
						MarkdownDescription: `TargetRef is a reference to the resource the policy takes an effect on.` + "\n" +
							`The resource could be either a real store object or virtual resource` + "\n" +
							`defined inplace.`,
					},
					"to": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"default": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"grpc": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"back_off": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"base_interval": schema.StringAttribute{
															Computed: true,
															Optional: true,
															MarkdownDescription: `BaseInterval is an amount of time which should be taken between retries.` + "\n" +
																`Must be greater than zero. Values less than 1 ms are rounded up to 1 ms.`,
														},
														"max_interval": schema.StringAttribute{
															Computed: true,
															Optional: true,
															MarkdownDescription: `MaxInterval is a maximal amount of time which will be taken between retries.` + "\n" +
																`Default is 10 times the "BaseInterval".`,
														},
													},
													MarkdownDescription: `BackOff is a configuration of durations which will be used in an exponential` + "\n" +
														`backoff strategy between retries.`,
												},
												"num_retries": schema.Int64Attribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `NumRetries is the number of attempts that will be made on failed (and` + "\n" +
														`retriable) requests. If not set, the default value is 1.`,
												},
												"per_try_timeout": schema.StringAttribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `PerTryTimeout is the maximum amount of time each retry attempt can take` + "\n" +
														`before it times out. If not set, the global request timeout for the route` + "\n" +
														`will be used. Setting this value to 0 will disable the per-try timeout.`,
												},
												"rate_limited_back_off": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"max_interval": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `MaxInterval is a maximal amount of time which will be taken between retries.`,
														},
														"reset_headers": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"format": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `The format of the reset header. Not Null; must be one of ["Seconds", "UnixTimestamp"]`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.OneOf(
																				"Seconds",
																				"UnixTimestamp",
																			),
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `The Name of the reset header. Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.UTF8LengthBetween(1, 256),
																			stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																		},
																	},
																},
															},
															MarkdownDescription: `ResetHeaders specifies the list of headers (like Retry-After or X-RateLimit-Reset)` + "\n" +
																`to match against the response. Headers are tried in order, and matched` + "\n" +
																`case-insensitive. The first header to be parsed successfully is used.` + "\n" +
																`If no headers match the default exponential BackOff is used instead.`,
														},
													},
													MarkdownDescription: `RateLimitedBackOff is a configuration of backoff which will be used when` + "\n" +
														`the upstream returns one of the headers configured.`,
												},
												"retry_on": schema.ListAttribute{
													Computed:    true,
													Optional:    true,
													ElementType: types.StringType,
													Description: `RetryOn is a list of conditions which will cause a retry.`,
												},
											},
											Description: `GRPC defines a configuration of retries for GRPC traffic`,
										},
										"http": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"back_off": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"base_interval": schema.StringAttribute{
															Computed: true,
															Optional: true,
															MarkdownDescription: `BaseInterval is an amount of time which should be taken between retries.` + "\n" +
																`Must be greater than zero. Values less than 1 ms are rounded up to 1 ms.`,
														},
														"max_interval": schema.StringAttribute{
															Computed: true,
															Optional: true,
															MarkdownDescription: `MaxInterval is a maximal amount of time which will be taken between retries.` + "\n" +
																`Default is 10 times the "BaseInterval".`,
														},
													},
													MarkdownDescription: `BackOff is a configuration of durations which will be used in exponential` + "\n" +
														`backoff strategy between retries.`,
												},
												"host_selection": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"predicate": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Type is requested predicate mode. Not Null; must be one of ["OmitPreviousHosts", "OmitHostsWithTags", "OmitPreviousPriorities"]`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.OneOf(
																		"OmitPreviousHosts",
																		"OmitHostsWithTags",
																		"OmitPreviousPriorities",
																	),
																},
															},
															"tags": schema.MapAttribute{
																Computed:    true,
																Optional:    true,
																ElementType: types.StringType,
																MarkdownDescription: `Tags is a map of metadata to match against for selecting the omitted hosts. Required if Type is` + "\n" +
																	`OmitHostsWithTags`,
															},
															"update_frequency": schema.Int64Attribute{
																Computed: true,
																Optional: true,
																MarkdownDescription: `UpdateFrequency is how often the priority load should be updated based on previously attempted priorities.` + "\n" +
																	`Used for OmitPreviousPriorities.`,
															},
														},
													},
													MarkdownDescription: `HostSelection is a list of predicates that dictate how hosts should be selected` + "\n" +
														`when requests are retried.`,
												},
												"host_selection_max_attempts": schema.Int64Attribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `HostSelectionMaxAttempts is the maximum number of times host selection will be` + "\n" +
														`reattempted before giving up, at which point the host that was last selected will` + "\n" +
														`be routed to. If unspecified, this will default to retrying once.`,
												},
												"num_retries": schema.Int64Attribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `NumRetries is the number of attempts that will be made on failed (and` + "\n" +
														`retriable) requests.  If not set, the default value is 1.`,
												},
												"per_try_timeout": schema.StringAttribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `PerTryTimeout is the amount of time after which retry attempt should time out.` + "\n" +
														`If left unspecified, the global route timeout for the request will be used.` + "\n" +
														`Consequently, when using a 5xx based retry policy, a request that times out` + "\n" +
														`will not be retried as the total timeout budget would have been exhausted.` + "\n" +
														`Setting this timeout to 0 will disable it.`,
												},
												"rate_limited_back_off": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"max_interval": schema.StringAttribute{
															Computed:    true,
															Optional:    true,
															Description: `MaxInterval is a maximal amount of time which will be taken between retries.`,
														},
														"reset_headers": schema.ListNestedAttribute{
															Computed: true,
															Optional: true,
															NestedObject: schema.NestedAttributeObject{
																Validators: []validator.Object{
																	speakeasy_objectvalidators.NotNull(),
																},
																Attributes: map[string]schema.Attribute{
																	"format": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `The format of the reset header. Not Null; must be one of ["Seconds", "UnixTimestamp"]`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.OneOf(
																				"Seconds",
																				"UnixTimestamp",
																			),
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed:    true,
																		Optional:    true,
																		Description: `The Name of the reset header. Not Null`,
																		Validators: []validator.String{
																			speakeasy_stringvalidators.NotNull(),
																			stringvalidator.UTF8LengthBetween(1, 256),
																			stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																		},
																	},
																},
															},
															MarkdownDescription: `ResetHeaders specifies the list of headers (like Retry-After or X-RateLimit-Reset)` + "\n" +
																`to match against the response. Headers are tried in order, and matched` + "\n" +
																`case-insensitive. The first header to be parsed successfully is used.` + "\n" +
																`If no headers match the default exponential BackOff is used instead.`,
														},
													},
													MarkdownDescription: `RateLimitedBackOff is a configuration of backoff which will be used` + "\n" +
														`when the upstream returns one of the headers configured.`,
												},
												"retriable_request_headers": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"name": schema.StringAttribute{
																Computed: true,
																Optional: true,
																MarkdownDescription: `Name is the name of the HTTP Header to be matched. Name MUST be lower case` + "\n" +
																	`as they will be handled with case insensitivity (See https://tools.ietf.org/html/rfc7230#section-3.2).` + "\n" +
																	`Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.UTF8LengthBetween(1, 256),
																	stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																},
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Type specifies how to match against the value of the header. must be one of ["Exact", "Present", "RegularExpression", "Absent", "Prefix"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"Exact",
																		"Present",
																		"RegularExpression",
																		"Absent",
																		"Prefix",
																	),
																},
															},
															"value": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Value is the value of HTTP Header to be matched.`,
															},
														},
													},
													MarkdownDescription: `RetriableRequestHeaders is an HTTP headers which must be present in the request` + "\n" +
														`for retries to be attempted.`,
												},
												"retriable_response_headers": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Validators: []validator.Object{
															speakeasy_objectvalidators.NotNull(),
														},
														Attributes: map[string]schema.Attribute{
															"name": schema.StringAttribute{
																Computed: true,
																Optional: true,
																MarkdownDescription: `Name is the name of the HTTP Header to be matched. Name MUST be lower case` + "\n" +
																	`as they will be handled with case insensitivity (See https://tools.ietf.org/html/rfc7230#section-3.2).` + "\n" +
																	`Not Null`,
																Validators: []validator.String{
																	speakeasy_stringvalidators.NotNull(),
																	stringvalidator.UTF8LengthBetween(1, 256),
																	stringvalidator.RegexMatches(regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`), "must match pattern "+regexp.MustCompile(`^[a-z0-9!#$%&'*+\-.^_\x60|~]+$`).String()),
																},
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Type specifies how to match against the value of the header. must be one of ["Exact", "Present", "RegularExpression", "Absent", "Prefix"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"Exact",
																		"Present",
																		"RegularExpression",
																		"Absent",
																		"Prefix",
																	),
																},
															},
															"value": schema.StringAttribute{
																Computed:    true,
																Optional:    true,
																Description: `Value is the value of HTTP Header to be matched.`,
															},
														},
													},
													MarkdownDescription: `RetriableResponseHeaders is an HTTP response headers that trigger a retry` + "\n" +
														`if present in the response. A retry will be triggered if any of the header` + "\n" +
														`matches the upstream response headers.`,
												},
												"retry_on": schema.ListAttribute{
													Computed:    true,
													Optional:    true,
													ElementType: types.StringType,
													MarkdownDescription: `RetryOn is a list of conditions which will cause a retry. Available values are:` + "\n" +
														`[5XX, GatewayError, Reset, Retriable4xx, ConnectFailure, EnvoyRatelimited,` + "\n" +
														`RefusedStream, Http3PostConnectFailure, HttpMethodConnect, HttpMethodDelete,` + "\n" +
														`HttpMethodGet, HttpMethodHead, HttpMethodOptions, HttpMethodPatch,` + "\n" +
														`HttpMethodPost, HttpMethodPut, HttpMethodTrace].` + "\n" +
														`Also, any HTTP status code (500, 503, etc.).`,
												},
											},
											Description: `HTTP defines a configuration of retries for HTTP traffic`,
										},
										"tcp": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"max_connect_attempt": schema.Int64Attribute{
													Computed: true,
													Optional: true,
													MarkdownDescription: `MaxConnectAttempt is a maximal amount of TCP connection attempts` + "\n" +
														`which will be made before giving up`,
												},
											},
											Description: `TCP defines a configuration of retries for TCP traffic`,
										},
									},
									MarkdownDescription: `Default is a configuration specific to the group of destinations referenced in` + "\n" +
										`'targetRef'`,
								},
								"target_ref": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"kind": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Kind of the referenced resource. must be one of ["Mesh", "MeshSubset", "MeshGateway", "MeshService", "MeshExternalService", "MeshMultiZoneService", "MeshServiceSubset", "MeshHTTPRoute", "Dataplane"]`,
											Validators: []validator.String{
												stringvalidator.OneOf(
													"Mesh",
													"MeshSubset",
													"MeshGateway",
													"MeshService",
													"MeshExternalService",
													"MeshMultiZoneService",
													"MeshServiceSubset",
													"MeshHTTPRoute",
													"Dataplane",
												),
											},
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Labels are used to select group of MeshServices that match labels. Either Labels or` + "\n" +
												`Name and Namespace can be used.`,
										},
										"mesh": schema.StringAttribute{
											Computed:    true,
											Optional:    true,
											Description: `Mesh is reserved for future use to identify cross mesh resources.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `Name of the referenced resource. Can only be used with kinds: ` + "`" + `MeshService` + "`" + `,` + "\n" +
												`` + "`" + `MeshServiceSubset` + "`" + ` and ` + "`" + `MeshGatewayRoute` + "`" + ``,
										},
										"namespace": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `Namespace specifies the namespace of target resource. If empty only resources in policy namespace` + "\n" +
												`will be targeted.`,
										},
										"proxy_types": schema.ListAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `ProxyTypes specifies the data plane types that are subject to the policy. When not specified,` + "\n" +
												`all data plane types are targeted by the policy.`,
											Validators: []validator.List{
												listvalidator.SizeAtLeast(1),
											},
										},
										"section_name": schema.StringAttribute{
											Computed: true,
											Optional: true,
											MarkdownDescription: `SectionName is used to target specific section of resource.` + "\n" +
												`For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.`,
										},
										"tags": schema.MapAttribute{
											Computed:    true,
											Optional:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags used to select a subset of proxies by tags. Can only be used with kinds` + "\n" +
												`` + "`" + `MeshSubset` + "`" + ` and ` + "`" + `MeshServiceSubset` + "`" + ``,
										},
									},
									MarkdownDescription: `TargetRef is a reference to the resource that represents a group of` + "\n" +
										`destinations.` + "\n" +
										`Not Null`,
									Validators: []validator.Object{
										speakeasy_objectvalidators.NotNull(),
									},
								},
							},
						},
						Description: `To list makes a match between the consumed services and corresponding configurations`,
					},
				},
				Description: `Spec is the specification of the Kuma MeshRetry resource.`,
			},
			"type": schema.StringAttribute{
				Required:    true,
				Description: `the type of the resource. must be "MeshRetry"`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"MeshRetry",
					),
				},
			},
			"warnings": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				MarkdownDescription: `warnings is a list of warning messages to return to the requesting Kuma API clients.` + "\n" +
					`Warning messages describe a problem the client making the API request should correct or be aware of.`,
			},
		},
	}
}

func (r *MeshRetryResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Konnect)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.Konnect, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *MeshRetryResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *MeshRetryResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshRetryItem := *data.ToSharedMeshRetryItem()
	request := operations.PutMeshRetryRequest{
		CpID:          cpID,
		Mesh:          mesh,
		Name:          name,
		MeshRetryItem: meshRetryItem,
	}
	res, err := r.client.MeshRetry.PutMeshRetry(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshRetryCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshRetryCreateOrUpdateSuccessResponse(res.MeshRetryCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshRetryRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshRetry.GetMeshRetry(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshRetryItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshRetryItem(res1.MeshRetryItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshRetryResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *MeshRetryResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.GetMeshRetryRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshRetry.GetMeshRetry(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshRetryItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshRetryItem(res.MeshRetryItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshRetryResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *MeshRetryResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	meshRetryItem := *data.ToSharedMeshRetryItem()
	request := operations.PutMeshRetryRequest{
		CpID:          cpID,
		Mesh:          mesh,
		Name:          name,
		MeshRetryItem: meshRetryItem,
	}
	res, err := r.client.MeshRetry.PutMeshRetry(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.MeshRetryCreateOrUpdateSuccessResponse != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedMeshRetryCreateOrUpdateSuccessResponse(res.MeshRetryCreateOrUpdateSuccessResponse)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var cpId1 string
	cpId1 = data.CpID.ValueString()

	var mesh1 string
	mesh1 = data.Mesh.ValueString()

	var name1 string
	name1 = data.Name.ValueString()

	request1 := operations.GetMeshRetryRequest{
		CpID: cpId1,
		Mesh: mesh1,
		Name: name1,
	}
	res1, err := r.client.MeshRetry.GetMeshRetry(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.MeshRetryItem != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedMeshRetryItem(res1.MeshRetryItem)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *MeshRetryResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *MeshRetryResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var cpID string
	cpID = data.CpID.ValueString()

	var mesh string
	mesh = data.Mesh.ValueString()

	var name string
	name = data.Name.ValueString()

	request := operations.DeleteMeshRetryRequest{
		CpID: cpID,
		Mesh: mesh,
		Name: name,
	}
	res, err := r.client.MeshRetry.DeleteMeshRetry(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *MeshRetryResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	dec := json.NewDecoder(bytes.NewReader([]byte(req.ID)))
	dec.DisallowUnknownFields()
	var data struct {
		CpID string `json:"cp_id"`
		Mesh string `json:"mesh"`
		Name string `json:"name"`
	}

	if err := dec.Decode(&data); err != nil {
		resp.Diagnostics.AddError("Invalid ID", `The ID is not valid. It's expected to be a JSON object alike '{ "cp_id": "bf138ba2-c9b1-4229-b268-04d9d8a6410b",  "mesh": "",  "name": ""}': `+err.Error())
		return
	}

	if len(data.CpID) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field cp_id is required but was not found in the json encoded ID. It's expected to be a value alike '"bf138ba2-c9b1-4229-b268-04d9d8a6410b"`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("cp_id"), data.CpID)...)
	if len(data.Mesh) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field mesh is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("mesh"), data.Mesh)...)
	if len(data.Name) == 0 {
		resp.Diagnostics.AddError("Missing required field", `The field name is required but was not found in the json encoded ID. It's expected to be a value alike '""`)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), data.Name)...)

}
