// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
)

func (r *GatewayCustomPluginSchemaResourceModel) RefreshFromSharedItem(ctx context.Context, resp *shared.Item) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.CreatedAt = types.Int64PointerValue(resp.CreatedAt)
		r.LuaSchema = types.StringPointerValue(resp.LuaSchema)
		r.Name = types.StringPointerValue(resp.Name)
		r.UpdatedAt = types.Int64PointerValue(resp.UpdatedAt)
	}

	return diags
}

func (r *GatewayCustomPluginSchemaResourceModel) ToOperationsCreatePluginSchemasRequest(ctx context.Context) (*operations.CreatePluginSchemasRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	createPluginSchemas, createPluginSchemasDiags := r.ToSharedCreatePluginSchemas(ctx)
	diags.Append(createPluginSchemasDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePluginSchemasRequest{
		ControlPlaneID:      controlPlaneID,
		CreatePluginSchemas: createPluginSchemas,
	}

	return &out, diags
}

func (r *GatewayCustomPluginSchemaResourceModel) ToOperationsDeletePluginSchemasRequest(ctx context.Context) (*operations.DeletePluginSchemasRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeletePluginSchemasRequest{
		ControlPlaneID: controlPlaneID,
		Name:           name,
	}

	return &out, diags
}

func (r *GatewayCustomPluginSchemaResourceModel) ToOperationsGetPluginSchemaRequest(ctx context.Context) (*operations.GetPluginSchemaRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetPluginSchemaRequest{
		ControlPlaneID: controlPlaneID,
		Name:           name,
	}

	return &out, diags
}

func (r *GatewayCustomPluginSchemaResourceModel) ToOperationsUpdatePluginSchemasRequest(ctx context.Context) (*operations.UpdatePluginSchemasRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var controlPlaneID string
	controlPlaneID = r.ControlPlaneID.ValueString()

	var name string
	name = r.Name.ValueString()

	createPluginSchemas, createPluginSchemasDiags := r.ToSharedCreatePluginSchemas(ctx)
	diags.Append(createPluginSchemasDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePluginSchemasRequest{
		ControlPlaneID:      controlPlaneID,
		Name:                name,
		CreatePluginSchemas: createPluginSchemas,
	}

	return &out, diags
}

func (r *GatewayCustomPluginSchemaResourceModel) ToSharedCreatePluginSchemas(ctx context.Context) (*shared.CreatePluginSchemas, diag.Diagnostics) {
	var diags diag.Diagnostics

	var luaSchema string
	luaSchema = r.LuaSchema.ValueString()

	out := shared.CreatePluginSchemas{
		LuaSchema: luaSchema,
	}

	return &out, diags
}
