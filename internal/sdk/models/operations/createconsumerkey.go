// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/models/shared"
	"net/http"
)

type CreateConsumerKeyRequest struct {
	// ID of the realm
	RealmID string `pathParam:"style=simple,explode=false,name=realmId"`
	// ID of the of the consumer
	ConsumerID          string                     `pathParam:"style=simple,explode=false,name=consumerId"`
	CreateAPIKeyPayload shared.CreateAPIKeyPayload `request:"mediaType=application/json"`
}

func (o *CreateConsumerKeyRequest) GetRealmID() string {
	if o == nil {
		return ""
	}
	return o.RealmID
}

func (o *CreateConsumerKeyRequest) GetConsumerID() string {
	if o == nil {
		return ""
	}
	return o.ConsumerID
}

func (o *CreateConsumerKeyRequest) GetCreateAPIKeyPayload() shared.CreateAPIKeyPayload {
	if o == nil {
		return shared.CreateAPIKeyPayload{}
	}
	return o.CreateAPIKeyPayload
}

type CreateConsumerKeyResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// success
	CreateAPIKeyResult *shared.CreateAPIKeyResult
	// Bad Request
	BadRequestError *shared.BadRequestError
	// Not Found
	NotFoundError *shared.NotFoundError
}

func (o *CreateConsumerKeyResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateConsumerKeyResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateConsumerKeyResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateConsumerKeyResponse) GetCreateAPIKeyResult() *shared.CreateAPIKeyResult {
	if o == nil {
		return nil
	}
	return o.CreateAPIKeyResult
}

func (o *CreateConsumerKeyResponse) GetBadRequestError() *shared.BadRequestError {
	if o == nil {
		return nil
	}
	return o.BadRequestError
}

func (o *CreateConsumerKeyResponse) GetNotFoundError() *shared.NotFoundError {
	if o == nil {
		return nil
	}
	return o.NotFoundError
}
