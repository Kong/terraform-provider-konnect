// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
	"net/http"
)

type DeleteCmekRequest struct {
	// Customer Managed Encryption Key identifier. This ID is selected from a predefined, Konnect-specific list of allowed values and uniquely identifies a CMEK configuration within a given organization and Konnect region. While not global in function, these IDs behave like scoped namespaces with enforced uniqueness and enumeration constraints.
	ID shared.CmekID `default:"default" pathParam:"style=simple,explode=false,name=cmekId"`
}

func (d DeleteCmekRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DeleteCmekRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"cmekId"}); err != nil {
		return err
	}
	return nil
}

func (d *DeleteCmekRequest) GetID() shared.CmekID {
	if d == nil {
		return shared.CmekID("")
	}
	return d.ID
}

type DeleteCmekResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Unauthorized
	UnauthorizedError *shared.UnauthorizedError
	// Forbidden
	ForbiddenError *shared.ForbiddenError
	// Not Found
	NotFoundError *shared.NotFoundError
}

func (d *DeleteCmekResponse) GetContentType() string {
	if d == nil {
		return ""
	}
	return d.ContentType
}

func (d *DeleteCmekResponse) GetStatusCode() int {
	if d == nil {
		return 0
	}
	return d.StatusCode
}

func (d *DeleteCmekResponse) GetRawResponse() *http.Response {
	if d == nil {
		return nil
	}
	return d.RawResponse
}

func (d *DeleteCmekResponse) GetUnauthorizedError() *shared.UnauthorizedError {
	if d == nil {
		return nil
	}
	return d.UnauthorizedError
}

func (d *DeleteCmekResponse) GetForbiddenError() *shared.ForbiddenError {
	if d == nil {
		return nil
	}
	return d.ForbiddenError
}

func (d *DeleteCmekResponse) GetNotFoundError() *shared.NotFoundError {
	if d == nil {
		return nil
	}
	return d.NotFoundError
}
