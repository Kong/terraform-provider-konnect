// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/models/shared"
	"net/http"
)

var PostTeamsTeamIDSystemAccountsServerList = []string{
	"https://global.api.konghq.com/",
}

type PostTeamsTeamIDSystemAccountsRequest struct {
	// ID of the team.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
	// The request schema for adding a system account to a team.
	AddSystemAccountToTeam *shared.AddSystemAccountToTeam `request:"mediaType=application/json"`
}

func (p *PostTeamsTeamIDSystemAccountsRequest) GetTeamID() string {
	if p == nil {
		return ""
	}
	return p.TeamID
}

func (p *PostTeamsTeamIDSystemAccountsRequest) GetAddSystemAccountToTeam() *shared.AddSystemAccountToTeam {
	if p == nil {
		return nil
	}
	return p.AddSystemAccountToTeam
}

type PostTeamsTeamIDSystemAccountsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Unauthenticated
	UnauthorizedError *shared.UnauthorizedError
	// Not Found
	NotFoundError *shared.NotFoundError
	// Conflict
	ConflictError *shared.ConflictError
}

func (p *PostTeamsTeamIDSystemAccountsResponse) GetContentType() string {
	if p == nil {
		return ""
	}
	return p.ContentType
}

func (p *PostTeamsTeamIDSystemAccountsResponse) GetStatusCode() int {
	if p == nil {
		return 0
	}
	return p.StatusCode
}

func (p *PostTeamsTeamIDSystemAccountsResponse) GetRawResponse() *http.Response {
	if p == nil {
		return nil
	}
	return p.RawResponse
}

func (p *PostTeamsTeamIDSystemAccountsResponse) GetUnauthorizedError() *shared.UnauthorizedError {
	if p == nil {
		return nil
	}
	return p.UnauthorizedError
}

func (p *PostTeamsTeamIDSystemAccountsResponse) GetNotFoundError() *shared.NotFoundError {
	if p == nil {
		return nil
	}
	return p.NotFoundError
}

func (p *PostTeamsTeamIDSystemAccountsResponse) GetConflictError() *shared.ConflictError {
	if p == nil {
		return nil
	}
	return p.ConflictError
}
