// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InvalidRules - invalid parameters rules
type InvalidRules string

const (
	InvalidRulesRequired        InvalidRules = "required"
	InvalidRulesEnum            InvalidRules = "enum"
	InvalidRulesMinLength       InvalidRules = "min_length"
	InvalidRulesMaxLength       InvalidRules = "max_length"
	InvalidRulesMinDigits       InvalidRules = "min_digits"
	InvalidRulesMinLowercase    InvalidRules = "min_lowercase"
	InvalidRulesMinUppercase    InvalidRules = "min_uppercase"
	InvalidRulesMinSymbols      InvalidRules = "min_symbols"
	InvalidRulesIsArray         InvalidRules = "is_array"
	InvalidRulesIsBase64        InvalidRules = "is_base64"
	InvalidRulesIsBoolean       InvalidRules = "is_boolean"
	InvalidRulesIsDateTime      InvalidRules = "is_date_time"
	InvalidRulesIsInteger       InvalidRules = "is_integer"
	InvalidRulesIsNull          InvalidRules = "is_null"
	InvalidRulesIsNumber        InvalidRules = "is_number"
	InvalidRulesIsObject        InvalidRules = "is_object"
	InvalidRulesIsString        InvalidRules = "is_string"
	InvalidRulesIsUUID          InvalidRules = "is_uuid"
	InvalidRulesUnknownProperty InvalidRules = "unknown_property"
	InvalidRulesIsLabel         InvalidRules = "is_label"
	InvalidRulesMatchesRegex    InvalidRules = "matches_regex"
)

func (e InvalidRules) ToPointer() *InvalidRules {
	return &e
}

func (e *InvalidRules) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "required":
		fallthrough
	case "enum":
		fallthrough
	case "min_length":
		fallthrough
	case "max_length":
		fallthrough
	case "min_digits":
		fallthrough
	case "min_lowercase":
		fallthrough
	case "min_uppercase":
		fallthrough
	case "min_symbols":
		fallthrough
	case "is_array":
		fallthrough
	case "is_base64":
		fallthrough
	case "is_boolean":
		fallthrough
	case "is_date_time":
		fallthrough
	case "is_integer":
		fallthrough
	case "is_null":
		fallthrough
	case "is_number":
		fallthrough
	case "is_object":
		fallthrough
	case "is_string":
		fallthrough
	case "is_uuid":
		fallthrough
	case "unknown_property":
		fallthrough
	case "is_label":
		fallthrough
	case "matches_regex":
		*e = InvalidRules(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidRules: %v", v)
	}
}
