// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type KeyAuthConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *KeyAuthConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type KeyAuth struct {
	Consumer *KeyAuthConsumer `json:"consumer"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID  *string `json:"id,omitempty"`
	Key *string `json:"key,omitempty"`
	// A set of strings representing tags.
	Tags []string `json:"tags"`
	// key-auth ttl in seconds
	TTL *int64 `json:"ttl,omitempty"`
}

func (o *KeyAuth) GetConsumer() *KeyAuthConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *KeyAuth) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *KeyAuth) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *KeyAuth) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *KeyAuth) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *KeyAuth) GetTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.TTL
}
