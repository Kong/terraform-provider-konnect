// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type SolaceConsumePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (s *SolaceConsumePluginAfter) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SolaceConsumePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (s *SolaceConsumePluginBefore) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SolaceConsumePluginOrdering struct {
	After  *SolaceConsumePluginAfter  `json:"after,omitempty"`
	Before *SolaceConsumePluginBefore `json:"before,omitempty"`
}

func (s *SolaceConsumePluginOrdering) GetAfter() *SolaceConsumePluginAfter {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *SolaceConsumePluginOrdering) GetBefore() *SolaceConsumePluginBefore {
	if s == nil {
		return nil
	}
	return s.Before
}

type SolaceConsumePluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (s *SolaceConsumePluginPartials) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SolaceConsumePluginPartials) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SolaceConsumePluginPartials) GetPath() *string {
	if s == nil {
		return nil
	}
	return s.Path
}

// AckMode - Controls how acknowledgments are generated for received Guaranteed messages. When set to `AUTO`, the messages are positively acknowledged upon receiving them. When set to 'CLIENT', the messages are positively or negatively acknowledged by Kong regarding to client delivery status.
type AckMode string

const (
	AckModeAuto   AckMode = "AUTO"
	AckModeClient AckMode = "CLIENT"
)

func (e AckMode) ToPointer() *AckMode {
	return &e
}
func (e *AckMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTO":
		fallthrough
	case "CLIENT":
		*e = AckMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AckMode: %v", v)
	}
}

// SolaceConsumePluginType - The type of object to which this Flow is bound.
type SolaceConsumePluginType string

const (
	SolaceConsumePluginTypeQueue SolaceConsumePluginType = "QUEUE"
)

func (e SolaceConsumePluginType) ToPointer() *SolaceConsumePluginType {
	return &e
}
func (e *SolaceConsumePluginType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUE":
		*e = SolaceConsumePluginType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceConsumePluginType: %v", v)
	}
}

type Binds struct {
	// The name of the Queue that is the target of the bind. You can use $(uri_captures['<capture-identifier>']) in this field (replace `<capture-identifier>` with a real value, for example `$uri_captures['queue']` when the matched route has a path `~/(?<queue>[a-z]+)`)
	Name string `json:"name"`
	// The type of object to which this Flow is bound.
	Type *SolaceConsumePluginType `default:"QUEUE" json:"type"`
}

func (b Binds) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *Binds) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (b *Binds) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *Binds) GetType() *SolaceConsumePluginType {
	if b == nil {
		return nil
	}
	return b.Type
}

// Flow - The flow related configuration.
type Flow struct {
	// Controls how acknowledgments are generated for received Guaranteed messages. When set to `AUTO`, the messages are positively acknowledged upon receiving them. When set to 'CLIENT', the messages are positively or negatively acknowledged by Kong regarding to client delivery status.
	AckMode *AckMode `default:"CLIENT" json:"ack_mode"`
	Binds   []Binds  `json:"binds"`
	// The Lua functions that manipulates the message being received from Solace. The `message` variable can be used to access the current message content, and the function can return a new content.
	Functions []string `json:"functions"`
	// This property controls the maximum number of messages that may be unacknowledged on the Flow.
	MaxUnackedMessages *int64 `default:"-1" json:"max_unacked_messages"`
	// Additional Solace flow properties (each setting needs to have `FLOW_` prefix).
	Properties map[string]any `json:"properties,omitempty"`
	// The selector when binding to an endpoint.
	Selector *string `default:"null" json:"selector"`
	// Specifies in milliseconds how long to wait for messages to appear on each poll before giving up or retrying.
	WaitTimeout *int64 `default:"50" json:"wait_timeout"`
	// The Guaranteed message window size for the Flow.
	WindowSize *int64 `default:"255" json:"window_size"`
}

func (f Flow) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *Flow) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"binds"}); err != nil {
		return err
	}
	return nil
}

func (f *Flow) GetAckMode() *AckMode {
	if f == nil {
		return nil
	}
	return f.AckMode
}

func (f *Flow) GetBinds() []Binds {
	if f == nil {
		return []Binds{}
	}
	return f.Binds
}

func (f *Flow) GetFunctions() []string {
	if f == nil {
		return nil
	}
	return f.Functions
}

func (f *Flow) GetMaxUnackedMessages() *int64 {
	if f == nil {
		return nil
	}
	return f.MaxUnackedMessages
}

func (f *Flow) GetProperties() map[string]any {
	if f == nil {
		return nil
	}
	return f.Properties
}

func (f *Flow) GetSelector() *string {
	if f == nil {
		return nil
	}
	return f.Selector
}

func (f *Flow) GetWaitTimeout() *int64 {
	if f == nil {
		return nil
	}
	return f.WaitTimeout
}

func (f *Flow) GetWindowSize() *int64 {
	if f == nil {
		return nil
	}
	return f.WindowSize
}

// SolaceConsumePluginMode - The mode of operation for the plugin. The `AUTO` determines the mode automatically from the client request.
type SolaceConsumePluginMode string

const (
	SolaceConsumePluginModeAuto             SolaceConsumePluginMode = "AUTO"
	SolaceConsumePluginModePolling          SolaceConsumePluginMode = "POLLING"
	SolaceConsumePluginModeServerSentEvents SolaceConsumePluginMode = "SERVER-SENT-EVENTS"
	SolaceConsumePluginModeWebsocket        SolaceConsumePluginMode = "WEBSOCKET"
)

func (e SolaceConsumePluginMode) ToPointer() *SolaceConsumePluginMode {
	return &e
}
func (e *SolaceConsumePluginMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTO":
		fallthrough
	case "POLLING":
		fallthrough
	case "SERVER-SENT-EVENTS":
		fallthrough
	case "WEBSOCKET":
		*e = SolaceConsumePluginMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceConsumePluginMode: %v", v)
	}
}

// Polling - The `POLLING` mode related configuration settings.
type Polling struct {
	// Polling timeout in milliseconds. When set to `0`, the polling works like short-polling and waits at maximum the Flow `wait_timeout` amount of time for the new messages (short-polling). When set to larger than `0`, the connection is kept open and only closed after the timeout or in case messages appear earlier (long-polling).
	Timeout *int64 `default:"0" json:"timeout"`
}

func (p Polling) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Polling) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *Polling) GetTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.Timeout
}

// SolaceConsumePluginScheme - The client authentication scheme used when connection to an event broker.
type SolaceConsumePluginScheme string

const (
	SolaceConsumePluginSchemeBasic  SolaceConsumePluginScheme = "BASIC"
	SolaceConsumePluginSchemeNone   SolaceConsumePluginScheme = "NONE"
	SolaceConsumePluginSchemeOauth2 SolaceConsumePluginScheme = "OAUTH2"
)

func (e SolaceConsumePluginScheme) ToPointer() *SolaceConsumePluginScheme {
	return &e
}
func (e *SolaceConsumePluginScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC":
		fallthrough
	case "NONE":
		fallthrough
	case "OAUTH2":
		*e = SolaceConsumePluginScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceConsumePluginScheme: %v", v)
	}
}

// SolaceConsumePluginAuthentication - Session authentication related configuration.
type SolaceConsumePluginAuthentication struct {
	// The OAuth2 access token used with `OAUTH2` authentication scheme when connecting to an event broker.
	AccessToken       *string `default:"null" json:"access_token"`
	AccessTokenHeader *string `default:"null" json:"access_token_header"`
	// The OpenID Connect ID token used with `OAUTH2` authentication scheme when connecting to an event broker.
	IDToken       *string `default:"null" json:"id_token"`
	IDTokenHeader *string `default:"null" json:"id_token_header"`
	// The password used with `BASIC` authentication scheme when connecting to an event broker.
	Password *string `default:"null" json:"password"`
	// The client authentication scheme used when connection to an event broker.
	Scheme *SolaceConsumePluginScheme `default:"BASIC" json:"scheme"`
	// The username used with `BASIC` authentication scheme when connecting to an event broker.
	Username *string `default:"null" json:"username"`
}

func (s SolaceConsumePluginAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceConsumePluginAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SolaceConsumePluginAuthentication) GetAccessToken() *string {
	if s == nil {
		return nil
	}
	return s.AccessToken
}

func (s *SolaceConsumePluginAuthentication) GetAccessTokenHeader() *string {
	if s == nil {
		return nil
	}
	return s.AccessTokenHeader
}

func (s *SolaceConsumePluginAuthentication) GetIDToken() *string {
	if s == nil {
		return nil
	}
	return s.IDToken
}

func (s *SolaceConsumePluginAuthentication) GetIDTokenHeader() *string {
	if s == nil {
		return nil
	}
	return s.IDTokenHeader
}

func (s *SolaceConsumePluginAuthentication) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SolaceConsumePluginAuthentication) GetScheme() *SolaceConsumePluginScheme {
	if s == nil {
		return nil
	}
	return s.Scheme
}

func (s *SolaceConsumePluginAuthentication) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

// Session related configuration.
type Session struct {
	// Session authentication related configuration.
	Authentication *SolaceConsumePluginAuthentication `json:"authentication"`
	// If this property is true and time-to-live has a positive value in a message, the expiration time is calculated when the message is sent or received
	CalculateMessageExpiry *bool `default:"true" json:"calculate_message_expiry"`
	// The timeout period (in milliseconds) for a connect operation to a given host (per host).
	ConnectTimeout *int64 `default:"3000" json:"connect_timeout"`
	// When enabled, a receive timestamp is recorded for each message.
	GenerateRcvTimestamps *bool `default:"true" json:"generate_rcv_timestamps"`
	// When enabled, a send timestamp is automatically included (if not already present) in the Solace-defined fields for each message sent.
	GenerateSendTimestamps *bool `default:"true" json:"generate_send_timestamps"`
	// When enabled, a sender id is automatically included (if not already present) in the Solace-defined fields for each message sent.
	GenerateSenderID *bool `default:"true" json:"generate_sender_id"`
	// When enabled, a sequence number is automatically included (if not already present) in the Solace-defined fields for each message sent.
	GenerateSequenceNumber *bool `default:"true" json:"generate_sequence_number"`
	// The IPv4 or IPv6 address or host name to connect to (see: https://docs.solace.com/API-Developer-Online-Ref-Documentation/c/index.html#host-entry).
	Host string `json:"host"`
	// Additional Solace session properties (each setting needs to have `SESSION_` prefix).
	Properties map[string]any `json:"properties,omitempty"`
	// Indicates whether the API should validate server certificates with the trusted certificates.
	SslValidateCertificate *bool `default:"false" json:"ssl_validate_certificate"`
	// The name of the Message VPN to attempt to join when connecting to an event broker.
	VpnName *string `default:"null" json:"vpn_name"`
}

func (s Session) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Session) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"host"}); err != nil {
		return err
	}
	return nil
}

func (s *Session) GetAuthentication() *SolaceConsumePluginAuthentication {
	if s == nil {
		return nil
	}
	return s.Authentication
}

func (s *Session) GetCalculateMessageExpiry() *bool {
	if s == nil {
		return nil
	}
	return s.CalculateMessageExpiry
}

func (s *Session) GetConnectTimeout() *int64 {
	if s == nil {
		return nil
	}
	return s.ConnectTimeout
}

func (s *Session) GetGenerateRcvTimestamps() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateRcvTimestamps
}

func (s *Session) GetGenerateSendTimestamps() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateSendTimestamps
}

func (s *Session) GetGenerateSenderID() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateSenderID
}

func (s *Session) GetGenerateSequenceNumber() *bool {
	if s == nil {
		return nil
	}
	return s.GenerateSequenceNumber
}

func (s *Session) GetHost() string {
	if s == nil {
		return ""
	}
	return s.Host
}

func (s *Session) GetProperties() map[string]any {
	if s == nil {
		return nil
	}
	return s.Properties
}

func (s *Session) GetSslValidateCertificate() *bool {
	if s == nil {
		return nil
	}
	return s.SslValidateCertificate
}

func (s *Session) GetVpnName() *string {
	if s == nil {
		return nil
	}
	return s.VpnName
}

// Websocket - The `WEBSOCKET` mode related configuration settings.
type Websocket struct {
	// Specifies the maximal length of payload allowed when receiving WebSocket frames.
	MaxRecvLen *int64 `default:"65536" json:"max_recv_len"`
	// Specifies the maximal length of payload allowed when sending WebSocket frames.
	MaxSendLen *int64 `default:"65536" json:"max_send_len"`
	// Specifies the network timeout threshold in milliseconds.
	Timeout *int64 `default:"1000" json:"timeout"`
}

func (w Websocket) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *Websocket) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (w *Websocket) GetMaxRecvLen() *int64 {
	if w == nil {
		return nil
	}
	return w.MaxRecvLen
}

func (w *Websocket) GetMaxSendLen() *int64 {
	if w == nil {
		return nil
	}
	return w.MaxSendLen
}

func (w *Websocket) GetTimeout() *int64 {
	if w == nil {
		return nil
	}
	return w.Timeout
}

type SolaceConsumePluginConfig struct {
	// The flow related configuration.
	Flow Flow `json:"flow"`
	// The mode of operation for the plugin. The `AUTO` determines the mode automatically from the client request.
	Mode *SolaceConsumePluginMode `default:"POLLING" json:"mode"`
	// The `POLLING` mode related configuration settings.
	Polling *Polling `json:"polling"`
	// Session related configuration.
	Session Session `json:"session"`
	// The `WEBSOCKET` mode related configuration settings.
	Websocket *Websocket `json:"websocket"`
}

func (s SolaceConsumePluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceConsumePluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"flow", "session"}); err != nil {
		return err
	}
	return nil
}

func (s *SolaceConsumePluginConfig) GetFlow() Flow {
	if s == nil {
		return Flow{}
	}
	return s.Flow
}

func (s *SolaceConsumePluginConfig) GetMode() *SolaceConsumePluginMode {
	if s == nil {
		return nil
	}
	return s.Mode
}

func (s *SolaceConsumePluginConfig) GetPolling() *Polling {
	if s == nil {
		return nil
	}
	return s.Polling
}

func (s *SolaceConsumePluginConfig) GetSession() Session {
	if s == nil {
		return Session{}
	}
	return s.Session
}

func (s *SolaceConsumePluginConfig) GetWebsocket() *Websocket {
	if s == nil {
		return nil
	}
	return s.Websocket
}

type SolaceConsumePluginProtocols string

const (
	SolaceConsumePluginProtocolsGrpc  SolaceConsumePluginProtocols = "grpc"
	SolaceConsumePluginProtocolsGrpcs SolaceConsumePluginProtocols = "grpcs"
	SolaceConsumePluginProtocolsHTTP  SolaceConsumePluginProtocols = "http"
	SolaceConsumePluginProtocolsHTTPS SolaceConsumePluginProtocols = "https"
)

func (e SolaceConsumePluginProtocols) ToPointer() *SolaceConsumePluginProtocols {
	return &e
}
func (e *SolaceConsumePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = SolaceConsumePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceConsumePluginProtocols: %v", v)
	}
}

// SolaceConsumePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type SolaceConsumePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (s *SolaceConsumePluginRoute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SolaceConsumePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SolaceConsumePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (s *SolaceConsumePluginService) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SolaceConsumePlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SolaceConsumePlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                      `default:"null" json:"instance_name"`
	name         string                       `const:"solace-consume" json:"name"`
	Ordering     *SolaceConsumePluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []SolaceConsumePluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                    `json:"updated_at,omitempty"`
	Config    SolaceConsumePluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []SolaceConsumePluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *SolaceConsumePluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SolaceConsumePluginService `json:"service"`
}

func (s SolaceConsumePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceConsumePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (s *SolaceConsumePlugin) GetCreatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SolaceConsumePlugin) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *SolaceConsumePlugin) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SolaceConsumePlugin) GetInstanceName() *string {
	if s == nil {
		return nil
	}
	return s.InstanceName
}

func (s *SolaceConsumePlugin) GetName() string {
	return "solace-consume"
}

func (s *SolaceConsumePlugin) GetOrdering() *SolaceConsumePluginOrdering {
	if s == nil {
		return nil
	}
	return s.Ordering
}

func (s *SolaceConsumePlugin) GetPartials() []SolaceConsumePluginPartials {
	if s == nil {
		return nil
	}
	return s.Partials
}

func (s *SolaceConsumePlugin) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *SolaceConsumePlugin) GetUpdatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SolaceConsumePlugin) GetConfig() SolaceConsumePluginConfig {
	if s == nil {
		return SolaceConsumePluginConfig{}
	}
	return s.Config
}

func (s *SolaceConsumePlugin) GetProtocols() []SolaceConsumePluginProtocols {
	if s == nil {
		return nil
	}
	return s.Protocols
}

func (s *SolaceConsumePlugin) GetRoute() *SolaceConsumePluginRoute {
	if s == nil {
		return nil
	}
	return s.Route
}

func (s *SolaceConsumePlugin) GetService() *SolaceConsumePluginService {
	if s == nil {
		return nil
	}
	return s.Service
}
