// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type GrpcWebPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *GrpcWebPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type GrpcWebPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *GrpcWebPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type GrpcWebPluginOrdering struct {
	After  *GrpcWebPluginAfter  `json:"after,omitempty"`
	Before *GrpcWebPluginBefore `json:"before,omitempty"`
}

func (o *GrpcWebPluginOrdering) GetAfter() *GrpcWebPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *GrpcWebPluginOrdering) GetBefore() *GrpcWebPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type GrpcWebPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (g GrpcWebPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GrpcWebPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GrpcWebPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GrpcWebPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GrpcWebPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type GrpcWebPluginConfig struct {
	// The value of the `Access-Control-Allow-Origin` header in the response to the gRPC-Web client.
	AllowOriginHeader *string `default:"*" json:"allow_origin_header"`
	// If set to `true` causes the plugin to pass the stripped request path to the upstream gRPC service.
	PassStrippedPath *bool `default:"null" json:"pass_stripped_path"`
	// If present, describes the gRPC types and methods. Required to support payload transcoding. When absent, the web client must use application/grpw-web+proto content.
	Proto *string `default:"null" json:"proto"`
}

func (g GrpcWebPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GrpcWebPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GrpcWebPluginConfig) GetAllowOriginHeader() *string {
	if o == nil {
		return nil
	}
	return o.AllowOriginHeader
}

func (o *GrpcWebPluginConfig) GetPassStrippedPath() *bool {
	if o == nil {
		return nil
	}
	return o.PassStrippedPath
}

func (o *GrpcWebPluginConfig) GetProto() *string {
	if o == nil {
		return nil
	}
	return o.Proto
}

// GrpcWebPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type GrpcWebPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcWebPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// GrpcWebPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type GrpcWebPluginProtocols string

const (
	GrpcWebPluginProtocolsGrpc           GrpcWebPluginProtocols = "grpc"
	GrpcWebPluginProtocolsGrpcs          GrpcWebPluginProtocols = "grpcs"
	GrpcWebPluginProtocolsHTTP           GrpcWebPluginProtocols = "http"
	GrpcWebPluginProtocolsHTTPS          GrpcWebPluginProtocols = "https"
	GrpcWebPluginProtocolsTCP            GrpcWebPluginProtocols = "tcp"
	GrpcWebPluginProtocolsTLS            GrpcWebPluginProtocols = "tls"
	GrpcWebPluginProtocolsTLSPassthrough GrpcWebPluginProtocols = "tls_passthrough"
	GrpcWebPluginProtocolsUDP            GrpcWebPluginProtocols = "udp"
	GrpcWebPluginProtocolsWs             GrpcWebPluginProtocols = "ws"
	GrpcWebPluginProtocolsWss            GrpcWebPluginProtocols = "wss"
)

func (e GrpcWebPluginProtocols) ToPointer() *GrpcWebPluginProtocols {
	return &e
}
func (e *GrpcWebPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = GrpcWebPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrpcWebPluginProtocols: %v", v)
	}
}

// GrpcWebPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type GrpcWebPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcWebPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// GrpcWebPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type GrpcWebPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcWebPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// GrpcWebPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type GrpcWebPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                `default:"null" json:"instance_name"`
	name         string                 `const:"grpc-web" json:"name"`
	Ordering     *GrpcWebPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []GrpcWebPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64               `json:"updated_at,omitempty"`
	Config    *GrpcWebPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *GrpcWebPluginConsumer `json:"consumer"`
	// A set of strings representing protocols.
	Protocols []GrpcWebPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *GrpcWebPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GrpcWebPluginService `json:"service"`
}

func (g GrpcWebPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GrpcWebPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GrpcWebPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GrpcWebPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *GrpcWebPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GrpcWebPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *GrpcWebPlugin) GetName() string {
	return "grpc-web"
}

func (o *GrpcWebPlugin) GetOrdering() *GrpcWebPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *GrpcWebPlugin) GetPartials() []GrpcWebPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *GrpcWebPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GrpcWebPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GrpcWebPlugin) GetConfig() *GrpcWebPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *GrpcWebPlugin) GetConsumer() *GrpcWebPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *GrpcWebPlugin) GetProtocols() []GrpcWebPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *GrpcWebPlugin) GetRoute() *GrpcWebPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *GrpcWebPlugin) GetService() *GrpcWebPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
