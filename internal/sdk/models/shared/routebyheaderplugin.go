// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type Rules struct {
	Condition    map[string]any `json:"condition"`
	UpstreamName string         `json:"upstream_name"`
}

func (o *Rules) GetCondition() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Condition
}

func (o *Rules) GetUpstreamName() string {
	if o == nil {
		return ""
	}
	return o.UpstreamName
}

type RouteByHeaderPluginConfig struct {
	// Route by header rules.
	Rules []Rules `json:"rules,omitempty"`
}

func (o *RouteByHeaderPluginConfig) GetRules() []Rules {
	if o == nil {
		return nil
	}
	return o.Rules
}

type RouteByHeaderPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *RouteByHeaderPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type RouteByHeaderPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *RouteByHeaderPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type RouteByHeaderPluginOrdering struct {
	After  *RouteByHeaderPluginAfter  `json:"after,omitempty"`
	Before *RouteByHeaderPluginBefore `json:"before,omitempty"`
}

func (o *RouteByHeaderPluginOrdering) GetAfter() *RouteByHeaderPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *RouteByHeaderPluginOrdering) GetBefore() *RouteByHeaderPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type RouteByHeaderPluginProtocols string

const (
	RouteByHeaderPluginProtocolsGrpc           RouteByHeaderPluginProtocols = "grpc"
	RouteByHeaderPluginProtocolsGrpcs          RouteByHeaderPluginProtocols = "grpcs"
	RouteByHeaderPluginProtocolsHTTP           RouteByHeaderPluginProtocols = "http"
	RouteByHeaderPluginProtocolsHTTPS          RouteByHeaderPluginProtocols = "https"
	RouteByHeaderPluginProtocolsTCP            RouteByHeaderPluginProtocols = "tcp"
	RouteByHeaderPluginProtocolsTLS            RouteByHeaderPluginProtocols = "tls"
	RouteByHeaderPluginProtocolsTLSPassthrough RouteByHeaderPluginProtocols = "tls_passthrough"
	RouteByHeaderPluginProtocolsUDP            RouteByHeaderPluginProtocols = "udp"
	RouteByHeaderPluginProtocolsWs             RouteByHeaderPluginProtocols = "ws"
	RouteByHeaderPluginProtocolsWss            RouteByHeaderPluginProtocols = "wss"
)

func (e RouteByHeaderPluginProtocols) ToPointer() *RouteByHeaderPluginProtocols {
	return &e
}
func (e *RouteByHeaderPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = RouteByHeaderPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RouteByHeaderPluginProtocols: %v", v)
	}
}

// RouteByHeaderPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RouteByHeaderPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *RouteByHeaderPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type RouteByHeaderPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *RouteByHeaderPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RouteByHeaderPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type RouteByHeaderPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *RouteByHeaderPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RouteByHeaderPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RouteByHeaderPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *RouteByHeaderPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type RouteByHeaderPlugin struct {
	Config *RouteByHeaderPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                        `json:"enabled,omitempty"`
	ID           *string                      `json:"id,omitempty"`
	InstanceName *string                      `json:"instance_name,omitempty"`
	name         *string                      `const:"route-by-header" json:"name,omitempty"`
	Ordering     *RouteByHeaderPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []RouteByHeaderPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *RouteByHeaderPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *RouteByHeaderPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *RouteByHeaderPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RouteByHeaderPluginService `json:"service,omitempty"`
}

func (r RouteByHeaderPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RouteByHeaderPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RouteByHeaderPlugin) GetConfig() *RouteByHeaderPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *RouteByHeaderPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RouteByHeaderPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *RouteByHeaderPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RouteByHeaderPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *RouteByHeaderPlugin) GetName() *string {
	return types.String("route-by-header")
}

func (o *RouteByHeaderPlugin) GetOrdering() *RouteByHeaderPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *RouteByHeaderPlugin) GetProtocols() []RouteByHeaderPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *RouteByHeaderPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *RouteByHeaderPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RouteByHeaderPlugin) GetConsumer() *RouteByHeaderPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *RouteByHeaderPlugin) GetConsumerGroup() *RouteByHeaderPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *RouteByHeaderPlugin) GetRoute() *RouteByHeaderPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *RouteByHeaderPlugin) GetService() *RouteByHeaderPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
