// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
	"time"
)

// ControlPlaneClusterType - The ClusterType value of the cluster associated with the Control Plane.
type ControlPlaneClusterType string

const (
	ControlPlaneClusterTypeClusterTypeControlPlane         ControlPlaneClusterType = "CLUSTER_TYPE_CONTROL_PLANE"
	ControlPlaneClusterTypeClusterTypeK8SIngressController ControlPlaneClusterType = "CLUSTER_TYPE_K8S_INGRESS_CONTROLLER"
	ControlPlaneClusterTypeClusterTypeControlPlaneGroup    ControlPlaneClusterType = "CLUSTER_TYPE_CONTROL_PLANE_GROUP"
	ControlPlaneClusterTypeClusterTypeServerless           ControlPlaneClusterType = "CLUSTER_TYPE_SERVERLESS"
	ControlPlaneClusterTypeClusterTypeHybrid               ControlPlaneClusterType = "CLUSTER_TYPE_HYBRID"
)

func (e ControlPlaneClusterType) ToPointer() *ControlPlaneClusterType {
	return &e
}
func (e *ControlPlaneClusterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CLUSTER_TYPE_CONTROL_PLANE":
		fallthrough
	case "CLUSTER_TYPE_K8S_INGRESS_CONTROLLER":
		fallthrough
	case "CLUSTER_TYPE_CONTROL_PLANE_GROUP":
		fallthrough
	case "CLUSTER_TYPE_SERVERLESS":
		fallthrough
	case "CLUSTER_TYPE_HYBRID":
		*e = ControlPlaneClusterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ControlPlaneClusterType: %v", v)
	}
}

// ControlPlaneAuthType - The auth type value of the cluster associated with the Runtime Group.
type ControlPlaneAuthType string

const (
	ControlPlaneAuthTypePinnedClientCerts ControlPlaneAuthType = "pinned_client_certs"
	ControlPlaneAuthTypePkiClientCerts    ControlPlaneAuthType = "pki_client_certs"
)

func (e ControlPlaneAuthType) ToPointer() *ControlPlaneAuthType {
	return &e
}
func (e *ControlPlaneAuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pinned_client_certs":
		fallthrough
	case "pki_client_certs":
		*e = ControlPlaneAuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ControlPlaneAuthType: %v", v)
	}
}

// Config - CP configuration object for related access endpoints.
type Config struct {
	// Control Plane Endpoint.
	ControlPlaneEndpoint string `json:"control_plane_endpoint"`
	// Telemetry Endpoint.
	TelemetryEndpoint string `json:"telemetry_endpoint"`
	// The ClusterType value of the cluster associated with the Control Plane.
	ClusterType ControlPlaneClusterType `json:"cluster_type"`
	// The auth type value of the cluster associated with the Runtime Group.
	AuthType ControlPlaneAuthType `json:"auth_type"`
	// Whether the Control Plane can be used for cloud-gateways.
	CloudGateway bool `json:"cloud_gateway"`
	// Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
	ProxyUrls []ProxyURL `json:"proxy_urls,omitempty"`
}

func (c *Config) GetControlPlaneEndpoint() string {
	if c == nil {
		return ""
	}
	return c.ControlPlaneEndpoint
}

func (c *Config) GetTelemetryEndpoint() string {
	if c == nil {
		return ""
	}
	return c.TelemetryEndpoint
}

func (c *Config) GetClusterType() ControlPlaneClusterType {
	if c == nil {
		return ControlPlaneClusterType("")
	}
	return c.ClusterType
}

func (c *Config) GetAuthType() ControlPlaneAuthType {
	if c == nil {
		return ControlPlaneAuthType("")
	}
	return c.AuthType
}

func (c *Config) GetCloudGateway() bool {
	if c == nil {
		return false
	}
	return c.CloudGateway
}

func (c *Config) GetProxyUrls() []ProxyURL {
	if c == nil {
		return nil
	}
	return c.ProxyUrls
}

// ControlPlane - The control plane object contains information about a Kong control plane.
type ControlPlane struct {
	// The control plane ID.
	ID string `json:"id"`
	// The name of the control plane.
	Name string `json:"name"`
	// The description of the control plane in Konnect.
	Description *string `json:"description,omitempty"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
	// CP configuration object for related access endpoints.
	Config Config `json:"config"`
	// An ISO-8604 timestamp representation of control plane creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8604 timestamp representation of control plane update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c ControlPlane) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ControlPlane) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "name", "config", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (c *ControlPlane) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *ControlPlane) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ControlPlane) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *ControlPlane) GetLabels() map[string]*string {
	if c == nil {
		return nil
	}
	return c.Labels
}

func (c *ControlPlane) GetConfig() Config {
	if c == nil {
		return Config{}
	}
	return c.Config
}

func (c *ControlPlane) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ControlPlane) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}
