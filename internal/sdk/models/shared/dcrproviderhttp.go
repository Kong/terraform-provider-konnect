// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DcrProviderHTTPProviderType string

const (
	DcrProviderHTTPProviderTypeHTTP DcrProviderHTTPProviderType = "http"
)

func (e DcrProviderHTTPProviderType) ToPointer() *DcrProviderHTTPProviderType {
	return &e
}
func (e *DcrProviderHTTPProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = DcrProviderHTTPProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DcrProviderHTTPProviderType: %v", v)
	}
}

// DcrProviderHTTP - A DCR provider for HTTP -- only properties not included in DcrProviderBase
type DcrProviderHTTP struct {
	// Contains a unique identifier used by the API for this resource.
	ID *string `json:"id,omitempty"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name *string `json:"name,omitempty"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The issuer of the DCR provider.
	Issuer *string `json:"issuer,omitempty"`
	// At least one active auth strategy is using this DCR provider.
	Active       *bool                       `json:"active,omitempty"`
	ProviderType DcrProviderHTTPProviderType `json:"provider_type"`
	// A DCR provider configuration for HTTP
	DcrConfig DcrConfigHTTPInResponse `json:"dcr_config"`
}

func (o *DcrProviderHTTP) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DcrProviderHTTP) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DcrProviderHTTP) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *DcrProviderHTTP) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *DcrProviderHTTP) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *DcrProviderHTTP) GetProviderType() DcrProviderHTTPProviderType {
	if o == nil {
		return DcrProviderHTTPProviderType("")
	}
	return o.ProviderType
}

func (o *DcrProviderHTTP) GetDcrConfig() DcrConfigHTTPInResponse {
	if o == nil {
		return DcrConfigHTTPInResponse{}
	}
	return o.DcrConfig
}
