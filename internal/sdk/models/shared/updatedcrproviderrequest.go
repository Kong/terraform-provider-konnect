// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type UpdateDcrProviderRequestType string

const (
	UpdateDcrProviderRequestTypeAuth0   UpdateDcrProviderRequestType = "auth0"
	UpdateDcrProviderRequestTypeAzureAd UpdateDcrProviderRequestType = "azureAd"
	UpdateDcrProviderRequestTypeCurity  UpdateDcrProviderRequestType = "curity"
	UpdateDcrProviderRequestTypeOkta    UpdateDcrProviderRequestType = "okta"
	UpdateDcrProviderRequestTypeHTTP    UpdateDcrProviderRequestType = "http"
)

// UpdateDcrProviderRequest - A set of updates to a DCR provider. The provider_type cannot be updated after creation.
type UpdateDcrProviderRequest struct {
	Auth0   *Auth0   `queryParam:"inline"`
	AzureAd *AzureAd `queryParam:"inline"`
	Curity  *Curity  `queryParam:"inline"`
	Okta    *Okta    `queryParam:"inline"`
	HTTP    *HTTP    `queryParam:"inline"`

	Type UpdateDcrProviderRequestType
}

func CreateUpdateDcrProviderRequestAuth0(auth0 Auth0) UpdateDcrProviderRequest {
	typ := UpdateDcrProviderRequestTypeAuth0

	return UpdateDcrProviderRequest{
		Auth0: &auth0,
		Type:  typ,
	}
}

func CreateUpdateDcrProviderRequestAzureAd(azureAd AzureAd) UpdateDcrProviderRequest {
	typ := UpdateDcrProviderRequestTypeAzureAd

	return UpdateDcrProviderRequest{
		AzureAd: &azureAd,
		Type:    typ,
	}
}

func CreateUpdateDcrProviderRequestCurity(curity Curity) UpdateDcrProviderRequest {
	typ := UpdateDcrProviderRequestTypeCurity

	return UpdateDcrProviderRequest{
		Curity: &curity,
		Type:   typ,
	}
}

func CreateUpdateDcrProviderRequestOkta(okta Okta) UpdateDcrProviderRequest {
	typ := UpdateDcrProviderRequestTypeOkta

	return UpdateDcrProviderRequest{
		Okta: &okta,
		Type: typ,
	}
}

func CreateUpdateDcrProviderRequestHTTP(http HTTP) UpdateDcrProviderRequest {
	typ := UpdateDcrProviderRequestTypeHTTP

	return UpdateDcrProviderRequest{
		HTTP: &http,
		Type: typ,
	}
}

func (u *UpdateDcrProviderRequest) UnmarshalJSON(data []byte) error {

	var auth0 Auth0 = Auth0{}
	if err := utils.UnmarshalJSON(data, &auth0, "", true, true); err == nil {
		u.Auth0 = &auth0
		u.Type = UpdateDcrProviderRequestTypeAuth0
		return nil
	}

	var azureAd AzureAd = AzureAd{}
	if err := utils.UnmarshalJSON(data, &azureAd, "", true, true); err == nil {
		u.AzureAd = &azureAd
		u.Type = UpdateDcrProviderRequestTypeAzureAd
		return nil
	}

	var curity Curity = Curity{}
	if err := utils.UnmarshalJSON(data, &curity, "", true, true); err == nil {
		u.Curity = &curity
		u.Type = UpdateDcrProviderRequestTypeCurity
		return nil
	}

	var okta Okta = Okta{}
	if err := utils.UnmarshalJSON(data, &okta, "", true, true); err == nil {
		u.Okta = &okta
		u.Type = UpdateDcrProviderRequestTypeOkta
		return nil
	}

	var http HTTP = HTTP{}
	if err := utils.UnmarshalJSON(data, &http, "", true, true); err == nil {
		u.HTTP = &http
		u.Type = UpdateDcrProviderRequestTypeHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDcrProviderRequest", string(data))
}

func (u UpdateDcrProviderRequest) MarshalJSON() ([]byte, error) {
	if u.Auth0 != nil {
		return utils.MarshalJSON(u.Auth0, "", true)
	}

	if u.AzureAd != nil {
		return utils.MarshalJSON(u.AzureAd, "", true)
	}

	if u.Curity != nil {
		return utils.MarshalJSON(u.Curity, "", true)
	}

	if u.Okta != nil {
		return utils.MarshalJSON(u.Okta, "", true)
	}

	if u.HTTP != nil {
		return utils.MarshalJSON(u.HTTP, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDcrProviderRequest: all fields are null")
}
