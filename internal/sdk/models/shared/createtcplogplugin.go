// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateTCPLogPluginConfig struct {
	// A list of key-value pairs, where the key is the name of a log field and the value is a chunk of Lua code, whose return value sets or replaces the log field value.
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// The IP address or host name to send data to.
	Host *string `json:"host,omitempty"`
	// An optional value in milliseconds that defines how long an idle connection lives before being closed.
	Keepalive *float64 `json:"keepalive,omitempty"`
	// The port to send data to on the upstream server.
	Port *int64 `json:"port,omitempty"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *float64 `json:"timeout,omitempty"`
	// Indicates whether to perform a TLS handshake against the remote server.
	TLS *bool `json:"tls,omitempty"`
	// An optional string that defines the SNI (Server Name Indication) hostname to send in the TLS handshake.
	TLSSni *string `json:"tls_sni,omitempty"`
}

func (o *CreateTCPLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *CreateTCPLogPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateTCPLogPluginConfig) GetKeepalive() *float64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *CreateTCPLogPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateTCPLogPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *CreateTCPLogPluginConfig) GetTLS() *bool {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *CreateTCPLogPluginConfig) GetTLSSni() *string {
	if o == nil {
		return nil
	}
	return o.TLSSni
}

type CreateTCPLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateTCPLogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateTCPLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateTCPLogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateTCPLogPluginOrdering struct {
	After  *CreateTCPLogPluginAfter  `json:"after,omitempty"`
	Before *CreateTCPLogPluginBefore `json:"before,omitempty"`
}

func (o *CreateTCPLogPluginOrdering) GetAfter() *CreateTCPLogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateTCPLogPluginOrdering) GetBefore() *CreateTCPLogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateTCPLogPluginProtocols string

const (
	CreateTCPLogPluginProtocolsGrpc           CreateTCPLogPluginProtocols = "grpc"
	CreateTCPLogPluginProtocolsGrpcs          CreateTCPLogPluginProtocols = "grpcs"
	CreateTCPLogPluginProtocolsHTTP           CreateTCPLogPluginProtocols = "http"
	CreateTCPLogPluginProtocolsHTTPS          CreateTCPLogPluginProtocols = "https"
	CreateTCPLogPluginProtocolsTCP            CreateTCPLogPluginProtocols = "tcp"
	CreateTCPLogPluginProtocolsTLS            CreateTCPLogPluginProtocols = "tls"
	CreateTCPLogPluginProtocolsTLSPassthrough CreateTCPLogPluginProtocols = "tls_passthrough"
	CreateTCPLogPluginProtocolsUDP            CreateTCPLogPluginProtocols = "udp"
	CreateTCPLogPluginProtocolsWs             CreateTCPLogPluginProtocols = "ws"
	CreateTCPLogPluginProtocolsWss            CreateTCPLogPluginProtocols = "wss"
)

func (e CreateTCPLogPluginProtocols) ToPointer() *CreateTCPLogPluginProtocols {
	return &e
}
func (e *CreateTCPLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateTCPLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTCPLogPluginProtocols: %v", v)
	}
}

// CreateTCPLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateTCPLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTCPLogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateTCPLogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTCPLogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateTCPLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateTCPLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTCPLogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateTCPLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateTCPLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTCPLogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateTCPLogPlugin struct {
	Config *CreateTCPLogPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                       `json:"enabled,omitempty"`
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         *string                     `const:"tcp-log" json:"name,omitempty"`
	Ordering     *CreateTCPLogPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateTCPLogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateTCPLogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateTCPLogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateTCPLogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateTCPLogPluginService `json:"service,omitempty"`
}

func (c CreateTCPLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTCPLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTCPLogPlugin) GetConfig() *CreateTCPLogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateTCPLogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateTCPLogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateTCPLogPlugin) GetName() *string {
	return types.String("tcp-log")
}

func (o *CreateTCPLogPlugin) GetOrdering() *CreateTCPLogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateTCPLogPlugin) GetProtocols() []CreateTCPLogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateTCPLogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateTCPLogPlugin) GetConsumer() *CreateTCPLogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateTCPLogPlugin) GetConsumerGroup() *CreateTCPLogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateTCPLogPlugin) GetRoute() *CreateTCPLogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateTCPLogPlugin) GetService() *CreateTCPLogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
