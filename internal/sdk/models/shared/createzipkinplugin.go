// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateZipkinPluginDefaultHeaderType - Allows specifying the type of header to be added to requests with no pre-existing tracing headers and when `config.header_type` is set to `"preserve"`. When `header_type` is set to any other value, `default_header_type` is ignored.
type CreateZipkinPluginDefaultHeaderType string

const (
	CreateZipkinPluginDefaultHeaderTypeB3       CreateZipkinPluginDefaultHeaderType = "b3"
	CreateZipkinPluginDefaultHeaderTypeB3Single CreateZipkinPluginDefaultHeaderType = "b3-single"
	CreateZipkinPluginDefaultHeaderTypeW3c      CreateZipkinPluginDefaultHeaderType = "w3c"
	CreateZipkinPluginDefaultHeaderTypeJaeger   CreateZipkinPluginDefaultHeaderType = "jaeger"
	CreateZipkinPluginDefaultHeaderTypeOt       CreateZipkinPluginDefaultHeaderType = "ot"
	CreateZipkinPluginDefaultHeaderTypeAws      CreateZipkinPluginDefaultHeaderType = "aws"
	CreateZipkinPluginDefaultHeaderTypeDatadog  CreateZipkinPluginDefaultHeaderType = "datadog"
	CreateZipkinPluginDefaultHeaderTypeGcp      CreateZipkinPluginDefaultHeaderType = "gcp"
)

func (e CreateZipkinPluginDefaultHeaderType) ToPointer() *CreateZipkinPluginDefaultHeaderType {
	return &e
}
func (e *CreateZipkinPluginDefaultHeaderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "b3":
		fallthrough
	case "b3-single":
		fallthrough
	case "w3c":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "aws":
		fallthrough
	case "datadog":
		fallthrough
	case "gcp":
		*e = CreateZipkinPluginDefaultHeaderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginDefaultHeaderType: %v", v)
	}
}

// CreateZipkinPluginHeaderType - All HTTP requests going through the plugin are tagged with a tracing HTTP request. This property codifies what kind of tracing header the plugin expects on incoming requests
type CreateZipkinPluginHeaderType string

const (
	CreateZipkinPluginHeaderTypePreserve CreateZipkinPluginHeaderType = "preserve"
	CreateZipkinPluginHeaderTypeIgnore   CreateZipkinPluginHeaderType = "ignore"
	CreateZipkinPluginHeaderTypeB3       CreateZipkinPluginHeaderType = "b3"
	CreateZipkinPluginHeaderTypeB3Single CreateZipkinPluginHeaderType = "b3-single"
	CreateZipkinPluginHeaderTypeW3c      CreateZipkinPluginHeaderType = "w3c"
	CreateZipkinPluginHeaderTypeJaeger   CreateZipkinPluginHeaderType = "jaeger"
	CreateZipkinPluginHeaderTypeOt       CreateZipkinPluginHeaderType = "ot"
	CreateZipkinPluginHeaderTypeAws      CreateZipkinPluginHeaderType = "aws"
	CreateZipkinPluginHeaderTypeDatadog  CreateZipkinPluginHeaderType = "datadog"
	CreateZipkinPluginHeaderTypeGcp      CreateZipkinPluginHeaderType = "gcp"
)

func (e CreateZipkinPluginHeaderType) ToPointer() *CreateZipkinPluginHeaderType {
	return &e
}
func (e *CreateZipkinPluginHeaderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preserve":
		fallthrough
	case "ignore":
		fallthrough
	case "b3":
		fallthrough
	case "b3-single":
		fallthrough
	case "w3c":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "aws":
		fallthrough
	case "datadog":
		fallthrough
	case "gcp":
		*e = CreateZipkinPluginHeaderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginHeaderType: %v", v)
	}
}

// CreateZipkinPluginHTTPSpanName - Specify whether to include the HTTP path in the span name.
type CreateZipkinPluginHTTPSpanName string

const (
	CreateZipkinPluginHTTPSpanNameMethod     CreateZipkinPluginHTTPSpanName = "method"
	CreateZipkinPluginHTTPSpanNameMethodPath CreateZipkinPluginHTTPSpanName = "method_path"
)

func (e CreateZipkinPluginHTTPSpanName) ToPointer() *CreateZipkinPluginHTTPSpanName {
	return &e
}
func (e *CreateZipkinPluginHTTPSpanName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "method":
		fallthrough
	case "method_path":
		*e = CreateZipkinPluginHTTPSpanName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginHTTPSpanName: %v", v)
	}
}

// CreateZipkinPluginPhaseDurationFlavor - Specify whether to include the duration of each phase as an annotation or a tag.
type CreateZipkinPluginPhaseDurationFlavor string

const (
	CreateZipkinPluginPhaseDurationFlavorAnnotations CreateZipkinPluginPhaseDurationFlavor = "annotations"
	CreateZipkinPluginPhaseDurationFlavorTags        CreateZipkinPluginPhaseDurationFlavor = "tags"
)

func (e CreateZipkinPluginPhaseDurationFlavor) ToPointer() *CreateZipkinPluginPhaseDurationFlavor {
	return &e
}
func (e *CreateZipkinPluginPhaseDurationFlavor) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "annotations":
		fallthrough
	case "tags":
		*e = CreateZipkinPluginPhaseDurationFlavor(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginPhaseDurationFlavor: %v", v)
	}
}

// CreateZipkinPluginDefaultFormat - The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.
type CreateZipkinPluginDefaultFormat string

const (
	CreateZipkinPluginDefaultFormatW3c      CreateZipkinPluginDefaultFormat = "w3c"
	CreateZipkinPluginDefaultFormatDatadog  CreateZipkinPluginDefaultFormat = "datadog"
	CreateZipkinPluginDefaultFormatB3       CreateZipkinPluginDefaultFormat = "b3"
	CreateZipkinPluginDefaultFormatGcp      CreateZipkinPluginDefaultFormat = "gcp"
	CreateZipkinPluginDefaultFormatB3Single CreateZipkinPluginDefaultFormat = "b3-single"
	CreateZipkinPluginDefaultFormatJaeger   CreateZipkinPluginDefaultFormat = "jaeger"
	CreateZipkinPluginDefaultFormatAws      CreateZipkinPluginDefaultFormat = "aws"
	CreateZipkinPluginDefaultFormatOt       CreateZipkinPluginDefaultFormat = "ot"
)

func (e CreateZipkinPluginDefaultFormat) ToPointer() *CreateZipkinPluginDefaultFormat {
	return &e
}
func (e *CreateZipkinPluginDefaultFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "w3c":
		fallthrough
	case "datadog":
		fallthrough
	case "b3":
		fallthrough
	case "gcp":
		fallthrough
	case "b3-single":
		fallthrough
	case "jaeger":
		fallthrough
	case "aws":
		fallthrough
	case "ot":
		*e = CreateZipkinPluginDefaultFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginDefaultFormat: %v", v)
	}
}

type CreateZipkinPluginExtract string

const (
	CreateZipkinPluginExtractW3c     CreateZipkinPluginExtract = "w3c"
	CreateZipkinPluginExtractDatadog CreateZipkinPluginExtract = "datadog"
	CreateZipkinPluginExtractB3      CreateZipkinPluginExtract = "b3"
	CreateZipkinPluginExtractGcp     CreateZipkinPluginExtract = "gcp"
	CreateZipkinPluginExtractJaeger  CreateZipkinPluginExtract = "jaeger"
	CreateZipkinPluginExtractAws     CreateZipkinPluginExtract = "aws"
	CreateZipkinPluginExtractOt      CreateZipkinPluginExtract = "ot"
)

func (e CreateZipkinPluginExtract) ToPointer() *CreateZipkinPluginExtract {
	return &e
}
func (e *CreateZipkinPluginExtract) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "w3c":
		fallthrough
	case "datadog":
		fallthrough
	case "b3":
		fallthrough
	case "gcp":
		fallthrough
	case "jaeger":
		fallthrough
	case "aws":
		fallthrough
	case "ot":
		*e = CreateZipkinPluginExtract(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginExtract: %v", v)
	}
}

type CreateZipkinPluginInject string

const (
	CreateZipkinPluginInjectPreserve CreateZipkinPluginInject = "preserve"
	CreateZipkinPluginInjectW3c      CreateZipkinPluginInject = "w3c"
	CreateZipkinPluginInjectDatadog  CreateZipkinPluginInject = "datadog"
	CreateZipkinPluginInjectB3       CreateZipkinPluginInject = "b3"
	CreateZipkinPluginInjectGcp      CreateZipkinPluginInject = "gcp"
	CreateZipkinPluginInjectB3Single CreateZipkinPluginInject = "b3-single"
	CreateZipkinPluginInjectJaeger   CreateZipkinPluginInject = "jaeger"
	CreateZipkinPluginInjectAws      CreateZipkinPluginInject = "aws"
	CreateZipkinPluginInjectOt       CreateZipkinPluginInject = "ot"
)

func (e CreateZipkinPluginInject) ToPointer() *CreateZipkinPluginInject {
	return &e
}
func (e *CreateZipkinPluginInject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preserve":
		fallthrough
	case "w3c":
		fallthrough
	case "datadog":
		fallthrough
	case "b3":
		fallthrough
	case "gcp":
		fallthrough
	case "b3-single":
		fallthrough
	case "jaeger":
		fallthrough
	case "aws":
		fallthrough
	case "ot":
		*e = CreateZipkinPluginInject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginInject: %v", v)
	}
}

type CreateZipkinPluginPropagation struct {
	// Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.
	Clear []string `json:"clear,omitempty"`
	// The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.
	DefaultFormat CreateZipkinPluginDefaultFormat `json:"default_format"`
	// Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.
	Extract []CreateZipkinPluginExtract `json:"extract,omitempty"`
	// Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.
	Inject []CreateZipkinPluginInject `json:"inject,omitempty"`
}

func (o *CreateZipkinPluginPropagation) GetClear() []string {
	if o == nil {
		return nil
	}
	return o.Clear
}

func (o *CreateZipkinPluginPropagation) GetDefaultFormat() CreateZipkinPluginDefaultFormat {
	if o == nil {
		return CreateZipkinPluginDefaultFormat("")
	}
	return o.DefaultFormat
}

func (o *CreateZipkinPluginPropagation) GetExtract() []CreateZipkinPluginExtract {
	if o == nil {
		return nil
	}
	return o.Extract
}

func (o *CreateZipkinPluginPropagation) GetInject() []CreateZipkinPluginInject {
	if o == nil {
		return nil
	}
	return o.Inject
}

// CreateZipkinPluginConcurrencyLimit - The number of of queue delivery timers. -1 indicates unlimited.
type CreateZipkinPluginConcurrencyLimit int64

const (
	CreateZipkinPluginConcurrencyLimitMinus1 CreateZipkinPluginConcurrencyLimit = -1
	CreateZipkinPluginConcurrencyLimitOne    CreateZipkinPluginConcurrencyLimit = 1
)

func (e CreateZipkinPluginConcurrencyLimit) ToPointer() *CreateZipkinPluginConcurrencyLimit {
	return &e
}
func (e *CreateZipkinPluginConcurrencyLimit) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 1:
		*e = CreateZipkinPluginConcurrencyLimit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginConcurrencyLimit: %v", v)
	}
}

type CreateZipkinPluginQueue struct {
	// The number of of queue delivery timers. -1 indicates unlimited.
	ConcurrencyLimit *CreateZipkinPluginConcurrencyLimit `json:"concurrency_limit,omitempty"`
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `json:"initial_retry_delay,omitempty"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `json:"max_batch_size,omitempty"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `json:"max_bytes,omitempty"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `json:"max_coalescing_delay,omitempty"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `json:"max_entries,omitempty"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `json:"max_retry_delay,omitempty"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `json:"max_retry_time,omitempty"`
}

func (o *CreateZipkinPluginQueue) GetConcurrencyLimit() *CreateZipkinPluginConcurrencyLimit {
	if o == nil {
		return nil
	}
	return o.ConcurrencyLimit
}

func (o *CreateZipkinPluginQueue) GetInitialRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialRetryDelay
}

func (o *CreateZipkinPluginQueue) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

func (o *CreateZipkinPluginQueue) GetMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBytes
}

func (o *CreateZipkinPluginQueue) GetMaxCoalescingDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCoalescingDelay
}

func (o *CreateZipkinPluginQueue) GetMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxEntries
}

func (o *CreateZipkinPluginQueue) GetMaxRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryDelay
}

func (o *CreateZipkinPluginQueue) GetMaxRetryTime() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryTime
}

type CreateZipkinPluginStaticTags struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *CreateZipkinPluginStaticTags) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateZipkinPluginStaticTags) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateZipkinPluginTraceidByteCount - The length in bytes of each request's Trace ID.
type CreateZipkinPluginTraceidByteCount int64

const (
	CreateZipkinPluginTraceidByteCountEight   CreateZipkinPluginTraceidByteCount = 8
	CreateZipkinPluginTraceidByteCountSixteen CreateZipkinPluginTraceidByteCount = 16
)

func (e CreateZipkinPluginTraceidByteCount) ToPointer() *CreateZipkinPluginTraceidByteCount {
	return &e
}
func (e *CreateZipkinPluginTraceidByteCount) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 8:
		fallthrough
	case 16:
		*e = CreateZipkinPluginTraceidByteCount(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginTraceidByteCount: %v", v)
	}
}

type CreateZipkinPluginConfig struct {
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// Allows specifying the type of header to be added to requests with no pre-existing tracing headers and when `config.header_type` is set to `"preserve"`. When `header_type` is set to any other value, `default_header_type` is ignored.
	DefaultHeaderType *CreateZipkinPluginDefaultHeaderType `json:"default_header_type,omitempty"`
	// Set a default service name to override `unknown-service-name` in the Zipkin spans.
	DefaultServiceName *string `json:"default_service_name,omitempty"`
	// All HTTP requests going through the plugin are tagged with a tracing HTTP request. This property codifies what kind of tracing header the plugin expects on incoming requests
	HeaderType *CreateZipkinPluginHeaderType `json:"header_type,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	HTTPEndpoint                 *string `json:"http_endpoint,omitempty"`
	HTTPResponseHeaderForTraceid *string `json:"http_response_header_for_traceid,omitempty"`
	// Specify whether to include the HTTP path in the span name.
	HTTPSpanName *CreateZipkinPluginHTTPSpanName `json:"http_span_name,omitempty"`
	// Specify whether the credential of the currently authenticated consumer should be included in metadata sent to the Zipkin server.
	IncludeCredential *bool `json:"include_credential,omitempty"`
	// The name of the service as displayed in Zipkin.
	LocalServiceName *string `json:"local_service_name,omitempty"`
	// Specify whether to include the duration of each phase as an annotation or a tag.
	PhaseDurationFlavor *CreateZipkinPluginPhaseDurationFlavor `json:"phase_duration_flavor,omitempty"`
	Propagation         *CreateZipkinPluginPropagation         `json:"propagation,omitempty"`
	Queue               *CreateZipkinPluginQueue               `json:"queue,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// How often to sample requests that do not contain trace IDs. Set to `0` to turn sampling off, or to `1` to sample **all** requests.
	SampleRatio *float64 `json:"sample_ratio,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// The tags specified on this property will be added to the generated request traces.
	StaticTags []CreateZipkinPluginStaticTags `json:"static_tags,omitempty"`
	// The Zipkin plugin will add extra headers to the tags associated with any HTTP requests that come with a header named as configured by this property.
	TagsHeader *string `json:"tags_header,omitempty"`
	// The length in bytes of each request's Trace ID.
	TraceidByteCount *CreateZipkinPluginTraceidByteCount `json:"traceid_byte_count,omitempty"`
}

func (o *CreateZipkinPluginConfig) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *CreateZipkinPluginConfig) GetDefaultHeaderType() *CreateZipkinPluginDefaultHeaderType {
	if o == nil {
		return nil
	}
	return o.DefaultHeaderType
}

func (o *CreateZipkinPluginConfig) GetDefaultServiceName() *string {
	if o == nil {
		return nil
	}
	return o.DefaultServiceName
}

func (o *CreateZipkinPluginConfig) GetHeaderType() *CreateZipkinPluginHeaderType {
	if o == nil {
		return nil
	}
	return o.HeaderType
}

func (o *CreateZipkinPluginConfig) GetHTTPEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.HTTPEndpoint
}

func (o *CreateZipkinPluginConfig) GetHTTPResponseHeaderForTraceid() *string {
	if o == nil {
		return nil
	}
	return o.HTTPResponseHeaderForTraceid
}

func (o *CreateZipkinPluginConfig) GetHTTPSpanName() *CreateZipkinPluginHTTPSpanName {
	if o == nil {
		return nil
	}
	return o.HTTPSpanName
}

func (o *CreateZipkinPluginConfig) GetIncludeCredential() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeCredential
}

func (o *CreateZipkinPluginConfig) GetLocalServiceName() *string {
	if o == nil {
		return nil
	}
	return o.LocalServiceName
}

func (o *CreateZipkinPluginConfig) GetPhaseDurationFlavor() *CreateZipkinPluginPhaseDurationFlavor {
	if o == nil {
		return nil
	}
	return o.PhaseDurationFlavor
}

func (o *CreateZipkinPluginConfig) GetPropagation() *CreateZipkinPluginPropagation {
	if o == nil {
		return nil
	}
	return o.Propagation
}

func (o *CreateZipkinPluginConfig) GetQueue() *CreateZipkinPluginQueue {
	if o == nil {
		return nil
	}
	return o.Queue
}

func (o *CreateZipkinPluginConfig) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *CreateZipkinPluginConfig) GetSampleRatio() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatio
}

func (o *CreateZipkinPluginConfig) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *CreateZipkinPluginConfig) GetStaticTags() []CreateZipkinPluginStaticTags {
	if o == nil {
		return nil
	}
	return o.StaticTags
}

func (o *CreateZipkinPluginConfig) GetTagsHeader() *string {
	if o == nil {
		return nil
	}
	return o.TagsHeader
}

func (o *CreateZipkinPluginConfig) GetTraceidByteCount() *CreateZipkinPluginTraceidByteCount {
	if o == nil {
		return nil
	}
	return o.TraceidByteCount
}

type CreateZipkinPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateZipkinPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateZipkinPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateZipkinPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateZipkinPluginOrdering struct {
	After  *CreateZipkinPluginAfter  `json:"after,omitempty"`
	Before *CreateZipkinPluginBefore `json:"before,omitempty"`
}

func (o *CreateZipkinPluginOrdering) GetAfter() *CreateZipkinPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateZipkinPluginOrdering) GetBefore() *CreateZipkinPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateZipkinPluginProtocols string

const (
	CreateZipkinPluginProtocolsGrpc           CreateZipkinPluginProtocols = "grpc"
	CreateZipkinPluginProtocolsGrpcs          CreateZipkinPluginProtocols = "grpcs"
	CreateZipkinPluginProtocolsHTTP           CreateZipkinPluginProtocols = "http"
	CreateZipkinPluginProtocolsHTTPS          CreateZipkinPluginProtocols = "https"
	CreateZipkinPluginProtocolsTCP            CreateZipkinPluginProtocols = "tcp"
	CreateZipkinPluginProtocolsTLS            CreateZipkinPluginProtocols = "tls"
	CreateZipkinPluginProtocolsTLSPassthrough CreateZipkinPluginProtocols = "tls_passthrough"
	CreateZipkinPluginProtocolsUDP            CreateZipkinPluginProtocols = "udp"
	CreateZipkinPluginProtocolsWs             CreateZipkinPluginProtocols = "ws"
	CreateZipkinPluginProtocolsWss            CreateZipkinPluginProtocols = "wss"
)

func (e CreateZipkinPluginProtocols) ToPointer() *CreateZipkinPluginProtocols {
	return &e
}
func (e *CreateZipkinPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateZipkinPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateZipkinPluginProtocols: %v", v)
	}
}

// CreateZipkinPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateZipkinPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateZipkinPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateZipkinPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateZipkinPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateZipkinPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateZipkinPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateZipkinPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateZipkinPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateZipkinPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateZipkinPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateZipkinPlugin struct {
	Config *CreateZipkinPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                       `json:"enabled,omitempty"`
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         *string                     `const:"zipkin" json:"name,omitempty"`
	Ordering     *CreateZipkinPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateZipkinPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateZipkinPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateZipkinPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateZipkinPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateZipkinPluginService `json:"service,omitempty"`
}

func (c CreateZipkinPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateZipkinPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateZipkinPlugin) GetConfig() *CreateZipkinPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateZipkinPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateZipkinPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateZipkinPlugin) GetName() *string {
	return types.String("zipkin")
}

func (o *CreateZipkinPlugin) GetOrdering() *CreateZipkinPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateZipkinPlugin) GetProtocols() []CreateZipkinPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateZipkinPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateZipkinPlugin) GetConsumer() *CreateZipkinPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateZipkinPlugin) GetConsumerGroup() *CreateZipkinPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateZipkinPlugin) GetRoute() *CreateZipkinPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateZipkinPlugin) GetService() *CreateZipkinPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
