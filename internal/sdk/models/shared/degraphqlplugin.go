// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type DegraphqlPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *DegraphqlPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type DegraphqlPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *DegraphqlPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type DegraphqlPluginOrdering struct {
	After  *DegraphqlPluginAfter  `json:"after,omitempty"`
	Before *DegraphqlPluginBefore `json:"before,omitempty"`
}

func (o *DegraphqlPluginOrdering) GetAfter() *DegraphqlPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *DegraphqlPluginOrdering) GetBefore() *DegraphqlPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type DegraphqlPluginConfig struct {
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	GraphqlServerPath *string `json:"graphql_server_path,omitempty"`
}

func (o *DegraphqlPluginConfig) GetGraphqlServerPath() *string {
	if o == nil {
		return nil
	}
	return o.GraphqlServerPath
}

type DegraphqlPluginProtocols string

const (
	DegraphqlPluginProtocolsGrpc  DegraphqlPluginProtocols = "grpc"
	DegraphqlPluginProtocolsGrpcs DegraphqlPluginProtocols = "grpcs"
	DegraphqlPluginProtocolsHTTP  DegraphqlPluginProtocols = "http"
	DegraphqlPluginProtocolsHTTPS DegraphqlPluginProtocols = "https"
)

func (e DegraphqlPluginProtocols) ToPointer() *DegraphqlPluginProtocols {
	return &e
}
func (e *DegraphqlPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = DegraphqlPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DegraphqlPluginProtocols: %v", v)
	}
}

// DegraphqlPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type DegraphqlPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *DegraphqlPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// DegraphqlPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type DegraphqlPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *DegraphqlPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// DegraphqlPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type DegraphqlPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                    `json:"enabled,omitempty"`
	ID           *string                  `json:"id,omitempty"`
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         string                   `const:"degraphql" json:"name"`
	Ordering     *DegraphqlPluginOrdering `json:"ordering,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                `json:"updated_at,omitempty"`
	Config    DegraphqlPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []DegraphqlPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *DegraphqlPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *DegraphqlPluginService `json:"service,omitempty"`
}

func (d DegraphqlPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DegraphqlPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DegraphqlPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DegraphqlPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *DegraphqlPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DegraphqlPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *DegraphqlPlugin) GetName() string {
	return "degraphql"
}

func (o *DegraphqlPlugin) GetOrdering() *DegraphqlPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *DegraphqlPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *DegraphqlPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *DegraphqlPlugin) GetConfig() DegraphqlPluginConfig {
	if o == nil {
		return DegraphqlPluginConfig{}
	}
	return o.Config
}

func (o *DegraphqlPlugin) GetProtocols() []DegraphqlPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *DegraphqlPlugin) GetRoute() *DegraphqlPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *DegraphqlPlugin) GetService() *DegraphqlPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

// DegraphqlPluginInput - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type DegraphqlPluginInput struct {
	// Whether the plugin is applied.
	Enabled      *bool                    `json:"enabled,omitempty"`
	ID           *string                  `json:"id,omitempty"`
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         string                   `const:"degraphql" json:"name"`
	Ordering     *DegraphqlPluginOrdering `json:"ordering,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags   []string              `json:"tags,omitempty"`
	Config DegraphqlPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []DegraphqlPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *DegraphqlPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *DegraphqlPluginService `json:"service,omitempty"`
}

func (d DegraphqlPluginInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DegraphqlPluginInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DegraphqlPluginInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *DegraphqlPluginInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DegraphqlPluginInput) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *DegraphqlPluginInput) GetName() string {
	return "degraphql"
}

func (o *DegraphqlPluginInput) GetOrdering() *DegraphqlPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *DegraphqlPluginInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *DegraphqlPluginInput) GetConfig() DegraphqlPluginConfig {
	if o == nil {
		return DegraphqlPluginConfig{}
	}
	return o.Config
}

func (o *DegraphqlPluginInput) GetProtocols() []DegraphqlPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *DegraphqlPluginInput) GetRoute() *DegraphqlPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *DegraphqlPluginInput) GetService() *DegraphqlPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
