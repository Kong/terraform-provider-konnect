// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateAIPromptGuardPluginConfig struct {
	// If true, will ignore all previous chat prompts from the conversation history.
	AllowAllConversationHistory *bool `json:"allow_all_conversation_history,omitempty"`
	// Array of valid regex patterns, or valid questions from the 'user' role in chat.
	AllowPatterns []string `json:"allow_patterns,omitempty"`
	// Array of invalid regex patterns, or invalid questions from the 'user' role in chat.
	DenyPatterns []string `json:"deny_patterns,omitempty"`
}

func (o *CreateAIPromptGuardPluginConfig) GetAllowAllConversationHistory() *bool {
	if o == nil {
		return nil
	}
	return o.AllowAllConversationHistory
}

func (o *CreateAIPromptGuardPluginConfig) GetAllowPatterns() []string {
	if o == nil {
		return nil
	}
	return o.AllowPatterns
}

func (o *CreateAIPromptGuardPluginConfig) GetDenyPatterns() []string {
	if o == nil {
		return nil
	}
	return o.DenyPatterns
}

type CreateAIPromptGuardPluginProtocols string

const (
	CreateAIPromptGuardPluginProtocolsGrpc           CreateAIPromptGuardPluginProtocols = "grpc"
	CreateAIPromptGuardPluginProtocolsGrpcs          CreateAIPromptGuardPluginProtocols = "grpcs"
	CreateAIPromptGuardPluginProtocolsHTTP           CreateAIPromptGuardPluginProtocols = "http"
	CreateAIPromptGuardPluginProtocolsHTTPS          CreateAIPromptGuardPluginProtocols = "https"
	CreateAIPromptGuardPluginProtocolsTCP            CreateAIPromptGuardPluginProtocols = "tcp"
	CreateAIPromptGuardPluginProtocolsTLS            CreateAIPromptGuardPluginProtocols = "tls"
	CreateAIPromptGuardPluginProtocolsTLSPassthrough CreateAIPromptGuardPluginProtocols = "tls_passthrough"
	CreateAIPromptGuardPluginProtocolsUDP            CreateAIPromptGuardPluginProtocols = "udp"
	CreateAIPromptGuardPluginProtocolsWs             CreateAIPromptGuardPluginProtocols = "ws"
	CreateAIPromptGuardPluginProtocolsWss            CreateAIPromptGuardPluginProtocols = "wss"
)

func (e CreateAIPromptGuardPluginProtocols) ToPointer() *CreateAIPromptGuardPluginProtocols {
	return &e
}
func (e *CreateAIPromptGuardPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateAIPromptGuardPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAIPromptGuardPluginProtocols: %v", v)
	}
}

// CreateAIPromptGuardPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateAIPromptGuardPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptGuardPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAIPromptGuardPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptGuardPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAIPromptGuardPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateAIPromptGuardPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptGuardPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAIPromptGuardPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateAIPromptGuardPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptGuardPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAIPromptGuardPlugin struct {
	Config *CreateAIPromptGuardPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"ai-prompt-guard" json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateAIPromptGuardPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateAIPromptGuardPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateAIPromptGuardPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateAIPromptGuardPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateAIPromptGuardPluginService `json:"service,omitempty"`
}

func (c CreateAIPromptGuardPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAIPromptGuardPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAIPromptGuardPlugin) GetConfig() *CreateAIPromptGuardPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateAIPromptGuardPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateAIPromptGuardPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateAIPromptGuardPlugin) GetName() *string {
	return types.String("ai-prompt-guard")
}

func (o *CreateAIPromptGuardPlugin) GetProtocols() []CreateAIPromptGuardPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateAIPromptGuardPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateAIPromptGuardPlugin) GetConsumer() *CreateAIPromptGuardPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateAIPromptGuardPlugin) GetConsumerGroup() *CreateAIPromptGuardPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateAIPromptGuardPlugin) GetRoute() *CreateAIPromptGuardPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateAIPromptGuardPlugin) GetService() *CreateAIPromptGuardPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
