// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/types"
)

type HTTPLogPluginAfter struct {
	Access []string `json:"access"`
}

func (o *HTTPLogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type HTTPLogPluginBefore struct {
	Access []string `json:"access"`
}

func (o *HTTPLogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type HTTPLogPluginOrdering struct {
	After  *HTTPLogPluginAfter  `json:"after"`
	Before *HTTPLogPluginBefore `json:"before"`
}

func (o *HTTPLogPluginOrdering) GetAfter() *HTTPLogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *HTTPLogPluginOrdering) GetBefore() *HTTPLogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type HTTPLogPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (h HTTPLogPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HTTPLogPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *HTTPLogPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *HTTPLogPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *HTTPLogPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// ContentType - Indicates the type of data sent. The only available option is `application/json`.
type ContentType string

const (
	ContentTypeApplicationJSON                 ContentType = "application/json"
	ContentTypeApplicationJSONCharsetEqualUTF8 ContentType = "application/json; charset=utf-8"
)

func (e ContentType) ToPointer() *ContentType {
	return &e
}
func (e *ContentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application/json":
		fallthrough
	case "application/json; charset=utf-8":
		*e = ContentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentType: %v", v)
	}
}

// Method - An optional method used to send data to the HTTP server. Supported values are `POST` (default), `PUT`, and `PATCH`.
type Method string

const (
	MethodPatch Method = "PATCH"
	MethodPost  Method = "POST"
	MethodPut   Method = "PUT"
)

func (e Method) ToPointer() *Method {
	return &e
}
func (e *Method) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PATCH":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		*e = Method(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Method: %v", v)
	}
}

// HTTPLogPluginConcurrencyLimit - The number of of queue delivery timers. -1 indicates unlimited.
type HTTPLogPluginConcurrencyLimit int64

const (
	HTTPLogPluginConcurrencyLimitMinus1 HTTPLogPluginConcurrencyLimit = -1
	HTTPLogPluginConcurrencyLimitOne    HTTPLogPluginConcurrencyLimit = 1
)

func (e HTTPLogPluginConcurrencyLimit) ToPointer() *HTTPLogPluginConcurrencyLimit {
	return &e
}
func (e *HTTPLogPluginConcurrencyLimit) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 1:
		*e = HTTPLogPluginConcurrencyLimit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPLogPluginConcurrencyLimit: %v", v)
	}
}

type HTTPLogPluginQueue struct {
	// The number of of queue delivery timers. -1 indicates unlimited.
	ConcurrencyLimit *HTTPLogPluginConcurrencyLimit `default:"1" json:"concurrency_limit"`
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `default:"0.01" json:"initial_retry_delay"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `default:"1" json:"max_batch_size"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `default:"null" json:"max_bytes"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `default:"1" json:"max_coalescing_delay"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `default:"10000" json:"max_entries"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `default:"60" json:"max_retry_delay"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `default:"60" json:"max_retry_time"`
}

func (h HTTPLogPluginQueue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HTTPLogPluginQueue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *HTTPLogPluginQueue) GetConcurrencyLimit() *HTTPLogPluginConcurrencyLimit {
	if o == nil {
		return nil
	}
	return o.ConcurrencyLimit
}

func (o *HTTPLogPluginQueue) GetInitialRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialRetryDelay
}

func (o *HTTPLogPluginQueue) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

func (o *HTTPLogPluginQueue) GetMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBytes
}

func (o *HTTPLogPluginQueue) GetMaxCoalescingDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCoalescingDelay
}

func (o *HTTPLogPluginQueue) GetMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxEntries
}

func (o *HTTPLogPluginQueue) GetMaxRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryDelay
}

func (o *HTTPLogPluginQueue) GetMaxRetryTime() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryTime
}

type HTTPLogPluginConfig struct {
	// Indicates the type of data sent. The only available option is `application/json`.
	ContentType *ContentType `default:"application/json" json:"content_type"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// Optional time in seconds. If `queue_size` > 1, this is the max idle time before sending a log with less than `queue_size` records.
	FlushTimeout *float64 `default:"null" json:"flush_timeout"`
	// An optional table of headers included in the HTTP message to the upstream server. Values are indexed by header name, and each header name accepts a single string.
	Headers map[string]any `json:"headers,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	HTTPEndpoint string `json:"http_endpoint"`
	// An optional value in milliseconds that defines how long an idle connection will live before being closed.
	Keepalive *float64 `default:"60000" json:"keepalive"`
	// An optional method used to send data to the HTTP server. Supported values are `POST` (default), `PUT`, and `PATCH`.
	Method *Method             `default:"POST" json:"method"`
	Queue  *HTTPLogPluginQueue `json:"queue"`
	// Maximum number of log entries to be sent on each message to the upstream server.
	QueueSize *int64 `default:"null" json:"queue_size"`
	// Number of times to retry when sending data to the upstream server.
	RetryCount *int64 `default:"null" json:"retry_count"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *float64 `default:"10000" json:"timeout"`
}

func (h HTTPLogPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HTTPLogPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *HTTPLogPluginConfig) GetContentType() *ContentType {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *HTTPLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *HTTPLogPluginConfig) GetFlushTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FlushTimeout
}

func (o *HTTPLogPluginConfig) GetHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *HTTPLogPluginConfig) GetHTTPEndpoint() string {
	if o == nil {
		return ""
	}
	return o.HTTPEndpoint
}

func (o *HTTPLogPluginConfig) GetKeepalive() *float64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *HTTPLogPluginConfig) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *HTTPLogPluginConfig) GetQueue() *HTTPLogPluginQueue {
	if o == nil {
		return nil
	}
	return o.Queue
}

func (o *HTTPLogPluginConfig) GetQueueSize() *int64 {
	if o == nil {
		return nil
	}
	return o.QueueSize
}

func (o *HTTPLogPluginConfig) GetRetryCount() *int64 {
	if o == nil {
		return nil
	}
	return o.RetryCount
}

func (o *HTTPLogPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

// HTTPLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type HTTPLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *HTTPLogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// HTTPLogPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type HTTPLogPluginProtocols string

const (
	HTTPLogPluginProtocolsGrpc           HTTPLogPluginProtocols = "grpc"
	HTTPLogPluginProtocolsGrpcs          HTTPLogPluginProtocols = "grpcs"
	HTTPLogPluginProtocolsHTTP           HTTPLogPluginProtocols = "http"
	HTTPLogPluginProtocolsHTTPS          HTTPLogPluginProtocols = "https"
	HTTPLogPluginProtocolsTCP            HTTPLogPluginProtocols = "tcp"
	HTTPLogPluginProtocolsTLS            HTTPLogPluginProtocols = "tls"
	HTTPLogPluginProtocolsTLSPassthrough HTTPLogPluginProtocols = "tls_passthrough"
	HTTPLogPluginProtocolsUDP            HTTPLogPluginProtocols = "udp"
	HTTPLogPluginProtocolsWs             HTTPLogPluginProtocols = "ws"
	HTTPLogPluginProtocolsWss            HTTPLogPluginProtocols = "wss"
)

func (e HTTPLogPluginProtocols) ToPointer() *HTTPLogPluginProtocols {
	return &e
}
func (e *HTTPLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = HTTPLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPLogPluginProtocols: %v", v)
	}
}

// HTTPLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type HTTPLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *HTTPLogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// HTTPLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type HTTPLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *HTTPLogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// HTTPLogPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type HTTPLogPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                `default:"null" json:"instance_name"`
	name         *string                `const:"http-log" json:"name"`
	Ordering     *HTTPLogPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []HTTPLogPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64              `json:"updated_at,omitempty"`
	Config    HTTPLogPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *HTTPLogPluginConsumer `json:"consumer"`
	// A set of strings representing protocols.
	Protocols []HTTPLogPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *HTTPLogPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *HTTPLogPluginService `json:"service"`
}

func (h HTTPLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *HTTPLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *HTTPLogPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *HTTPLogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *HTTPLogPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *HTTPLogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *HTTPLogPlugin) GetName() *string {
	return types.String("http-log")
}

func (o *HTTPLogPlugin) GetOrdering() *HTTPLogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *HTTPLogPlugin) GetPartials() []HTTPLogPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *HTTPLogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *HTTPLogPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *HTTPLogPlugin) GetConfig() HTTPLogPluginConfig {
	if o == nil {
		return HTTPLogPluginConfig{}
	}
	return o.Config
}

func (o *HTTPLogPlugin) GetConsumer() *HTTPLogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *HTTPLogPlugin) GetProtocols() []HTTPLogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *HTTPLogPlugin) GetRoute() *HTTPLogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *HTTPLogPlugin) GetService() *HTTPLogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
