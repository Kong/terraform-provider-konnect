// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AiPromptDecoratorPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptDecoratorPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptDecoratorPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptDecoratorPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptDecoratorPluginOrdering struct {
	After  *AiPromptDecoratorPluginAfter  `json:"after,omitempty"`
	Before *AiPromptDecoratorPluginBefore `json:"before,omitempty"`
}

func (a *AiPromptDecoratorPluginOrdering) GetAfter() *AiPromptDecoratorPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiPromptDecoratorPluginOrdering) GetBefore() *AiPromptDecoratorPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiPromptDecoratorPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiPromptDecoratorPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptDecoratorPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiPromptDecoratorPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

// LlmFormat - LLM input and output format and schema to use
type LlmFormat string

const (
	LlmFormatBedrock     LlmFormat = "bedrock"
	LlmFormatCohere      LlmFormat = "cohere"
	LlmFormatGemini      LlmFormat = "gemini"
	LlmFormatHuggingface LlmFormat = "huggingface"
	LlmFormatOpenai      LlmFormat = "openai"
)

func (e LlmFormat) ToPointer() *LlmFormat {
	return &e
}
func (e *LlmFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "openai":
		*e = LlmFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LlmFormat: %v", v)
	}
}

type Role string

const (
	RoleAssistant Role = "assistant"
	RoleSystem    Role = "system"
	RoleUser      Role = "user"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant":
		fallthrough
	case "system":
		fallthrough
	case "user":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type AiPromptDecoratorPluginAppend struct {
	Content string `json:"content"`
	Role    *Role  `default:"system" json:"role"`
}

func (a AiPromptDecoratorPluginAppend) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptDecoratorPluginAppend) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"content"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptDecoratorPluginAppend) GetContent() string {
	if a == nil {
		return ""
	}
	return a.Content
}

func (a *AiPromptDecoratorPluginAppend) GetRole() *Role {
	if a == nil {
		return nil
	}
	return a.Role
}

type AiPromptDecoratorPluginRole string

const (
	AiPromptDecoratorPluginRoleAssistant AiPromptDecoratorPluginRole = "assistant"
	AiPromptDecoratorPluginRoleSystem    AiPromptDecoratorPluginRole = "system"
	AiPromptDecoratorPluginRoleUser      AiPromptDecoratorPluginRole = "user"
)

func (e AiPromptDecoratorPluginRole) ToPointer() *AiPromptDecoratorPluginRole {
	return &e
}
func (e *AiPromptDecoratorPluginRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant":
		fallthrough
	case "system":
		fallthrough
	case "user":
		*e = AiPromptDecoratorPluginRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiPromptDecoratorPluginRole: %v", v)
	}
}

type Prepend struct {
	Content string                       `json:"content"`
	Role    *AiPromptDecoratorPluginRole `default:"system" json:"role"`
}

func (p Prepend) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Prepend) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"content"}); err != nil {
		return err
	}
	return nil
}

func (p *Prepend) GetContent() string {
	if p == nil {
		return ""
	}
	return p.Content
}

func (p *Prepend) GetRole() *AiPromptDecoratorPluginRole {
	if p == nil {
		return nil
	}
	return p.Role
}

type Prompts struct {
	// Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.
	Append []AiPromptDecoratorPluginAppend `json:"append"`
	// Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.
	Prepend []Prepend `json:"prepend"`
}

func (p *Prompts) GetAppend() []AiPromptDecoratorPluginAppend {
	if p == nil {
		return nil
	}
	return p.Append
}

func (p *Prompts) GetPrepend() []Prepend {
	if p == nil {
		return nil
	}
	return p.Prepend
}

type AiPromptDecoratorPluginConfig struct {
	// LLM input and output format and schema to use
	LlmFormat *LlmFormat `default:"openai" json:"llm_format"`
	// max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.
	MaxRequestBodySize *int64   `default:"8192" json:"max_request_body_size"`
	Prompts            *Prompts `json:"prompts"`
}

func (a AiPromptDecoratorPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptDecoratorPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptDecoratorPluginConfig) GetLlmFormat() *LlmFormat {
	if a == nil {
		return nil
	}
	return a.LlmFormat
}

func (a *AiPromptDecoratorPluginConfig) GetMaxRequestBodySize() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxRequestBodySize
}

func (a *AiPromptDecoratorPluginConfig) GetPrompts() *Prompts {
	if a == nil {
		return nil
	}
	return a.Prompts
}

// AiPromptDecoratorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiPromptDecoratorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptDecoratorPluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptDecoratorPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiPromptDecoratorPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptDecoratorPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiPromptDecoratorPluginProtocols string

const (
	AiPromptDecoratorPluginProtocolsGrpc  AiPromptDecoratorPluginProtocols = "grpc"
	AiPromptDecoratorPluginProtocolsGrpcs AiPromptDecoratorPluginProtocols = "grpcs"
	AiPromptDecoratorPluginProtocolsHTTP  AiPromptDecoratorPluginProtocols = "http"
	AiPromptDecoratorPluginProtocolsHTTPS AiPromptDecoratorPluginProtocols = "https"
)

func (e AiPromptDecoratorPluginProtocols) ToPointer() *AiPromptDecoratorPluginProtocols {
	return &e
}
func (e *AiPromptDecoratorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiPromptDecoratorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiPromptDecoratorPluginProtocols: %v", v)
	}
}

// AiPromptDecoratorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiPromptDecoratorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptDecoratorPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptDecoratorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiPromptDecoratorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptDecoratorPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptDecoratorPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiPromptDecoratorPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                          `default:"null" json:"instance_name"`
	name         string                           `const:"ai-prompt-decorator" json:"name"`
	Ordering     *AiPromptDecoratorPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiPromptDecoratorPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                         `json:"updated_at,omitempty"`
	Config    *AiPromptDecoratorPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiPromptDecoratorPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiPromptDecoratorPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiPromptDecoratorPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiPromptDecoratorPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiPromptDecoratorPluginService `json:"service"`
}

func (a AiPromptDecoratorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptDecoratorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptDecoratorPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiPromptDecoratorPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiPromptDecoratorPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptDecoratorPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiPromptDecoratorPlugin) GetName() string {
	return "ai-prompt-decorator"
}

func (a *AiPromptDecoratorPlugin) GetOrdering() *AiPromptDecoratorPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiPromptDecoratorPlugin) GetPartials() []AiPromptDecoratorPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiPromptDecoratorPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiPromptDecoratorPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiPromptDecoratorPlugin) GetConfig() *AiPromptDecoratorPluginConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AiPromptDecoratorPlugin) GetConsumer() *AiPromptDecoratorPluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiPromptDecoratorPlugin) GetConsumerGroup() *AiPromptDecoratorPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiPromptDecoratorPlugin) GetProtocols() []AiPromptDecoratorPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiPromptDecoratorPlugin) GetRoute() *AiPromptDecoratorPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiPromptDecoratorPlugin) GetService() *AiPromptDecoratorPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
