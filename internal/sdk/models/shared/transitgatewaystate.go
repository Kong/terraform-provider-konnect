// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TransitGatewayState - The current state of the Transit Gateway. Possible values:
// - `created` - The attachment has been created but is not attached to transit gateway.
// - `initializing` - The attachment is in the process of being initialized and is setting up necessary resources.
// - `pending-acceptance` The attachment request is awaiting acceptance in customer VPC.
// - `pending-user-action` The attachment request is awaiting user action in customer VPC.
// - `ready` - The transit gateway attachment is fully operational and can route traffic as configured.
// - `terminating` - The attachment is in the process of being deleted and is no longer accepting new traffic.
// - `terminated` - The attachment has been fully deleted and is no longer available.
type TransitGatewayState string

const (
	TransitGatewayStateCreated           TransitGatewayState = "created"
	TransitGatewayStateInitializing      TransitGatewayState = "initializing"
	TransitGatewayStatePendingAcceptance TransitGatewayState = "pending-acceptance"
	TransitGatewayStatePendingUserAction TransitGatewayState = "pending-user-action"
	TransitGatewayStateReady             TransitGatewayState = "ready"
	TransitGatewayStateTerminating       TransitGatewayState = "terminating"
	TransitGatewayStateTerminated        TransitGatewayState = "terminated"
)

func (e TransitGatewayState) ToPointer() *TransitGatewayState {
	return &e
}
func (e *TransitGatewayState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "initializing":
		fallthrough
	case "pending-acceptance":
		fallthrough
	case "pending-user-action":
		fallthrough
	case "ready":
		fallthrough
	case "terminating":
		fallthrough
	case "terminated":
		*e = TransitGatewayState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransitGatewayState: %v", v)
	}
}
