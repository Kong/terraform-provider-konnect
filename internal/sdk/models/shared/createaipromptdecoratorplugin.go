// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateAiPromptDecoratorPluginRole string

const (
	CreateAiPromptDecoratorPluginRoleSystem    CreateAiPromptDecoratorPluginRole = "system"
	CreateAiPromptDecoratorPluginRoleAssistant CreateAiPromptDecoratorPluginRole = "assistant"
	CreateAiPromptDecoratorPluginRoleUser      CreateAiPromptDecoratorPluginRole = "user"
)

func (e CreateAiPromptDecoratorPluginRole) ToPointer() *CreateAiPromptDecoratorPluginRole {
	return &e
}
func (e *CreateAiPromptDecoratorPluginRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "assistant":
		fallthrough
	case "user":
		*e = CreateAiPromptDecoratorPluginRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiPromptDecoratorPluginRole: %v", v)
	}
}

type CreateAiPromptDecoratorPluginAppend struct {
	Content string                             `json:"content"`
	Role    *CreateAiPromptDecoratorPluginRole `json:"role,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginAppend) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *CreateAiPromptDecoratorPluginAppend) GetRole() *CreateAiPromptDecoratorPluginRole {
	if o == nil {
		return nil
	}
	return o.Role
}

type CreateAiPromptDecoratorPluginConfigRole string

const (
	CreateAiPromptDecoratorPluginConfigRoleSystem    CreateAiPromptDecoratorPluginConfigRole = "system"
	CreateAiPromptDecoratorPluginConfigRoleAssistant CreateAiPromptDecoratorPluginConfigRole = "assistant"
	CreateAiPromptDecoratorPluginConfigRoleUser      CreateAiPromptDecoratorPluginConfigRole = "user"
)

func (e CreateAiPromptDecoratorPluginConfigRole) ToPointer() *CreateAiPromptDecoratorPluginConfigRole {
	return &e
}
func (e *CreateAiPromptDecoratorPluginConfigRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "assistant":
		fallthrough
	case "user":
		*e = CreateAiPromptDecoratorPluginConfigRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiPromptDecoratorPluginConfigRole: %v", v)
	}
}

type CreateAiPromptDecoratorPluginPrepend struct {
	Content string                                   `json:"content"`
	Role    *CreateAiPromptDecoratorPluginConfigRole `json:"role,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginPrepend) GetContent() string {
	if o == nil {
		return ""
	}
	return o.Content
}

func (o *CreateAiPromptDecoratorPluginPrepend) GetRole() *CreateAiPromptDecoratorPluginConfigRole {
	if o == nil {
		return nil
	}
	return o.Role
}

type CreateAiPromptDecoratorPluginPrompts struct {
	// Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.
	Append []CreateAiPromptDecoratorPluginAppend `json:"append,omitempty"`
	// Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.
	Prepend []CreateAiPromptDecoratorPluginPrepend `json:"prepend,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginPrompts) GetAppend() []CreateAiPromptDecoratorPluginAppend {
	if o == nil {
		return nil
	}
	return o.Append
}

func (o *CreateAiPromptDecoratorPluginPrompts) GetPrepend() []CreateAiPromptDecoratorPluginPrepend {
	if o == nil {
		return nil
	}
	return o.Prepend
}

type CreateAiPromptDecoratorPluginConfig struct {
	// max allowed body size allowed to be introspected
	MaxRequestBodySize *int64                                `json:"max_request_body_size,omitempty"`
	Prompts            *CreateAiPromptDecoratorPluginPrompts `json:"prompts,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginConfig) GetMaxRequestBodySize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRequestBodySize
}

func (o *CreateAiPromptDecoratorPluginConfig) GetPrompts() *CreateAiPromptDecoratorPluginPrompts {
	if o == nil {
		return nil
	}
	return o.Prompts
}

type CreateAiPromptDecoratorPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAiPromptDecoratorPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAiPromptDecoratorPluginOrdering struct {
	After  *CreateAiPromptDecoratorPluginAfter  `json:"after,omitempty"`
	Before *CreateAiPromptDecoratorPluginBefore `json:"before,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginOrdering) GetAfter() *CreateAiPromptDecoratorPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateAiPromptDecoratorPluginOrdering) GetBefore() *CreateAiPromptDecoratorPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateAiPromptDecoratorPluginProtocols string

const (
	CreateAiPromptDecoratorPluginProtocolsGrpc           CreateAiPromptDecoratorPluginProtocols = "grpc"
	CreateAiPromptDecoratorPluginProtocolsGrpcs          CreateAiPromptDecoratorPluginProtocols = "grpcs"
	CreateAiPromptDecoratorPluginProtocolsHTTP           CreateAiPromptDecoratorPluginProtocols = "http"
	CreateAiPromptDecoratorPluginProtocolsHTTPS          CreateAiPromptDecoratorPluginProtocols = "https"
	CreateAiPromptDecoratorPluginProtocolsTCP            CreateAiPromptDecoratorPluginProtocols = "tcp"
	CreateAiPromptDecoratorPluginProtocolsTLS            CreateAiPromptDecoratorPluginProtocols = "tls"
	CreateAiPromptDecoratorPluginProtocolsTLSPassthrough CreateAiPromptDecoratorPluginProtocols = "tls_passthrough"
	CreateAiPromptDecoratorPluginProtocolsUDP            CreateAiPromptDecoratorPluginProtocols = "udp"
	CreateAiPromptDecoratorPluginProtocolsWs             CreateAiPromptDecoratorPluginProtocols = "ws"
	CreateAiPromptDecoratorPluginProtocolsWss            CreateAiPromptDecoratorPluginProtocols = "wss"
)

func (e CreateAiPromptDecoratorPluginProtocols) ToPointer() *CreateAiPromptDecoratorPluginProtocols {
	return &e
}
func (e *CreateAiPromptDecoratorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateAiPromptDecoratorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiPromptDecoratorPluginProtocols: %v", v)
	}
}

// CreateAiPromptDecoratorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateAiPromptDecoratorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAiPromptDecoratorPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAiPromptDecoratorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateAiPromptDecoratorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAiPromptDecoratorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateAiPromptDecoratorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiPromptDecoratorPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAiPromptDecoratorPlugin struct {
	Config *CreateAiPromptDecoratorPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                  `json:"enabled,omitempty"`
	InstanceName *string                                `json:"instance_name,omitempty"`
	name         *string                                `const:"ai-prompt-decorator" json:"name,omitempty"`
	Ordering     *CreateAiPromptDecoratorPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateAiPromptDecoratorPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateAiPromptDecoratorPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateAiPromptDecoratorPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateAiPromptDecoratorPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateAiPromptDecoratorPluginService `json:"service,omitempty"`
}

func (c CreateAiPromptDecoratorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAiPromptDecoratorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAiPromptDecoratorPlugin) GetConfig() *CreateAiPromptDecoratorPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateAiPromptDecoratorPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateAiPromptDecoratorPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateAiPromptDecoratorPlugin) GetName() *string {
	return types.String("ai-prompt-decorator")
}

func (o *CreateAiPromptDecoratorPlugin) GetOrdering() *CreateAiPromptDecoratorPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateAiPromptDecoratorPlugin) GetProtocols() []CreateAiPromptDecoratorPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateAiPromptDecoratorPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateAiPromptDecoratorPlugin) GetConsumer() *CreateAiPromptDecoratorPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateAiPromptDecoratorPlugin) GetConsumerGroup() *CreateAiPromptDecoratorPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateAiPromptDecoratorPlugin) GetRoute() *CreateAiPromptDecoratorPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateAiPromptDecoratorPlugin) GetService() *CreateAiPromptDecoratorPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
