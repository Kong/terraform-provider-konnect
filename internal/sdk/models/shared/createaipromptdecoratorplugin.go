// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

type CreateAIPromptDecoratorPluginProtocols string

const (
	CreateAIPromptDecoratorPluginProtocolsGrpc           CreateAIPromptDecoratorPluginProtocols = "grpc"
	CreateAIPromptDecoratorPluginProtocolsGrpcs          CreateAIPromptDecoratorPluginProtocols = "grpcs"
	CreateAIPromptDecoratorPluginProtocolsHTTP           CreateAIPromptDecoratorPluginProtocols = "http"
	CreateAIPromptDecoratorPluginProtocolsHTTPS          CreateAIPromptDecoratorPluginProtocols = "https"
	CreateAIPromptDecoratorPluginProtocolsTCP            CreateAIPromptDecoratorPluginProtocols = "tcp"
	CreateAIPromptDecoratorPluginProtocolsTLS            CreateAIPromptDecoratorPluginProtocols = "tls"
	CreateAIPromptDecoratorPluginProtocolsTLSPassthrough CreateAIPromptDecoratorPluginProtocols = "tls_passthrough"
	CreateAIPromptDecoratorPluginProtocolsUDP            CreateAIPromptDecoratorPluginProtocols = "udp"
	CreateAIPromptDecoratorPluginProtocolsWs             CreateAIPromptDecoratorPluginProtocols = "ws"
	CreateAIPromptDecoratorPluginProtocolsWss            CreateAIPromptDecoratorPluginProtocols = "wss"
)

func (e CreateAIPromptDecoratorPluginProtocols) ToPointer() *CreateAIPromptDecoratorPluginProtocols {
	return &e
}

func (e *CreateAIPromptDecoratorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateAIPromptDecoratorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAIPromptDecoratorPluginProtocols: %v", v)
	}
}

// CreateAIPromptDecoratorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateAIPromptDecoratorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptDecoratorPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAIPromptDecoratorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateAIPromptDecoratorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptDecoratorPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAIPromptDecoratorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateAIPromptDecoratorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAIPromptDecoratorPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Role string

const (
	RoleSystem    Role = "system"
	RoleAssistant Role = "assistant"
	RoleUser      Role = "user"
)

func (e Role) ToPointer() *Role {
	return &e
}

func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "assistant":
		fallthrough
	case "user":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type Prepend struct {
	Role    *Role   `default:"system" json:"role"`
	Content *string `json:"content,omitempty"`
}

func (p Prepend) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Prepend) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Prepend) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *Prepend) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

type CreateAIPromptDecoratorPluginRole string

const (
	CreateAIPromptDecoratorPluginRoleSystem    CreateAIPromptDecoratorPluginRole = "system"
	CreateAIPromptDecoratorPluginRoleAssistant CreateAIPromptDecoratorPluginRole = "assistant"
	CreateAIPromptDecoratorPluginRoleUser      CreateAIPromptDecoratorPluginRole = "user"
)

func (e CreateAIPromptDecoratorPluginRole) ToPointer() *CreateAIPromptDecoratorPluginRole {
	return &e
}

func (e *CreateAIPromptDecoratorPluginRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "assistant":
		fallthrough
	case "user":
		*e = CreateAIPromptDecoratorPluginRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAIPromptDecoratorPluginRole: %v", v)
	}
}

type CreateAIPromptDecoratorPluginAppend struct {
	Role    *CreateAIPromptDecoratorPluginRole `default:"system" json:"role"`
	Content *string                            `json:"content,omitempty"`
}

func (c CreateAIPromptDecoratorPluginAppend) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAIPromptDecoratorPluginAppend) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAIPromptDecoratorPluginAppend) GetRole() *CreateAIPromptDecoratorPluginRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *CreateAIPromptDecoratorPluginAppend) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

type Prompts struct {
	// Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.
	Prepend []Prepend `json:"prepend,omitempty"`
	// Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.
	Append []CreateAIPromptDecoratorPluginAppend `json:"append,omitempty"`
}

func (o *Prompts) GetPrepend() []Prepend {
	if o == nil {
		return nil
	}
	return o.Prepend
}

func (o *Prompts) GetAppend() []CreateAIPromptDecoratorPluginAppend {
	if o == nil {
		return nil
	}
	return o.Append
}

type CreateAIPromptDecoratorPluginConfig struct {
	Prompts *Prompts `json:"prompts,omitempty"`
}

func (o *CreateAIPromptDecoratorPluginConfig) GetPrompts() *Prompts {
	if o == nil {
		return nil
	}
	return o.Prompts
}

// CreateAIPromptDecoratorPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type CreateAIPromptDecoratorPlugin struct {
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"ai-prompt-decorator" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateAIPromptDecoratorPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *CreateAIPromptDecoratorPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateAIPromptDecoratorPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateAIPromptDecoratorPluginService `json:"service,omitempty"`
	Config  CreateAIPromptDecoratorPluginConfig   `json:"config"`
}

func (c CreateAIPromptDecoratorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAIPromptDecoratorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAIPromptDecoratorPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateAIPromptDecoratorPlugin) GetName() string {
	return "ai-prompt-decorator"
}

func (o *CreateAIPromptDecoratorPlugin) GetProtocols() []CreateAIPromptDecoratorPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateAIPromptDecoratorPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateAIPromptDecoratorPlugin) GetConsumer() *CreateAIPromptDecoratorPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateAIPromptDecoratorPlugin) GetRoute() *CreateAIPromptDecoratorPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateAIPromptDecoratorPlugin) GetService() *CreateAIPromptDecoratorPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *CreateAIPromptDecoratorPlugin) GetConfig() CreateAIPromptDecoratorPluginConfig {
	if o == nil {
		return CreateAIPromptDecoratorPluginConfig{}
	}
	return o.Config
}
