// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreatePostFunctionPluginConfig struct {
	Access          []string `json:"access,omitempty"`
	BodyFilter      []string `json:"body_filter,omitempty"`
	Certificate     []string `json:"certificate,omitempty"`
	HeaderFilter    []string `json:"header_filter,omitempty"`
	Log             []string `json:"log,omitempty"`
	Rewrite         []string `json:"rewrite,omitempty"`
	WsClientFrame   []string `json:"ws_client_frame,omitempty"`
	WsClose         []string `json:"ws_close,omitempty"`
	WsHandshake     []string `json:"ws_handshake,omitempty"`
	WsUpstreamFrame []string `json:"ws_upstream_frame,omitempty"`
}

func (o *CreatePostFunctionPluginConfig) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

func (o *CreatePostFunctionPluginConfig) GetBodyFilter() []string {
	if o == nil {
		return nil
	}
	return o.BodyFilter
}

func (o *CreatePostFunctionPluginConfig) GetCertificate() []string {
	if o == nil {
		return nil
	}
	return o.Certificate
}

func (o *CreatePostFunctionPluginConfig) GetHeaderFilter() []string {
	if o == nil {
		return nil
	}
	return o.HeaderFilter
}

func (o *CreatePostFunctionPluginConfig) GetLog() []string {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *CreatePostFunctionPluginConfig) GetRewrite() []string {
	if o == nil {
		return nil
	}
	return o.Rewrite
}

func (o *CreatePostFunctionPluginConfig) GetWsClientFrame() []string {
	if o == nil {
		return nil
	}
	return o.WsClientFrame
}

func (o *CreatePostFunctionPluginConfig) GetWsClose() []string {
	if o == nil {
		return nil
	}
	return o.WsClose
}

func (o *CreatePostFunctionPluginConfig) GetWsHandshake() []string {
	if o == nil {
		return nil
	}
	return o.WsHandshake
}

func (o *CreatePostFunctionPluginConfig) GetWsUpstreamFrame() []string {
	if o == nil {
		return nil
	}
	return o.WsUpstreamFrame
}

type CreatePostFunctionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreatePostFunctionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreatePostFunctionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreatePostFunctionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreatePostFunctionPluginOrdering struct {
	After  *CreatePostFunctionPluginAfter  `json:"after,omitempty"`
	Before *CreatePostFunctionPluginBefore `json:"before,omitempty"`
}

func (o *CreatePostFunctionPluginOrdering) GetAfter() *CreatePostFunctionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreatePostFunctionPluginOrdering) GetBefore() *CreatePostFunctionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreatePostFunctionPluginProtocols string

const (
	CreatePostFunctionPluginProtocolsGrpc           CreatePostFunctionPluginProtocols = "grpc"
	CreatePostFunctionPluginProtocolsGrpcs          CreatePostFunctionPluginProtocols = "grpcs"
	CreatePostFunctionPluginProtocolsHTTP           CreatePostFunctionPluginProtocols = "http"
	CreatePostFunctionPluginProtocolsHTTPS          CreatePostFunctionPluginProtocols = "https"
	CreatePostFunctionPluginProtocolsTCP            CreatePostFunctionPluginProtocols = "tcp"
	CreatePostFunctionPluginProtocolsTLS            CreatePostFunctionPluginProtocols = "tls"
	CreatePostFunctionPluginProtocolsTLSPassthrough CreatePostFunctionPluginProtocols = "tls_passthrough"
	CreatePostFunctionPluginProtocolsUDP            CreatePostFunctionPluginProtocols = "udp"
	CreatePostFunctionPluginProtocolsWs             CreatePostFunctionPluginProtocols = "ws"
	CreatePostFunctionPluginProtocolsWss            CreatePostFunctionPluginProtocols = "wss"
)

func (e CreatePostFunctionPluginProtocols) ToPointer() *CreatePostFunctionPluginProtocols {
	return &e
}
func (e *CreatePostFunctionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreatePostFunctionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePostFunctionPluginProtocols: %v", v)
	}
}

// CreatePostFunctionPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreatePostFunctionPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreatePostFunctionPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreatePostFunctionPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreatePostFunctionPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreatePostFunctionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreatePostFunctionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreatePostFunctionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreatePostFunctionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreatePostFunctionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreatePostFunctionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreatePostFunctionPlugin struct {
	Config *CreatePostFunctionPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                             `json:"enabled,omitempty"`
	InstanceName *string                           `json:"instance_name,omitempty"`
	name         *string                           `const:"post-function" json:"name,omitempty"`
	Ordering     *CreatePostFunctionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreatePostFunctionPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreatePostFunctionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreatePostFunctionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreatePostFunctionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreatePostFunctionPluginService `json:"service,omitempty"`
}

func (c CreatePostFunctionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePostFunctionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePostFunctionPlugin) GetConfig() *CreatePostFunctionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreatePostFunctionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreatePostFunctionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreatePostFunctionPlugin) GetName() *string {
	return types.String("post-function")
}

func (o *CreatePostFunctionPlugin) GetOrdering() *CreatePostFunctionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreatePostFunctionPlugin) GetProtocols() []CreatePostFunctionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreatePostFunctionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreatePostFunctionPlugin) GetConsumer() *CreatePostFunctionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreatePostFunctionPlugin) GetConsumerGroup() *CreatePostFunctionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreatePostFunctionPlugin) GetRoute() *CreatePostFunctionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreatePostFunctionPlugin) GetService() *CreatePostFunctionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
