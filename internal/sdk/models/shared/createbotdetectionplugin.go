// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateBotDetectionPluginConfig struct {
	// An array of regular expressions that should be allowed. The regular expressions will be checked against the `User-Agent` header.
	Allow []string `json:"allow,omitempty"`
	// An array of regular expressions that should be denied. The regular expressions will be checked against the `User-Agent` header.
	Deny []string `json:"deny,omitempty"`
}

func (o *CreateBotDetectionPluginConfig) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *CreateBotDetectionPluginConfig) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

type CreateBotDetectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateBotDetectionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateBotDetectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateBotDetectionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateBotDetectionPluginOrdering struct {
	After  *CreateBotDetectionPluginAfter  `json:"after,omitempty"`
	Before *CreateBotDetectionPluginBefore `json:"before,omitempty"`
}

func (o *CreateBotDetectionPluginOrdering) GetAfter() *CreateBotDetectionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateBotDetectionPluginOrdering) GetBefore() *CreateBotDetectionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateBotDetectionPluginProtocols string

const (
	CreateBotDetectionPluginProtocolsGrpc           CreateBotDetectionPluginProtocols = "grpc"
	CreateBotDetectionPluginProtocolsGrpcs          CreateBotDetectionPluginProtocols = "grpcs"
	CreateBotDetectionPluginProtocolsHTTP           CreateBotDetectionPluginProtocols = "http"
	CreateBotDetectionPluginProtocolsHTTPS          CreateBotDetectionPluginProtocols = "https"
	CreateBotDetectionPluginProtocolsTCP            CreateBotDetectionPluginProtocols = "tcp"
	CreateBotDetectionPluginProtocolsTLS            CreateBotDetectionPluginProtocols = "tls"
	CreateBotDetectionPluginProtocolsTLSPassthrough CreateBotDetectionPluginProtocols = "tls_passthrough"
	CreateBotDetectionPluginProtocolsUDP            CreateBotDetectionPluginProtocols = "udp"
	CreateBotDetectionPluginProtocolsWs             CreateBotDetectionPluginProtocols = "ws"
	CreateBotDetectionPluginProtocolsWss            CreateBotDetectionPluginProtocols = "wss"
)

func (e CreateBotDetectionPluginProtocols) ToPointer() *CreateBotDetectionPluginProtocols {
	return &e
}
func (e *CreateBotDetectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateBotDetectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateBotDetectionPluginProtocols: %v", v)
	}
}

// CreateBotDetectionPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateBotDetectionPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateBotDetectionPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateBotDetectionPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateBotDetectionPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateBotDetectionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateBotDetectionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateBotDetectionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateBotDetectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateBotDetectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateBotDetectionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateBotDetectionPlugin struct {
	Config *CreateBotDetectionPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                             `json:"enabled,omitempty"`
	InstanceName *string                           `json:"instance_name,omitempty"`
	name         *string                           `const:"bot-detection" json:"name,omitempty"`
	Ordering     *CreateBotDetectionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateBotDetectionPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateBotDetectionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateBotDetectionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateBotDetectionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateBotDetectionPluginService `json:"service,omitempty"`
}

func (c CreateBotDetectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateBotDetectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateBotDetectionPlugin) GetConfig() *CreateBotDetectionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateBotDetectionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateBotDetectionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateBotDetectionPlugin) GetName() *string {
	return types.String("bot-detection")
}

func (o *CreateBotDetectionPlugin) GetOrdering() *CreateBotDetectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateBotDetectionPlugin) GetProtocols() []CreateBotDetectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateBotDetectionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateBotDetectionPlugin) GetConsumer() *CreateBotDetectionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateBotDetectionPlugin) GetConsumerGroup() *CreateBotDetectionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateBotDetectionPlugin) GetRoute() *CreateBotDetectionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateBotDetectionPlugin) GetService() *CreateBotDetectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
