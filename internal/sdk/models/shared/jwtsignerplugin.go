// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type JwtSignerPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *JwtSignerPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type JwtSignerPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *JwtSignerPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type JwtSignerPluginOrdering struct {
	After  *JwtSignerPluginAfter  `json:"after,omitempty"`
	Before *JwtSignerPluginBefore `json:"before,omitempty"`
}

func (o *JwtSignerPluginOrdering) GetAfter() *JwtSignerPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *JwtSignerPluginOrdering) GetBefore() *JwtSignerPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type JwtSignerPluginPartials struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *JwtSignerPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *JwtSignerPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *JwtSignerPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type AccessTokenConsumerBy string

const (
	AccessTokenConsumerByCustomID AccessTokenConsumerBy = "custom_id"
	AccessTokenConsumerByID       AccessTokenConsumerBy = "id"
	AccessTokenConsumerByUsername AccessTokenConsumerBy = "username"
)

func (e AccessTokenConsumerBy) ToPointer() *AccessTokenConsumerBy {
	return &e
}
func (e *AccessTokenConsumerBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom_id":
		fallthrough
	case "id":
		fallthrough
	case "username":
		*e = AccessTokenConsumerBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessTokenConsumerBy: %v", v)
	}
}

type AccessTokenIntrospectionConsumerBy string

const (
	AccessTokenIntrospectionConsumerByCustomID AccessTokenIntrospectionConsumerBy = "custom_id"
	AccessTokenIntrospectionConsumerByID       AccessTokenIntrospectionConsumerBy = "id"
	AccessTokenIntrospectionConsumerByUsername AccessTokenIntrospectionConsumerBy = "username"
)

func (e AccessTokenIntrospectionConsumerBy) ToPointer() *AccessTokenIntrospectionConsumerBy {
	return &e
}
func (e *AccessTokenIntrospectionConsumerBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom_id":
		fallthrough
	case "id":
		fallthrough
	case "username":
		*e = AccessTokenIntrospectionConsumerBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessTokenIntrospectionConsumerBy: %v", v)
	}
}

// AccessTokenSigningAlgorithm - When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm.
type AccessTokenSigningAlgorithm string

const (
	AccessTokenSigningAlgorithmEs256 AccessTokenSigningAlgorithm = "ES256"
	AccessTokenSigningAlgorithmEs384 AccessTokenSigningAlgorithm = "ES384"
	AccessTokenSigningAlgorithmEs512 AccessTokenSigningAlgorithm = "ES512"
	AccessTokenSigningAlgorithmEdDsa AccessTokenSigningAlgorithm = "EdDSA"
	AccessTokenSigningAlgorithmHs256 AccessTokenSigningAlgorithm = "HS256"
	AccessTokenSigningAlgorithmHs384 AccessTokenSigningAlgorithm = "HS384"
	AccessTokenSigningAlgorithmHs512 AccessTokenSigningAlgorithm = "HS512"
	AccessTokenSigningAlgorithmPs256 AccessTokenSigningAlgorithm = "PS256"
	AccessTokenSigningAlgorithmPs384 AccessTokenSigningAlgorithm = "PS384"
	AccessTokenSigningAlgorithmPs512 AccessTokenSigningAlgorithm = "PS512"
	AccessTokenSigningAlgorithmRs256 AccessTokenSigningAlgorithm = "RS256"
	AccessTokenSigningAlgorithmRs512 AccessTokenSigningAlgorithm = "RS512"
)

func (e AccessTokenSigningAlgorithm) ToPointer() *AccessTokenSigningAlgorithm {
	return &e
}
func (e *AccessTokenSigningAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ES256":
		fallthrough
	case "ES384":
		fallthrough
	case "ES512":
		fallthrough
	case "EdDSA":
		fallthrough
	case "HS256":
		fallthrough
	case "HS384":
		fallthrough
	case "HS512":
		fallthrough
	case "PS256":
		fallthrough
	case "PS384":
		fallthrough
	case "PS512":
		fallthrough
	case "RS256":
		fallthrough
	case "RS512":
		*e = AccessTokenSigningAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccessTokenSigningAlgorithm: %v", v)
	}
}

type ChannelTokenConsumerBy string

const (
	ChannelTokenConsumerByCustomID ChannelTokenConsumerBy = "custom_id"
	ChannelTokenConsumerByID       ChannelTokenConsumerBy = "id"
	ChannelTokenConsumerByUsername ChannelTokenConsumerBy = "username"
)

func (e ChannelTokenConsumerBy) ToPointer() *ChannelTokenConsumerBy {
	return &e
}
func (e *ChannelTokenConsumerBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom_id":
		fallthrough
	case "id":
		fallthrough
	case "username":
		*e = ChannelTokenConsumerBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelTokenConsumerBy: %v", v)
	}
}

type ChannelTokenIntrospectionConsumerBy string

const (
	ChannelTokenIntrospectionConsumerByCustomID ChannelTokenIntrospectionConsumerBy = "custom_id"
	ChannelTokenIntrospectionConsumerByID       ChannelTokenIntrospectionConsumerBy = "id"
	ChannelTokenIntrospectionConsumerByUsername ChannelTokenIntrospectionConsumerBy = "username"
)

func (e ChannelTokenIntrospectionConsumerBy) ToPointer() *ChannelTokenIntrospectionConsumerBy {
	return &e
}
func (e *ChannelTokenIntrospectionConsumerBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom_id":
		fallthrough
	case "id":
		fallthrough
	case "username":
		*e = ChannelTokenIntrospectionConsumerBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelTokenIntrospectionConsumerBy: %v", v)
	}
}

// ChannelTokenSigningAlgorithm - When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token.
type ChannelTokenSigningAlgorithm string

const (
	ChannelTokenSigningAlgorithmEs256 ChannelTokenSigningAlgorithm = "ES256"
	ChannelTokenSigningAlgorithmEs384 ChannelTokenSigningAlgorithm = "ES384"
	ChannelTokenSigningAlgorithmEs512 ChannelTokenSigningAlgorithm = "ES512"
	ChannelTokenSigningAlgorithmEdDsa ChannelTokenSigningAlgorithm = "EdDSA"
	ChannelTokenSigningAlgorithmHs256 ChannelTokenSigningAlgorithm = "HS256"
	ChannelTokenSigningAlgorithmHs384 ChannelTokenSigningAlgorithm = "HS384"
	ChannelTokenSigningAlgorithmHs512 ChannelTokenSigningAlgorithm = "HS512"
	ChannelTokenSigningAlgorithmPs256 ChannelTokenSigningAlgorithm = "PS256"
	ChannelTokenSigningAlgorithmPs384 ChannelTokenSigningAlgorithm = "PS384"
	ChannelTokenSigningAlgorithmPs512 ChannelTokenSigningAlgorithm = "PS512"
	ChannelTokenSigningAlgorithmRs256 ChannelTokenSigningAlgorithm = "RS256"
	ChannelTokenSigningAlgorithmRs512 ChannelTokenSigningAlgorithm = "RS512"
)

func (e ChannelTokenSigningAlgorithm) ToPointer() *ChannelTokenSigningAlgorithm {
	return &e
}
func (e *ChannelTokenSigningAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ES256":
		fallthrough
	case "ES384":
		fallthrough
	case "ES512":
		fallthrough
	case "EdDSA":
		fallthrough
	case "HS256":
		fallthrough
	case "HS384":
		fallthrough
	case "HS512":
		fallthrough
	case "PS256":
		fallthrough
	case "PS384":
		fallthrough
	case "PS512":
		fallthrough
	case "RS256":
		fallthrough
	case "RS512":
		*e = ChannelTokenSigningAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChannelTokenSigningAlgorithm: %v", v)
	}
}

type JwtSignerPluginConfig struct {
	// When the plugin tries to apply an access token to a Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of alues. Valid values are `id`, `username`, and `custom_id`.
	AccessTokenConsumerBy []AccessTokenConsumerBy `json:"access_token_consumer_by,omitempty"`
	// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (for example, `sub` or `username`) in an access token to Kong consumer entity.
	AccessTokenConsumerClaim []string `json:"access_token_consumer_claim,omitempty"`
	// If the introspection endpoint requires client authentication (client being the JWT Signer plugin), you can specify the `Authorization` header's value with this configuration parameter.
	AccessTokenIntrospectionAuthorization *string `json:"access_token_introspection_authorization,omitempty"`
	// This parameter allows you to pass URL encoded request body arguments. For example: `resource=` or `a=1&b=&c`.
	AccessTokenIntrospectionBodyArgs *string `json:"access_token_introspection_body_args,omitempty"`
	// When the plugin tries to do access token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values.
	AccessTokenIntrospectionConsumerBy []AccessTokenIntrospectionConsumerBy `json:"access_token_introspection_consumer_by,omitempty"`
	// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in access token introspection results to the Kong consumer entity.
	AccessTokenIntrospectionConsumerClaim []string `json:"access_token_introspection_consumer_claim,omitempty"`
	// When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter.
	AccessTokenIntrospectionEndpoint *string `json:"access_token_introspection_endpoint,omitempty"`
	// If you need to give `hint` parameter when introspecting an access token, use this parameter to specify the value. By default, the plugin sends `hint=access_token`.
	AccessTokenIntrospectionHint *string `default:"access_token" json:"access_token_introspection_hint"`
	// If your introspection endpoint returns an access token in one of the keys (or claims) within the introspection results (`JSON`). If the key cannot be found, the plugin responds with `401 Unauthorized`. Also if the key is found but cannot be decoded as JWT, it also responds with `401 Unauthorized`.
	AccessTokenIntrospectionJwtClaim []string `json:"access_token_introspection_jwt_claim,omitempty"`
	// Adjusts clock skew between the token issuer introspection results and Kong. The value is added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time in seconds. You can disable access token introspection `expiry` verification altogether with `config.verify_access_token_introspection_expiry`.
	AccessTokenIntrospectionLeeway *float64 `default:"0" json:"access_token_introspection_leeway"`
	// Specify the claim/property in access token introspection results (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`. This supports nested claims. For example, with Keycloak you could use `[ "realm_access", "roles" ]`, hich can be given as `realm_access,roles` (form post). If the claim is not found in access token introspection results, and you have specified `config.access_token_introspection_scopes_required`, the plugin responds with `403 Forbidden`.
	AccessTokenIntrospectionScopesClaim []string `json:"access_token_introspection_scopes_claim,omitempty"`
	// Specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.access_token_introspection_scopes_claim`.
	AccessTokenIntrospectionScopesRequired []string `json:"access_token_introspection_scopes_required,omitempty"`
	// Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on access token introspection.
	AccessTokenIntrospectionTimeout *float64 `json:"access_token_introspection_timeout,omitempty"`
	// The `iss` claim of a signed or re-signed access token is set to this value. Original `iss` claim of the incoming token (possibly introspected) is stored in `original_iss` claim of the newly signed access token.
	AccessTokenIssuer *string `default:"kong" json:"access_token_issuer"`
	// Specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the access token.
	AccessTokenJwksURI *string `json:"access_token_jwks_uri,omitempty"`
	// The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
	AccessTokenJwksURIClientCertificate *string `json:"access_token_jwks_uri_client_certificate,omitempty"`
	// The client password that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_username`
	AccessTokenJwksURIClientPassword *string `json:"access_token_jwks_uri_client_password,omitempty"`
	// The client username that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_password`
	AccessTokenJwksURIClientUsername *string `json:"access_token_jwks_uri_client_username,omitempty"`
	// Specify the period (in seconds) to auto-rotate the jwks for `access_token_jwks_uri`. The default value 0 means no auto-rotation.
	AccessTokenJwksURIRotatePeriod *float64 `default:"0" json:"access_token_jwks_uri_rotate_period"`
	// The name of the keyset containing signing keys.
	AccessTokenKeyset *string `default:"kong" json:"access_token_keyset"`
	// The client certificate that will be used to authenticate Kong if `access_token_keyset` is an https uri that requires mTLS Auth.
	AccessTokenKeysetClientCertificate *string `json:"access_token_keyset_client_certificate,omitempty"`
	// The client password that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_username`
	AccessTokenKeysetClientPassword *string `json:"access_token_keyset_client_password,omitempty"`
	// The client username that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_password`
	AccessTokenKeysetClientUsername *string `json:"access_token_keyset_client_username,omitempty"`
	// Specify the period (in seconds) to auto-rotate the jwks for `access_token_keyset`. The default value 0 means no auto-rotation.
	AccessTokenKeysetRotatePeriod *float64 `default:"0" json:"access_token_keyset_rotate_period"`
	// Adjusts clock skew between the token issuer and Kong. The value is added to the token's `exp` claim before checking token expiry against Kong servers' current time in seconds. You can disable access token `expiry` verification altogether with `config.verify_access_token_expiry`.
	AccessTokenLeeway *float64 `default:"0" json:"access_token_leeway"`
	// If an access token is not provided or no `config.access_token_request_header` is specified, the plugin cannot verify the access token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Use this parameter to allow the request to proceed even when there is no token to check. If the token is provided, then this parameter has no effect
	AccessTokenOptional *bool `default:"false" json:"access_token_optional"`
	// This parameter tells the name of the header where to look for the access token.
	AccessTokenRequestHeader *string `default:"Authorization" json:"access_token_request_header"`
	// Specify the claim in an access token to verify against values of `config.access_token_scopes_required`.
	AccessTokenScopesClaim []string `json:"access_token_scopes_claim,omitempty"`
	// Specify the required values (or scopes) that are checked by a claim specified by `config.access_token_scopes_claim`.
	AccessTokenScopesRequired []string `json:"access_token_scopes_required,omitempty"`
	// When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm.
	AccessTokenSigningAlgorithm *AccessTokenSigningAlgorithm `default:"RS256" json:"access_token_signing_algorithm"`
	// Removes the `config.access_token_request_header` from the request after reading its value. With `config.access_token_upstream_header`, you can specify the upstream header where the plugin adds the Kong signed token. If you don't specify a value, such as use `null` or `""` (empty string), the plugin does not even try to sign or re-sign the token.
	AccessTokenUpstreamHeader *string `default:"Authorization:Bearer" json:"access_token_upstream_header"`
	// If you want to add or subtract (using a negative value) expiry time (in seconds) of the original access token, you can specify a value that is added to the original access token's `exp` claim.
	AccessTokenUpstreamLeeway *float64 `default:"0" json:"access_token_upstream_leeway"`
	// Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
	AddAccessTokenClaims map[string]any `json:"add_access_token_claims,omitempty"`
	// Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
	AddChannelTokenClaims map[string]any `json:"add_channel_token_claims,omitempty"`
	// Add customized claims to both tokens if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
	AddClaims map[string]any `json:"add_claims,omitempty"`
	// Whether to cache access token introspection results.
	CacheAccessTokenIntrospection *bool `default:"true" json:"cache_access_token_introspection"`
	// Whether to cache channel token introspection results.
	CacheChannelTokenIntrospection *bool `default:"true" json:"cache_channel_token_introspection"`
	// When the plugin tries to do channel token to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of valid values: `id`, `username`, and `custom_id`.
	ChannelTokenConsumerBy []ChannelTokenConsumerBy `json:"channel_token_consumer_by,omitempty"`
	// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter. Kong consumers have an `id`, a `username`, and a `custom_id`. If this parameter is enabled but the mapping fails, such as when there's a non-existent Kong consumer, the plugin responds with `403 Forbidden`.
	ChannelTokenConsumerClaim []string `json:"channel_token_consumer_claim,omitempty"`
	// When using `opaque` channel tokens, and you want to turn on channel token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise the plugin will not try introspection, and instead returns `401 Unauthorized` when using opaque channel tokens.
	ChannelTokenIntrospectionAuthorization *string `json:"channel_token_introspection_authorization,omitempty"`
	// If you need to pass additional body arguments to introspection endpoint when the plugin introspects the opaque channel token, you can use this config parameter to specify them. You should URL encode the value. For example: `resource=` or `a=1&b=&c`.
	ChannelTokenIntrospectionBodyArgs *string `json:"channel_token_introspection_body_args,omitempty"`
	// When the plugin tries to do channel token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values. Valid values are `id`, `username` and `custom_id`.
	ChannelTokenIntrospectionConsumerBy []ChannelTokenIntrospectionConsumerBy `json:"channel_token_introspection_consumer_by,omitempty"`
	// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in channel token introspection results to Kong consumer entity
	ChannelTokenIntrospectionConsumerClaim []string `json:"channel_token_introspection_consumer_claim,omitempty"`
	// When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise, the plugin does not try introspection and returns `401 Unauthorized` instead.
	ChannelTokenIntrospectionEndpoint *string `json:"channel_token_introspection_endpoint,omitempty"`
	// If you need to give `hint` parameter when introspecting a channel token, you can use this parameter to specify the value of such parameter. By default, a `hint` isn't sent with channel token introspection.
	ChannelTokenIntrospectionHint *string `json:"channel_token_introspection_hint,omitempty"`
	// If your introspection endpoint returns a channel token in one of the keys (or claims) in the introspection results (`JSON`), the plugin can use that value instead of the introspection results when doing expiry verification and signing of the new token issued by Kong.
	ChannelTokenIntrospectionJwtClaim []string `json:"channel_token_introspection_jwt_claim,omitempty"`
	// You can use this parameter to adjust clock skew between the token issuer introspection results and Kong. The value will be added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time (in seconds). You can disable channel token introspection `expiry` verification altogether with `config.verify_channel_token_introspection_expiry`.
	ChannelTokenIntrospectionLeeway *float64 `default:"0" json:"channel_token_introspection_leeway"`
	// Use this parameter to specify the claim/property in channel token introspection results (`JSON`) to be verified against values of `config.channel_token_introspection_scopes_required`. This supports nested claims.
	ChannelTokenIntrospectionScopesClaim []string `json:"channel_token_introspection_scopes_claim,omitempty"`
	// Use this parameter to specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.channel_token_introspection_scopes_claim`.
	ChannelTokenIntrospectionScopesRequired []string `json:"channel_token_introspection_scopes_required,omitempty"`
	// Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on channel token introspection.
	ChannelTokenIntrospectionTimeout *float64 `json:"channel_token_introspection_timeout,omitempty"`
	// The `iss` claim of the re-signed channel token is set to this value, which is `kong` by default. The original `iss` claim of the incoming token (possibly introspected) is stored in the `original_iss` claim of the newly signed channel token.
	ChannelTokenIssuer *string `default:"kong" json:"channel_token_issuer"`
	// If you want to use `config.verify_channel_token_signature`, you must specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the channel token. If you don't specify a URI and you pass a JWT token to the plugin, then the plugin responds with `401 Unauthorized`.
	ChannelTokenJwksURI *string `json:"channel_token_jwks_uri,omitempty"`
	// The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
	ChannelTokenJwksURIClientCertificate *string `json:"channel_token_jwks_uri_client_certificate,omitempty"`
	// The client password that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_username`
	ChannelTokenJwksURIClientPassword *string `json:"channel_token_jwks_uri_client_password,omitempty"`
	// The client username that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_password`
	ChannelTokenJwksURIClientUsername *string `json:"channel_token_jwks_uri_client_username,omitempty"`
	// Specify the period (in seconds) to auto-rotate the jwks for `channel_token_jwks_uri`. The default value 0 means no auto-rotation.
	ChannelTokenJwksURIRotatePeriod *float64 `default:"0" json:"channel_token_jwks_uri_rotate_period"`
	// The name of the keyset containing signing keys.
	ChannelTokenKeyset *string `default:"kong" json:"channel_token_keyset"`
	// The client certificate that will be used to authenticate Kong if `channel_token_keyset` is an https uri that requires mTLS Auth.
	ChannelTokenKeysetClientCertificate *string `json:"channel_token_keyset_client_certificate,omitempty"`
	// The client password that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_username`
	ChannelTokenKeysetClientPassword *string `json:"channel_token_keyset_client_password,omitempty"`
	// The client username that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_password`
	ChannelTokenKeysetClientUsername *string `json:"channel_token_keyset_client_username,omitempty"`
	// Specify the period (in seconds) to auto-rotate the jwks for `channel_token_keyset`. The default value 0 means no auto-rotation.
	ChannelTokenKeysetRotatePeriod *float64 `default:"0" json:"channel_token_keyset_rotate_period"`
	// Adjusts clock skew between the token issuer and Kong. The value will be added to token's `exp` claim before checking token expiry against Kong servers current time in seconds. You can disable channel token `expiry` verification altogether with `config.verify_channel_token_expiry`.
	ChannelTokenLeeway *float64 `default:"0" json:"channel_token_leeway"`
	// If a channel token is not provided or no `config.channel_token_request_header` is specified, the plugin cannot verify the channel token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Enable this parameter to allow the request to proceed even when there is no channel token to check. If the channel token is provided, then this parameter has no effect
	ChannelTokenOptional *bool `default:"false" json:"channel_token_optional"`
	// This parameter tells the name of the header where to look for the channel token. If you don't want to do anything with the channel token, then you can set this to `null` or `""` (empty string).
	ChannelTokenRequestHeader *string `json:"channel_token_request_header,omitempty"`
	// Specify the claim in a channel token to verify against values of `config.channel_token_scopes_required`. This supports nested claims.
	ChannelTokenScopesClaim []string `json:"channel_token_scopes_claim,omitempty"`
	// Specify the required values (or scopes) that are checked by a claim specified by `config.channel_token_scopes_claim`.
	ChannelTokenScopesRequired []string `json:"channel_token_scopes_required,omitempty"`
	// When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token.
	ChannelTokenSigningAlgorithm *ChannelTokenSigningAlgorithm `default:"RS256" json:"channel_token_signing_algorithm"`
	// This plugin removes the `config.channel_token_request_header` from the request after reading its value.
	ChannelTokenUpstreamHeader *string `json:"channel_token_upstream_header,omitempty"`
	// If you want to add or perhaps subtract (using negative value) expiry time of the original channel token, you can specify a value that is added to the original channel token's `exp` claim.
	ChannelTokenUpstreamLeeway *float64 `default:"0" json:"channel_token_upstream_leeway"`
	// If you don't want to support opaque access tokens, change this configuration parameter to `false` to disable introspection.
	EnableAccessTokenIntrospection *bool `default:"true" json:"enable_access_token_introspection"`
	// If you don't want to support opaque channel tokens, disable introspection by changing this configuration parameter to `false`.
	EnableChannelTokenIntrospection *bool `default:"true" json:"enable_channel_token_introspection"`
	// Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not accepted by default. If you need to accept such tokens for verification, enable this setting.
	EnableHsSignatures *bool `default:"false" json:"enable_hs_signatures"`
	// Writes log entries with some added information using `ngx.CRIT` (CRITICAL) level.
	EnableInstrumentation *bool `default:"false" json:"enable_instrumentation"`
	// The HTTP header name used to store the original access token.
	OriginalAccessTokenUpstreamHeader *string `json:"original_access_token_upstream_header,omitempty"`
	// The HTTP header name used to store the original channel token.
	OriginalChannelTokenUpstreamHeader *string `json:"original_channel_token_upstream_header,omitempty"`
	// When authentication or authorization fails, or there is an unexpected error, the plugin sends an `WWW-Authenticate` header with the `realm` attribute value.
	Realm *string `json:"realm,omitempty"`
	// remove claims. It should be an array, and each element is a claim key string.
	RemoveAccessTokenClaims []string `json:"remove_access_token_claims,omitempty"`
	// remove claims. It should be an array, and each element is a claim key string.
	RemoveChannelTokenClaims []string `json:"remove_channel_token_claims,omitempty"`
	// Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
	SetAccessTokenClaims map[string]any `json:"set_access_token_claims,omitempty"`
	// Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
	SetChannelTokenClaims map[string]any `json:"set_channel_token_claims,omitempty"`
	// Set customized claims to both tokens. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
	SetClaims map[string]any `json:"set_claims,omitempty"`
	// Use this parameter to enable and disable further checks on a payload before the new token is signed. If you set this to `true`, the expiry or scopes are not checked on a payload.
	TrustAccessTokenIntrospection *bool `default:"true" json:"trust_access_token_introspection"`
	// Providing an opaque channel token for plugin introspection, and verifying expiry and scopes on introspection results may make further payload checks unnecessary before the plugin signs a new token. This also applies when using a JWT token with introspection JSON as per config.channel_token_introspection_jwt_claim. Use this parameter to manage additional payload checks before signing a new token. With true (default), payload's expiry or scopes aren't checked.
	TrustChannelTokenIntrospection *bool `default:"true" json:"trust_channel_token_introspection"`
	// Quickly turn access token expiry verification off and on as needed.
	VerifyAccessTokenExpiry *bool `default:"true" json:"verify_access_token_expiry"`
	// Quickly turn access token introspection expiry verification off and on as needed.
	VerifyAccessTokenIntrospectionExpiry *bool `default:"true" json:"verify_access_token_introspection_expiry"`
	// Quickly turn off and on the access token introspection scopes verification, specified with `config.access_token_introspection_scopes_required`.
	VerifyAccessTokenIntrospectionScopes *bool `default:"true" json:"verify_access_token_introspection_scopes"`
	// Quickly turn off and on the access token required scopes verification, specified with `config.access_token_scopes_required`.
	VerifyAccessTokenScopes *bool `default:"true" json:"verify_access_token_scopes"`
	// Quickly turn access token signature verification off and on as needed.
	VerifyAccessTokenSignature *bool `default:"true" json:"verify_access_token_signature"`
	VerifyChannelTokenExpiry   *bool `default:"true" json:"verify_channel_token_expiry"`
	// Quickly turn on/off the channel token introspection expiry verification.
	VerifyChannelTokenIntrospectionExpiry *bool `default:"true" json:"verify_channel_token_introspection_expiry"`
	// Quickly turn on/off the channel token introspection scopes verification specified with `config.channel_token_introspection_scopes_required`.
	VerifyChannelTokenIntrospectionScopes *bool `default:"true" json:"verify_channel_token_introspection_scopes"`
	// Quickly turn on/off the channel token required scopes verification specified with `config.channel_token_scopes_required`.
	VerifyChannelTokenScopes *bool `default:"true" json:"verify_channel_token_scopes"`
	// Quickly turn on/off the channel token signature verification.
	VerifyChannelTokenSignature *bool `default:"true" json:"verify_channel_token_signature"`
}

func (j JwtSignerPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *JwtSignerPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *JwtSignerPluginConfig) GetAccessTokenConsumerBy() []AccessTokenConsumerBy {
	if o == nil {
		return nil
	}
	return o.AccessTokenConsumerBy
}

func (o *JwtSignerPluginConfig) GetAccessTokenConsumerClaim() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenConsumerClaim
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionAuthorization() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionAuthorization
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionBodyArgs() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionBodyArgs
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionConsumerBy() []AccessTokenIntrospectionConsumerBy {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionConsumerBy
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionConsumerClaim() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionConsumerClaim
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionEndpoint
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionHint() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionHint
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionJwtClaim() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionJwtClaim
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionLeeway() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionLeeway
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionScopesClaim() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionScopesClaim
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionScopesRequired() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionScopesRequired
}

func (o *JwtSignerPluginConfig) GetAccessTokenIntrospectionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessTokenIntrospectionTimeout
}

func (o *JwtSignerPluginConfig) GetAccessTokenIssuer() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenIssuer
}

func (o *JwtSignerPluginConfig) GetAccessTokenJwksURI() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenJwksURI
}

func (o *JwtSignerPluginConfig) GetAccessTokenJwksURIClientCertificate() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenJwksURIClientCertificate
}

func (o *JwtSignerPluginConfig) GetAccessTokenJwksURIClientPassword() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenJwksURIClientPassword
}

func (o *JwtSignerPluginConfig) GetAccessTokenJwksURIClientUsername() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenJwksURIClientUsername
}

func (o *JwtSignerPluginConfig) GetAccessTokenJwksURIRotatePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessTokenJwksURIRotatePeriod
}

func (o *JwtSignerPluginConfig) GetAccessTokenKeyset() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenKeyset
}

func (o *JwtSignerPluginConfig) GetAccessTokenKeysetClientCertificate() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenKeysetClientCertificate
}

func (o *JwtSignerPluginConfig) GetAccessTokenKeysetClientPassword() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenKeysetClientPassword
}

func (o *JwtSignerPluginConfig) GetAccessTokenKeysetClientUsername() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenKeysetClientUsername
}

func (o *JwtSignerPluginConfig) GetAccessTokenKeysetRotatePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessTokenKeysetRotatePeriod
}

func (o *JwtSignerPluginConfig) GetAccessTokenLeeway() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessTokenLeeway
}

func (o *JwtSignerPluginConfig) GetAccessTokenOptional() *bool {
	if o == nil {
		return nil
	}
	return o.AccessTokenOptional
}

func (o *JwtSignerPluginConfig) GetAccessTokenRequestHeader() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenRequestHeader
}

func (o *JwtSignerPluginConfig) GetAccessTokenScopesClaim() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenScopesClaim
}

func (o *JwtSignerPluginConfig) GetAccessTokenScopesRequired() []string {
	if o == nil {
		return nil
	}
	return o.AccessTokenScopesRequired
}

func (o *JwtSignerPluginConfig) GetAccessTokenSigningAlgorithm() *AccessTokenSigningAlgorithm {
	if o == nil {
		return nil
	}
	return o.AccessTokenSigningAlgorithm
}

func (o *JwtSignerPluginConfig) GetAccessTokenUpstreamHeader() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenUpstreamHeader
}

func (o *JwtSignerPluginConfig) GetAccessTokenUpstreamLeeway() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessTokenUpstreamLeeway
}

func (o *JwtSignerPluginConfig) GetAddAccessTokenClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.AddAccessTokenClaims
}

func (o *JwtSignerPluginConfig) GetAddChannelTokenClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.AddChannelTokenClaims
}

func (o *JwtSignerPluginConfig) GetAddClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.AddClaims
}

func (o *JwtSignerPluginConfig) GetCacheAccessTokenIntrospection() *bool {
	if o == nil {
		return nil
	}
	return o.CacheAccessTokenIntrospection
}

func (o *JwtSignerPluginConfig) GetCacheChannelTokenIntrospection() *bool {
	if o == nil {
		return nil
	}
	return o.CacheChannelTokenIntrospection
}

func (o *JwtSignerPluginConfig) GetChannelTokenConsumerBy() []ChannelTokenConsumerBy {
	if o == nil {
		return nil
	}
	return o.ChannelTokenConsumerBy
}

func (o *JwtSignerPluginConfig) GetChannelTokenConsumerClaim() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenConsumerClaim
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionAuthorization() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionAuthorization
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionBodyArgs() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionBodyArgs
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionConsumerBy() []ChannelTokenIntrospectionConsumerBy {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionConsumerBy
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionConsumerClaim() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionConsumerClaim
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionEndpoint
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionHint() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionHint
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionJwtClaim() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionJwtClaim
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionLeeway() *float64 {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionLeeway
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionScopesClaim() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionScopesClaim
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionScopesRequired() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionScopesRequired
}

func (o *JwtSignerPluginConfig) GetChannelTokenIntrospectionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIntrospectionTimeout
}

func (o *JwtSignerPluginConfig) GetChannelTokenIssuer() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenIssuer
}

func (o *JwtSignerPluginConfig) GetChannelTokenJwksURI() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenJwksURI
}

func (o *JwtSignerPluginConfig) GetChannelTokenJwksURIClientCertificate() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenJwksURIClientCertificate
}

func (o *JwtSignerPluginConfig) GetChannelTokenJwksURIClientPassword() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenJwksURIClientPassword
}

func (o *JwtSignerPluginConfig) GetChannelTokenJwksURIClientUsername() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenJwksURIClientUsername
}

func (o *JwtSignerPluginConfig) GetChannelTokenJwksURIRotatePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.ChannelTokenJwksURIRotatePeriod
}

func (o *JwtSignerPluginConfig) GetChannelTokenKeyset() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenKeyset
}

func (o *JwtSignerPluginConfig) GetChannelTokenKeysetClientCertificate() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenKeysetClientCertificate
}

func (o *JwtSignerPluginConfig) GetChannelTokenKeysetClientPassword() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenKeysetClientPassword
}

func (o *JwtSignerPluginConfig) GetChannelTokenKeysetClientUsername() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenKeysetClientUsername
}

func (o *JwtSignerPluginConfig) GetChannelTokenKeysetRotatePeriod() *float64 {
	if o == nil {
		return nil
	}
	return o.ChannelTokenKeysetRotatePeriod
}

func (o *JwtSignerPluginConfig) GetChannelTokenLeeway() *float64 {
	if o == nil {
		return nil
	}
	return o.ChannelTokenLeeway
}

func (o *JwtSignerPluginConfig) GetChannelTokenOptional() *bool {
	if o == nil {
		return nil
	}
	return o.ChannelTokenOptional
}

func (o *JwtSignerPluginConfig) GetChannelTokenRequestHeader() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenRequestHeader
}

func (o *JwtSignerPluginConfig) GetChannelTokenScopesClaim() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenScopesClaim
}

func (o *JwtSignerPluginConfig) GetChannelTokenScopesRequired() []string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenScopesRequired
}

func (o *JwtSignerPluginConfig) GetChannelTokenSigningAlgorithm() *ChannelTokenSigningAlgorithm {
	if o == nil {
		return nil
	}
	return o.ChannelTokenSigningAlgorithm
}

func (o *JwtSignerPluginConfig) GetChannelTokenUpstreamHeader() *string {
	if o == nil {
		return nil
	}
	return o.ChannelTokenUpstreamHeader
}

func (o *JwtSignerPluginConfig) GetChannelTokenUpstreamLeeway() *float64 {
	if o == nil {
		return nil
	}
	return o.ChannelTokenUpstreamLeeway
}

func (o *JwtSignerPluginConfig) GetEnableAccessTokenIntrospection() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAccessTokenIntrospection
}

func (o *JwtSignerPluginConfig) GetEnableChannelTokenIntrospection() *bool {
	if o == nil {
		return nil
	}
	return o.EnableChannelTokenIntrospection
}

func (o *JwtSignerPluginConfig) GetEnableHsSignatures() *bool {
	if o == nil {
		return nil
	}
	return o.EnableHsSignatures
}

func (o *JwtSignerPluginConfig) GetEnableInstrumentation() *bool {
	if o == nil {
		return nil
	}
	return o.EnableInstrumentation
}

func (o *JwtSignerPluginConfig) GetOriginalAccessTokenUpstreamHeader() *string {
	if o == nil {
		return nil
	}
	return o.OriginalAccessTokenUpstreamHeader
}

func (o *JwtSignerPluginConfig) GetOriginalChannelTokenUpstreamHeader() *string {
	if o == nil {
		return nil
	}
	return o.OriginalChannelTokenUpstreamHeader
}

func (o *JwtSignerPluginConfig) GetRealm() *string {
	if o == nil {
		return nil
	}
	return o.Realm
}

func (o *JwtSignerPluginConfig) GetRemoveAccessTokenClaims() []string {
	if o == nil {
		return nil
	}
	return o.RemoveAccessTokenClaims
}

func (o *JwtSignerPluginConfig) GetRemoveChannelTokenClaims() []string {
	if o == nil {
		return nil
	}
	return o.RemoveChannelTokenClaims
}

func (o *JwtSignerPluginConfig) GetSetAccessTokenClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.SetAccessTokenClaims
}

func (o *JwtSignerPluginConfig) GetSetChannelTokenClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.SetChannelTokenClaims
}

func (o *JwtSignerPluginConfig) GetSetClaims() map[string]any {
	if o == nil {
		return nil
	}
	return o.SetClaims
}

func (o *JwtSignerPluginConfig) GetTrustAccessTokenIntrospection() *bool {
	if o == nil {
		return nil
	}
	return o.TrustAccessTokenIntrospection
}

func (o *JwtSignerPluginConfig) GetTrustChannelTokenIntrospection() *bool {
	if o == nil {
		return nil
	}
	return o.TrustChannelTokenIntrospection
}

func (o *JwtSignerPluginConfig) GetVerifyAccessTokenExpiry() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyAccessTokenExpiry
}

func (o *JwtSignerPluginConfig) GetVerifyAccessTokenIntrospectionExpiry() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyAccessTokenIntrospectionExpiry
}

func (o *JwtSignerPluginConfig) GetVerifyAccessTokenIntrospectionScopes() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyAccessTokenIntrospectionScopes
}

func (o *JwtSignerPluginConfig) GetVerifyAccessTokenScopes() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyAccessTokenScopes
}

func (o *JwtSignerPluginConfig) GetVerifyAccessTokenSignature() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyAccessTokenSignature
}

func (o *JwtSignerPluginConfig) GetVerifyChannelTokenExpiry() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyChannelTokenExpiry
}

func (o *JwtSignerPluginConfig) GetVerifyChannelTokenIntrospectionExpiry() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyChannelTokenIntrospectionExpiry
}

func (o *JwtSignerPluginConfig) GetVerifyChannelTokenIntrospectionScopes() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyChannelTokenIntrospectionScopes
}

func (o *JwtSignerPluginConfig) GetVerifyChannelTokenScopes() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyChannelTokenScopes
}

func (o *JwtSignerPluginConfig) GetVerifyChannelTokenSignature() *bool {
	if o == nil {
		return nil
	}
	return o.VerifyChannelTokenSignature
}

type JwtSignerPluginProtocols string

const (
	JwtSignerPluginProtocolsGrpc  JwtSignerPluginProtocols = "grpc"
	JwtSignerPluginProtocolsGrpcs JwtSignerPluginProtocols = "grpcs"
	JwtSignerPluginProtocolsHTTP  JwtSignerPluginProtocols = "http"
	JwtSignerPluginProtocolsHTTPS JwtSignerPluginProtocols = "https"
)

func (e JwtSignerPluginProtocols) ToPointer() *JwtSignerPluginProtocols {
	return &e
}
func (e *JwtSignerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = JwtSignerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JwtSignerPluginProtocols: %v", v)
	}
}

// JwtSignerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type JwtSignerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *JwtSignerPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// JwtSignerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type JwtSignerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *JwtSignerPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// JwtSignerPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type JwtSignerPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                     `default:"true" json:"enabled"`
	ID           *string                   `json:"id,omitempty"`
	InstanceName *string                   `default:"null" json:"instance_name"`
	name         string                    `const:"jwt-signer" json:"name"`
	Ordering     *JwtSignerPluginOrdering  `json:"ordering"`
	Partials     []JwtSignerPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                 `json:"updated_at,omitempty"`
	Config    *JwtSignerPluginConfig `json:"config,omitempty"`
	// A set of strings representing HTTP protocols.
	Protocols []JwtSignerPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *JwtSignerPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *JwtSignerPluginService `json:"service"`
}

func (j JwtSignerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *JwtSignerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *JwtSignerPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *JwtSignerPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *JwtSignerPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *JwtSignerPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *JwtSignerPlugin) GetName() string {
	return "jwt-signer"
}

func (o *JwtSignerPlugin) GetOrdering() *JwtSignerPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *JwtSignerPlugin) GetPartials() []JwtSignerPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *JwtSignerPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *JwtSignerPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *JwtSignerPlugin) GetConfig() *JwtSignerPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *JwtSignerPlugin) GetProtocols() []JwtSignerPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *JwtSignerPlugin) GetRoute() *JwtSignerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *JwtSignerPlugin) GetService() *JwtSignerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
