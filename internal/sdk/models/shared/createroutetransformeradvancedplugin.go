// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateRouteTransformerAdvancedPluginConfig struct {
	EscapePath *bool   `json:"escape_path,omitempty"`
	Host       *string `json:"host,omitempty"`
	Path       *string `json:"path,omitempty"`
	Port       *string `json:"port,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginConfig) GetEscapePath() *bool {
	if o == nil {
		return nil
	}
	return o.EscapePath
}

func (o *CreateRouteTransformerAdvancedPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateRouteTransformerAdvancedPluginConfig) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateRouteTransformerAdvancedPluginConfig) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

type CreateRouteTransformerAdvancedPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateRouteTransformerAdvancedPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateRouteTransformerAdvancedPluginOrdering struct {
	After  *CreateRouteTransformerAdvancedPluginAfter  `json:"after,omitempty"`
	Before *CreateRouteTransformerAdvancedPluginBefore `json:"before,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginOrdering) GetAfter() *CreateRouteTransformerAdvancedPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateRouteTransformerAdvancedPluginOrdering) GetBefore() *CreateRouteTransformerAdvancedPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateRouteTransformerAdvancedPluginProtocols string

const (
	CreateRouteTransformerAdvancedPluginProtocolsGrpc           CreateRouteTransformerAdvancedPluginProtocols = "grpc"
	CreateRouteTransformerAdvancedPluginProtocolsGrpcs          CreateRouteTransformerAdvancedPluginProtocols = "grpcs"
	CreateRouteTransformerAdvancedPluginProtocolsHTTP           CreateRouteTransformerAdvancedPluginProtocols = "http"
	CreateRouteTransformerAdvancedPluginProtocolsHTTPS          CreateRouteTransformerAdvancedPluginProtocols = "https"
	CreateRouteTransformerAdvancedPluginProtocolsTCP            CreateRouteTransformerAdvancedPluginProtocols = "tcp"
	CreateRouteTransformerAdvancedPluginProtocolsTLS            CreateRouteTransformerAdvancedPluginProtocols = "tls"
	CreateRouteTransformerAdvancedPluginProtocolsTLSPassthrough CreateRouteTransformerAdvancedPluginProtocols = "tls_passthrough"
	CreateRouteTransformerAdvancedPluginProtocolsUDP            CreateRouteTransformerAdvancedPluginProtocols = "udp"
	CreateRouteTransformerAdvancedPluginProtocolsWs             CreateRouteTransformerAdvancedPluginProtocols = "ws"
	CreateRouteTransformerAdvancedPluginProtocolsWss            CreateRouteTransformerAdvancedPluginProtocols = "wss"
)

func (e CreateRouteTransformerAdvancedPluginProtocols) ToPointer() *CreateRouteTransformerAdvancedPluginProtocols {
	return &e
}
func (e *CreateRouteTransformerAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateRouteTransformerAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteTransformerAdvancedPluginProtocols: %v", v)
	}
}

// CreateRouteTransformerAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateRouteTransformerAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRouteTransformerAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRouteTransformerAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateRouteTransformerAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRouteTransformerAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateRouteTransformerAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteTransformerAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRouteTransformerAdvancedPlugin struct {
	Config *CreateRouteTransformerAdvancedPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                         `json:"enabled,omitempty"`
	InstanceName *string                                       `json:"instance_name,omitempty"`
	name         *string                                       `const:"route-transformer-advanced" json:"name,omitempty"`
	Ordering     *CreateRouteTransformerAdvancedPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateRouteTransformerAdvancedPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateRouteTransformerAdvancedPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateRouteTransformerAdvancedPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateRouteTransformerAdvancedPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateRouteTransformerAdvancedPluginService `json:"service,omitempty"`
}

func (c CreateRouteTransformerAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRouteTransformerAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateRouteTransformerAdvancedPlugin) GetConfig() *CreateRouteTransformerAdvancedPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateRouteTransformerAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateRouteTransformerAdvancedPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateRouteTransformerAdvancedPlugin) GetName() *string {
	return types.String("route-transformer-advanced")
}

func (o *CreateRouteTransformerAdvancedPlugin) GetOrdering() *CreateRouteTransformerAdvancedPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateRouteTransformerAdvancedPlugin) GetProtocols() []CreateRouteTransformerAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateRouteTransformerAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateRouteTransformerAdvancedPlugin) GetConsumer() *CreateRouteTransformerAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateRouteTransformerAdvancedPlugin) GetConsumerGroup() *CreateRouteTransformerAdvancedPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateRouteTransformerAdvancedPlugin) GetRoute() *CreateRouteTransformerAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateRouteTransformerAdvancedPlugin) GetService() *CreateRouteTransformerAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
