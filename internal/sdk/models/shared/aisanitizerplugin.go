// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type AiSanitizerPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiSanitizerPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiSanitizerPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiSanitizerPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiSanitizerPluginOrdering struct {
	After  *AiSanitizerPluginAfter  `json:"after,omitempty"`
	Before *AiSanitizerPluginBefore `json:"before,omitempty"`
}

func (o *AiSanitizerPluginOrdering) GetAfter() *AiSanitizerPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *AiSanitizerPluginOrdering) GetBefore() *AiSanitizerPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type AiSanitizerPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *AiSanitizerPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiSanitizerPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AiSanitizerPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type Anonymize string

const (
	AnonymizeAll               Anonymize = "all"
	AnonymizeAllAndCredentials Anonymize = "all_and_credentials"
	AnonymizeBank              Anonymize = "bank"
	AnonymizeCredentials       Anonymize = "credentials"
	AnonymizeCreditcard        Anonymize = "creditcard"
	AnonymizeCrypto            Anonymize = "crypto"
	AnonymizeCustom            Anonymize = "custom"
	AnonymizeDate              Anonymize = "date"
	AnonymizeDomain            Anonymize = "domain"
	AnonymizeDriverlicense     Anonymize = "driverlicense"
	AnonymizeEmail             Anonymize = "email"
	AnonymizeGeneral           Anonymize = "general"
	AnonymizeIP                Anonymize = "ip"
	AnonymizeMedical           Anonymize = "medical"
	AnonymizeNationalid        Anonymize = "nationalid"
	AnonymizeNrp               Anonymize = "nrp"
	AnonymizePassport          Anonymize = "passport"
	AnonymizePhone             Anonymize = "phone"
	AnonymizeSsn               Anonymize = "ssn"
	AnonymizeURL               Anonymize = "url"
)

func (e Anonymize) ToPointer() *Anonymize {
	return &e
}
func (e *Anonymize) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "all_and_credentials":
		fallthrough
	case "bank":
		fallthrough
	case "credentials":
		fallthrough
	case "creditcard":
		fallthrough
	case "crypto":
		fallthrough
	case "custom":
		fallthrough
	case "date":
		fallthrough
	case "domain":
		fallthrough
	case "driverlicense":
		fallthrough
	case "email":
		fallthrough
	case "general":
		fallthrough
	case "ip":
		fallthrough
	case "medical":
		fallthrough
	case "nationalid":
		fallthrough
	case "nrp":
		fallthrough
	case "passport":
		fallthrough
	case "phone":
		fallthrough
	case "ssn":
		fallthrough
	case "url":
		*e = Anonymize(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Anonymize: %v", v)
	}
}

type CustomPatterns struct {
	Name  string   `json:"name"`
	Regex string   `json:"regex"`
	Score *float64 `json:"score,omitempty"`
}

func (o *CustomPatterns) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomPatterns) GetRegex() string {
	if o == nil {
		return ""
	}
	return o.Regex
}

func (o *CustomPatterns) GetScore() *float64 {
	if o == nil {
		return nil
	}
	return o.Score
}

// RedactType - What value to be used to redacted to
type RedactType string

const (
	RedactTypePlaceholder RedactType = "placeholder"
	RedactTypeSynthetic   RedactType = "synthetic"
)

func (e RedactType) ToPointer() *RedactType {
	return &e
}
func (e *RedactType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "placeholder":
		fallthrough
	case "synthetic":
		*e = RedactType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RedactType: %v", v)
	}
}

type AiSanitizerPluginConfig struct {
	// List of types to be anonymized
	Anonymize []Anonymize `json:"anonymize,omitempty"`
	// List of custom patterns to be used for anonymization
	CustomPatterns []CustomPatterns `json:"custom_patterns,omitempty"`
	// The host of the sanitizer
	Host *string `json:"host,omitempty"`
	// The keepalive timeout for the established http connnection
	KeepaliveTimeout *float64 `json:"keepalive_timeout,omitempty"`
	// The port of the sanitizer
	Port *float64 `json:"port,omitempty"`
	// Whether to recover redacted data
	RecoverRedacted *bool `json:"recover_redacted,omitempty"`
	// What value to be used to redacted to
	RedactType *RedactType `json:"redact_type,omitempty"`
	// The protocol can be http and https
	Scheme *string `json:"scheme,omitempty"`
	// Stop processing if an error occurs
	StopOnError *bool `json:"stop_on_error,omitempty"`
	// Connection timeout with the sanitizer
	Timeout *float64 `json:"timeout,omitempty"`
}

func (o *AiSanitizerPluginConfig) GetAnonymize() []Anonymize {
	if o == nil {
		return nil
	}
	return o.Anonymize
}

func (o *AiSanitizerPluginConfig) GetCustomPatterns() []CustomPatterns {
	if o == nil {
		return nil
	}
	return o.CustomPatterns
}

func (o *AiSanitizerPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AiSanitizerPluginConfig) GetKeepaliveTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveTimeout
}

func (o *AiSanitizerPluginConfig) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AiSanitizerPluginConfig) GetRecoverRedacted() *bool {
	if o == nil {
		return nil
	}
	return o.RecoverRedacted
}

func (o *AiSanitizerPluginConfig) GetRedactType() *RedactType {
	if o == nil {
		return nil
	}
	return o.RedactType
}

func (o *AiSanitizerPluginConfig) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *AiSanitizerPluginConfig) GetStopOnError() *bool {
	if o == nil {
		return nil
	}
	return o.StopOnError
}

func (o *AiSanitizerPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

// AiSanitizerPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiSanitizerPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSanitizerPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiSanitizerPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiSanitizerPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSanitizerPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AiSanitizerPluginProtocols string

const (
	AiSanitizerPluginProtocolsGrpc  AiSanitizerPluginProtocols = "grpc"
	AiSanitizerPluginProtocolsGrpcs AiSanitizerPluginProtocols = "grpcs"
	AiSanitizerPluginProtocolsHTTP  AiSanitizerPluginProtocols = "http"
	AiSanitizerPluginProtocolsHTTPS AiSanitizerPluginProtocols = "https"
)

func (e AiSanitizerPluginProtocols) ToPointer() *AiSanitizerPluginProtocols {
	return &e
}
func (e *AiSanitizerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiSanitizerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSanitizerPluginProtocols: %v", v)
	}
}

// AiSanitizerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiSanitizerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSanitizerPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiSanitizerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiSanitizerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSanitizerPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiSanitizerPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiSanitizerPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                    `json:"instance_name,omitempty"`
	name         string                     `const:"ai-sanitizer" json:"name"`
	Ordering     *AiSanitizerPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []AiSanitizerPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                   `json:"updated_at,omitempty"`
	Config    *AiSanitizerPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiSanitizerPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiSanitizerPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiSanitizerPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiSanitizerPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiSanitizerPluginService `json:"service"`
}

func (a AiSanitizerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSanitizerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSanitizerPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AiSanitizerPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AiSanitizerPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiSanitizerPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AiSanitizerPlugin) GetName() string {
	return "ai-sanitizer"
}

func (o *AiSanitizerPlugin) GetOrdering() *AiSanitizerPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AiSanitizerPlugin) GetPartials() []AiSanitizerPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *AiSanitizerPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AiSanitizerPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AiSanitizerPlugin) GetConfig() *AiSanitizerPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *AiSanitizerPlugin) GetConsumer() *AiSanitizerPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AiSanitizerPlugin) GetConsumerGroup() *AiSanitizerPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AiSanitizerPlugin) GetProtocols() []AiSanitizerPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AiSanitizerPlugin) GetRoute() *AiSanitizerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AiSanitizerPlugin) GetService() *AiSanitizerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
