// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type CorsPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (c *CorsPluginAfter) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type CorsPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (c *CorsPluginBefore) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type CorsPluginOrdering struct {
	After  *CorsPluginAfter  `json:"after,omitempty"`
	Before *CorsPluginBefore `json:"before,omitempty"`
}

func (c *CorsPluginOrdering) GetAfter() *CorsPluginAfter {
	if c == nil {
		return nil
	}
	return c.After
}

func (c *CorsPluginOrdering) GetBefore() *CorsPluginBefore {
	if c == nil {
		return nil
	}
	return c.Before
}

type CorsPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (c *CorsPluginPartials) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CorsPluginPartials) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CorsPluginPartials) GetPath() *string {
	if c == nil {
		return nil
	}
	return c.Path
}

type Methods string

const (
	MethodsConnect Methods = "CONNECT"
	MethodsDelete  Methods = "DELETE"
	MethodsGet     Methods = "GET"
	MethodsHead    Methods = "HEAD"
	MethodsOptions Methods = "OPTIONS"
	MethodsPatch   Methods = "PATCH"
	MethodsPost    Methods = "POST"
	MethodsPut     Methods = "PUT"
	MethodsTrace   Methods = "TRACE"
)

func (e Methods) ToPointer() *Methods {
	return &e
}
func (e *Methods) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONNECT":
		fallthrough
	case "DELETE":
		fallthrough
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "OPTIONS":
		fallthrough
	case "PATCH":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "TRACE":
		*e = Methods(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Methods: %v", v)
	}
}

type CorsPluginConfig struct {
	// A boolean value that skip cors response headers when origin header of request is empty
	AllowOriginAbsent *bool `default:"true" json:"allow_origin_absent"`
	// Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.
	Credentials *bool `default:"false" json:"credentials"`
	// Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.
	ExposedHeaders []string `json:"exposed_headers"`
	// Value for the `Access-Control-Allow-Headers` header.
	Headers []string `json:"headers"`
	// Indicates how long the results of the preflight request can be cached, in `seconds`.
	MaxAge *float64 `default:"null" json:"max_age"`
	// 'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'
	Methods []Methods `json:"methods,omitempty"`
	// List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.
	Origins []string `json:"origins"`
	// A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.
	PreflightContinue *bool `default:"false" json:"preflight_continue"`
	// Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.
	PrivateNetwork *bool `default:"false" json:"private_network"`
}

func (c CorsPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CorsPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CorsPluginConfig) GetAllowOriginAbsent() *bool {
	if c == nil {
		return nil
	}
	return c.AllowOriginAbsent
}

func (c *CorsPluginConfig) GetCredentials() *bool {
	if c == nil {
		return nil
	}
	return c.Credentials
}

func (c *CorsPluginConfig) GetExposedHeaders() []string {
	if c == nil {
		return nil
	}
	return c.ExposedHeaders
}

func (c *CorsPluginConfig) GetHeaders() []string {
	if c == nil {
		return nil
	}
	return c.Headers
}

func (c *CorsPluginConfig) GetMaxAge() *float64 {
	if c == nil {
		return nil
	}
	return c.MaxAge
}

func (c *CorsPluginConfig) GetMethods() []Methods {
	if c == nil {
		return nil
	}
	return c.Methods
}

func (c *CorsPluginConfig) GetOrigins() []string {
	if c == nil {
		return nil
	}
	return c.Origins
}

func (c *CorsPluginConfig) GetPreflightContinue() *bool {
	if c == nil {
		return nil
	}
	return c.PreflightContinue
}

func (c *CorsPluginConfig) GetPrivateNetwork() *bool {
	if c == nil {
		return nil
	}
	return c.PrivateNetwork
}

type CorsPluginProtocols string

const (
	CorsPluginProtocolsGrpc  CorsPluginProtocols = "grpc"
	CorsPluginProtocolsGrpcs CorsPluginProtocols = "grpcs"
	CorsPluginProtocolsHTTP  CorsPluginProtocols = "http"
	CorsPluginProtocolsHTTPS CorsPluginProtocols = "https"
)

func (e CorsPluginProtocols) ToPointer() *CorsPluginProtocols {
	return &e
}
func (e *CorsPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = CorsPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorsPluginProtocols: %v", v)
	}
}

// CorsPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type CorsPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (c *CorsPluginRoute) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// CorsPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CorsPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (c *CorsPluginService) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// CorsPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type CorsPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string             `default:"null" json:"instance_name"`
	name         string              `const:"cors" json:"name"`
	Ordering     *CorsPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []CorsPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64            `json:"updated_at,omitempty"`
	Config    *CorsPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []CorsPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *CorsPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CorsPluginService `json:"service"`
}

func (c CorsPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CorsPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (c *CorsPlugin) GetCreatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CorsPlugin) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CorsPlugin) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CorsPlugin) GetInstanceName() *string {
	if c == nil {
		return nil
	}
	return c.InstanceName
}

func (c *CorsPlugin) GetName() string {
	return "cors"
}

func (c *CorsPlugin) GetOrdering() *CorsPluginOrdering {
	if c == nil {
		return nil
	}
	return c.Ordering
}

func (c *CorsPlugin) GetPartials() []CorsPluginPartials {
	if c == nil {
		return nil
	}
	return c.Partials
}

func (c *CorsPlugin) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CorsPlugin) GetUpdatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CorsPlugin) GetConfig() *CorsPluginConfig {
	if c == nil {
		return nil
	}
	return c.Config
}

func (c *CorsPlugin) GetProtocols() []CorsPluginProtocols {
	if c == nil {
		return nil
	}
	return c.Protocols
}

func (c *CorsPlugin) GetRoute() *CorsPluginRoute {
	if c == nil {
		return nil
	}
	return c.Route
}

func (c *CorsPlugin) GetService() *CorsPluginService {
	if c == nil {
		return nil
	}
	return c.Service
}
