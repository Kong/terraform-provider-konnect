// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

type CreateResponseTransformerAdvancedPluginProtocols string

const (
	CreateResponseTransformerAdvancedPluginProtocolsGrpc           CreateResponseTransformerAdvancedPluginProtocols = "grpc"
	CreateResponseTransformerAdvancedPluginProtocolsGrpcs          CreateResponseTransformerAdvancedPluginProtocols = "grpcs"
	CreateResponseTransformerAdvancedPluginProtocolsHTTP           CreateResponseTransformerAdvancedPluginProtocols = "http"
	CreateResponseTransformerAdvancedPluginProtocolsHTTPS          CreateResponseTransformerAdvancedPluginProtocols = "https"
	CreateResponseTransformerAdvancedPluginProtocolsTCP            CreateResponseTransformerAdvancedPluginProtocols = "tcp"
	CreateResponseTransformerAdvancedPluginProtocolsTLS            CreateResponseTransformerAdvancedPluginProtocols = "tls"
	CreateResponseTransformerAdvancedPluginProtocolsTLSPassthrough CreateResponseTransformerAdvancedPluginProtocols = "tls_passthrough"
	CreateResponseTransformerAdvancedPluginProtocolsUDP            CreateResponseTransformerAdvancedPluginProtocols = "udp"
	CreateResponseTransformerAdvancedPluginProtocolsWs             CreateResponseTransformerAdvancedPluginProtocols = "ws"
	CreateResponseTransformerAdvancedPluginProtocolsWss            CreateResponseTransformerAdvancedPluginProtocols = "wss"
)

func (e CreateResponseTransformerAdvancedPluginProtocols) ToPointer() *CreateResponseTransformerAdvancedPluginProtocols {
	return &e
}

func (e *CreateResponseTransformerAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateResponseTransformerAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResponseTransformerAdvancedPluginProtocols: %v", v)
	}
}

// CreateResponseTransformerAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateResponseTransformerAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateResponseTransformerAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateResponseTransformerAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateResponseTransformerAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateResponseTransformerAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateResponseTransformerAdvancedPluginRemove struct {
	JSON     []string `json:"json,omitempty"`
	Headers  []string `json:"headers,omitempty"`
	IfStatus []string `json:"if_status,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginRemove) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *CreateResponseTransformerAdvancedPluginRemove) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateResponseTransformerAdvancedPluginRemove) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

type CreateResponseTransformerAdvancedPluginRename struct {
	Headers  []string `json:"headers,omitempty"`
	IfStatus []string `json:"if_status,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginRename) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateResponseTransformerAdvancedPluginRename) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

type CreateResponseTransformerAdvancedPluginJSONTypes string

const (
	CreateResponseTransformerAdvancedPluginJSONTypesBoolean CreateResponseTransformerAdvancedPluginJSONTypes = "boolean"
	CreateResponseTransformerAdvancedPluginJSONTypesNumber  CreateResponseTransformerAdvancedPluginJSONTypes = "number"
	CreateResponseTransformerAdvancedPluginJSONTypesString  CreateResponseTransformerAdvancedPluginJSONTypes = "string"
)

func (e CreateResponseTransformerAdvancedPluginJSONTypes) ToPointer() *CreateResponseTransformerAdvancedPluginJSONTypes {
	return &e
}

func (e *CreateResponseTransformerAdvancedPluginJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = CreateResponseTransformerAdvancedPluginJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResponseTransformerAdvancedPluginJSONTypes: %v", v)
	}
}

type CreateResponseTransformerAdvancedPluginReplace struct {
	// String with which to replace the entire response body.
	Body      *string                                            `json:"body,omitempty"`
	JSON      []string                                           `json:"json,omitempty"`
	JSONTypes []CreateResponseTransformerAdvancedPluginJSONTypes `json:"json_types,omitempty"`
	Headers   []string                                           `json:"headers,omitempty"`
	IfStatus  []string                                           `json:"if_status,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginReplace) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateResponseTransformerAdvancedPluginReplace) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *CreateResponseTransformerAdvancedPluginReplace) GetJSONTypes() []CreateResponseTransformerAdvancedPluginJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *CreateResponseTransformerAdvancedPluginReplace) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateResponseTransformerAdvancedPluginReplace) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

type CreateResponseTransformerAdvancedPluginConfigJSONTypes string

const (
	CreateResponseTransformerAdvancedPluginConfigJSONTypesBoolean CreateResponseTransformerAdvancedPluginConfigJSONTypes = "boolean"
	CreateResponseTransformerAdvancedPluginConfigJSONTypesNumber  CreateResponseTransformerAdvancedPluginConfigJSONTypes = "number"
	CreateResponseTransformerAdvancedPluginConfigJSONTypesString  CreateResponseTransformerAdvancedPluginConfigJSONTypes = "string"
)

func (e CreateResponseTransformerAdvancedPluginConfigJSONTypes) ToPointer() *CreateResponseTransformerAdvancedPluginConfigJSONTypes {
	return &e
}

func (e *CreateResponseTransformerAdvancedPluginConfigJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = CreateResponseTransformerAdvancedPluginConfigJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResponseTransformerAdvancedPluginConfigJSONTypes: %v", v)
	}
}

type CreateResponseTransformerAdvancedPluginAdd struct {
	JSON      []string                                                 `json:"json,omitempty"`
	JSONTypes []CreateResponseTransformerAdvancedPluginConfigJSONTypes `json:"json_types,omitempty"`
	Headers   []string                                                 `json:"headers,omitempty"`
	IfStatus  []string                                                 `json:"if_status,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginAdd) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *CreateResponseTransformerAdvancedPluginAdd) GetJSONTypes() []CreateResponseTransformerAdvancedPluginConfigJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *CreateResponseTransformerAdvancedPluginAdd) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateResponseTransformerAdvancedPluginAdd) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

type CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes string

const (
	CreateResponseTransformerAdvancedPluginConfigAppendJSONTypesBoolean CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes = "boolean"
	CreateResponseTransformerAdvancedPluginConfigAppendJSONTypesNumber  CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes = "number"
	CreateResponseTransformerAdvancedPluginConfigAppendJSONTypesString  CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes = "string"
)

func (e CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes) ToPointer() *CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes {
	return &e
}

func (e *CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes: %v", v)
	}
}

type CreateResponseTransformerAdvancedPluginAppend struct {
	JSON      []string                                                       `json:"json,omitempty"`
	JSONTypes []CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes `json:"json_types,omitempty"`
	Headers   []string                                                       `json:"headers,omitempty"`
	IfStatus  []string                                                       `json:"if_status,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginAppend) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *CreateResponseTransformerAdvancedPluginAppend) GetJSONTypes() []CreateResponseTransformerAdvancedPluginConfigAppendJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *CreateResponseTransformerAdvancedPluginAppend) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateResponseTransformerAdvancedPluginAppend) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

type CreateResponseTransformerAdvancedPluginAllow struct {
	JSON []string `json:"json,omitempty"`
}

func (o *CreateResponseTransformerAdvancedPluginAllow) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

type Transform struct {
	Functions []string `json:"functions,omitempty"`
	IfStatus  []string `json:"if_status,omitempty"`
	JSON      []string `json:"json,omitempty"`
}

func (o *Transform) GetFunctions() []string {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *Transform) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

func (o *Transform) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

type CreateResponseTransformerAdvancedPluginConfig struct {
	Remove    *CreateResponseTransformerAdvancedPluginRemove  `json:"remove,omitempty"`
	Rename    *CreateResponseTransformerAdvancedPluginRename  `json:"rename,omitempty"`
	Replace   *CreateResponseTransformerAdvancedPluginReplace `json:"replace,omitempty"`
	Add       *CreateResponseTransformerAdvancedPluginAdd     `json:"add,omitempty"`
	Append    *CreateResponseTransformerAdvancedPluginAppend  `json:"append,omitempty"`
	Allow     *CreateResponseTransformerAdvancedPluginAllow   `json:"allow,omitempty"`
	Transform *Transform                                      `json:"transform,omitempty"`
	// Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects..
	DotsInKeys *bool `default:"true" json:"dots_in_keys"`
}

func (c CreateResponseTransformerAdvancedPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateResponseTransformerAdvancedPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetRemove() *CreateResponseTransformerAdvancedPluginRemove {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetRename() *CreateResponseTransformerAdvancedPluginRename {
	if o == nil {
		return nil
	}
	return o.Rename
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetReplace() *CreateResponseTransformerAdvancedPluginReplace {
	if o == nil {
		return nil
	}
	return o.Replace
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetAdd() *CreateResponseTransformerAdvancedPluginAdd {
	if o == nil {
		return nil
	}
	return o.Add
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetAppend() *CreateResponseTransformerAdvancedPluginAppend {
	if o == nil {
		return nil
	}
	return o.Append
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetAllow() *CreateResponseTransformerAdvancedPluginAllow {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetTransform() *Transform {
	if o == nil {
		return nil
	}
	return o.Transform
}

func (o *CreateResponseTransformerAdvancedPluginConfig) GetDotsInKeys() *bool {
	if o == nil {
		return nil
	}
	return o.DotsInKeys
}

// CreateResponseTransformerAdvancedPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type CreateResponseTransformerAdvancedPlugin struct {
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"response-transformer-advanced" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateResponseTransformerAdvancedPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *CreateResponseTransformerAdvancedPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateResponseTransformerAdvancedPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateResponseTransformerAdvancedPluginService `json:"service,omitempty"`
	Config  CreateResponseTransformerAdvancedPluginConfig   `json:"config"`
}

func (c CreateResponseTransformerAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateResponseTransformerAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateResponseTransformerAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateResponseTransformerAdvancedPlugin) GetName() string {
	return "response-transformer-advanced"
}

func (o *CreateResponseTransformerAdvancedPlugin) GetProtocols() []CreateResponseTransformerAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateResponseTransformerAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateResponseTransformerAdvancedPlugin) GetConsumer() *CreateResponseTransformerAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateResponseTransformerAdvancedPlugin) GetRoute() *CreateResponseTransformerAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateResponseTransformerAdvancedPlugin) GetService() *CreateResponseTransformerAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *CreateResponseTransformerAdvancedPlugin) GetConfig() CreateResponseTransformerAdvancedPluginConfig {
	if o == nil {
		return CreateResponseTransformerAdvancedPluginConfig{}
	}
	return o.Config
}
