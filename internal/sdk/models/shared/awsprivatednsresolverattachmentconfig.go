// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AWSPrivateDNSResolverType string

const (
	AWSPrivateDNSResolverTypeAwsOutboundResolver AWSPrivateDNSResolverType = "aws-outbound-resolver"
)

func (e AWSPrivateDNSResolverType) ToPointer() *AWSPrivateDNSResolverType {
	return &e
}
func (e *AWSPrivateDNSResolverType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws-outbound-resolver":
		*e = AWSPrivateDNSResolverType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSPrivateDNSResolverType: %v", v)
	}
}

type AwsPrivateDNSResolverAttachmentConfig struct {
	Kind AWSPrivateDNSResolverType `json:"kind"`
	// Object that contains mappings from proxied internal domains to remote DNS server IP address for a Private DNS Resolver.
	//
	DNSConfig map[string]PrivateDNSResolverConfig `json:"dns_config"`
}

func (o *AwsPrivateDNSResolverAttachmentConfig) GetKind() AWSPrivateDNSResolverType {
	if o == nil {
		return AWSPrivateDNSResolverType("")
	}
	return o.Kind
}

func (o *AwsPrivateDNSResolverAttachmentConfig) GetDNSConfig() map[string]PrivateDNSResolverConfig {
	if o == nil {
		return map[string]PrivateDNSResolverConfig{}
	}
	return o.DNSConfig
}
