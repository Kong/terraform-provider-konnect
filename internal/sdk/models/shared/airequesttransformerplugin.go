// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

// AiRequestTransformerPluginParamLocation - Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
type AiRequestTransformerPluginParamLocation string

const (
	AiRequestTransformerPluginParamLocationQuery AiRequestTransformerPluginParamLocation = "query"
	AiRequestTransformerPluginParamLocationBody  AiRequestTransformerPluginParamLocation = "body"
)

func (e AiRequestTransformerPluginParamLocation) ToPointer() *AiRequestTransformerPluginParamLocation {
	return &e
}
func (e *AiRequestTransformerPluginParamLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "query":
		fallthrough
	case "body":
		*e = AiRequestTransformerPluginParamLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginParamLocation: %v", v)
	}
}

type AiRequestTransformerPluginAuth struct {
	// If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.
	AllowOverride *bool `json:"allow_override,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
	AzureClientID *string `json:"azure_client_id,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
	AzureClientSecret *string `json:"azure_client_secret,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
	AzureTenantID *string `json:"azure_tenant_id,omitempty"`
	// Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
	AzureUseManagedIdentity *bool `json:"azure_use_managed_identity,omitempty"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.
	GcpServiceAccountJSON *string `json:"gcp_service_account_json,omitempty"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `json:"gcp_use_service_account,omitempty"`
	// If AI model requires authentication via Authorization or API key header, specify its name here.
	HeaderName *string `json:"header_name,omitempty"`
	// Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
	HeaderValue *string `json:"header_value,omitempty"`
	// Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
	ParamLocation *AiRequestTransformerPluginParamLocation `json:"param_location,omitempty"`
	// If AI model requires authentication via query parameter, specify its name here.
	ParamName *string `json:"param_name,omitempty"`
	// Specify the full parameter value for 'param_name'.
	ParamValue *string `json:"param_value,omitempty"`
}

func (o *AiRequestTransformerPluginAuth) GetAllowOverride() *bool {
	if o == nil {
		return nil
	}
	return o.AllowOverride
}

func (o *AiRequestTransformerPluginAuth) GetAwsAccessKeyID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccessKeyID
}

func (o *AiRequestTransformerPluginAuth) GetAwsSecretAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretAccessKey
}

func (o *AiRequestTransformerPluginAuth) GetAzureClientID() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientID
}

func (o *AiRequestTransformerPluginAuth) GetAzureClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientSecret
}

func (o *AiRequestTransformerPluginAuth) GetAzureTenantID() *string {
	if o == nil {
		return nil
	}
	return o.AzureTenantID
}

func (o *AiRequestTransformerPluginAuth) GetAzureUseManagedIdentity() *bool {
	if o == nil {
		return nil
	}
	return o.AzureUseManagedIdentity
}

func (o *AiRequestTransformerPluginAuth) GetGcpServiceAccountJSON() *string {
	if o == nil {
		return nil
	}
	return o.GcpServiceAccountJSON
}

func (o *AiRequestTransformerPluginAuth) GetGcpUseServiceAccount() *bool {
	if o == nil {
		return nil
	}
	return o.GcpUseServiceAccount
}

func (o *AiRequestTransformerPluginAuth) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *AiRequestTransformerPluginAuth) GetHeaderValue() *string {
	if o == nil {
		return nil
	}
	return o.HeaderValue
}

func (o *AiRequestTransformerPluginAuth) GetParamLocation() *AiRequestTransformerPluginParamLocation {
	if o == nil {
		return nil
	}
	return o.ParamLocation
}

func (o *AiRequestTransformerPluginAuth) GetParamName() *string {
	if o == nil {
		return nil
	}
	return o.ParamName
}

func (o *AiRequestTransformerPluginAuth) GetParamValue() *string {
	if o == nil {
		return nil
	}
	return o.ParamValue
}

type AiRequestTransformerPluginLogging struct {
	// If enabled, will log the request and response body into the Kong log plugin(s) output.
	LogPayloads *bool `json:"log_payloads,omitempty"`
	// If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
	LogStatistics *bool `json:"log_statistics,omitempty"`
}

func (o *AiRequestTransformerPluginLogging) GetLogPayloads() *bool {
	if o == nil {
		return nil
	}
	return o.LogPayloads
}

func (o *AiRequestTransformerPluginLogging) GetLogStatistics() *bool {
	if o == nil {
		return nil
	}
	return o.LogStatistics
}

type AiRequestTransformerPluginBedrock struct {
	// If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.
	AwsRegion *string `json:"aws_region,omitempty"`
}

func (o *AiRequestTransformerPluginBedrock) GetAwsRegion() *string {
	if o == nil {
		return nil
	}
	return o.AwsRegion
}

type AiRequestTransformerPluginGemini struct {
	// If running Gemini on Vertex, specify the regional API endpoint (hostname only).
	APIEndpoint *string `json:"api_endpoint,omitempty"`
	// If running Gemini on Vertex, specify the location ID.
	LocationID *string `json:"location_id,omitempty"`
	// If running Gemini on Vertex, specify the project ID.
	ProjectID *string `json:"project_id,omitempty"`
}

func (o *AiRequestTransformerPluginGemini) GetAPIEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.APIEndpoint
}

func (o *AiRequestTransformerPluginGemini) GetLocationID() *string {
	if o == nil {
		return nil
	}
	return o.LocationID
}

func (o *AiRequestTransformerPluginGemini) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

// AiRequestTransformerPluginLlama2Format - If using llama2 provider, select the upstream message format.
type AiRequestTransformerPluginLlama2Format string

const (
	AiRequestTransformerPluginLlama2FormatRaw    AiRequestTransformerPluginLlama2Format = "raw"
	AiRequestTransformerPluginLlama2FormatOpenai AiRequestTransformerPluginLlama2Format = "openai"
	AiRequestTransformerPluginLlama2FormatOllama AiRequestTransformerPluginLlama2Format = "ollama"
)

func (e AiRequestTransformerPluginLlama2Format) ToPointer() *AiRequestTransformerPluginLlama2Format {
	return &e
}
func (e *AiRequestTransformerPluginLlama2Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raw":
		fallthrough
	case "openai":
		fallthrough
	case "ollama":
		*e = AiRequestTransformerPluginLlama2Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginLlama2Format: %v", v)
	}
}

// AiRequestTransformerPluginMistralFormat - If using mistral provider, select the upstream message format.
type AiRequestTransformerPluginMistralFormat string

const (
	AiRequestTransformerPluginMistralFormatOpenai AiRequestTransformerPluginMistralFormat = "openai"
	AiRequestTransformerPluginMistralFormatOllama AiRequestTransformerPluginMistralFormat = "ollama"
)

func (e AiRequestTransformerPluginMistralFormat) ToPointer() *AiRequestTransformerPluginMistralFormat {
	return &e
}
func (e *AiRequestTransformerPluginMistralFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		fallthrough
	case "ollama":
		*e = AiRequestTransformerPluginMistralFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginMistralFormat: %v", v)
	}
}

// AiRequestTransformerPluginOptions - Key/value settings for the model
type AiRequestTransformerPluginOptions struct {
	// Defines the schema/API version, if using Anthropic provider.
	AnthropicVersion *string `json:"anthropic_version,omitempty"`
	// 'api-version' for Azure OpenAI instances.
	AzureAPIVersion *string `json:"azure_api_version,omitempty"`
	// Deployment ID for Azure OpenAI instances.
	AzureDeploymentID *string `json:"azure_deployment_id,omitempty"`
	// Instance name for Azure OpenAI hosted models.
	AzureInstance *string                            `json:"azure_instance,omitempty"`
	Bedrock       *AiRequestTransformerPluginBedrock `json:"bedrock,omitempty"`
	Gemini        *AiRequestTransformerPluginGemini  `json:"gemini,omitempty"`
	// Defines the cost per 1M tokens in your prompt.
	InputCost *float64 `json:"input_cost,omitempty"`
	// If using llama2 provider, select the upstream message format.
	Llama2Format *AiRequestTransformerPluginLlama2Format `json:"llama2_format,omitempty"`
	// Defines the max_tokens, if using chat or completion models.
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// If using mistral provider, select the upstream message format.
	MistralFormat *AiRequestTransformerPluginMistralFormat `json:"mistral_format,omitempty"`
	// Defines the cost per 1M tokens in the output of the AI.
	OutputCost *float64 `json:"output_cost,omitempty"`
	// Defines the matching temperature, if using chat or completion models.
	Temperature *float64 `json:"temperature,omitempty"`
	// Defines the top-k most likely tokens, if supported.
	TopK *int64 `json:"top_k,omitempty"`
	// Defines the top-p probability mass, if supported.
	TopP *float64 `json:"top_p,omitempty"`
	// Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.
	UpstreamPath *string `json:"upstream_path,omitempty"`
	// Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
	UpstreamURL *string `json:"upstream_url,omitempty"`
}

func (o *AiRequestTransformerPluginOptions) GetAnthropicVersion() *string {
	if o == nil {
		return nil
	}
	return o.AnthropicVersion
}

func (o *AiRequestTransformerPluginOptions) GetAzureAPIVersion() *string {
	if o == nil {
		return nil
	}
	return o.AzureAPIVersion
}

func (o *AiRequestTransformerPluginOptions) GetAzureDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.AzureDeploymentID
}

func (o *AiRequestTransformerPluginOptions) GetAzureInstance() *string {
	if o == nil {
		return nil
	}
	return o.AzureInstance
}

func (o *AiRequestTransformerPluginOptions) GetBedrock() *AiRequestTransformerPluginBedrock {
	if o == nil {
		return nil
	}
	return o.Bedrock
}

func (o *AiRequestTransformerPluginOptions) GetGemini() *AiRequestTransformerPluginGemini {
	if o == nil {
		return nil
	}
	return o.Gemini
}

func (o *AiRequestTransformerPluginOptions) GetInputCost() *float64 {
	if o == nil {
		return nil
	}
	return o.InputCost
}

func (o *AiRequestTransformerPluginOptions) GetLlama2Format() *AiRequestTransformerPluginLlama2Format {
	if o == nil {
		return nil
	}
	return o.Llama2Format
}

func (o *AiRequestTransformerPluginOptions) GetMaxTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxTokens
}

func (o *AiRequestTransformerPluginOptions) GetMistralFormat() *AiRequestTransformerPluginMistralFormat {
	if o == nil {
		return nil
	}
	return o.MistralFormat
}

func (o *AiRequestTransformerPluginOptions) GetOutputCost() *float64 {
	if o == nil {
		return nil
	}
	return o.OutputCost
}

func (o *AiRequestTransformerPluginOptions) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *AiRequestTransformerPluginOptions) GetTopK() *int64 {
	if o == nil {
		return nil
	}
	return o.TopK
}

func (o *AiRequestTransformerPluginOptions) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *AiRequestTransformerPluginOptions) GetUpstreamPath() *string {
	if o == nil {
		return nil
	}
	return o.UpstreamPath
}

func (o *AiRequestTransformerPluginOptions) GetUpstreamURL() *string {
	if o == nil {
		return nil
	}
	return o.UpstreamURL
}

// AiRequestTransformerPluginProvider - AI provider request format - Kong translates requests to and from the specified backend compatible formats.
type AiRequestTransformerPluginProvider string

const (
	AiRequestTransformerPluginProviderOpenai    AiRequestTransformerPluginProvider = "openai"
	AiRequestTransformerPluginProviderAzure     AiRequestTransformerPluginProvider = "azure"
	AiRequestTransformerPluginProviderAnthropic AiRequestTransformerPluginProvider = "anthropic"
	AiRequestTransformerPluginProviderCohere    AiRequestTransformerPluginProvider = "cohere"
	AiRequestTransformerPluginProviderMistral   AiRequestTransformerPluginProvider = "mistral"
	AiRequestTransformerPluginProviderLlama2    AiRequestTransformerPluginProvider = "llama2"
	AiRequestTransformerPluginProviderGemini    AiRequestTransformerPluginProvider = "gemini"
	AiRequestTransformerPluginProviderBedrock   AiRequestTransformerPluginProvider = "bedrock"
)

func (e AiRequestTransformerPluginProvider) ToPointer() *AiRequestTransformerPluginProvider {
	return &e
}
func (e *AiRequestTransformerPluginProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		fallthrough
	case "azure":
		fallthrough
	case "anthropic":
		fallthrough
	case "cohere":
		fallthrough
	case "mistral":
		fallthrough
	case "llama2":
		fallthrough
	case "gemini":
		fallthrough
	case "bedrock":
		*e = AiRequestTransformerPluginProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginProvider: %v", v)
	}
}

type AiRequestTransformerPluginModel struct {
	// Model name to execute.
	Name *string `json:"name,omitempty"`
	// Key/value settings for the model
	Options *AiRequestTransformerPluginOptions `json:"options,omitempty"`
	// AI provider request format - Kong translates requests to and from the specified backend compatible formats.
	Provider *AiRequestTransformerPluginProvider `json:"provider,omitempty"`
}

func (o *AiRequestTransformerPluginModel) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AiRequestTransformerPluginModel) GetOptions() *AiRequestTransformerPluginOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AiRequestTransformerPluginModel) GetProvider() *AiRequestTransformerPluginProvider {
	if o == nil {
		return nil
	}
	return o.Provider
}

// AiRequestTransformerPluginRouteType - The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation.
type AiRequestTransformerPluginRouteType string

const (
	AiRequestTransformerPluginRouteTypeLlmV1Chat        AiRequestTransformerPluginRouteType = "llm/v1/chat"
	AiRequestTransformerPluginRouteTypeLlmV1Completions AiRequestTransformerPluginRouteType = "llm/v1/completions"
	AiRequestTransformerPluginRouteTypePreserve         AiRequestTransformerPluginRouteType = "preserve"
)

func (e AiRequestTransformerPluginRouteType) ToPointer() *AiRequestTransformerPluginRouteType {
	return &e
}
func (e *AiRequestTransformerPluginRouteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "llm/v1/chat":
		fallthrough
	case "llm/v1/completions":
		fallthrough
	case "preserve":
		*e = AiRequestTransformerPluginRouteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginRouteType: %v", v)
	}
}

type Llm struct {
	Auth    *AiRequestTransformerPluginAuth    `json:"auth,omitempty"`
	Logging *AiRequestTransformerPluginLogging `json:"logging,omitempty"`
	Model   *AiRequestTransformerPluginModel   `json:"model,omitempty"`
	// The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation.
	RouteType *AiRequestTransformerPluginRouteType `json:"route_type,omitempty"`
}

func (o *Llm) GetAuth() *AiRequestTransformerPluginAuth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *Llm) GetLogging() *AiRequestTransformerPluginLogging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *Llm) GetModel() *AiRequestTransformerPluginModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *Llm) GetRouteType() *AiRequestTransformerPluginRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

type AiRequestTransformerPluginConfig struct {
	// A string representing a host name, such as example.com.
	HTTPProxyHost *string `json:"http_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPProxyPort *int64 `json:"http_proxy_port,omitempty"`
	// Timeout in milliseconds for the AI upstream service.
	HTTPTimeout *int64 `json:"http_timeout,omitempty"`
	// A string representing a host name, such as example.com.
	HTTPSProxyHost *string `json:"https_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPSProxyPort *int64 `json:"https_proxy_port,omitempty"`
	// Verify the TLS certificate of the AI upstream service.
	HTTPSVerify *bool `json:"https_verify,omitempty"`
	Llm         *Llm  `json:"llm,omitempty"`
	// max allowed body size allowed to be introspected
	MaxRequestBodySize *int64 `json:"max_request_body_size,omitempty"`
	// Use this prompt to tune the LLM system/assistant message for the incoming proxy request (from the client), and what you are expecting in return.
	Prompt *string `json:"prompt,omitempty"`
	// Defines the regular expression that must match to indicate a successful AI transformation at the request phase. The first match will be set as the outgoing body. If the AI service's response doesn't match this pattern, it is marked as a failure.
	TransformationExtractPattern *string `json:"transformation_extract_pattern,omitempty"`
}

func (o *AiRequestTransformerPluginConfig) GetHTTPProxyHost() *string {
	if o == nil {
		return nil
	}
	return o.HTTPProxyHost
}

func (o *AiRequestTransformerPluginConfig) GetHTTPProxyPort() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPProxyPort
}

func (o *AiRequestTransformerPluginConfig) GetHTTPTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPTimeout
}

func (o *AiRequestTransformerPluginConfig) GetHTTPSProxyHost() *string {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyHost
}

func (o *AiRequestTransformerPluginConfig) GetHTTPSProxyPort() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyPort
}

func (o *AiRequestTransformerPluginConfig) GetHTTPSVerify() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPSVerify
}

func (o *AiRequestTransformerPluginConfig) GetLlm() *Llm {
	if o == nil {
		return nil
	}
	return o.Llm
}

func (o *AiRequestTransformerPluginConfig) GetMaxRequestBodySize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRequestBodySize
}

func (o *AiRequestTransformerPluginConfig) GetPrompt() *string {
	if o == nil {
		return nil
	}
	return o.Prompt
}

func (o *AiRequestTransformerPluginConfig) GetTransformationExtractPattern() *string {
	if o == nil {
		return nil
	}
	return o.TransformationExtractPattern
}

// AiRequestTransformerPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiRequestTransformerPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRequestTransformerPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AiRequestTransformerPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRequestTransformerPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AiRequestTransformerPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiRequestTransformerPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiRequestTransformerPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiRequestTransformerPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiRequestTransformerPluginOrdering struct {
	After  *AiRequestTransformerPluginAfter  `json:"after,omitempty"`
	Before *AiRequestTransformerPluginBefore `json:"before,omitempty"`
}

func (o *AiRequestTransformerPluginOrdering) GetAfter() *AiRequestTransformerPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *AiRequestTransformerPluginOrdering) GetBefore() *AiRequestTransformerPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type AiRequestTransformerPluginProtocols string

const (
	AiRequestTransformerPluginProtocolsGrpc           AiRequestTransformerPluginProtocols = "grpc"
	AiRequestTransformerPluginProtocolsGrpcs          AiRequestTransformerPluginProtocols = "grpcs"
	AiRequestTransformerPluginProtocolsHTTP           AiRequestTransformerPluginProtocols = "http"
	AiRequestTransformerPluginProtocolsHTTPS          AiRequestTransformerPluginProtocols = "https"
	AiRequestTransformerPluginProtocolsTCP            AiRequestTransformerPluginProtocols = "tcp"
	AiRequestTransformerPluginProtocolsTLS            AiRequestTransformerPluginProtocols = "tls"
	AiRequestTransformerPluginProtocolsTLSPassthrough AiRequestTransformerPluginProtocols = "tls_passthrough"
	AiRequestTransformerPluginProtocolsUDP            AiRequestTransformerPluginProtocols = "udp"
	AiRequestTransformerPluginProtocolsWs             AiRequestTransformerPluginProtocols = "ws"
	AiRequestTransformerPluginProtocolsWss            AiRequestTransformerPluginProtocols = "wss"
)

func (e AiRequestTransformerPluginProtocols) ToPointer() *AiRequestTransformerPluginProtocols {
	return &e
}
func (e *AiRequestTransformerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = AiRequestTransformerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRequestTransformerPluginProtocols: %v", v)
	}
}

// AiRequestTransformerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type AiRequestTransformerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRequestTransformerPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiRequestTransformerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiRequestTransformerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRequestTransformerPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiRequestTransformerPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiRequestTransformerPlugin struct {
	Config AiRequestTransformerPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *AiRequestTransformerPluginConsumer      `json:"consumer"`
	ConsumerGroup *AiRequestTransformerPluginConsumerGroup `json:"consumer_group"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                               `json:"enabled,omitempty"`
	ID           *string                             `json:"id,omitempty"`
	InstanceName *string                             `json:"instance_name,omitempty"`
	name         string                              `const:"ai-request-transformer" json:"name"`
	Ordering     *AiRequestTransformerPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []AiRequestTransformerPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *AiRequestTransformerPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiRequestTransformerPluginService `json:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (a AiRequestTransformerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiRequestTransformerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiRequestTransformerPlugin) GetConfig() AiRequestTransformerPluginConfig {
	if o == nil {
		return AiRequestTransformerPluginConfig{}
	}
	return o.Config
}

func (o *AiRequestTransformerPlugin) GetConsumer() *AiRequestTransformerPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AiRequestTransformerPlugin) GetConsumerGroup() *AiRequestTransformerPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AiRequestTransformerPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AiRequestTransformerPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AiRequestTransformerPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiRequestTransformerPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AiRequestTransformerPlugin) GetName() string {
	return "ai-request-transformer"
}

func (o *AiRequestTransformerPlugin) GetOrdering() *AiRequestTransformerPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AiRequestTransformerPlugin) GetProtocols() []AiRequestTransformerPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AiRequestTransformerPlugin) GetRoute() *AiRequestTransformerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AiRequestTransformerPlugin) GetService() *AiRequestTransformerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *AiRequestTransformerPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AiRequestTransformerPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

// AiRequestTransformerPluginInput - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiRequestTransformerPluginInput struct {
	Config AiRequestTransformerPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *AiRequestTransformerPluginConsumer      `json:"consumer"`
	ConsumerGroup *AiRequestTransformerPluginConsumerGroup `json:"consumer_group"`
	// Whether the plugin is applied.
	Enabled      *bool                               `json:"enabled,omitempty"`
	ID           *string                             `json:"id,omitempty"`
	InstanceName *string                             `json:"instance_name,omitempty"`
	name         string                              `const:"ai-request-transformer" json:"name"`
	Ordering     *AiRequestTransformerPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []AiRequestTransformerPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *AiRequestTransformerPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiRequestTransformerPluginService `json:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (a AiRequestTransformerPluginInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiRequestTransformerPluginInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiRequestTransformerPluginInput) GetConfig() AiRequestTransformerPluginConfig {
	if o == nil {
		return AiRequestTransformerPluginConfig{}
	}
	return o.Config
}

func (o *AiRequestTransformerPluginInput) GetConsumer() *AiRequestTransformerPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AiRequestTransformerPluginInput) GetConsumerGroup() *AiRequestTransformerPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AiRequestTransformerPluginInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AiRequestTransformerPluginInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiRequestTransformerPluginInput) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AiRequestTransformerPluginInput) GetName() string {
	return "ai-request-transformer"
}

func (o *AiRequestTransformerPluginInput) GetOrdering() *AiRequestTransformerPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AiRequestTransformerPluginInput) GetProtocols() []AiRequestTransformerPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AiRequestTransformerPluginInput) GetRoute() *AiRequestTransformerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AiRequestTransformerPluginInput) GetService() *AiRequestTransformerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *AiRequestTransformerPluginInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
