// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AppAuthStrategyOpenIDConnectRequestStrategyType string

const (
	AppAuthStrategyOpenIDConnectRequestStrategyTypeOpenidConnect AppAuthStrategyOpenIDConnectRequestStrategyType = "openid_connect"
)

func (e AppAuthStrategyOpenIDConnectRequestStrategyType) ToPointer() *AppAuthStrategyOpenIDConnectRequestStrategyType {
	return &e
}
func (e *AppAuthStrategyOpenIDConnectRequestStrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openid_connect":
		*e = AppAuthStrategyOpenIDConnectRequestStrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAuthStrategyOpenIDConnectRequestStrategyType: %v", v)
	}
}

// AppAuthStrategyOpenIDConnectRequestConfigs - JSON-B object containing the configuration for the OIDC strategy
type AppAuthStrategyOpenIDConnectRequestConfigs struct {
	// A more advanced mode to configure an API Product Versionâ€™s Application Auth Strategy.
	// Using this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests.
	// Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy.
	// An OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.
	//
	OpenidConnect AppAuthStrategyConfigOpenIDConnect `json:"openid-connect"`
}

func (a AppAuthStrategyOpenIDConnectRequestConfigs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyOpenIDConnectRequestConfigs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"openid-connect"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyOpenIDConnectRequestConfigs) GetOpenidConnect() AppAuthStrategyConfigOpenIDConnect {
	if a == nil {
		return AppAuthStrategyConfigOpenIDConnect{}
	}
	return a.OpenidConnect
}

// AppAuthStrategyOpenIDConnectRequest - Payload for creating an OIDC Application Auth Strategy
type AppAuthStrategyOpenIDConnectRequest struct {
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName  string                                          `json:"display_name"`
	StrategyType AppAuthStrategyOpenIDConnectRequestStrategyType `json:"strategy_type"`
	// JSON-B object containing the configuration for the OIDC strategy
	Configs       AppAuthStrategyOpenIDConnectRequestConfigs `json:"configs"`
	DcrProviderID *string                                    `default:"null" json:"dcr_provider_id"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (a AppAuthStrategyOpenIDConnectRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyOpenIDConnectRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "display_name", "strategy_type", "configs"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyOpenIDConnectRequest) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppAuthStrategyOpenIDConnectRequest) GetDisplayName() string {
	if a == nil {
		return ""
	}
	return a.DisplayName
}

func (a *AppAuthStrategyOpenIDConnectRequest) GetStrategyType() AppAuthStrategyOpenIDConnectRequestStrategyType {
	if a == nil {
		return AppAuthStrategyOpenIDConnectRequestStrategyType("")
	}
	return a.StrategyType
}

func (a *AppAuthStrategyOpenIDConnectRequest) GetConfigs() AppAuthStrategyOpenIDConnectRequestConfigs {
	if a == nil {
		return AppAuthStrategyOpenIDConnectRequestConfigs{}
	}
	return a.Configs
}

func (a *AppAuthStrategyOpenIDConnectRequest) GetDcrProviderID() *string {
	if a == nil {
		return nil
	}
	return a.DcrProviderID
}

func (a *AppAuthStrategyOpenIDConnectRequest) GetLabels() map[string]*string {
	if a == nil {
		return nil
	}
	return a.Labels
}

type StrategyType string

const (
	StrategyTypeKeyAuth StrategyType = "key_auth"
)

func (e StrategyType) ToPointer() *StrategyType {
	return &e
}
func (e *StrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "key_auth":
		*e = StrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StrategyType: %v", v)
	}
}

// AppAuthStrategyKeyAuthRequestConfigs - JSON-B object containing the configuration for the Key Auth strategy
type AppAuthStrategyKeyAuthRequestConfigs struct {
	// The most basic mode to configure an Application Auth Strategy for an API Product Version.
	// Using this mode will allow developers to generate API keys that will authenticate their application requests.
	// Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.
	//
	KeyAuth AppAuthStrategyConfigKeyAuth `json:"key-auth"`
}

func (a AppAuthStrategyKeyAuthRequestConfigs) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyKeyAuthRequestConfigs) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"key-auth"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyKeyAuthRequestConfigs) GetKeyAuth() AppAuthStrategyConfigKeyAuth {
	if a == nil {
		return AppAuthStrategyConfigKeyAuth{}
	}
	return a.KeyAuth
}

// AppAuthStrategyKeyAuthRequest - Request for creating a Key Auth Application Auth Strategy
type AppAuthStrategyKeyAuthRequest struct {
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName  string       `json:"display_name"`
	StrategyType StrategyType `json:"strategy_type"`
	// JSON-B object containing the configuration for the Key Auth strategy
	Configs AppAuthStrategyKeyAuthRequestConfigs `json:"configs"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (a AppAuthStrategyKeyAuthRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyKeyAuthRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "display_name", "strategy_type", "configs"}); err != nil {
		return err
	}
	return nil
}

func (a *AppAuthStrategyKeyAuthRequest) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AppAuthStrategyKeyAuthRequest) GetDisplayName() string {
	if a == nil {
		return ""
	}
	return a.DisplayName
}

func (a *AppAuthStrategyKeyAuthRequest) GetStrategyType() StrategyType {
	if a == nil {
		return StrategyType("")
	}
	return a.StrategyType
}

func (a *AppAuthStrategyKeyAuthRequest) GetConfigs() AppAuthStrategyKeyAuthRequestConfigs {
	if a == nil {
		return AppAuthStrategyKeyAuthRequestConfigs{}
	}
	return a.Configs
}

func (a *AppAuthStrategyKeyAuthRequest) GetLabels() map[string]*string {
	if a == nil {
		return nil
	}
	return a.Labels
}

type CreateAppAuthStrategyRequestType string

const (
	CreateAppAuthStrategyRequestTypeKeyAuth       CreateAppAuthStrategyRequestType = "key_auth"
	CreateAppAuthStrategyRequestTypeOpenidConnect CreateAppAuthStrategyRequestType = "openid_connect"
)

// CreateAppAuthStrategyRequest - Request body for creating an Application Auth Strategy
type CreateAppAuthStrategyRequest struct {
	AppAuthStrategyKeyAuthRequest       *AppAuthStrategyKeyAuthRequest       `queryParam:"inline,name=CreateAppAuthStrategyRequest"`
	AppAuthStrategyOpenIDConnectRequest *AppAuthStrategyOpenIDConnectRequest `queryParam:"inline,name=CreateAppAuthStrategyRequest"`

	Type CreateAppAuthStrategyRequestType
}

func CreateCreateAppAuthStrategyRequestKeyAuth(keyAuth AppAuthStrategyKeyAuthRequest) CreateAppAuthStrategyRequest {
	typ := CreateAppAuthStrategyRequestTypeKeyAuth

	typStr := StrategyType(typ)
	keyAuth.StrategyType = typStr

	return CreateAppAuthStrategyRequest{
		AppAuthStrategyKeyAuthRequest: &keyAuth,
		Type:                          typ,
	}
}

func CreateCreateAppAuthStrategyRequestOpenidConnect(openidConnect AppAuthStrategyOpenIDConnectRequest) CreateAppAuthStrategyRequest {
	typ := CreateAppAuthStrategyRequestTypeOpenidConnect

	typStr := AppAuthStrategyOpenIDConnectRequestStrategyType(typ)
	openidConnect.StrategyType = typStr

	return CreateAppAuthStrategyRequest{
		AppAuthStrategyOpenIDConnectRequest: &openidConnect,
		Type:                                typ,
	}
}

func (u *CreateAppAuthStrategyRequest) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		StrategyType string `json:"strategy_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.StrategyType {
	case "key_auth":
		appAuthStrategyKeyAuthRequest := new(AppAuthStrategyKeyAuthRequest)
		if err := utils.UnmarshalJSON(data, &appAuthStrategyKeyAuthRequest, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (StrategyType == key_auth) type AppAuthStrategyKeyAuthRequest within CreateAppAuthStrategyRequest: %w", string(data), err)
		}

		u.AppAuthStrategyKeyAuthRequest = appAuthStrategyKeyAuthRequest
		u.Type = CreateAppAuthStrategyRequestTypeKeyAuth
		return nil
	case "openid_connect":
		appAuthStrategyOpenIDConnectRequest := new(AppAuthStrategyOpenIDConnectRequest)
		if err := utils.UnmarshalJSON(data, &appAuthStrategyOpenIDConnectRequest, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (StrategyType == openid_connect) type AppAuthStrategyOpenIDConnectRequest within CreateAppAuthStrategyRequest: %w", string(data), err)
		}

		u.AppAuthStrategyOpenIDConnectRequest = appAuthStrategyOpenIDConnectRequest
		u.Type = CreateAppAuthStrategyRequestTypeOpenidConnect
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateAppAuthStrategyRequest", string(data))
}

func (u CreateAppAuthStrategyRequest) MarshalJSON() ([]byte, error) {
	if u.AppAuthStrategyKeyAuthRequest != nil {
		return utils.MarshalJSON(u.AppAuthStrategyKeyAuthRequest, "", true)
	}

	if u.AppAuthStrategyOpenIDConnectRequest != nil {
		return utils.MarshalJSON(u.AppAuthStrategyOpenIDConnectRequest, "", true)
	}

	return nil, errors.New("could not marshal union type CreateAppAuthStrategyRequest: all fields are null")
}
