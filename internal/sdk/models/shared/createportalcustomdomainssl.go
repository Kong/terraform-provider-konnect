// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DomainVerificationMethod string

const (
	DomainVerificationMethodCustomCertificate DomainVerificationMethod = "custom_certificate"
	DomainVerificationMethodHTTP              DomainVerificationMethod = "http"
)

func (e DomainVerificationMethod) ToPointer() *DomainVerificationMethod {
	return &e
}
func (e *DomainVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom_certificate":
		fallthrough
	case "http":
		*e = DomainVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainVerificationMethod: %v", v)
	}
}

type CreatePortalCustomDomainSSL struct {
	DomainVerificationMethod *DomainVerificationMethod `json:"domain_verification_method,omitempty"`
	// Custom certificate to be used for the SSL termination. Only used when domain_verification_method == "custom_certificate"
	CustomCertificate *string `json:"custom_certificate,omitempty"`
	// Custom certificate private key to be used for the SSL termination. Only used when domain_verification_method == "custom_certificate"
	CustomPrivateKey *string `json:"custom_private_key,omitempty"`
}

func (o *CreatePortalCustomDomainSSL) GetDomainVerificationMethod() *DomainVerificationMethod {
	if o == nil {
		return nil
	}
	return o.DomainVerificationMethod
}

func (o *CreatePortalCustomDomainSSL) GetCustomCertificate() *string {
	if o == nil {
		return nil
	}
	return o.CustomCertificate
}

func (o *CreatePortalCustomDomainSSL) GetCustomPrivateKey() *string {
	if o == nil {
		return nil
	}
	return o.CustomPrivateKey
}
