// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/types"
)

type AiRateLimitingAdvancedPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiRateLimitingAdvancedPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiRateLimitingAdvancedPluginOrdering struct {
	After  *AiRateLimitingAdvancedPluginAfter  `json:"after,omitempty"`
	Before *AiRateLimitingAdvancedPluginBefore `json:"before,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginOrdering) GetAfter() *AiRateLimitingAdvancedPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *AiRateLimitingAdvancedPluginOrdering) GetBefore() *AiRateLimitingAdvancedPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type AiRateLimitingAdvancedPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (a AiRateLimitingAdvancedPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiRateLimitingAdvancedPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiRateLimitingAdvancedPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiRateLimitingAdvancedPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AiRateLimitingAdvancedPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// Identifier - The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. Note if `identifier` is `consumer-group`, the plugin must be applied on a consumer group entity. Because a consumer may belong to multiple consumer groups, the plugin needs to know explicitly which consumer group to limit the rate.
type Identifier string

const (
	IdentifierConsumer      Identifier = "consumer"
	IdentifierConsumerGroup Identifier = "consumer-group"
	IdentifierCredential    Identifier = "credential"
	IdentifierHeader        Identifier = "header"
	IdentifierIP            Identifier = "ip"
	IdentifierPath          Identifier = "path"
	IdentifierService       Identifier = "service"
)

func (e Identifier) ToPointer() *Identifier {
	return &e
}
func (e *Identifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "consumer-group":
		fallthrough
	case "credential":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "path":
		fallthrough
	case "service":
		*e = Identifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Identifier: %v", v)
	}
}

// AiRateLimitingAdvancedPluginLlmFormat - LLM input and output format and schema to use
type AiRateLimitingAdvancedPluginLlmFormat string

const (
	AiRateLimitingAdvancedPluginLlmFormatBedrock     AiRateLimitingAdvancedPluginLlmFormat = "bedrock"
	AiRateLimitingAdvancedPluginLlmFormatCohere      AiRateLimitingAdvancedPluginLlmFormat = "cohere"
	AiRateLimitingAdvancedPluginLlmFormatGemini      AiRateLimitingAdvancedPluginLlmFormat = "gemini"
	AiRateLimitingAdvancedPluginLlmFormatHuggingface AiRateLimitingAdvancedPluginLlmFormat = "huggingface"
	AiRateLimitingAdvancedPluginLlmFormatOpenai      AiRateLimitingAdvancedPluginLlmFormat = "openai"
)

func (e AiRateLimitingAdvancedPluginLlmFormat) ToPointer() *AiRateLimitingAdvancedPluginLlmFormat {
	return &e
}
func (e *AiRateLimitingAdvancedPluginLlmFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "openai":
		*e = AiRateLimitingAdvancedPluginLlmFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRateLimitingAdvancedPluginLlmFormat: %v", v)
	}
}

// AiRateLimitingAdvancedPluginName - The LLM provider to which the rate limit applies.
type AiRateLimitingAdvancedPluginName string

const (
	AiRateLimitingAdvancedPluginNameAnthropic     AiRateLimitingAdvancedPluginName = "anthropic"
	AiRateLimitingAdvancedPluginNameAzure         AiRateLimitingAdvancedPluginName = "azure"
	AiRateLimitingAdvancedPluginNameBedrock       AiRateLimitingAdvancedPluginName = "bedrock"
	AiRateLimitingAdvancedPluginNameCohere        AiRateLimitingAdvancedPluginName = "cohere"
	AiRateLimitingAdvancedPluginNameGemini        AiRateLimitingAdvancedPluginName = "gemini"
	AiRateLimitingAdvancedPluginNameHuggingface   AiRateLimitingAdvancedPluginName = "huggingface"
	AiRateLimitingAdvancedPluginNameLlama2        AiRateLimitingAdvancedPluginName = "llama2"
	AiRateLimitingAdvancedPluginNameMistral       AiRateLimitingAdvancedPluginName = "mistral"
	AiRateLimitingAdvancedPluginNameOpenai        AiRateLimitingAdvancedPluginName = "openai"
	AiRateLimitingAdvancedPluginNameRequestPrompt AiRateLimitingAdvancedPluginName = "requestPrompt"
)

func (e AiRateLimitingAdvancedPluginName) ToPointer() *AiRateLimitingAdvancedPluginName {
	return &e
}
func (e *AiRateLimitingAdvancedPluginName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "anthropic":
		fallthrough
	case "azure":
		fallthrough
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "llama2":
		fallthrough
	case "mistral":
		fallthrough
	case "openai":
		fallthrough
	case "requestPrompt":
		*e = AiRateLimitingAdvancedPluginName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRateLimitingAdvancedPluginName: %v", v)
	}
}

type LlmProviders struct {
	// One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
	Limit []float64 `json:"limit"`
	// The LLM provider to which the rate limit applies.
	Name AiRateLimitingAdvancedPluginName `json:"name"`
	// One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
	WindowSize []float64 `json:"window_size"`
}

func (o *LlmProviders) GetLimit() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.Limit
}

func (o *LlmProviders) GetName() AiRateLimitingAdvancedPluginName {
	if o == nil {
		return AiRateLimitingAdvancedPluginName("")
	}
	return o.Name
}

func (o *LlmProviders) GetWindowSize() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.WindowSize
}

type ClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `default:"127.0.0.1" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (c ClusterNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClusterNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *ClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type SentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (s SentinelNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SentinelNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *SentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// SentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type SentinelRole string

const (
	SentinelRoleAny    SentinelRole = "any"
	SentinelRoleMaster SentinelRole = "master"
	SentinelRoleSlave  SentinelRole = "slave"
)

func (e SentinelRole) ToPointer() *SentinelRole {
	return &e
}
func (e *SentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = SentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SentinelRole: %v", v)
	}
}

type Redis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []ClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `default:"2000" json:"connect_timeout"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `default:"null" json:"keepalive_backlog"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `default:"2000" json:"read_timeout"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"2000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `default:"null" json:"sentinel_master"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []SentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `default:"null" json:"sentinel_password"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *SentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `default:"null" json:"sentinel_username"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (r Redis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Redis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Redis) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *Redis) GetClusterNodes() []ClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *Redis) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *Redis) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *Redis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *Redis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *Redis) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *Redis) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *Redis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *Redis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *Redis) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *Redis) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *Redis) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *Redis) GetSentinelNodes() []SentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *Redis) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *Redis) GetSentinelRole() *SentinelRole {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *Redis) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *Redis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *Redis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *Redis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *Redis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Strategy - The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`.
type Strategy string

const (
	StrategyCluster Strategy = "cluster"
	StrategyLocal   Strategy = "local"
	StrategyRedis   Strategy = "redis"
)

func (e Strategy) ToPointer() *Strategy {
	return &e
}
func (e *Strategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cluster":
		fallthrough
	case "local":
		fallthrough
	case "redis":
		*e = Strategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Strategy: %v", v)
	}
}

// TokensCountStrategy - What tokens to use for cost calculation. Available values are: `total_tokens` `prompt_tokens`, `completion_tokens` or `cost`.
type TokensCountStrategy string

const (
	TokensCountStrategyCompletionTokens TokensCountStrategy = "completion_tokens"
	TokensCountStrategyCost             TokensCountStrategy = "cost"
	TokensCountStrategyPromptTokens     TokensCountStrategy = "prompt_tokens"
	TokensCountStrategyTotalTokens      TokensCountStrategy = "total_tokens"
)

func (e TokensCountStrategy) ToPointer() *TokensCountStrategy {
	return &e
}
func (e *TokensCountStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "completion_tokens":
		fallthrough
	case "cost":
		fallthrough
	case "prompt_tokens":
		fallthrough
	case "total_tokens":
		*e = TokensCountStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokensCountStrategy: %v", v)
	}
}

// WindowType - Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters.
type WindowType string

const (
	WindowTypeFixed   WindowType = "fixed"
	WindowTypeSliding WindowType = "sliding"
)

func (e WindowType) ToPointer() *WindowType {
	return &e
}
func (e *WindowType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "sliding":
		*e = WindowType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WindowType: %v", v)
	}
}

type AiRateLimitingAdvancedPluginConfig struct {
	// The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.
	DictionaryName *string `default:"kong_rate_limiting_counters" json:"dictionary_name"`
	// If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type and the request prompt provider.
	DisablePenalty *bool `default:"false" json:"disable_penalty"`
	// Set a custom error code to return when the rate limit is exceeded.
	ErrorCode *float64 `default:"429" json:"error_code"`
	// Optionally hide informative response that would otherwise provide information about the provider in the error message.
	ErrorHideProviders *bool `default:"false" json:"error_hide_providers"`
	// Set a custom error message to return when the rate limit is exceeded.
	ErrorMessage *string `default:"AI token rate limit exceeded for provider(s): " json:"error_message"`
	// A string representing an HTTP header name.
	HeaderName *string `default:"null" json:"header_name"`
	// Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.
	HideClientHeaders *bool `default:"false" json:"hide_client_headers"`
	// The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. Note if `identifier` is `consumer-group`, the plugin must be applied on a consumer group entity. Because a consumer may belong to multiple consumer groups, the plugin needs to know explicitly which consumer group to limit the rate.
	Identifier *Identifier `default:"consumer" json:"identifier"`
	// LLM input and output format and schema to use
	LlmFormat *AiRateLimitingAdvancedPluginLlmFormat `default:"openai" json:"llm_format"`
	// The provider config. Takes an array of `name`, `limit` and `window size` values.
	LlmProviders []LlmProviders `json:"llm_providers"`
	// The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `dictionary_name`, need to be the same.
	Namespace *string `default:"null" json:"namespace"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	Path  *string `default:"null" json:"path"`
	Redis *Redis  `json:"redis,omitempty"`
	// If defined, it use custom function to count requests for the request prompt provider
	RequestPromptCountFunction *string `default:"null" json:"request_prompt_count_function"`
	// The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.
	RetryAfterJitterMax *float64 `default:"0" json:"retry_after_jitter_max"`
	// The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`.
	Strategy *Strategy `default:"local" json:"strategy"`
	// How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).
	SyncRate *float64 `default:"null" json:"sync_rate"`
	// What tokens to use for cost calculation. Available values are: `total_tokens` `prompt_tokens`, `completion_tokens` or `cost`.
	TokensCountStrategy *TokensCountStrategy `default:"total_tokens" json:"tokens_count_strategy"`
	// Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters.
	WindowType *WindowType `default:"sliding" json:"window_type"`
}

func (a AiRateLimitingAdvancedPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiRateLimitingAdvancedPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiRateLimitingAdvancedPluginConfig) GetDictionaryName() *string {
	if o == nil {
		return nil
	}
	return o.DictionaryName
}

func (o *AiRateLimitingAdvancedPluginConfig) GetDisablePenalty() *bool {
	if o == nil {
		return nil
	}
	return o.DisablePenalty
}

func (o *AiRateLimitingAdvancedPluginConfig) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *AiRateLimitingAdvancedPluginConfig) GetErrorHideProviders() *bool {
	if o == nil {
		return nil
	}
	return o.ErrorHideProviders
}

func (o *AiRateLimitingAdvancedPluginConfig) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *AiRateLimitingAdvancedPluginConfig) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *AiRateLimitingAdvancedPluginConfig) GetHideClientHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.HideClientHeaders
}

func (o *AiRateLimitingAdvancedPluginConfig) GetIdentifier() *Identifier {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *AiRateLimitingAdvancedPluginConfig) GetLlmFormat() *AiRateLimitingAdvancedPluginLlmFormat {
	if o == nil {
		return nil
	}
	return o.LlmFormat
}

func (o *AiRateLimitingAdvancedPluginConfig) GetLlmProviders() []LlmProviders {
	if o == nil {
		return []LlmProviders{}
	}
	return o.LlmProviders
}

func (o *AiRateLimitingAdvancedPluginConfig) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *AiRateLimitingAdvancedPluginConfig) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *AiRateLimitingAdvancedPluginConfig) GetRedis() *Redis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *AiRateLimitingAdvancedPluginConfig) GetRequestPromptCountFunction() *string {
	if o == nil {
		return nil
	}
	return o.RequestPromptCountFunction
}

func (o *AiRateLimitingAdvancedPluginConfig) GetRetryAfterJitterMax() *float64 {
	if o == nil {
		return nil
	}
	return o.RetryAfterJitterMax
}

func (o *AiRateLimitingAdvancedPluginConfig) GetStrategy() *Strategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *AiRateLimitingAdvancedPluginConfig) GetSyncRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SyncRate
}

func (o *AiRateLimitingAdvancedPluginConfig) GetTokensCountStrategy() *TokensCountStrategy {
	if o == nil {
		return nil
	}
	return o.TokensCountStrategy
}

func (o *AiRateLimitingAdvancedPluginConfig) GetWindowType() *WindowType {
	if o == nil {
		return nil
	}
	return o.WindowType
}

// AiRateLimitingAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiRateLimitingAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiRateLimitingAdvancedPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiRateLimitingAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AiRateLimitingAdvancedPluginProtocols string

const (
	AiRateLimitingAdvancedPluginProtocolsGrpc  AiRateLimitingAdvancedPluginProtocols = "grpc"
	AiRateLimitingAdvancedPluginProtocolsGrpcs AiRateLimitingAdvancedPluginProtocols = "grpcs"
	AiRateLimitingAdvancedPluginProtocolsHTTP  AiRateLimitingAdvancedPluginProtocols = "http"
	AiRateLimitingAdvancedPluginProtocolsHTTPS AiRateLimitingAdvancedPluginProtocols = "https"
)

func (e AiRateLimitingAdvancedPluginProtocols) ToPointer() *AiRateLimitingAdvancedPluginProtocols {
	return &e
}
func (e *AiRateLimitingAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiRateLimitingAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiRateLimitingAdvancedPluginProtocols: %v", v)
	}
}

// AiRateLimitingAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiRateLimitingAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiRateLimitingAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiRateLimitingAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiRateLimitingAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiRateLimitingAdvancedPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiRateLimitingAdvancedPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                               `default:"null" json:"instance_name"`
	name         *string                               `const:"ai-rate-limiting-advanced" json:"name"`
	Ordering     *AiRateLimitingAdvancedPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiRateLimitingAdvancedPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                             `json:"updated_at,omitempty"`
	Config    AiRateLimitingAdvancedPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiRateLimitingAdvancedPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiRateLimitingAdvancedPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiRateLimitingAdvancedPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiRateLimitingAdvancedPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiRateLimitingAdvancedPluginService `json:"service"`
}

func (a AiRateLimitingAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiRateLimitingAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiRateLimitingAdvancedPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AiRateLimitingAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AiRateLimitingAdvancedPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiRateLimitingAdvancedPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AiRateLimitingAdvancedPlugin) GetName() *string {
	return types.String("ai-rate-limiting-advanced")
}

func (o *AiRateLimitingAdvancedPlugin) GetOrdering() *AiRateLimitingAdvancedPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AiRateLimitingAdvancedPlugin) GetPartials() []AiRateLimitingAdvancedPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *AiRateLimitingAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AiRateLimitingAdvancedPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AiRateLimitingAdvancedPlugin) GetConfig() AiRateLimitingAdvancedPluginConfig {
	if o == nil {
		return AiRateLimitingAdvancedPluginConfig{}
	}
	return o.Config
}

func (o *AiRateLimitingAdvancedPlugin) GetConsumer() *AiRateLimitingAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AiRateLimitingAdvancedPlugin) GetConsumerGroup() *AiRateLimitingAdvancedPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AiRateLimitingAdvancedPlugin) GetProtocols() []AiRateLimitingAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AiRateLimitingAdvancedPlugin) GetRoute() *AiRateLimitingAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AiRateLimitingAdvancedPlugin) GetService() *AiRateLimitingAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
