// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type ForwardProxyPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (f *ForwardProxyPluginAfter) GetAccess() []string {
	if f == nil {
		return nil
	}
	return f.Access
}

type ForwardProxyPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (f *ForwardProxyPluginBefore) GetAccess() []string {
	if f == nil {
		return nil
	}
	return f.Access
}

type ForwardProxyPluginOrdering struct {
	After  *ForwardProxyPluginAfter  `json:"after,omitempty"`
	Before *ForwardProxyPluginBefore `json:"before,omitempty"`
}

func (f *ForwardProxyPluginOrdering) GetAfter() *ForwardProxyPluginAfter {
	if f == nil {
		return nil
	}
	return f.After
}

func (f *ForwardProxyPluginOrdering) GetBefore() *ForwardProxyPluginBefore {
	if f == nil {
		return nil
	}
	return f.Before
}

type ForwardProxyPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (f *ForwardProxyPluginPartials) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *ForwardProxyPluginPartials) GetName() *string {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *ForwardProxyPluginPartials) GetPath() *string {
	if f == nil {
		return nil
	}
	return f.Path
}

// ProxyScheme - The proxy scheme to use when connecting. Only `http` is supported.
type ProxyScheme string

const (
	ProxySchemeHTTP ProxyScheme = "http"
)

func (e ProxyScheme) ToPointer() *ProxyScheme {
	return &e
}
func (e *ProxyScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = ProxyScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyScheme: %v", v)
	}
}

// XHeaders - Determines how to handle headers when forwarding the request.
type XHeaders string

const (
	XHeadersAppend      XHeaders = "append"
	XHeadersDelete      XHeaders = "delete"
	XHeadersTransparent XHeaders = "transparent"
)

func (e XHeaders) ToPointer() *XHeaders {
	return &e
}
func (e *XHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "append":
		fallthrough
	case "delete":
		fallthrough
	case "transparent":
		*e = XHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for XHeaders: %v", v)
	}
}

type ForwardProxyPluginConfig struct {
	// The password to authenticate with, if the forward proxy is protected
	// by basic authentication.
	AuthPassword *string `default:"null" json:"auth_password"`
	// The username to authenticate with, if the forward proxy is protected
	// by basic authentication.
	AuthUsername *string `default:"null" json:"auth_username"`
	// A string representing a host name, such as example.com.
	HTTPProxyHost *string `default:"null" json:"http_proxy_host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPProxyPort *int64 `default:"null" json:"http_proxy_port"`
	// A string representing a host name, such as example.com.
	HTTPSProxyHost *string `default:"null" json:"https_proxy_host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPSProxyPort *int64 `default:"null" json:"https_proxy_port"`
	// Whether the server certificate will be verified according to the CA certificates specified in lua_ssl_trusted_certificate.
	HTTPSVerify *bool `default:"false" json:"https_verify"`
	// The proxy scheme to use when connecting. Only `http` is supported.
	ProxyScheme *ProxyScheme `default:"http" json:"proxy_scheme"`
	// Determines how to handle headers when forwarding the request.
	XHeaders *XHeaders `default:"append" json:"x_headers"`
}

func (f ForwardProxyPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *ForwardProxyPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (f *ForwardProxyPluginConfig) GetAuthPassword() *string {
	if f == nil {
		return nil
	}
	return f.AuthPassword
}

func (f *ForwardProxyPluginConfig) GetAuthUsername() *string {
	if f == nil {
		return nil
	}
	return f.AuthUsername
}

func (f *ForwardProxyPluginConfig) GetHTTPProxyHost() *string {
	if f == nil {
		return nil
	}
	return f.HTTPProxyHost
}

func (f *ForwardProxyPluginConfig) GetHTTPProxyPort() *int64 {
	if f == nil {
		return nil
	}
	return f.HTTPProxyPort
}

func (f *ForwardProxyPluginConfig) GetHTTPSProxyHost() *string {
	if f == nil {
		return nil
	}
	return f.HTTPSProxyHost
}

func (f *ForwardProxyPluginConfig) GetHTTPSProxyPort() *int64 {
	if f == nil {
		return nil
	}
	return f.HTTPSProxyPort
}

func (f *ForwardProxyPluginConfig) GetHTTPSVerify() *bool {
	if f == nil {
		return nil
	}
	return f.HTTPSVerify
}

func (f *ForwardProxyPluginConfig) GetProxyScheme() *ProxyScheme {
	if f == nil {
		return nil
	}
	return f.ProxyScheme
}

func (f *ForwardProxyPluginConfig) GetXHeaders() *XHeaders {
	if f == nil {
		return nil
	}
	return f.XHeaders
}

// ForwardProxyPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ForwardProxyPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (f *ForwardProxyPluginConsumer) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

type ForwardProxyPluginProtocols string

const (
	ForwardProxyPluginProtocolsGrpc  ForwardProxyPluginProtocols = "grpc"
	ForwardProxyPluginProtocolsGrpcs ForwardProxyPluginProtocols = "grpcs"
	ForwardProxyPluginProtocolsHTTP  ForwardProxyPluginProtocols = "http"
	ForwardProxyPluginProtocolsHTTPS ForwardProxyPluginProtocols = "https"
)

func (e ForwardProxyPluginProtocols) ToPointer() *ForwardProxyPluginProtocols {
	return &e
}
func (e *ForwardProxyPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ForwardProxyPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ForwardProxyPluginProtocols: %v", v)
	}
}

// ForwardProxyPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type ForwardProxyPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (f *ForwardProxyPluginRoute) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

// ForwardProxyPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ForwardProxyPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (f *ForwardProxyPluginService) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

// ForwardProxyPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ForwardProxyPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                     `default:"null" json:"instance_name"`
	name         string                      `const:"forward-proxy" json:"name"`
	Ordering     *ForwardProxyPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []ForwardProxyPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                    `json:"updated_at,omitempty"`
	Config    *ForwardProxyPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ForwardProxyPluginConsumer `json:"consumer"`
	// A set of strings representing HTTP protocols.
	Protocols []ForwardProxyPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *ForwardProxyPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ForwardProxyPluginService `json:"service"`
}

func (f ForwardProxyPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *ForwardProxyPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (f *ForwardProxyPlugin) GetCreatedAt() *int64 {
	if f == nil {
		return nil
	}
	return f.CreatedAt
}

func (f *ForwardProxyPlugin) GetEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.Enabled
}

func (f *ForwardProxyPlugin) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *ForwardProxyPlugin) GetInstanceName() *string {
	if f == nil {
		return nil
	}
	return f.InstanceName
}

func (f *ForwardProxyPlugin) GetName() string {
	return "forward-proxy"
}

func (f *ForwardProxyPlugin) GetOrdering() *ForwardProxyPluginOrdering {
	if f == nil {
		return nil
	}
	return f.Ordering
}

func (f *ForwardProxyPlugin) GetPartials() []ForwardProxyPluginPartials {
	if f == nil {
		return nil
	}
	return f.Partials
}

func (f *ForwardProxyPlugin) GetTags() []string {
	if f == nil {
		return nil
	}
	return f.Tags
}

func (f *ForwardProxyPlugin) GetUpdatedAt() *int64 {
	if f == nil {
		return nil
	}
	return f.UpdatedAt
}

func (f *ForwardProxyPlugin) GetConfig() *ForwardProxyPluginConfig {
	if f == nil {
		return nil
	}
	return f.Config
}

func (f *ForwardProxyPlugin) GetConsumer() *ForwardProxyPluginConsumer {
	if f == nil {
		return nil
	}
	return f.Consumer
}

func (f *ForwardProxyPlugin) GetProtocols() []ForwardProxyPluginProtocols {
	if f == nil {
		return nil
	}
	return f.Protocols
}

func (f *ForwardProxyPlugin) GetRoute() *ForwardProxyPluginRoute {
	if f == nil {
		return nil
	}
	return f.Route
}

func (f *ForwardProxyPlugin) GetService() *ForwardProxyPluginService {
	if f == nil {
		return nil
	}
	return f.Service
}
