// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateOauth2IntrospectionPluginConsumerBy - A string indicating whether to associate OAuth2 `username` or `client_id` with the consumer's username. OAuth2 `username` is mapped to a consumer's `username` field, while an OAuth2 `client_id` maps to a consumer's `custom_id`.
type CreateOauth2IntrospectionPluginConsumerBy string

const (
	CreateOauth2IntrospectionPluginConsumerByUsername CreateOauth2IntrospectionPluginConsumerBy = "username"
	CreateOauth2IntrospectionPluginConsumerByClientID CreateOauth2IntrospectionPluginConsumerBy = "client_id"
)

func (e CreateOauth2IntrospectionPluginConsumerBy) ToPointer() *CreateOauth2IntrospectionPluginConsumerBy {
	return &e
}
func (e *CreateOauth2IntrospectionPluginConsumerBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "client_id":
		*e = CreateOauth2IntrospectionPluginConsumerBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOauth2IntrospectionPluginConsumerBy: %v", v)
	}
}

type CreateOauth2IntrospectionPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request fails with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
	Anonymous *string `json:"anonymous,omitempty"`
	// The value to set as the `Authorization` header when querying the introspection endpoint. This depends on the OAuth 2.0 server, but usually is the `client_id` and `client_secret` as a Base64-encoded Basic Auth string (`Basic MG9hNWl...`).
	AuthorizationValue *string `json:"authorization_value,omitempty"`
	// A string indicating whether to associate OAuth2 `username` or `client_id` with the consumer's username. OAuth2 `username` is mapped to a consumer's `username` field, while an OAuth2 `client_id` maps to a consumer's `custom_id`.
	ConsumerBy *CreateOauth2IntrospectionPluginConsumerBy `json:"consumer_by,omitempty"`
	// A list of custom claims to be forwarded from the introspection response to the upstream request. Claims are forwarded in headers with prefix `X-Credential-{claim-name}`.
	CustomClaimsForward []string `json:"custom_claims_forward,omitempty"`
	// A list of custom headers to be added in the introspection request.
	CustomIntrospectionHeaders map[string]any `json:"custom_introspection_headers,omitempty"`
	// An optional boolean value telling the plugin to hide the credential to the upstream API server. It will be removed by Kong before proxying the request.
	HideCredentials *bool `json:"hide_credentials,omitempty"`
	// A boolean indicating whether to forward information about the current downstream request to the introspect endpoint. If true, headers `X-Request-Path` and `X-Request-Http-Method` will be inserted into the introspect request.
	IntrospectRequest *bool `json:"introspect_request,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	IntrospectionURL *string `json:"introspection_url,omitempty"`
	// An optional value in milliseconds that defines how long an idle connection lives before being closed.
	Keepalive *int64 `json:"keepalive,omitempty"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests will always be allowed.
	RunOnPreflight *bool `json:"run_on_preflight,omitempty"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *int64 `json:"timeout,omitempty"`
	// The `token_type_hint` value to associate to introspection requests.
	TokenTypeHint *string `json:"token_type_hint,omitempty"`
	// The TTL in seconds for the introspection response. Set to 0 to disable the expiration.
	TTL *float64 `json:"ttl,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *CreateOauth2IntrospectionPluginConfig) GetAuthorizationValue() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationValue
}

func (o *CreateOauth2IntrospectionPluginConfig) GetConsumerBy() *CreateOauth2IntrospectionPluginConsumerBy {
	if o == nil {
		return nil
	}
	return o.ConsumerBy
}

func (o *CreateOauth2IntrospectionPluginConfig) GetCustomClaimsForward() []string {
	if o == nil {
		return nil
	}
	return o.CustomClaimsForward
}

func (o *CreateOauth2IntrospectionPluginConfig) GetCustomIntrospectionHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomIntrospectionHeaders
}

func (o *CreateOauth2IntrospectionPluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *CreateOauth2IntrospectionPluginConfig) GetIntrospectRequest() *bool {
	if o == nil {
		return nil
	}
	return o.IntrospectRequest
}

func (o *CreateOauth2IntrospectionPluginConfig) GetIntrospectionURL() *string {
	if o == nil {
		return nil
	}
	return o.IntrospectionURL
}

func (o *CreateOauth2IntrospectionPluginConfig) GetKeepalive() *int64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *CreateOauth2IntrospectionPluginConfig) GetRunOnPreflight() *bool {
	if o == nil {
		return nil
	}
	return o.RunOnPreflight
}

func (o *CreateOauth2IntrospectionPluginConfig) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *CreateOauth2IntrospectionPluginConfig) GetTokenTypeHint() *string {
	if o == nil {
		return nil
	}
	return o.TokenTypeHint
}

func (o *CreateOauth2IntrospectionPluginConfig) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

type CreateOauth2IntrospectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateOauth2IntrospectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateOauth2IntrospectionPluginOrdering struct {
	After  *CreateOauth2IntrospectionPluginAfter  `json:"after,omitempty"`
	Before *CreateOauth2IntrospectionPluginBefore `json:"before,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginOrdering) GetAfter() *CreateOauth2IntrospectionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateOauth2IntrospectionPluginOrdering) GetBefore() *CreateOauth2IntrospectionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateOauth2IntrospectionPluginProtocols string

const (
	CreateOauth2IntrospectionPluginProtocolsGrpc           CreateOauth2IntrospectionPluginProtocols = "grpc"
	CreateOauth2IntrospectionPluginProtocolsGrpcs          CreateOauth2IntrospectionPluginProtocols = "grpcs"
	CreateOauth2IntrospectionPluginProtocolsHTTP           CreateOauth2IntrospectionPluginProtocols = "http"
	CreateOauth2IntrospectionPluginProtocolsHTTPS          CreateOauth2IntrospectionPluginProtocols = "https"
	CreateOauth2IntrospectionPluginProtocolsTCP            CreateOauth2IntrospectionPluginProtocols = "tcp"
	CreateOauth2IntrospectionPluginProtocolsTLS            CreateOauth2IntrospectionPluginProtocols = "tls"
	CreateOauth2IntrospectionPluginProtocolsTLSPassthrough CreateOauth2IntrospectionPluginProtocols = "tls_passthrough"
	CreateOauth2IntrospectionPluginProtocolsUDP            CreateOauth2IntrospectionPluginProtocols = "udp"
	CreateOauth2IntrospectionPluginProtocolsWs             CreateOauth2IntrospectionPluginProtocols = "ws"
	CreateOauth2IntrospectionPluginProtocolsWss            CreateOauth2IntrospectionPluginProtocols = "wss"
)

func (e CreateOauth2IntrospectionPluginProtocols) ToPointer() *CreateOauth2IntrospectionPluginProtocols {
	return &e
}
func (e *CreateOauth2IntrospectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateOauth2IntrospectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOauth2IntrospectionPluginProtocols: %v", v)
	}
}

// CreateOauth2IntrospectionPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateOauth2IntrospectionPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateOauth2IntrospectionPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateOauth2IntrospectionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateOauth2IntrospectionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateOauth2IntrospectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateOauth2IntrospectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateOauth2IntrospectionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateOauth2IntrospectionPlugin struct {
	Config *CreateOauth2IntrospectionPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                    `json:"enabled,omitempty"`
	InstanceName *string                                  `json:"instance_name,omitempty"`
	name         *string                                  `const:"oauth-2-introspection" json:"name,omitempty"`
	Ordering     *CreateOauth2IntrospectionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateOauth2IntrospectionPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateOauth2IntrospectionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateOauth2IntrospectionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateOauth2IntrospectionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateOauth2IntrospectionPluginService `json:"service,omitempty"`
}

func (c CreateOauth2IntrospectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateOauth2IntrospectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateOauth2IntrospectionPlugin) GetConfig() *CreateOauth2IntrospectionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateOauth2IntrospectionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateOauth2IntrospectionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateOauth2IntrospectionPlugin) GetName() *string {
	return types.String("oauth-2-introspection")
}

func (o *CreateOauth2IntrospectionPlugin) GetOrdering() *CreateOauth2IntrospectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateOauth2IntrospectionPlugin) GetProtocols() []CreateOauth2IntrospectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateOauth2IntrospectionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateOauth2IntrospectionPlugin) GetConsumer() *CreateOauth2IntrospectionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateOauth2IntrospectionPlugin) GetConsumerGroup() *CreateOauth2IntrospectionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateOauth2IntrospectionPlugin) GetRoute() *CreateOauth2IntrospectionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateOauth2IntrospectionPlugin) GetService() *CreateOauth2IntrospectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
