// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EntityRegion - The region of the team.
type EntityRegion string

const (
	EntityRegionUs       EntityRegion = "us"
	EntityRegionEu       EntityRegion = "eu"
	EntityRegionAu       EntityRegion = "au"
	EntityRegionWildcard EntityRegion = "*"
)

func (e EntityRegion) ToPointer() *EntityRegion {
	return &e
}
func (e *EntityRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us":
		fallthrough
	case "eu":
		fallthrough
	case "au":
		fallthrough
	case "*":
		*e = EntityRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityRegion: %v", v)
	}
}

// AssignRole - An assigned role is a role that has been assigned to a user or team.
type AssignRole struct {
	// The desired role.
	RoleName *string `json:"role_name,omitempty"`
	// The ID of the entity.
	EntityID *string `json:"entity_id,omitempty"`
	// The type of entity.
	EntityTypeName *string `json:"entity_type_name,omitempty"`
	// The region of the team.
	EntityRegion *EntityRegion `json:"entity_region,omitempty"`
}

func (o *AssignRole) GetRoleName() *string {
	if o == nil {
		return nil
	}
	return o.RoleName
}

func (o *AssignRole) GetEntityID() *string {
	if o == nil {
		return nil
	}
	return o.EntityID
}

func (o *AssignRole) GetEntityTypeName() *string {
	if o == nil {
		return nil
	}
	return o.EntityTypeName
}

func (o *AssignRole) GetEntityRegion() *EntityRegion {
	if o == nil {
		return nil
	}
	return o.EntityRegion
}
