// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type ACLPluginConfig struct {
	// Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Allow []string `json:"allow,omitempty"`
	// If enabled (`true`), the authenticated groups will always be used even when an authenticated consumer already exists. If the authenticated groups don't exist, it will fallback to use the groups associated with the consumer. By default the authenticated groups will only be used when there is no consumer or the consumer is anonymous.
	AlwaysUseAuthenticatedGroups *bool `json:"always_use_authenticated_groups,omitempty"`
	// Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
	Deny []string `json:"deny,omitempty"`
	// If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
	HideGroupsHeader      *bool `json:"hide_groups_header,omitempty"`
	IncludeConsumerGroups *bool `json:"include_consumer_groups,omitempty"`
}

func (o *ACLPluginConfig) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *ACLPluginConfig) GetAlwaysUseAuthenticatedGroups() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysUseAuthenticatedGroups
}

func (o *ACLPluginConfig) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

func (o *ACLPluginConfig) GetHideGroupsHeader() *bool {
	if o == nil {
		return nil
	}
	return o.HideGroupsHeader
}

func (o *ACLPluginConfig) GetIncludeConsumerGroups() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeConsumerGroups
}

type ACLPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *ACLPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type ACLPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *ACLPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type ACLPluginOrdering struct {
	After  *ACLPluginAfter  `json:"after,omitempty"`
	Before *ACLPluginBefore `json:"before,omitempty"`
}

func (o *ACLPluginOrdering) GetAfter() *ACLPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ACLPluginOrdering) GetBefore() *ACLPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type ACLPluginProtocols string

const (
	ACLPluginProtocolsGrpc           ACLPluginProtocols = "grpc"
	ACLPluginProtocolsGrpcs          ACLPluginProtocols = "grpcs"
	ACLPluginProtocolsHTTP           ACLPluginProtocols = "http"
	ACLPluginProtocolsHTTPS          ACLPluginProtocols = "https"
	ACLPluginProtocolsTCP            ACLPluginProtocols = "tcp"
	ACLPluginProtocolsTLS            ACLPluginProtocols = "tls"
	ACLPluginProtocolsTLSPassthrough ACLPluginProtocols = "tls_passthrough"
	ACLPluginProtocolsUDP            ACLPluginProtocols = "udp"
	ACLPluginProtocolsWs             ACLPluginProtocols = "ws"
	ACLPluginProtocolsWss            ACLPluginProtocols = "wss"
)

func (e ACLPluginProtocols) ToPointer() *ACLPluginProtocols {
	return &e
}
func (e *ACLPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = ACLPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ACLPluginProtocols: %v", v)
	}
}

// ACLPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ACLPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type ACLPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ACLPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type ACLPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ACLPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ACLPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *ACLPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type ACLPlugin struct {
	Config *ACLPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool              `json:"enabled,omitempty"`
	ID           *string            `json:"id,omitempty"`
	InstanceName *string            `json:"instance_name,omitempty"`
	name         *string            `const:"acl" json:"name,omitempty"`
	Ordering     *ACLPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []ACLPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *ACLPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *ACLPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *ACLPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ACLPluginService `json:"service,omitempty"`
}

func (a ACLPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ACLPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ACLPlugin) GetConfig() *ACLPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *ACLPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ACLPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ACLPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ACLPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *ACLPlugin) GetName() *string {
	return types.String("acl")
}

func (o *ACLPlugin) GetOrdering() *ACLPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *ACLPlugin) GetProtocols() []ACLPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *ACLPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ACLPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ACLPlugin) GetConsumer() *ACLPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *ACLPlugin) GetConsumerGroup() *ACLPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *ACLPlugin) GetRoute() *ACLPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *ACLPlugin) GetService() *ACLPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
