// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateHmacAuthPluginAlgorithms string

const (
	CreateHmacAuthPluginAlgorithmsHmacSha1   CreateHmacAuthPluginAlgorithms = "hmac-sha1"
	CreateHmacAuthPluginAlgorithmsHmacSha256 CreateHmacAuthPluginAlgorithms = "hmac-sha256"
	CreateHmacAuthPluginAlgorithmsHmacSha384 CreateHmacAuthPluginAlgorithms = "hmac-sha384"
	CreateHmacAuthPluginAlgorithmsHmacSha512 CreateHmacAuthPluginAlgorithms = "hmac-sha512"
)

func (e CreateHmacAuthPluginAlgorithms) ToPointer() *CreateHmacAuthPluginAlgorithms {
	return &e
}
func (e *CreateHmacAuthPluginAlgorithms) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hmac-sha1":
		fallthrough
	case "hmac-sha256":
		fallthrough
	case "hmac-sha384":
		fallthrough
	case "hmac-sha512":
		*e = CreateHmacAuthPluginAlgorithms(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHmacAuthPluginAlgorithms: %v", v)
	}
}

type CreateHmacAuthPluginConfig struct {
	// A list of HMAC digest algorithms that the user wants to support. Allowed values are `hmac-sha1`, `hmac-sha256`, `hmac-sha384`, and `hmac-sha512`
	Algorithms []CreateHmacAuthPluginAlgorithms `json:"algorithms,omitempty"`
	// An optional string (Consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
	Anonymous *string `json:"anonymous,omitempty"`
	// Clock skew in seconds to prevent replay attacks.
	ClockSkew *float64 `json:"clock_skew,omitempty"`
	// A list of headers that the client should at least use for HTTP signature creation.
	EnforceHeaders []string `json:"enforce_headers,omitempty"`
	// An optional boolean value telling the plugin to show or hide the credential from the upstream service.
	HideCredentials *bool `json:"hide_credentials,omitempty"`
	// When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
	Realm *string `json:"realm,omitempty"`
	// A boolean value telling the plugin to enable body validation.
	ValidateRequestBody *bool `json:"validate_request_body,omitempty"`
}

func (o *CreateHmacAuthPluginConfig) GetAlgorithms() []CreateHmacAuthPluginAlgorithms {
	if o == nil {
		return nil
	}
	return o.Algorithms
}

func (o *CreateHmacAuthPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *CreateHmacAuthPluginConfig) GetClockSkew() *float64 {
	if o == nil {
		return nil
	}
	return o.ClockSkew
}

func (o *CreateHmacAuthPluginConfig) GetEnforceHeaders() []string {
	if o == nil {
		return nil
	}
	return o.EnforceHeaders
}

func (o *CreateHmacAuthPluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *CreateHmacAuthPluginConfig) GetRealm() *string {
	if o == nil {
		return nil
	}
	return o.Realm
}

func (o *CreateHmacAuthPluginConfig) GetValidateRequestBody() *bool {
	if o == nil {
		return nil
	}
	return o.ValidateRequestBody
}

type CreateHmacAuthPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateHmacAuthPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateHmacAuthPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateHmacAuthPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateHmacAuthPluginOrdering struct {
	After  *CreateHmacAuthPluginAfter  `json:"after,omitempty"`
	Before *CreateHmacAuthPluginBefore `json:"before,omitempty"`
}

func (o *CreateHmacAuthPluginOrdering) GetAfter() *CreateHmacAuthPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateHmacAuthPluginOrdering) GetBefore() *CreateHmacAuthPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateHmacAuthPluginProtocols string

const (
	CreateHmacAuthPluginProtocolsGrpc           CreateHmacAuthPluginProtocols = "grpc"
	CreateHmacAuthPluginProtocolsGrpcs          CreateHmacAuthPluginProtocols = "grpcs"
	CreateHmacAuthPluginProtocolsHTTP           CreateHmacAuthPluginProtocols = "http"
	CreateHmacAuthPluginProtocolsHTTPS          CreateHmacAuthPluginProtocols = "https"
	CreateHmacAuthPluginProtocolsTCP            CreateHmacAuthPluginProtocols = "tcp"
	CreateHmacAuthPluginProtocolsTLS            CreateHmacAuthPluginProtocols = "tls"
	CreateHmacAuthPluginProtocolsTLSPassthrough CreateHmacAuthPluginProtocols = "tls_passthrough"
	CreateHmacAuthPluginProtocolsUDP            CreateHmacAuthPluginProtocols = "udp"
	CreateHmacAuthPluginProtocolsWs             CreateHmacAuthPluginProtocols = "ws"
	CreateHmacAuthPluginProtocolsWss            CreateHmacAuthPluginProtocols = "wss"
)

func (e CreateHmacAuthPluginProtocols) ToPointer() *CreateHmacAuthPluginProtocols {
	return &e
}
func (e *CreateHmacAuthPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateHmacAuthPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHmacAuthPluginProtocols: %v", v)
	}
}

// CreateHmacAuthPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateHmacAuthPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHmacAuthPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateHmacAuthPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHmacAuthPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateHmacAuthPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateHmacAuthPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHmacAuthPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateHmacAuthPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateHmacAuthPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHmacAuthPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateHmacAuthPlugin struct {
	Config *CreateHmacAuthPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                         `json:"enabled,omitempty"`
	InstanceName *string                       `json:"instance_name,omitempty"`
	name         *string                       `const:"hmac-auth" json:"name,omitempty"`
	Ordering     *CreateHmacAuthPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateHmacAuthPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateHmacAuthPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateHmacAuthPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateHmacAuthPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateHmacAuthPluginService `json:"service,omitempty"`
}

func (c CreateHmacAuthPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHmacAuthPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHmacAuthPlugin) GetConfig() *CreateHmacAuthPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateHmacAuthPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateHmacAuthPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateHmacAuthPlugin) GetName() *string {
	return types.String("hmac-auth")
}

func (o *CreateHmacAuthPlugin) GetOrdering() *CreateHmacAuthPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateHmacAuthPlugin) GetProtocols() []CreateHmacAuthPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateHmacAuthPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateHmacAuthPlugin) GetConsumer() *CreateHmacAuthPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateHmacAuthPlugin) GetConsumerGroup() *CreateHmacAuthPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateHmacAuthPlugin) GetRoute() *CreateHmacAuthPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateHmacAuthPlugin) GetService() *CreateHmacAuthPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
