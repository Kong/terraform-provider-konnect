// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type ConfluentPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (c *ConfluentPluginAfter) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type ConfluentPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (c *ConfluentPluginBefore) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type ConfluentPluginOrdering struct {
	After  *ConfluentPluginAfter  `json:"after,omitempty"`
	Before *ConfluentPluginBefore `json:"before,omitempty"`
}

func (c *ConfluentPluginOrdering) GetAfter() *ConfluentPluginAfter {
	if c == nil {
		return nil
	}
	return c.After
}

func (c *ConfluentPluginOrdering) GetBefore() *ConfluentPluginBefore {
	if c == nil {
		return nil
	}
	return c.Before
}

type ConfluentPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (c *ConfluentPluginPartials) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConfluentPluginPartials) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ConfluentPluginPartials) GetPath() *string {
	if c == nil {
		return nil
	}
	return c.Path
}

type BootstrapServers struct {
	// A string representing a host name, such as example.com.
	Host string `json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port int64 `json:"port"`
}

func (b *BootstrapServers) GetHost() string {
	if b == nil {
		return ""
	}
	return b.Host
}

func (b *BootstrapServers) GetPort() int64 {
	if b == nil {
		return 0
	}
	return b.Port
}

// ProducerRequestAcks - The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments; 1 for only the leader; and -1 for the full ISR (In-Sync Replica set).
type ProducerRequestAcks int64

const (
	ProducerRequestAcksMinus1 ProducerRequestAcks = -1
	ProducerRequestAcksZero   ProducerRequestAcks = 0
	ProducerRequestAcksOne    ProducerRequestAcks = 1
)

func (e ProducerRequestAcks) ToPointer() *ProducerRequestAcks {
	return &e
}
func (e *ProducerRequestAcks) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 0:
		fallthrough
	case 1:
		*e = ProducerRequestAcks(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProducerRequestAcks: %v", v)
	}
}

type Basic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (b *Basic) GetPassword() string {
	if b == nil {
		return ""
	}
	return b.Password
}

func (b *Basic) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

// ConfluentPluginMode - Authentication mode to use with the schema registry.
type ConfluentPluginMode string

const (
	ConfluentPluginModeBasic  ConfluentPluginMode = "basic"
	ConfluentPluginModeNone   ConfluentPluginMode = "none"
	ConfluentPluginModeOauth2 ConfluentPluginMode = "oauth2"
)

func (e ConfluentPluginMode) ToPointer() *ConfluentPluginMode {
	return &e
}
func (e *ConfluentPluginMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		fallthrough
	case "oauth2":
		*e = ConfluentPluginMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentPluginMode: %v", v)
	}
}

// ConfluentPluginGrantType - The OAuth grant type to be used.
type ConfluentPluginGrantType string

const (
	ConfluentPluginGrantTypeClientCredentials ConfluentPluginGrantType = "client_credentials"
	ConfluentPluginGrantTypePassword          ConfluentPluginGrantType = "password"
)

func (e ConfluentPluginGrantType) ToPointer() *ConfluentPluginGrantType {
	return &e
}
func (e *ConfluentPluginGrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_credentials":
		fallthrough
	case "password":
		*e = ConfluentPluginGrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentPluginGrantType: %v", v)
	}
}

type Oauth2 struct {
	// List of audiences passed to the IdP when obtaining a new token.
	Audience []string `json:"audience,omitempty"`
	// The client ID for the application registration in the IdP.
	ClientID *string `default:"null" json:"client_id"`
	// The client secret for the application registration in the IdP.
	ClientSecret *string `default:"null" json:"client_secret"`
	// The OAuth grant type to be used.
	GrantType *ConfluentPluginGrantType `default:"client_credentials" json:"grant_type"`
	// The password to use if `config.oauth.grant_type` is set to `password`.
	Password *string `default:"null" json:"password"`
	// List of scopes to request from the IdP when obtaining a new token.
	Scopes []string `json:"scopes,omitempty"`
	// The token endpoint URI.
	TokenEndpoint string `json:"token_endpoint"`
	// Extra headers to be passed in the token endpoint request.
	TokenHeaders map[string]any `json:"token_headers,omitempty"`
	// Extra post arguments to be passed in the token endpoint request.
	TokenPostArgs map[string]any `json:"token_post_args,omitempty"`
	// The username to use if `config.oauth.grant_type` is set to `password`.
	Username *string `default:"null" json:"username"`
}

func (o Oauth2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Oauth2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, []string{"token_endpoint"}); err != nil {
		return err
	}
	return nil
}

func (o *Oauth2) GetAudience() []string {
	if o == nil {
		return nil
	}
	return o.Audience
}

func (o *Oauth2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *Oauth2) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *Oauth2) GetGrantType() *ConfluentPluginGrantType {
	if o == nil {
		return nil
	}
	return o.GrantType
}

func (o *Oauth2) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *Oauth2) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *Oauth2) GetTokenEndpoint() string {
	if o == nil {
		return ""
	}
	return o.TokenEndpoint
}

func (o *Oauth2) GetTokenHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.TokenHeaders
}

func (o *Oauth2) GetTokenPostArgs() map[string]any {
	if o == nil {
		return nil
	}
	return o.TokenPostArgs
}

func (o *Oauth2) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// ConfluentPluginAuthMethod - The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.
type ConfluentPluginAuthMethod string

const (
	ConfluentPluginAuthMethodClientSecretBasic ConfluentPluginAuthMethod = "client_secret_basic"
	ConfluentPluginAuthMethodClientSecretJwt   ConfluentPluginAuthMethod = "client_secret_jwt"
	ConfluentPluginAuthMethodClientSecretPost  ConfluentPluginAuthMethod = "client_secret_post"
	ConfluentPluginAuthMethodNone              ConfluentPluginAuthMethod = "none"
)

func (e ConfluentPluginAuthMethod) ToPointer() *ConfluentPluginAuthMethod {
	return &e
}
func (e *ConfluentPluginAuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "client_secret_basic":
		fallthrough
	case "client_secret_jwt":
		fallthrough
	case "client_secret_post":
		fallthrough
	case "none":
		*e = ConfluentPluginAuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentPluginAuthMethod: %v", v)
	}
}

// ConfluentPluginClientSecretJwtAlg - The algorithm to use with JWT when using `client_secret_jwt` authentication.
type ConfluentPluginClientSecretJwtAlg string

const (
	ConfluentPluginClientSecretJwtAlgHs256 ConfluentPluginClientSecretJwtAlg = "HS256"
	ConfluentPluginClientSecretJwtAlgHs512 ConfluentPluginClientSecretJwtAlg = "HS512"
)

func (e ConfluentPluginClientSecretJwtAlg) ToPointer() *ConfluentPluginClientSecretJwtAlg {
	return &e
}
func (e *ConfluentPluginClientSecretJwtAlg) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HS256":
		fallthrough
	case "HS512":
		*e = ConfluentPluginClientSecretJwtAlg(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentPluginClientSecretJwtAlg: %v", v)
	}
}

type Oauth2Client struct {
	// The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.
	AuthMethod *ConfluentPluginAuthMethod `default:"client_secret_post" json:"auth_method"`
	// The algorithm to use with JWT when using `client_secret_jwt` authentication.
	ClientSecretJwtAlg *ConfluentPluginClientSecretJwtAlg `default:"HS512" json:"client_secret_jwt_alg"`
	// The proxy to use when making HTTP requests to the IdP.
	HTTPProxy *string `default:"null" json:"http_proxy"`
	// The `Proxy-Authorization` header value to be used with `http_proxy`.
	HTTPProxyAuthorization *string `default:"null" json:"http_proxy_authorization"`
	// The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.
	HTTPVersion *float64 `json:"http_version,omitempty"`
	// The proxy to use when making HTTPS requests to the IdP.
	HTTPSProxy *string `default:"null" json:"https_proxy"`
	// The `Proxy-Authorization` header value to be used with `https_proxy`.
	HTTPSProxyAuthorization *string `default:"null" json:"https_proxy_authorization"`
	// Whether to use keepalive connections to the IdP.
	KeepAlive *bool `default:"true" json:"keep_alive"`
	// A comma-separated list of hosts that should not be proxied.
	NoProxy *string `default:"null" json:"no_proxy"`
	// Whether to verify the certificate presented by the IdP when using HTTPS.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Network I/O timeout for requests to the IdP in milliseconds.
	Timeout *int64 `default:"10000" json:"timeout"`
}

func (o Oauth2Client) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Oauth2Client) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Oauth2Client) GetAuthMethod() *ConfluentPluginAuthMethod {
	if o == nil {
		return nil
	}
	return o.AuthMethod
}

func (o *Oauth2Client) GetClientSecretJwtAlg() *ConfluentPluginClientSecretJwtAlg {
	if o == nil {
		return nil
	}
	return o.ClientSecretJwtAlg
}

func (o *Oauth2Client) GetHTTPProxy() *string {
	if o == nil {
		return nil
	}
	return o.HTTPProxy
}

func (o *Oauth2Client) GetHTTPProxyAuthorization() *string {
	if o == nil {
		return nil
	}
	return o.HTTPProxyAuthorization
}

func (o *Oauth2Client) GetHTTPVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.HTTPVersion
}

func (o *Oauth2Client) GetHTTPSProxy() *string {
	if o == nil {
		return nil
	}
	return o.HTTPSProxy
}

func (o *Oauth2Client) GetHTTPSProxyAuthorization() *string {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyAuthorization
}

func (o *Oauth2Client) GetKeepAlive() *bool {
	if o == nil {
		return nil
	}
	return o.KeepAlive
}

func (o *Oauth2Client) GetNoProxy() *string {
	if o == nil {
		return nil
	}
	return o.NoProxy
}

func (o *Oauth2Client) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *Oauth2Client) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

type ConfluentPluginAuthentication struct {
	Basic *Basic `json:"basic"`
	// Authentication mode to use with the schema registry.
	Mode         *ConfluentPluginMode `default:"none" json:"mode"`
	Oauth2       *Oauth2              `json:"oauth2"`
	Oauth2Client *Oauth2Client        `json:"oauth2_client"`
}

func (c ConfluentPluginAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentPluginAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentPluginAuthentication) GetBasic() *Basic {
	if c == nil {
		return nil
	}
	return c.Basic
}

func (c *ConfluentPluginAuthentication) GetMode() *ConfluentPluginMode {
	if c == nil {
		return nil
	}
	return c.Mode
}

func (c *ConfluentPluginAuthentication) GetOauth2() *Oauth2 {
	if c == nil {
		return nil
	}
	return c.Oauth2
}

func (c *ConfluentPluginAuthentication) GetOauth2Client() *Oauth2Client {
	if c == nil {
		return nil
	}
	return c.Oauth2Client
}

type KeySchema struct {
	// The schema version to use for serialization/deserialization. Use 'latest' to always fetch the most recent version.
	SchemaVersion *string `default:"null" json:"schema_version"`
	// The name of the subject
	SubjectName *string `default:"null" json:"subject_name"`
}

func (k KeySchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeySchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *KeySchema) GetSchemaVersion() *string {
	if k == nil {
		return nil
	}
	return k.SchemaVersion
}

func (k *KeySchema) GetSubjectName() *string {
	if k == nil {
		return nil
	}
	return k.SubjectName
}

type ValueSchema struct {
	// The schema version to use for serialization/deserialization. Use 'latest' to always fetch the most recent version.
	SchemaVersion *string `default:"null" json:"schema_version"`
	// The name of the subject
	SubjectName *string `default:"null" json:"subject_name"`
}

func (v ValueSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *ValueSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (v *ValueSchema) GetSchemaVersion() *string {
	if v == nil {
		return nil
	}
	return v.SchemaVersion
}

func (v *ValueSchema) GetSubjectName() *string {
	if v == nil {
		return nil
	}
	return v.SubjectName
}

type Confluent struct {
	Authentication *ConfluentPluginAuthentication `json:"authentication"`
	KeySchema      *KeySchema                     `json:"key_schema"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `default:"true" json:"ssl_verify"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `default:"null" json:"ttl"`
	// The URL of the schema registry.
	URL         *string      `default:"null" json:"url"`
	ValueSchema *ValueSchema `json:"value_schema"`
}

func (c Confluent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Confluent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *Confluent) GetAuthentication() *ConfluentPluginAuthentication {
	if c == nil {
		return nil
	}
	return c.Authentication
}

func (c *Confluent) GetKeySchema() *KeySchema {
	if c == nil {
		return nil
	}
	return c.KeySchema
}

func (c *Confluent) GetSslVerify() *bool {
	if c == nil {
		return nil
	}
	return c.SslVerify
}

func (c *Confluent) GetTTL() *float64 {
	if c == nil {
		return nil
	}
	return c.TTL
}

func (c *Confluent) GetURL() *string {
	if c == nil {
		return nil
	}
	return c.URL
}

func (c *Confluent) GetValueSchema() *ValueSchema {
	if c == nil {
		return nil
	}
	return c.ValueSchema
}

// SchemaRegistry - The plugin-global schema registry configuration. This can be overwritten by the topic configuration.
type SchemaRegistry struct {
	Confluent *Confluent `json:"confluent"`
}

func (s *SchemaRegistry) GetConfluent() *Confluent {
	if s == nil {
		return nil
	}
	return s.Confluent
}

type ConfluentPluginConfig struct {
	// The list of allowed topic names to which messages can be sent. The default topic configured in the `topic` field is always allowed, regardless of its inclusion in `allowed_topics`.
	AllowedTopics []string `json:"allowed_topics"`
	// Set of bootstrap brokers in a `{host: host, port: port}` list format.
	BootstrapServers []BootstrapServers `json:"bootstrap_servers"`
	// Username/Apikey for SASL authentication.
	ClusterAPIKey string `json:"cluster_api_key"`
	// Password/ApiSecret for SASL authentication.
	ClusterAPISecret string `json:"cluster_api_secret"`
	// An identifier for the Kafka cluster. By default, this field generates a random string. You can also set your own custom cluster identifier.  If more than one Kafka plugin is configured without a `cluster_name` (that is, if the default autogenerated value is removed), these plugins will use the same producer, and by extension, the same cluster. Logs will be sent to the leader of the cluster.
	ClusterName *string `json:"cluster_name,omitempty"`
	// Apikey for authentication with Confluent Cloud. This allows for management tasks such as creating topics, ACLs, etc.
	ConfluentCloudAPIKey *string `default:"null" json:"confluent_cloud_api_key"`
	// The corresponding secret for the Confluent Cloud API key.
	ConfluentCloudAPISecret *string `default:"null" json:"confluent_cloud_api_secret"`
	// Include the request body in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.
	ForwardBody *bool `default:"true" json:"forward_body"`
	// Include the request headers in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.
	ForwardHeaders *bool `default:"false" json:"forward_headers"`
	// Include the request method in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.
	ForwardMethod *bool `default:"false" json:"forward_method"`
	// Include the request URI and URI arguments (as in, query arguments) in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.
	ForwardURI *bool `default:"false" json:"forward_uri"`
	// Keepalive timeout in milliseconds.
	Keepalive        *int64 `default:"60000" json:"keepalive"`
	KeepaliveEnabled *bool  `default:"false" json:"keepalive_enabled"`
	// The request query parameter name that contains the Kafka message key. If specified, messages with the same key will be sent to the same Kafka partition, ensuring consistent ordering.
	KeyQueryArg *string `default:"null" json:"key_query_arg"`
	// The Lua functions that manipulates the message being sent to the Kafka topic.
	MessageByLuaFunctions []string `json:"message_by_lua_functions"`
	// Flag to enable asynchronous mode.
	ProducerAsync *bool `default:"true" json:"producer_async"`
	// Maximum number of messages that can be buffered in memory in asynchronous mode.
	ProducerAsyncBufferingLimitsMessagesInMemory *int64 `default:"50000" json:"producer_async_buffering_limits_messages_in_memory"`
	// Maximum time interval in milliseconds between buffer flushes in asynchronous mode.
	ProducerAsyncFlushTimeout *int64 `default:"1000" json:"producer_async_flush_timeout"`
	// The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments; 1 for only the leader; and -1 for the full ISR (In-Sync Replica set).
	ProducerRequestAcks *ProducerRequestAcks `default:"1" json:"producer_request_acks"`
	// Maximum size of a Produce request in bytes.
	ProducerRequestLimitsBytesPerRequest *int64 `default:"1048576" json:"producer_request_limits_bytes_per_request"`
	// Maximum number of messages to include into a single producer request.
	ProducerRequestLimitsMessagesPerRequest *int64 `default:"200" json:"producer_request_limits_messages_per_request"`
	// Backoff interval between retry attempts in milliseconds.
	ProducerRequestRetriesBackoffTimeout *int64 `default:"100" json:"producer_request_retries_backoff_timeout"`
	// Maximum number of retry attempts per single Produce request.
	ProducerRequestRetriesMaxAttempts *int64 `default:"10" json:"producer_request_retries_max_attempts"`
	// Time to wait for a Produce response in milliseconds.
	ProducerRequestTimeout *int64 `default:"2000" json:"producer_request_timeout"`
	// The plugin-global schema registry configuration. This can be overwritten by the topic configuration.
	SchemaRegistry *SchemaRegistry `json:"schema_registry,omitempty"`
	// Socket timeout in milliseconds.
	Timeout *int64 `default:"10000" json:"timeout"`
	// The default Kafka topic to publish to if the query parameter defined in the `topics_query_arg` does not exist in the request
	Topic string `json:"topic"`
	// The request query parameter name that contains the topics to publish to
	TopicsQueryArg *string `default:"null" json:"topics_query_arg"`
}

func (c ConfluentPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"cluster_api_key", "cluster_api_secret", "topic"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentPluginConfig) GetAllowedTopics() []string {
	if c == nil {
		return nil
	}
	return c.AllowedTopics
}

func (c *ConfluentPluginConfig) GetBootstrapServers() []BootstrapServers {
	if c == nil {
		return nil
	}
	return c.BootstrapServers
}

func (c *ConfluentPluginConfig) GetClusterAPIKey() string {
	if c == nil {
		return ""
	}
	return c.ClusterAPIKey
}

func (c *ConfluentPluginConfig) GetClusterAPISecret() string {
	if c == nil {
		return ""
	}
	return c.ClusterAPISecret
}

func (c *ConfluentPluginConfig) GetClusterName() *string {
	if c == nil {
		return nil
	}
	return c.ClusterName
}

func (c *ConfluentPluginConfig) GetConfluentCloudAPIKey() *string {
	if c == nil {
		return nil
	}
	return c.ConfluentCloudAPIKey
}

func (c *ConfluentPluginConfig) GetConfluentCloudAPISecret() *string {
	if c == nil {
		return nil
	}
	return c.ConfluentCloudAPISecret
}

func (c *ConfluentPluginConfig) GetForwardBody() *bool {
	if c == nil {
		return nil
	}
	return c.ForwardBody
}

func (c *ConfluentPluginConfig) GetForwardHeaders() *bool {
	if c == nil {
		return nil
	}
	return c.ForwardHeaders
}

func (c *ConfluentPluginConfig) GetForwardMethod() *bool {
	if c == nil {
		return nil
	}
	return c.ForwardMethod
}

func (c *ConfluentPluginConfig) GetForwardURI() *bool {
	if c == nil {
		return nil
	}
	return c.ForwardURI
}

func (c *ConfluentPluginConfig) GetKeepalive() *int64 {
	if c == nil {
		return nil
	}
	return c.Keepalive
}

func (c *ConfluentPluginConfig) GetKeepaliveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.KeepaliveEnabled
}

func (c *ConfluentPluginConfig) GetKeyQueryArg() *string {
	if c == nil {
		return nil
	}
	return c.KeyQueryArg
}

func (c *ConfluentPluginConfig) GetMessageByLuaFunctions() []string {
	if c == nil {
		return nil
	}
	return c.MessageByLuaFunctions
}

func (c *ConfluentPluginConfig) GetProducerAsync() *bool {
	if c == nil {
		return nil
	}
	return c.ProducerAsync
}

func (c *ConfluentPluginConfig) GetProducerAsyncBufferingLimitsMessagesInMemory() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerAsyncBufferingLimitsMessagesInMemory
}

func (c *ConfluentPluginConfig) GetProducerAsyncFlushTimeout() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerAsyncFlushTimeout
}

func (c *ConfluentPluginConfig) GetProducerRequestAcks() *ProducerRequestAcks {
	if c == nil {
		return nil
	}
	return c.ProducerRequestAcks
}

func (c *ConfluentPluginConfig) GetProducerRequestLimitsBytesPerRequest() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerRequestLimitsBytesPerRequest
}

func (c *ConfluentPluginConfig) GetProducerRequestLimitsMessagesPerRequest() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerRequestLimitsMessagesPerRequest
}

func (c *ConfluentPluginConfig) GetProducerRequestRetriesBackoffTimeout() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerRequestRetriesBackoffTimeout
}

func (c *ConfluentPluginConfig) GetProducerRequestRetriesMaxAttempts() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerRequestRetriesMaxAttempts
}

func (c *ConfluentPluginConfig) GetProducerRequestTimeout() *int64 {
	if c == nil {
		return nil
	}
	return c.ProducerRequestTimeout
}

func (c *ConfluentPluginConfig) GetSchemaRegistry() *SchemaRegistry {
	if c == nil {
		return nil
	}
	return c.SchemaRegistry
}

func (c *ConfluentPluginConfig) GetTimeout() *int64 {
	if c == nil {
		return nil
	}
	return c.Timeout
}

func (c *ConfluentPluginConfig) GetTopic() string {
	if c == nil {
		return ""
	}
	return c.Topic
}

func (c *ConfluentPluginConfig) GetTopicsQueryArg() *string {
	if c == nil {
		return nil
	}
	return c.TopicsQueryArg
}

// ConfluentPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ConfluentPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (c *ConfluentPluginConsumer) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

type ConfluentPluginProtocols string

const (
	ConfluentPluginProtocolsGrpc  ConfluentPluginProtocols = "grpc"
	ConfluentPluginProtocolsGrpcs ConfluentPluginProtocols = "grpcs"
	ConfluentPluginProtocolsHTTP  ConfluentPluginProtocols = "http"
	ConfluentPluginProtocolsHTTPS ConfluentPluginProtocols = "https"
)

func (e ConfluentPluginProtocols) ToPointer() *ConfluentPluginProtocols {
	return &e
}
func (e *ConfluentPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ConfluentPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentPluginProtocols: %v", v)
	}
}

// ConfluentPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type ConfluentPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (c *ConfluentPluginRoute) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// ConfluentPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ConfluentPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (c *ConfluentPluginService) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// ConfluentPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ConfluentPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                  `default:"null" json:"instance_name"`
	name         string                   `const:"confluent" json:"name"`
	Ordering     *ConfluentPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []ConfluentPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                `json:"updated_at,omitempty"`
	Config    ConfluentPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ConfluentPluginConsumer `json:"consumer"`
	// A set of strings representing HTTP protocols.
	Protocols []ConfluentPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *ConfluentPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ConfluentPluginService `json:"service"`
}

func (c ConfluentPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentPlugin) GetCreatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *ConfluentPlugin) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *ConfluentPlugin) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConfluentPlugin) GetInstanceName() *string {
	if c == nil {
		return nil
	}
	return c.InstanceName
}

func (c *ConfluentPlugin) GetName() string {
	return "confluent"
}

func (c *ConfluentPlugin) GetOrdering() *ConfluentPluginOrdering {
	if c == nil {
		return nil
	}
	return c.Ordering
}

func (c *ConfluentPlugin) GetPartials() []ConfluentPluginPartials {
	if c == nil {
		return nil
	}
	return c.Partials
}

func (c *ConfluentPlugin) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *ConfluentPlugin) GetUpdatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *ConfluentPlugin) GetConfig() ConfluentPluginConfig {
	if c == nil {
		return ConfluentPluginConfig{}
	}
	return c.Config
}

func (c *ConfluentPlugin) GetConsumer() *ConfluentPluginConsumer {
	if c == nil {
		return nil
	}
	return c.Consumer
}

func (c *ConfluentPlugin) GetProtocols() []ConfluentPluginProtocols {
	if c == nil {
		return nil
	}
	return c.Protocols
}

func (c *ConfluentPlugin) GetRoute() *ConfluentPluginRoute {
	if c == nil {
		return nil
	}
	return c.Route
}

func (c *ConfluentPlugin) GetService() *ConfluentPluginService {
	if c == nil {
		return nil
	}
	return c.Service
}
