// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type AiAzureContentSafetyPluginAfter struct {
	Access []string `json:"access"`
}

func (o *AiAzureContentSafetyPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiAzureContentSafetyPluginBefore struct {
	Access []string `json:"access"`
}

func (o *AiAzureContentSafetyPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiAzureContentSafetyPluginOrdering struct {
	After  *AiAzureContentSafetyPluginAfter  `json:"after"`
	Before *AiAzureContentSafetyPluginBefore `json:"before"`
}

func (o *AiAzureContentSafetyPluginOrdering) GetAfter() *AiAzureContentSafetyPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *AiAzureContentSafetyPluginOrdering) GetBefore() *AiAzureContentSafetyPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type AiAzureContentSafetyPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (a AiAzureContentSafetyPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiAzureContentSafetyPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiAzureContentSafetyPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiAzureContentSafetyPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AiAzureContentSafetyPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type Categories struct {
	Name           string `json:"name"`
	RejectionLevel int64  `json:"rejection_level"`
}

func (o *Categories) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Categories) GetRejectionLevel() int64 {
	if o == nil {
		return 0
	}
	return o.RejectionLevel
}

// OutputType - See https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/content-filter#content-filtering-categories
type OutputType string

const (
	OutputTypeEightSeverityLevels OutputType = "EightSeverityLevels"
	OutputTypeFourSeverityLevels  OutputType = "FourSeverityLevels"
)

func (e OutputType) ToPointer() *OutputType {
	return &e
}
func (e *OutputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EightSeverityLevels":
		fallthrough
	case "FourSeverityLevels":
		*e = OutputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputType: %v", v)
	}
}

// AiAzureContentSafetyPluginTextSource - Select where to pick the 'text' for the Azure Content Services request.
type AiAzureContentSafetyPluginTextSource string

const (
	AiAzureContentSafetyPluginTextSourceConcatenateAllContent  AiAzureContentSafetyPluginTextSource = "concatenate_all_content"
	AiAzureContentSafetyPluginTextSourceConcatenateUserContent AiAzureContentSafetyPluginTextSource = "concatenate_user_content"
)

func (e AiAzureContentSafetyPluginTextSource) ToPointer() *AiAzureContentSafetyPluginTextSource {
	return &e
}
func (e *AiAzureContentSafetyPluginTextSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "concatenate_all_content":
		fallthrough
	case "concatenate_user_content":
		*e = AiAzureContentSafetyPluginTextSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiAzureContentSafetyPluginTextSource: %v", v)
	}
}

type AiAzureContentSafetyPluginConfig struct {
	// Sets the ?api-version URL parameter, used for defining the Azure Content Services interchange format.
	AzureAPIVersion *string `default:"2023-10-01" json:"azure_api_version"`
	// If `azure_use_managed_identity` is true, set the client ID if required.
	AzureClientID *string `default:"null" json:"azure_client_id"`
	// If `azure_use_managed_identity` is true, set the client secret if required.
	AzureClientSecret *string `default:"null" json:"azure_client_secret"`
	// If `azure_use_managed_identity` is true, set the tenant ID if required.
	AzureTenantID *string `default:"null" json:"azure_tenant_id"`
	// If checked, uses (if set) `azure_client_id`, `azure_client_secret`, and/or `azure_tenant_id` for Azure authentication, via Managed or User-assigned identity
	AzureUseManagedIdentity *bool `default:"false" json:"azure_use_managed_identity"`
	// Use these configured blocklists (in Azure Content Services) when inspecting content.
	BlocklistNames []string `json:"blocklist_names"`
	// Array of categories, and their thresholds, to measure on.
	Categories []Categories `json:"categories"`
	// If `azure_use_managed_identity` is true, set the API key to call Content Safety.
	ContentSafetyKey *string `default:"null" json:"content_safety_key"`
	// Full URL, inc protocol, of the Azure Content Safety instance.
	ContentSafetyURL string `json:"content_safety_url"`
	// Tells Azure to reject the request if any blocklist filter is hit.
	HaltOnBlocklistHit *bool `default:"true" json:"halt_on_blocklist_hit"`
	// See https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/content-filter#content-filtering-categories
	OutputType *OutputType `default:"FourSeverityLevels" json:"output_type"`
	// Set true to tell the caller why their request was rejected, if so.
	RevealFailureReason *bool `default:"true" json:"reveal_failure_reason"`
	// Select where to pick the 'text' for the Azure Content Services request.
	TextSource *AiAzureContentSafetyPluginTextSource `default:"concatenate_all_content" json:"text_source"`
}

func (a AiAzureContentSafetyPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiAzureContentSafetyPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiAzureContentSafetyPluginConfig) GetAzureAPIVersion() *string {
	if o == nil {
		return nil
	}
	return o.AzureAPIVersion
}

func (o *AiAzureContentSafetyPluginConfig) GetAzureClientID() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientID
}

func (o *AiAzureContentSafetyPluginConfig) GetAzureClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientSecret
}

func (o *AiAzureContentSafetyPluginConfig) GetAzureTenantID() *string {
	if o == nil {
		return nil
	}
	return o.AzureTenantID
}

func (o *AiAzureContentSafetyPluginConfig) GetAzureUseManagedIdentity() *bool {
	if o == nil {
		return nil
	}
	return o.AzureUseManagedIdentity
}

func (o *AiAzureContentSafetyPluginConfig) GetBlocklistNames() []string {
	if o == nil {
		return nil
	}
	return o.BlocklistNames
}

func (o *AiAzureContentSafetyPluginConfig) GetCategories() []Categories {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *AiAzureContentSafetyPluginConfig) GetContentSafetyKey() *string {
	if o == nil {
		return nil
	}
	return o.ContentSafetyKey
}

func (o *AiAzureContentSafetyPluginConfig) GetContentSafetyURL() string {
	if o == nil {
		return ""
	}
	return o.ContentSafetyURL
}

func (o *AiAzureContentSafetyPluginConfig) GetHaltOnBlocklistHit() *bool {
	if o == nil {
		return nil
	}
	return o.HaltOnBlocklistHit
}

func (o *AiAzureContentSafetyPluginConfig) GetOutputType() *OutputType {
	if o == nil {
		return nil
	}
	return o.OutputType
}

func (o *AiAzureContentSafetyPluginConfig) GetRevealFailureReason() *bool {
	if o == nil {
		return nil
	}
	return o.RevealFailureReason
}

func (o *AiAzureContentSafetyPluginConfig) GetTextSource() *AiAzureContentSafetyPluginTextSource {
	if o == nil {
		return nil
	}
	return o.TextSource
}

type AiAzureContentSafetyPluginProtocols string

const (
	AiAzureContentSafetyPluginProtocolsGrpc  AiAzureContentSafetyPluginProtocols = "grpc"
	AiAzureContentSafetyPluginProtocolsGrpcs AiAzureContentSafetyPluginProtocols = "grpcs"
	AiAzureContentSafetyPluginProtocolsHTTP  AiAzureContentSafetyPluginProtocols = "http"
	AiAzureContentSafetyPluginProtocolsHTTPS AiAzureContentSafetyPluginProtocols = "https"
)

func (e AiAzureContentSafetyPluginProtocols) ToPointer() *AiAzureContentSafetyPluginProtocols {
	return &e
}
func (e *AiAzureContentSafetyPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiAzureContentSafetyPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiAzureContentSafetyPluginProtocols: %v", v)
	}
}

// AiAzureContentSafetyPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiAzureContentSafetyPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiAzureContentSafetyPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiAzureContentSafetyPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiAzureContentSafetyPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiAzureContentSafetyPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiAzureContentSafetyPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiAzureContentSafetyPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                             `default:"null" json:"instance_name"`
	name         string                              `const:"ai-azure-content-safety" json:"name"`
	Ordering     *AiAzureContentSafetyPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiAzureContentSafetyPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                           `json:"updated_at,omitempty"`
	Config    AiAzureContentSafetyPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []AiAzureContentSafetyPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiAzureContentSafetyPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiAzureContentSafetyPluginService `json:"service"`
}

func (a AiAzureContentSafetyPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiAzureContentSafetyPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiAzureContentSafetyPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AiAzureContentSafetyPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AiAzureContentSafetyPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiAzureContentSafetyPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AiAzureContentSafetyPlugin) GetName() string {
	return "ai-azure-content-safety"
}

func (o *AiAzureContentSafetyPlugin) GetOrdering() *AiAzureContentSafetyPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AiAzureContentSafetyPlugin) GetPartials() []AiAzureContentSafetyPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *AiAzureContentSafetyPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AiAzureContentSafetyPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AiAzureContentSafetyPlugin) GetConfig() AiAzureContentSafetyPluginConfig {
	if o == nil {
		return AiAzureContentSafetyPluginConfig{}
	}
	return o.Config
}

func (o *AiAzureContentSafetyPlugin) GetProtocols() []AiAzureContentSafetyPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AiAzureContentSafetyPlugin) GetRoute() *AiAzureContentSafetyPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AiAzureContentSafetyPlugin) GetService() *AiAzureContentSafetyPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
