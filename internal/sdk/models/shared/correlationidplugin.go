// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// Generator - The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See [Generators](#generators).
type Generator string

const (
	GeneratorUUID              Generator = "uuid"
	GeneratorUUIDNumberCounter Generator = "uuid#counter"
	GeneratorTracker           Generator = "tracker"
)

func (e Generator) ToPointer() *Generator {
	return &e
}
func (e *Generator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uuid":
		fallthrough
	case "uuid#counter":
		fallthrough
	case "tracker":
		*e = Generator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Generator: %v", v)
	}
}

type CorrelationIDPluginConfig struct {
	// Whether to echo the header back to downstream (the client).
	EchoDownstream *bool `json:"echo_downstream,omitempty"`
	// The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See [Generators](#generators).
	Generator *Generator `json:"generator,omitempty"`
	// The HTTP header name to use for the correlation ID.
	HeaderName *string `json:"header_name,omitempty"`
}

func (o *CorrelationIDPluginConfig) GetEchoDownstream() *bool {
	if o == nil {
		return nil
	}
	return o.EchoDownstream
}

func (o *CorrelationIDPluginConfig) GetGenerator() *Generator {
	if o == nil {
		return nil
	}
	return o.Generator
}

func (o *CorrelationIDPluginConfig) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

type CorrelationIDPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CorrelationIDPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CorrelationIDPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CorrelationIDPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CorrelationIDPluginOrdering struct {
	After  *CorrelationIDPluginAfter  `json:"after,omitempty"`
	Before *CorrelationIDPluginBefore `json:"before,omitempty"`
}

func (o *CorrelationIDPluginOrdering) GetAfter() *CorrelationIDPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CorrelationIDPluginOrdering) GetBefore() *CorrelationIDPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CorrelationIDPluginProtocols string

const (
	CorrelationIDPluginProtocolsGrpc           CorrelationIDPluginProtocols = "grpc"
	CorrelationIDPluginProtocolsGrpcs          CorrelationIDPluginProtocols = "grpcs"
	CorrelationIDPluginProtocolsHTTP           CorrelationIDPluginProtocols = "http"
	CorrelationIDPluginProtocolsHTTPS          CorrelationIDPluginProtocols = "https"
	CorrelationIDPluginProtocolsTCP            CorrelationIDPluginProtocols = "tcp"
	CorrelationIDPluginProtocolsTLS            CorrelationIDPluginProtocols = "tls"
	CorrelationIDPluginProtocolsTLSPassthrough CorrelationIDPluginProtocols = "tls_passthrough"
	CorrelationIDPluginProtocolsUDP            CorrelationIDPluginProtocols = "udp"
	CorrelationIDPluginProtocolsWs             CorrelationIDPluginProtocols = "ws"
	CorrelationIDPluginProtocolsWss            CorrelationIDPluginProtocols = "wss"
)

func (e CorrelationIDPluginProtocols) ToPointer() *CorrelationIDPluginProtocols {
	return &e
}
func (e *CorrelationIDPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CorrelationIDPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CorrelationIDPluginProtocols: %v", v)
	}
}

// CorrelationIDPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CorrelationIDPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorrelationIDPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CorrelationIDPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorrelationIDPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CorrelationIDPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CorrelationIDPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorrelationIDPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CorrelationIDPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CorrelationIDPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CorrelationIDPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CorrelationIDPlugin struct {
	Config *CorrelationIDPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                        `json:"enabled,omitempty"`
	ID           *string                      `json:"id,omitempty"`
	InstanceName *string                      `json:"instance_name,omitempty"`
	name         *string                      `const:"correlation-id" json:"name,omitempty"`
	Ordering     *CorrelationIDPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CorrelationIDPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CorrelationIDPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CorrelationIDPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CorrelationIDPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CorrelationIDPluginService `json:"service,omitempty"`
}

func (c CorrelationIDPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CorrelationIDPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CorrelationIDPlugin) GetConfig() *CorrelationIDPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CorrelationIDPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CorrelationIDPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CorrelationIDPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CorrelationIDPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CorrelationIDPlugin) GetName() *string {
	return types.String("correlation-id")
}

func (o *CorrelationIDPlugin) GetOrdering() *CorrelationIDPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CorrelationIDPlugin) GetProtocols() []CorrelationIDPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CorrelationIDPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CorrelationIDPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CorrelationIDPlugin) GetConsumer() *CorrelationIDPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CorrelationIDPlugin) GetConsumerGroup() *CorrelationIDPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CorrelationIDPlugin) GetRoute() *CorrelationIDPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CorrelationIDPlugin) GetService() *CorrelationIDPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
