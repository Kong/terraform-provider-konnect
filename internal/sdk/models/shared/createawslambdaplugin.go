// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateAwsLambdaPluginAwsImdsProtocolVersion - Identifier to select the IMDS protocol version to use: `v1` or `v2`.
type CreateAwsLambdaPluginAwsImdsProtocolVersion string

const (
	CreateAwsLambdaPluginAwsImdsProtocolVersionV1 CreateAwsLambdaPluginAwsImdsProtocolVersion = "v1"
	CreateAwsLambdaPluginAwsImdsProtocolVersionV2 CreateAwsLambdaPluginAwsImdsProtocolVersion = "v2"
)

func (e CreateAwsLambdaPluginAwsImdsProtocolVersion) ToPointer() *CreateAwsLambdaPluginAwsImdsProtocolVersion {
	return &e
}
func (e *CreateAwsLambdaPluginAwsImdsProtocolVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		fallthrough
	case "v2":
		*e = CreateAwsLambdaPluginAwsImdsProtocolVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAwsLambdaPluginAwsImdsProtocolVersion: %v", v)
	}
}

// CreateAwsLambdaPluginEmptyArraysMode - An optional value that defines whether Kong should send empty arrays (returned by Lambda function) as `[]` arrays or `{}` objects in JSON responses. The value `legacy` means Kong will send empty arrays as `{}` objects in response
type CreateAwsLambdaPluginEmptyArraysMode string

const (
	CreateAwsLambdaPluginEmptyArraysModeLegacy  CreateAwsLambdaPluginEmptyArraysMode = "legacy"
	CreateAwsLambdaPluginEmptyArraysModeCorrect CreateAwsLambdaPluginEmptyArraysMode = "correct"
)

func (e CreateAwsLambdaPluginEmptyArraysMode) ToPointer() *CreateAwsLambdaPluginEmptyArraysMode {
	return &e
}
func (e *CreateAwsLambdaPluginEmptyArraysMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "correct":
		*e = CreateAwsLambdaPluginEmptyArraysMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAwsLambdaPluginEmptyArraysMode: %v", v)
	}
}

// CreateAwsLambdaPluginInvocationType - The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun.
type CreateAwsLambdaPluginInvocationType string

const (
	CreateAwsLambdaPluginInvocationTypeRequestResponse CreateAwsLambdaPluginInvocationType = "RequestResponse"
	CreateAwsLambdaPluginInvocationTypeEvent           CreateAwsLambdaPluginInvocationType = "Event"
	CreateAwsLambdaPluginInvocationTypeDryRun          CreateAwsLambdaPluginInvocationType = "DryRun"
)

func (e CreateAwsLambdaPluginInvocationType) ToPointer() *CreateAwsLambdaPluginInvocationType {
	return &e
}
func (e *CreateAwsLambdaPluginInvocationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RequestResponse":
		fallthrough
	case "Event":
		fallthrough
	case "DryRun":
		*e = CreateAwsLambdaPluginInvocationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAwsLambdaPluginInvocationType: %v", v)
	}
}

// CreateAwsLambdaPluginLogType - The LogType to use when invoking the function. By default, None and Tail are supported.
type CreateAwsLambdaPluginLogType string

const (
	CreateAwsLambdaPluginLogTypeTail CreateAwsLambdaPluginLogType = "Tail"
	CreateAwsLambdaPluginLogTypeNone CreateAwsLambdaPluginLogType = "None"
)

func (e CreateAwsLambdaPluginLogType) ToPointer() *CreateAwsLambdaPluginLogType {
	return &e
}
func (e *CreateAwsLambdaPluginLogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Tail":
		fallthrough
	case "None":
		*e = CreateAwsLambdaPluginLogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAwsLambdaPluginLogType: %v", v)
	}
}

type CreateAwsLambdaPluginConfig struct {
	// The target AWS IAM role ARN used to invoke the Lambda function.
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// Identifier to select the IMDS protocol version to use: `v1` or `v2`.
	AwsImdsProtocolVersion *CreateAwsLambdaPluginAwsImdsProtocolVersion `json:"aws_imds_protocol_version,omitempty"`
	// The AWS key credential to be used when invoking the function.
	AwsKey *string `json:"aws_key,omitempty"`
	// A string representing a host name, such as example.com.
	AwsRegion *string `json:"aws_region,omitempty"`
	// The identifier of the assumed role session.
	AwsRoleSessionName *string `json:"aws_role_session_name,omitempty"`
	// The AWS secret credential to be used when invoking the function.
	AwsSecret *string `json:"aws_secret,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	AwsStsEndpointURL *string `json:"aws_sts_endpoint_url,omitempty"`
	// An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.
	AwsgatewayCompatible *bool `json:"awsgateway_compatible,omitempty"`
	// An optional value that Base64-encodes the request body.
	Base64EncodeBody *bool `json:"base64_encode_body,omitempty"`
	DisableHTTPS     *bool `json:"disable_https,omitempty"`
	// An optional value that defines whether Kong should send empty arrays (returned by Lambda function) as `[]` arrays or `{}` objects in JSON responses. The value `legacy` means Kong will send empty arrays as `{}` objects in response
	EmptyArraysMode *CreateAwsLambdaPluginEmptyArraysMode `json:"empty_arrays_mode,omitempty"`
	// An optional value that defines whether the request body is sent in the request_body field of the JSON-encoded request. If the body arguments can be parsed, they are sent in the separate request_body_args field of the request.
	ForwardRequestBody *bool `json:"forward_request_body,omitempty"`
	// An optional value that defines whether the original HTTP request headers are sent as a map in the request_headers field of the JSON-encoded request.
	ForwardRequestHeaders *bool `json:"forward_request_headers,omitempty"`
	// An optional value that defines whether the original HTTP request method verb is sent in the request_method field of the JSON-encoded request.
	ForwardRequestMethod *bool `json:"forward_request_method,omitempty"`
	// An optional value that defines whether the original HTTP request URI is sent in the request_uri field of the JSON-encoded request.
	ForwardRequestURI *bool `json:"forward_request_uri,omitempty"`
	// The AWS Lambda function to invoke. Both function name and function ARN (including partial) are supported.
	FunctionName *string `json:"function_name,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun.
	InvocationType *CreateAwsLambdaPluginInvocationType `json:"invocation_type,omitempty"`
	// An optional value that defines whether the response format to receive from the Lambda to this format.
	IsProxyIntegration *bool `json:"is_proxy_integration,omitempty"`
	// An optional value in milliseconds that defines how long an idle connection lives before being closed.
	Keepalive *float64 `json:"keepalive,omitempty"`
	// The LogType to use when invoking the function. By default, None and Tail are supported.
	LogType *CreateAwsLambdaPluginLogType `json:"log_type,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	ProxyURL *string `json:"proxy_url,omitempty"`
	// The qualifier to use when invoking the function.
	Qualifier *string `json:"qualifier,omitempty"`
	// An optional value that defines whether Kong should send large bodies that are buffered to disk
	SkipLargeBodies *bool `json:"skip_large_bodies,omitempty"`
	// An optional timeout in milliseconds when invoking the function.
	Timeout *float64 `json:"timeout,omitempty"`
	// The response status code to use (instead of the default 200, 202, or 204) in the case of an Unhandled Function Error.
	UnhandledStatus *int64 `json:"unhandled_status,omitempty"`
}

func (o *CreateAwsLambdaPluginConfig) GetAwsAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AwsAssumeRoleArn
}

func (o *CreateAwsLambdaPluginConfig) GetAwsImdsProtocolVersion() *CreateAwsLambdaPluginAwsImdsProtocolVersion {
	if o == nil {
		return nil
	}
	return o.AwsImdsProtocolVersion
}

func (o *CreateAwsLambdaPluginConfig) GetAwsKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsKey
}

func (o *CreateAwsLambdaPluginConfig) GetAwsRegion() *string {
	if o == nil {
		return nil
	}
	return o.AwsRegion
}

func (o *CreateAwsLambdaPluginConfig) GetAwsRoleSessionName() *string {
	if o == nil {
		return nil
	}
	return o.AwsRoleSessionName
}

func (o *CreateAwsLambdaPluginConfig) GetAwsSecret() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecret
}

func (o *CreateAwsLambdaPluginConfig) GetAwsStsEndpointURL() *string {
	if o == nil {
		return nil
	}
	return o.AwsStsEndpointURL
}

func (o *CreateAwsLambdaPluginConfig) GetAwsgatewayCompatible() *bool {
	if o == nil {
		return nil
	}
	return o.AwsgatewayCompatible
}

func (o *CreateAwsLambdaPluginConfig) GetBase64EncodeBody() *bool {
	if o == nil {
		return nil
	}
	return o.Base64EncodeBody
}

func (o *CreateAwsLambdaPluginConfig) GetDisableHTTPS() *bool {
	if o == nil {
		return nil
	}
	return o.DisableHTTPS
}

func (o *CreateAwsLambdaPluginConfig) GetEmptyArraysMode() *CreateAwsLambdaPluginEmptyArraysMode {
	if o == nil {
		return nil
	}
	return o.EmptyArraysMode
}

func (o *CreateAwsLambdaPluginConfig) GetForwardRequestBody() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestBody
}

func (o *CreateAwsLambdaPluginConfig) GetForwardRequestHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestHeaders
}

func (o *CreateAwsLambdaPluginConfig) GetForwardRequestMethod() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestMethod
}

func (o *CreateAwsLambdaPluginConfig) GetForwardRequestURI() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestURI
}

func (o *CreateAwsLambdaPluginConfig) GetFunctionName() *string {
	if o == nil {
		return nil
	}
	return o.FunctionName
}

func (o *CreateAwsLambdaPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateAwsLambdaPluginConfig) GetInvocationType() *CreateAwsLambdaPluginInvocationType {
	if o == nil {
		return nil
	}
	return o.InvocationType
}

func (o *CreateAwsLambdaPluginConfig) GetIsProxyIntegration() *bool {
	if o == nil {
		return nil
	}
	return o.IsProxyIntegration
}

func (o *CreateAwsLambdaPluginConfig) GetKeepalive() *float64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *CreateAwsLambdaPluginConfig) GetLogType() *CreateAwsLambdaPluginLogType {
	if o == nil {
		return nil
	}
	return o.LogType
}

func (o *CreateAwsLambdaPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateAwsLambdaPluginConfig) GetProxyURL() *string {
	if o == nil {
		return nil
	}
	return o.ProxyURL
}

func (o *CreateAwsLambdaPluginConfig) GetQualifier() *string {
	if o == nil {
		return nil
	}
	return o.Qualifier
}

func (o *CreateAwsLambdaPluginConfig) GetSkipLargeBodies() *bool {
	if o == nil {
		return nil
	}
	return o.SkipLargeBodies
}

func (o *CreateAwsLambdaPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *CreateAwsLambdaPluginConfig) GetUnhandledStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.UnhandledStatus
}

type CreateAwsLambdaPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAwsLambdaPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAwsLambdaPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAwsLambdaPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAwsLambdaPluginOrdering struct {
	After  *CreateAwsLambdaPluginAfter  `json:"after,omitempty"`
	Before *CreateAwsLambdaPluginBefore `json:"before,omitempty"`
}

func (o *CreateAwsLambdaPluginOrdering) GetAfter() *CreateAwsLambdaPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateAwsLambdaPluginOrdering) GetBefore() *CreateAwsLambdaPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateAwsLambdaPluginProtocols string

const (
	CreateAwsLambdaPluginProtocolsGrpc           CreateAwsLambdaPluginProtocols = "grpc"
	CreateAwsLambdaPluginProtocolsGrpcs          CreateAwsLambdaPluginProtocols = "grpcs"
	CreateAwsLambdaPluginProtocolsHTTP           CreateAwsLambdaPluginProtocols = "http"
	CreateAwsLambdaPluginProtocolsHTTPS          CreateAwsLambdaPluginProtocols = "https"
	CreateAwsLambdaPluginProtocolsTCP            CreateAwsLambdaPluginProtocols = "tcp"
	CreateAwsLambdaPluginProtocolsTLS            CreateAwsLambdaPluginProtocols = "tls"
	CreateAwsLambdaPluginProtocolsTLSPassthrough CreateAwsLambdaPluginProtocols = "tls_passthrough"
	CreateAwsLambdaPluginProtocolsUDP            CreateAwsLambdaPluginProtocols = "udp"
	CreateAwsLambdaPluginProtocolsWs             CreateAwsLambdaPluginProtocols = "ws"
	CreateAwsLambdaPluginProtocolsWss            CreateAwsLambdaPluginProtocols = "wss"
)

func (e CreateAwsLambdaPluginProtocols) ToPointer() *CreateAwsLambdaPluginProtocols {
	return &e
}
func (e *CreateAwsLambdaPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateAwsLambdaPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAwsLambdaPluginProtocols: %v", v)
	}
}

// CreateAwsLambdaPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateAwsLambdaPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAwsLambdaPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAwsLambdaPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAwsLambdaPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAwsLambdaPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateAwsLambdaPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAwsLambdaPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAwsLambdaPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateAwsLambdaPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAwsLambdaPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAwsLambdaPlugin struct {
	Config *CreateAwsLambdaPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                          `json:"enabled,omitempty"`
	InstanceName *string                        `json:"instance_name,omitempty"`
	name         *string                        `const:"aws-lambda" json:"name,omitempty"`
	Ordering     *CreateAwsLambdaPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateAwsLambdaPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateAwsLambdaPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateAwsLambdaPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateAwsLambdaPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateAwsLambdaPluginService `json:"service,omitempty"`
}

func (c CreateAwsLambdaPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAwsLambdaPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAwsLambdaPlugin) GetConfig() *CreateAwsLambdaPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateAwsLambdaPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateAwsLambdaPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateAwsLambdaPlugin) GetName() *string {
	return types.String("aws-lambda")
}

func (o *CreateAwsLambdaPlugin) GetOrdering() *CreateAwsLambdaPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateAwsLambdaPlugin) GetProtocols() []CreateAwsLambdaPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateAwsLambdaPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateAwsLambdaPlugin) GetConsumer() *CreateAwsLambdaPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateAwsLambdaPlugin) GetConsumerGroup() *CreateAwsLambdaPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateAwsLambdaPlugin) GetRoute() *CreateAwsLambdaPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateAwsLambdaPlugin) GetService() *CreateAwsLambdaPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
