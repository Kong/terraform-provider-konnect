// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type SessionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *SessionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type SessionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *SessionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type SessionPluginOrdering struct {
	After  *SessionPluginAfter  `json:"after,omitempty"`
	Before *SessionPluginBefore `json:"before,omitempty"`
}

func (o *SessionPluginOrdering) GetAfter() *SessionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *SessionPluginOrdering) GetBefore() *SessionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type SessionPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *SessionPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SessionPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SessionPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// CookieSameSite - Determines whether and how a cookie may be sent with cross-site requests.
type CookieSameSite string

const (
	CookieSameSiteDefault CookieSameSite = "Default"
	CookieSameSiteLax     CookieSameSite = "Lax"
	CookieSameSiteNone    CookieSameSite = "None"
	CookieSameSiteStrict  CookieSameSite = "Strict"
)

func (e CookieSameSite) ToPointer() *CookieSameSite {
	return &e
}
func (e *CookieSameSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Default":
		fallthrough
	case "Lax":
		fallthrough
	case "None":
		fallthrough
	case "Strict":
		*e = CookieSameSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CookieSameSite: %v", v)
	}
}

type SessionPluginLogoutMethods string

const (
	SessionPluginLogoutMethodsDelete SessionPluginLogoutMethods = "DELETE"
	SessionPluginLogoutMethodsGet    SessionPluginLogoutMethods = "GET"
	SessionPluginLogoutMethodsPost   SessionPluginLogoutMethods = "POST"
)

func (e SessionPluginLogoutMethods) ToPointer() *SessionPluginLogoutMethods {
	return &e
}
func (e *SessionPluginLogoutMethods) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DELETE":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		*e = SessionPluginLogoutMethods(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SessionPluginLogoutMethods: %v", v)
	}
}

type RequestHeaders string

const (
	RequestHeadersAbsoluteTimeout RequestHeaders = "absolute-timeout"
	RequestHeadersAudience        RequestHeaders = "audience"
	RequestHeadersID              RequestHeaders = "id"
	RequestHeadersIdlingTimeout   RequestHeaders = "idling-timeout"
	RequestHeadersRollingTimeout  RequestHeaders = "rolling-timeout"
	RequestHeadersSubject         RequestHeaders = "subject"
	RequestHeadersTimeout         RequestHeaders = "timeout"
)

func (e RequestHeaders) ToPointer() *RequestHeaders {
	return &e
}
func (e *RequestHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "absolute-timeout":
		fallthrough
	case "audience":
		fallthrough
	case "id":
		fallthrough
	case "idling-timeout":
		fallthrough
	case "rolling-timeout":
		fallthrough
	case "subject":
		fallthrough
	case "timeout":
		*e = RequestHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestHeaders: %v", v)
	}
}

type SessionPluginResponseHeaders string

const (
	SessionPluginResponseHeadersAbsoluteTimeout SessionPluginResponseHeaders = "absolute-timeout"
	SessionPluginResponseHeadersAudience        SessionPluginResponseHeaders = "audience"
	SessionPluginResponseHeadersID              SessionPluginResponseHeaders = "id"
	SessionPluginResponseHeadersIdlingTimeout   SessionPluginResponseHeaders = "idling-timeout"
	SessionPluginResponseHeadersRollingTimeout  SessionPluginResponseHeaders = "rolling-timeout"
	SessionPluginResponseHeadersSubject         SessionPluginResponseHeaders = "subject"
	SessionPluginResponseHeadersTimeout         SessionPluginResponseHeaders = "timeout"
)

func (e SessionPluginResponseHeaders) ToPointer() *SessionPluginResponseHeaders {
	return &e
}
func (e *SessionPluginResponseHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "absolute-timeout":
		fallthrough
	case "audience":
		fallthrough
	case "id":
		fallthrough
	case "idling-timeout":
		fallthrough
	case "rolling-timeout":
		fallthrough
	case "subject":
		fallthrough
	case "timeout":
		*e = SessionPluginResponseHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SessionPluginResponseHeaders: %v", v)
	}
}

// SessionPluginStorage - Determines where the session data is stored. `kong`: Stores encrypted session data into Kong's current database strategy; the cookie will not contain any session data. `cookie`: Stores encrypted session data within the cookie itself.
type SessionPluginStorage string

const (
	SessionPluginStorageCookie SessionPluginStorage = "cookie"
	SessionPluginStorageKong   SessionPluginStorage = "kong"
)

func (e SessionPluginStorage) ToPointer() *SessionPluginStorage {
	return &e
}
func (e *SessionPluginStorage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cookie":
		fallthrough
	case "kong":
		*e = SessionPluginStorage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SessionPluginStorage: %v", v)
	}
}

type SessionPluginConfig struct {
	// The session cookie absolute timeout, in seconds. Specifies how long the session can be used until it is no longer valid.
	AbsoluteTimeout *float64 `json:"absolute_timeout,omitempty"`
	// The session audience, which is the intended target application. For example `"my-application"`.
	Audience *string `json:"audience,omitempty"`
	// The domain with which the cookie is intended to be exchanged.
	CookieDomain *string `json:"cookie_domain,omitempty"`
	// Applies the `HttpOnly` tag so that the cookie is sent only to a server.
	CookieHTTPOnly *bool `json:"cookie_http_only,omitempty"`
	// The name of the cookie.
	CookieName *string `json:"cookie_name,omitempty"`
	// The resource in the host where the cookie is available.
	CookiePath *string `json:"cookie_path,omitempty"`
	// Determines whether and how a cookie may be sent with cross-site requests.
	CookieSameSite *CookieSameSite `json:"cookie_same_site,omitempty"`
	// Applies the Secure directive so that the cookie may be sent to the server only with an encrypted request over the HTTPS protocol.
	CookieSecure *bool `json:"cookie_secure,omitempty"`
	// Whether to hash or not the subject when store_metadata is enabled.
	HashSubject *bool `json:"hash_subject,omitempty"`
	// The session cookie idle time, in seconds.
	IdlingTimeout *float64 `json:"idling_timeout,omitempty"`
	// A set of HTTP methods that the plugin will respond to.
	LogoutMethods []SessionPluginLogoutMethods `json:"logout_methods,omitempty"`
	// The POST argument passed to logout requests. Do not change this property.
	LogoutPostArg *string `json:"logout_post_arg,omitempty"`
	// The query argument passed to logout requests.
	LogoutQueryArg    *string `json:"logout_query_arg,omitempty"`
	ReadBodyForLogout *bool   `json:"read_body_for_logout,omitempty"`
	// Enables or disables persistent sessions.
	Remember *bool `json:"remember,omitempty"`
	// The persistent session absolute timeout limit, in seconds.
	RememberAbsoluteTimeout *float64 `json:"remember_absolute_timeout,omitempty"`
	// Persistent session cookie name. Use with the `remember` configuration parameter.
	RememberCookieName *string `json:"remember_cookie_name,omitempty"`
	// The persistent session rolling timeout window, in seconds.
	RememberRollingTimeout *float64 `json:"remember_rolling_timeout,omitempty"`
	// List of information to include, as headers, in the response to the downstream.
	RequestHeaders []RequestHeaders `json:"request_headers,omitempty"`
	// List of information to include, as headers, in the response to the downstream.
	ResponseHeaders []SessionPluginResponseHeaders `json:"response_headers,omitempty"`
	// The session cookie rolling timeout, in seconds. Specifies how long the session can be used until it needs to be renewed.
	RollingTimeout *float64 `json:"rolling_timeout,omitempty"`
	// The secret that is used in keyed HMAC generation.
	Secret *string `json:"secret,omitempty"`
	// The duration, in seconds, after which an old cookie is discarded, starting from the moment when the session becomes outdated and is replaced by a new one.
	StaleTTL *float64 `json:"stale_ttl,omitempty"`
	// Determines where the session data is stored. `kong`: Stores encrypted session data into Kong's current database strategy; the cookie will not contain any session data. `cookie`: Stores encrypted session data within the cookie itself.
	Storage *SessionPluginStorage `json:"storage,omitempty"`
	// Whether to also store metadata of sessions, such as collecting data of sessions for a specific audience belonging to a specific subject.
	StoreMetadata *bool `json:"store_metadata,omitempty"`
}

func (o *SessionPluginConfig) GetAbsoluteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.AbsoluteTimeout
}

func (o *SessionPluginConfig) GetAudience() *string {
	if o == nil {
		return nil
	}
	return o.Audience
}

func (o *SessionPluginConfig) GetCookieDomain() *string {
	if o == nil {
		return nil
	}
	return o.CookieDomain
}

func (o *SessionPluginConfig) GetCookieHTTPOnly() *bool {
	if o == nil {
		return nil
	}
	return o.CookieHTTPOnly
}

func (o *SessionPluginConfig) GetCookieName() *string {
	if o == nil {
		return nil
	}
	return o.CookieName
}

func (o *SessionPluginConfig) GetCookiePath() *string {
	if o == nil {
		return nil
	}
	return o.CookiePath
}

func (o *SessionPluginConfig) GetCookieSameSite() *CookieSameSite {
	if o == nil {
		return nil
	}
	return o.CookieSameSite
}

func (o *SessionPluginConfig) GetCookieSecure() *bool {
	if o == nil {
		return nil
	}
	return o.CookieSecure
}

func (o *SessionPluginConfig) GetHashSubject() *bool {
	if o == nil {
		return nil
	}
	return o.HashSubject
}

func (o *SessionPluginConfig) GetIdlingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.IdlingTimeout
}

func (o *SessionPluginConfig) GetLogoutMethods() []SessionPluginLogoutMethods {
	if o == nil {
		return nil
	}
	return o.LogoutMethods
}

func (o *SessionPluginConfig) GetLogoutPostArg() *string {
	if o == nil {
		return nil
	}
	return o.LogoutPostArg
}

func (o *SessionPluginConfig) GetLogoutQueryArg() *string {
	if o == nil {
		return nil
	}
	return o.LogoutQueryArg
}

func (o *SessionPluginConfig) GetReadBodyForLogout() *bool {
	if o == nil {
		return nil
	}
	return o.ReadBodyForLogout
}

func (o *SessionPluginConfig) GetRemember() *bool {
	if o == nil {
		return nil
	}
	return o.Remember
}

func (o *SessionPluginConfig) GetRememberAbsoluteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RememberAbsoluteTimeout
}

func (o *SessionPluginConfig) GetRememberCookieName() *string {
	if o == nil {
		return nil
	}
	return o.RememberCookieName
}

func (o *SessionPluginConfig) GetRememberRollingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RememberRollingTimeout
}

func (o *SessionPluginConfig) GetRequestHeaders() []RequestHeaders {
	if o == nil {
		return nil
	}
	return o.RequestHeaders
}

func (o *SessionPluginConfig) GetResponseHeaders() []SessionPluginResponseHeaders {
	if o == nil {
		return nil
	}
	return o.ResponseHeaders
}

func (o *SessionPluginConfig) GetRollingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RollingTimeout
}

func (o *SessionPluginConfig) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *SessionPluginConfig) GetStaleTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.StaleTTL
}

func (o *SessionPluginConfig) GetStorage() *SessionPluginStorage {
	if o == nil {
		return nil
	}
	return o.Storage
}

func (o *SessionPluginConfig) GetStoreMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.StoreMetadata
}

// SessionPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type SessionPluginProtocols string

const (
	SessionPluginProtocolsGrpc           SessionPluginProtocols = "grpc"
	SessionPluginProtocolsGrpcs          SessionPluginProtocols = "grpcs"
	SessionPluginProtocolsHTTP           SessionPluginProtocols = "http"
	SessionPluginProtocolsHTTPS          SessionPluginProtocols = "https"
	SessionPluginProtocolsTCP            SessionPluginProtocols = "tcp"
	SessionPluginProtocolsTLS            SessionPluginProtocols = "tls"
	SessionPluginProtocolsTLSPassthrough SessionPluginProtocols = "tls_passthrough"
	SessionPluginProtocolsUDP            SessionPluginProtocols = "udp"
	SessionPluginProtocolsWs             SessionPluginProtocols = "ws"
	SessionPluginProtocolsWss            SessionPluginProtocols = "wss"
)

func (e SessionPluginProtocols) ToPointer() *SessionPluginProtocols {
	return &e
}
func (e *SessionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = SessionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SessionPluginProtocols: %v", v)
	}
}

// SessionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type SessionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *SessionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// SessionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SessionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *SessionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// SessionPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SessionPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// User-defined entity description. Konnect only field, not synced to the Gateway.
	Description *string `json:"description,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `json:"enabled,omitempty"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                `json:"instance_name,omitempty"`
	name         string                 `const:"session" json:"name"`
	Ordering     *SessionPluginOrdering `json:"ordering,omitempty"`
	// A list of partials to be used by the plugin.
	Partials []SessionPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64               `json:"updated_at,omitempty"`
	Config    *SessionPluginConfig `json:"config,omitempty"`
	// A set of strings representing protocols.
	Protocols []SessionPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *SessionPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SessionPluginService `json:"service"`
}

func (s SessionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SessionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SessionPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SessionPlugin) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SessionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SessionPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SessionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *SessionPlugin) GetName() string {
	return "session"
}

func (o *SessionPlugin) GetOrdering() *SessionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *SessionPlugin) GetPartials() []SessionPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *SessionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SessionPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *SessionPlugin) GetConfig() *SessionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *SessionPlugin) GetProtocols() []SessionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *SessionPlugin) GetRoute() *SessionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *SessionPlugin) GetService() *SessionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
