// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type RateLimitingPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (r *RateLimitingPluginAfter) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RateLimitingPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (r *RateLimitingPluginBefore) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RateLimitingPluginOrdering struct {
	After  *RateLimitingPluginAfter  `json:"after,omitempty"`
	Before *RateLimitingPluginBefore `json:"before,omitempty"`
}

func (r *RateLimitingPluginOrdering) GetAfter() *RateLimitingPluginAfter {
	if r == nil {
		return nil
	}
	return r.After
}

func (r *RateLimitingPluginOrdering) GetBefore() *RateLimitingPluginBefore {
	if r == nil {
		return nil
	}
	return r.Before
}

type RateLimitingPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (r *RateLimitingPluginPartials) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RateLimitingPluginPartials) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RateLimitingPluginPartials) GetPath() *string {
	if r == nil {
		return nil
	}
	return r.Path
}

// LimitBy - The entity that is used when aggregating the limits.
type LimitBy string

const (
	LimitByConsumer      LimitBy = "consumer"
	LimitByConsumerGroup LimitBy = "consumer-group"
	LimitByCredential    LimitBy = "credential"
	LimitByHeader        LimitBy = "header"
	LimitByIP            LimitBy = "ip"
	LimitByPath          LimitBy = "path"
	LimitByService       LimitBy = "service"
)

func (e LimitBy) ToPointer() *LimitBy {
	return &e
}
func (e *LimitBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "consumer-group":
		fallthrough
	case "credential":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "path":
		fallthrough
	case "service":
		*e = LimitBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LimitBy: %v", v)
	}
}

// Policy - The rate-limiting policies to use for retrieving and incrementing the limits.
type Policy string

const (
	PolicyCluster Policy = "cluster"
	PolicyLocal   Policy = "local"
	PolicyRedis   Policy = "redis"
)

func (e Policy) ToPointer() *Policy {
	return &e
}
func (e *Policy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cluster":
		fallthrough
	case "local":
		fallthrough
	case "redis":
		*e = Policy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Policy: %v", v)
	}
}

// RateLimitingPluginRedis - Redis configuration
type RateLimitingPluginRedis struct {
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"null" json:"host"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	Timeout *int64 `default:"2000" json:"timeout"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (r RateLimitingPluginRedis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingPluginRedis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RateLimitingPluginRedis) GetDatabase() *int64 {
	if r == nil {
		return nil
	}
	return r.Database
}

func (r *RateLimitingPluginRedis) GetHost() *string {
	if r == nil {
		return nil
	}
	return r.Host
}

func (r *RateLimitingPluginRedis) GetPassword() *string {
	if r == nil {
		return nil
	}
	return r.Password
}

func (r *RateLimitingPluginRedis) GetPort() *int64 {
	if r == nil {
		return nil
	}
	return r.Port
}

func (r *RateLimitingPluginRedis) GetServerName() *string {
	if r == nil {
		return nil
	}
	return r.ServerName
}

func (r *RateLimitingPluginRedis) GetSsl() *bool {
	if r == nil {
		return nil
	}
	return r.Ssl
}

func (r *RateLimitingPluginRedis) GetSslVerify() *bool {
	if r == nil {
		return nil
	}
	return r.SslVerify
}

func (r *RateLimitingPluginRedis) GetTimeout() *int64 {
	if r == nil {
		return nil
	}
	return r.Timeout
}

func (r *RateLimitingPluginRedis) GetUsername() *string {
	if r == nil {
		return nil
	}
	return r.Username
}

type RateLimitingPluginConfig struct {
	// The number of HTTP requests that can be made per day.
	Day *float64 `default:"null" json:"day"`
	// Set a custom error code to return when the rate limit is exceeded.
	ErrorCode *float64 `default:"429" json:"error_code"`
	// Set a custom error message to return when the rate limit is exceeded.
	ErrorMessage *string `default:"API rate limit exceeded" json:"error_message"`
	// A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
	FaultTolerant *bool `default:"true" json:"fault_tolerant"`
	// A string representing an HTTP header name.
	HeaderName *string `default:"null" json:"header_name"`
	// Optionally hide informative response headers.
	HideClientHeaders *bool `default:"false" json:"hide_client_headers"`
	// The number of HTTP requests that can be made per hour.
	Hour *float64 `default:"null" json:"hour"`
	// The entity that is used when aggregating the limits.
	LimitBy *LimitBy `default:"consumer" json:"limit_by"`
	// The number of HTTP requests that can be made per minute.
	Minute *float64 `default:"null" json:"minute"`
	// The number of HTTP requests that can be made per month.
	Month *float64 `default:"null" json:"month"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	Path *string `default:"null" json:"path"`
	// The rate-limiting policies to use for retrieving and incrementing the limits.
	Policy *Policy `default:"local" json:"policy"`
	// Redis configuration
	Redis *RateLimitingPluginRedis `json:"redis,omitempty"`
	// The number of HTTP requests that can be made per second.
	Second *float64 `default:"null" json:"second"`
	// How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
	SyncRate *float64 `default:"-1" json:"sync_rate"`
	// The number of HTTP requests that can be made per year.
	Year *float64 `default:"null" json:"year"`
}

func (r RateLimitingPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RateLimitingPluginConfig) GetDay() *float64 {
	if r == nil {
		return nil
	}
	return r.Day
}

func (r *RateLimitingPluginConfig) GetErrorCode() *float64 {
	if r == nil {
		return nil
	}
	return r.ErrorCode
}

func (r *RateLimitingPluginConfig) GetErrorMessage() *string {
	if r == nil {
		return nil
	}
	return r.ErrorMessage
}

func (r *RateLimitingPluginConfig) GetFaultTolerant() *bool {
	if r == nil {
		return nil
	}
	return r.FaultTolerant
}

func (r *RateLimitingPluginConfig) GetHeaderName() *string {
	if r == nil {
		return nil
	}
	return r.HeaderName
}

func (r *RateLimitingPluginConfig) GetHideClientHeaders() *bool {
	if r == nil {
		return nil
	}
	return r.HideClientHeaders
}

func (r *RateLimitingPluginConfig) GetHour() *float64 {
	if r == nil {
		return nil
	}
	return r.Hour
}

func (r *RateLimitingPluginConfig) GetLimitBy() *LimitBy {
	if r == nil {
		return nil
	}
	return r.LimitBy
}

func (r *RateLimitingPluginConfig) GetMinute() *float64 {
	if r == nil {
		return nil
	}
	return r.Minute
}

func (r *RateLimitingPluginConfig) GetMonth() *float64 {
	if r == nil {
		return nil
	}
	return r.Month
}

func (r *RateLimitingPluginConfig) GetPath() *string {
	if r == nil {
		return nil
	}
	return r.Path
}

func (r *RateLimitingPluginConfig) GetPolicy() *Policy {
	if r == nil {
		return nil
	}
	return r.Policy
}

func (r *RateLimitingPluginConfig) GetRedis() *RateLimitingPluginRedis {
	if r == nil {
		return nil
	}
	return r.Redis
}

func (r *RateLimitingPluginConfig) GetSecond() *float64 {
	if r == nil {
		return nil
	}
	return r.Second
}

func (r *RateLimitingPluginConfig) GetSyncRate() *float64 {
	if r == nil {
		return nil
	}
	return r.SyncRate
}

func (r *RateLimitingPluginConfig) GetYear() *float64 {
	if r == nil {
		return nil
	}
	return r.Year
}

// RateLimitingPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RateLimitingPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (r *RateLimitingPluginConsumer) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RateLimitingPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type RateLimitingPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (r *RateLimitingPluginConsumerGroup) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

type RateLimitingPluginProtocols string

const (
	RateLimitingPluginProtocolsGrpc  RateLimitingPluginProtocols = "grpc"
	RateLimitingPluginProtocolsGrpcs RateLimitingPluginProtocols = "grpcs"
	RateLimitingPluginProtocolsHTTP  RateLimitingPluginProtocols = "http"
	RateLimitingPluginProtocolsHTTPS RateLimitingPluginProtocols = "https"
)

func (e RateLimitingPluginProtocols) ToPointer() *RateLimitingPluginProtocols {
	return &e
}
func (e *RateLimitingPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = RateLimitingPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingPluginProtocols: %v", v)
	}
}

// RateLimitingPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type RateLimitingPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (r *RateLimitingPluginRoute) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RateLimitingPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RateLimitingPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (r *RateLimitingPluginService) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RateLimitingPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type RateLimitingPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                     `default:"null" json:"instance_name"`
	name         string                      `const:"rate-limiting" json:"name"`
	Ordering     *RateLimitingPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []RateLimitingPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                    `json:"updated_at,omitempty"`
	Config    *RateLimitingPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *RateLimitingPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *RateLimitingPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []RateLimitingPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *RateLimitingPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RateLimitingPluginService `json:"service"`
}

func (r RateLimitingPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (r *RateLimitingPlugin) GetCreatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RateLimitingPlugin) GetEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.Enabled
}

func (r *RateLimitingPlugin) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RateLimitingPlugin) GetInstanceName() *string {
	if r == nil {
		return nil
	}
	return r.InstanceName
}

func (r *RateLimitingPlugin) GetName() string {
	return "rate-limiting"
}

func (r *RateLimitingPlugin) GetOrdering() *RateLimitingPluginOrdering {
	if r == nil {
		return nil
	}
	return r.Ordering
}

func (r *RateLimitingPlugin) GetPartials() []RateLimitingPluginPartials {
	if r == nil {
		return nil
	}
	return r.Partials
}

func (r *RateLimitingPlugin) GetTags() []string {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *RateLimitingPlugin) GetUpdatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}

func (r *RateLimitingPlugin) GetConfig() *RateLimitingPluginConfig {
	if r == nil {
		return nil
	}
	return r.Config
}

func (r *RateLimitingPlugin) GetConsumer() *RateLimitingPluginConsumer {
	if r == nil {
		return nil
	}
	return r.Consumer
}

func (r *RateLimitingPlugin) GetConsumerGroup() *RateLimitingPluginConsumerGroup {
	if r == nil {
		return nil
	}
	return r.ConsumerGroup
}

func (r *RateLimitingPlugin) GetProtocols() []RateLimitingPluginProtocols {
	if r == nil {
		return nil
	}
	return r.Protocols
}

func (r *RateLimitingPlugin) GetRoute() *RateLimitingPluginRoute {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *RateLimitingPlugin) GetService() *RateLimitingPluginService {
	if r == nil {
		return nil
	}
	return r.Service
}
