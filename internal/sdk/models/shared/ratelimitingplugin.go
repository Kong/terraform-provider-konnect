// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

type RateLimitingPluginProtocols string

const (
	RateLimitingPluginProtocolsGrpc           RateLimitingPluginProtocols = "grpc"
	RateLimitingPluginProtocolsGrpcs          RateLimitingPluginProtocols = "grpcs"
	RateLimitingPluginProtocolsHTTP           RateLimitingPluginProtocols = "http"
	RateLimitingPluginProtocolsHTTPS          RateLimitingPluginProtocols = "https"
	RateLimitingPluginProtocolsTCP            RateLimitingPluginProtocols = "tcp"
	RateLimitingPluginProtocolsTLS            RateLimitingPluginProtocols = "tls"
	RateLimitingPluginProtocolsTLSPassthrough RateLimitingPluginProtocols = "tls_passthrough"
	RateLimitingPluginProtocolsUDP            RateLimitingPluginProtocols = "udp"
	RateLimitingPluginProtocolsWs             RateLimitingPluginProtocols = "ws"
	RateLimitingPluginProtocolsWss            RateLimitingPluginProtocols = "wss"
)

func (e RateLimitingPluginProtocols) ToPointer() *RateLimitingPluginProtocols {
	return &e
}

func (e *RateLimitingPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = RateLimitingPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingPluginProtocols: %v", v)
	}
}

// RateLimitingPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RateLimitingPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RateLimitingPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type RateLimitingPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RateLimitingPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RateLimitingPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RateLimitingPluginLimitBy - The entity that is used when aggregating the limits.
type RateLimitingPluginLimitBy string

const (
	RateLimitingPluginLimitByConsumer      RateLimitingPluginLimitBy = "consumer"
	RateLimitingPluginLimitByCredential    RateLimitingPluginLimitBy = "credential"
	RateLimitingPluginLimitByIP            RateLimitingPluginLimitBy = "ip"
	RateLimitingPluginLimitByService       RateLimitingPluginLimitBy = "service"
	RateLimitingPluginLimitByHeader        RateLimitingPluginLimitBy = "header"
	RateLimitingPluginLimitByPath          RateLimitingPluginLimitBy = "path"
	RateLimitingPluginLimitByConsumerGroup RateLimitingPluginLimitBy = "consumer-group"
)

func (e RateLimitingPluginLimitBy) ToPointer() *RateLimitingPluginLimitBy {
	return &e
}

func (e *RateLimitingPluginLimitBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "credential":
		fallthrough
	case "ip":
		fallthrough
	case "service":
		fallthrough
	case "header":
		fallthrough
	case "path":
		fallthrough
	case "consumer-group":
		*e = RateLimitingPluginLimitBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingPluginLimitBy: %v", v)
	}
}

// RateLimitingPluginPolicy - The rate-limiting policies to use for retrieving and incrementing the limits.
type RateLimitingPluginPolicy string

const (
	RateLimitingPluginPolicyLocal   RateLimitingPluginPolicy = "local"
	RateLimitingPluginPolicyCluster RateLimitingPluginPolicy = "cluster"
	RateLimitingPluginPolicyRedis   RateLimitingPluginPolicy = "redis"
)

func (e RateLimitingPluginPolicy) ToPointer() *RateLimitingPluginPolicy {
	return &e
}

func (e *RateLimitingPluginPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "local":
		fallthrough
	case "cluster":
		fallthrough
	case "redis":
		*e = RateLimitingPluginPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingPluginPolicy: %v", v)
	}
}

type RateLimitingPluginConfig struct {
	// The number of HTTP requests that can be made per second.
	Second *float64 `json:"second,omitempty"`
	// The number of HTTP requests that can be made per minute.
	Minute *float64 `json:"minute,omitempty"`
	// The number of HTTP requests that can be made per hour.
	Hour *float64 `json:"hour,omitempty"`
	// The number of HTTP requests that can be made per day.
	Day *float64 `json:"day,omitempty"`
	// The number of HTTP requests that can be made per month.
	Month *float64 `json:"month,omitempty"`
	// The number of HTTP requests that can be made per year.
	Year *float64 `json:"year,omitempty"`
	// The entity that is used when aggregating the limits.
	LimitBy *RateLimitingPluginLimitBy `default:"consumer" json:"limit_by"`
	// A string representing an HTTP header name.
	HeaderName *string `json:"header_name,omitempty"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	Path *string `json:"path,omitempty"`
	// The rate-limiting policies to use for retrieving and incrementing the limits.
	Policy *RateLimitingPluginPolicy `default:"local" json:"policy"`
	// A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
	FaultTolerant *bool `default:"true" json:"fault_tolerant"`
	// A string representing a host name, such as example.com.
	RedisHost *string `json:"redis_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	RedisPort *int64 `default:"6379" json:"redis_port"`
	// When using the `redis` policy, this property specifies the password to connect to the Redis server.
	RedisPassword *string `json:"redis_password,omitempty"`
	// When using the `redis` policy, this property specifies the username to connect to the Redis server when ACL authentication is desired.
	RedisUsername *string `json:"redis_username,omitempty"`
	// When using the `redis` policy, this property specifies if SSL is used to connect to the Redis server.
	RedisSsl *bool `default:"false" json:"redis_ssl"`
	// When using the `redis` policy with `redis_ssl` set to `true`, this property specifies it server SSL certificate is validated. Note that you need to configure the lua_ssl_trusted_certificate to specify the CA (or server) certificate used by your Redis server. You may also need to configure lua_ssl_verify_depth accordingly.
	RedisSslVerify *bool `default:"false" json:"redis_ssl_verify"`
	// A string representing an SNI (server name indication) value for TLS.
	RedisServerName *string `json:"redis_server_name,omitempty"`
	// When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server.
	RedisTimeout *float64 `default:"2000" json:"redis_timeout"`
	// When using the `redis` policy, this property specifies the Redis database to use.
	RedisDatabase *int64 `default:"0" json:"redis_database"`
	// Optionally hide informative response headers.
	HideClientHeaders *bool `default:"false" json:"hide_client_headers"`
	// Set a custom error code to return when the rate limit is exceeded.
	ErrorCode *float64 `default:"429" json:"error_code"`
	// Set a custom error message to return when the rate limit is exceeded.
	ErrorMessage *string `default:"API rate limit exceeded" json:"error_message"`
	// How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
	SyncRate *float64 `default:"-1" json:"sync_rate"`
}

func (r RateLimitingPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingPluginConfig) GetSecond() *float64 {
	if o == nil {
		return nil
	}
	return o.Second
}

func (o *RateLimitingPluginConfig) GetMinute() *float64 {
	if o == nil {
		return nil
	}
	return o.Minute
}

func (o *RateLimitingPluginConfig) GetHour() *float64 {
	if o == nil {
		return nil
	}
	return o.Hour
}

func (o *RateLimitingPluginConfig) GetDay() *float64 {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RateLimitingPluginConfig) GetMonth() *float64 {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RateLimitingPluginConfig) GetYear() *float64 {
	if o == nil {
		return nil
	}
	return o.Year
}

func (o *RateLimitingPluginConfig) GetLimitBy() *RateLimitingPluginLimitBy {
	if o == nil {
		return nil
	}
	return o.LimitBy
}

func (o *RateLimitingPluginConfig) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *RateLimitingPluginConfig) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *RateLimitingPluginConfig) GetPolicy() *RateLimitingPluginPolicy {
	if o == nil {
		return nil
	}
	return o.Policy
}

func (o *RateLimitingPluginConfig) GetFaultTolerant() *bool {
	if o == nil {
		return nil
	}
	return o.FaultTolerant
}

func (o *RateLimitingPluginConfig) GetRedisHost() *string {
	if o == nil {
		return nil
	}
	return o.RedisHost
}

func (o *RateLimitingPluginConfig) GetRedisPort() *int64 {
	if o == nil {
		return nil
	}
	return o.RedisPort
}

func (o *RateLimitingPluginConfig) GetRedisPassword() *string {
	if o == nil {
		return nil
	}
	return o.RedisPassword
}

func (o *RateLimitingPluginConfig) GetRedisUsername() *string {
	if o == nil {
		return nil
	}
	return o.RedisUsername
}

func (o *RateLimitingPluginConfig) GetRedisSsl() *bool {
	if o == nil {
		return nil
	}
	return o.RedisSsl
}

func (o *RateLimitingPluginConfig) GetRedisSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.RedisSslVerify
}

func (o *RateLimitingPluginConfig) GetRedisServerName() *string {
	if o == nil {
		return nil
	}
	return o.RedisServerName
}

func (o *RateLimitingPluginConfig) GetRedisTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RedisTimeout
}

func (o *RateLimitingPluginConfig) GetRedisDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.RedisDatabase
}

func (o *RateLimitingPluginConfig) GetHideClientHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.HideClientHeaders
}

func (o *RateLimitingPluginConfig) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *RateLimitingPluginConfig) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *RateLimitingPluginConfig) GetSyncRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SyncRate
}

// RateLimitingPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type RateLimitingPlugin struct {
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"rate-limiting" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []RateLimitingPluginProtocols `json:"protocols"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *RateLimitingPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *RateLimitingPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RateLimitingPluginService `json:"service,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64                   `json:"created_at,omitempty"`
	ID        *string                  `json:"id,omitempty"`
	Config    RateLimitingPluginConfig `json:"config"`
}

func (r RateLimitingPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *RateLimitingPlugin) GetName() string {
	return "rate-limiting"
}

func (o *RateLimitingPlugin) GetProtocols() []RateLimitingPluginProtocols {
	if o == nil {
		return []RateLimitingPluginProtocols{}
	}
	return o.Protocols
}

func (o *RateLimitingPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *RateLimitingPlugin) GetConsumer() *RateLimitingPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *RateLimitingPlugin) GetRoute() *RateLimitingPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *RateLimitingPlugin) GetService() *RateLimitingPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *RateLimitingPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RateLimitingPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RateLimitingPlugin) GetConfig() RateLimitingPluginConfig {
	if o == nil {
		return RateLimitingPluginConfig{}
	}
	return o.Config
}
