// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateSyslogPluginClientErrorsSeverity string

const (
	CreateSyslogPluginClientErrorsSeverityDebug   CreateSyslogPluginClientErrorsSeverity = "debug"
	CreateSyslogPluginClientErrorsSeverityInfo    CreateSyslogPluginClientErrorsSeverity = "info"
	CreateSyslogPluginClientErrorsSeverityNotice  CreateSyslogPluginClientErrorsSeverity = "notice"
	CreateSyslogPluginClientErrorsSeverityWarning CreateSyslogPluginClientErrorsSeverity = "warning"
	CreateSyslogPluginClientErrorsSeverityErr     CreateSyslogPluginClientErrorsSeverity = "err"
	CreateSyslogPluginClientErrorsSeverityCrit    CreateSyslogPluginClientErrorsSeverity = "crit"
	CreateSyslogPluginClientErrorsSeverityAlert   CreateSyslogPluginClientErrorsSeverity = "alert"
	CreateSyslogPluginClientErrorsSeverityEmerg   CreateSyslogPluginClientErrorsSeverity = "emerg"
)

func (e CreateSyslogPluginClientErrorsSeverity) ToPointer() *CreateSyslogPluginClientErrorsSeverity {
	return &e
}
func (e *CreateSyslogPluginClientErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = CreateSyslogPluginClientErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSyslogPluginClientErrorsSeverity: %v", v)
	}
}

// CreateSyslogPluginFacility - The facility is used by the operating system to decide how to handle each log message.
type CreateSyslogPluginFacility string

const (
	CreateSyslogPluginFacilityAuth     CreateSyslogPluginFacility = "auth"
	CreateSyslogPluginFacilityAuthpriv CreateSyslogPluginFacility = "authpriv"
	CreateSyslogPluginFacilityCron     CreateSyslogPluginFacility = "cron"
	CreateSyslogPluginFacilityDaemon   CreateSyslogPluginFacility = "daemon"
	CreateSyslogPluginFacilityFtp      CreateSyslogPluginFacility = "ftp"
	CreateSyslogPluginFacilityKern     CreateSyslogPluginFacility = "kern"
	CreateSyslogPluginFacilityLpr      CreateSyslogPluginFacility = "lpr"
	CreateSyslogPluginFacilityMail     CreateSyslogPluginFacility = "mail"
	CreateSyslogPluginFacilityNews     CreateSyslogPluginFacility = "news"
	CreateSyslogPluginFacilitySyslog   CreateSyslogPluginFacility = "syslog"
	CreateSyslogPluginFacilityUser     CreateSyslogPluginFacility = "user"
	CreateSyslogPluginFacilityUucp     CreateSyslogPluginFacility = "uucp"
	CreateSyslogPluginFacilityLocal0   CreateSyslogPluginFacility = "local0"
	CreateSyslogPluginFacilityLocal1   CreateSyslogPluginFacility = "local1"
	CreateSyslogPluginFacilityLocal2   CreateSyslogPluginFacility = "local2"
	CreateSyslogPluginFacilityLocal3   CreateSyslogPluginFacility = "local3"
	CreateSyslogPluginFacilityLocal4   CreateSyslogPluginFacility = "local4"
	CreateSyslogPluginFacilityLocal5   CreateSyslogPluginFacility = "local5"
	CreateSyslogPluginFacilityLocal6   CreateSyslogPluginFacility = "local6"
	CreateSyslogPluginFacilityLocal7   CreateSyslogPluginFacility = "local7"
)

func (e CreateSyslogPluginFacility) ToPointer() *CreateSyslogPluginFacility {
	return &e
}
func (e *CreateSyslogPluginFacility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auth":
		fallthrough
	case "authpriv":
		fallthrough
	case "cron":
		fallthrough
	case "daemon":
		fallthrough
	case "ftp":
		fallthrough
	case "kern":
		fallthrough
	case "lpr":
		fallthrough
	case "mail":
		fallthrough
	case "news":
		fallthrough
	case "syslog":
		fallthrough
	case "user":
		fallthrough
	case "uucp":
		fallthrough
	case "local0":
		fallthrough
	case "local1":
		fallthrough
	case "local2":
		fallthrough
	case "local3":
		fallthrough
	case "local4":
		fallthrough
	case "local5":
		fallthrough
	case "local6":
		fallthrough
	case "local7":
		*e = CreateSyslogPluginFacility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSyslogPluginFacility: %v", v)
	}
}

type CreateSyslogPluginLogLevel string

const (
	CreateSyslogPluginLogLevelDebug   CreateSyslogPluginLogLevel = "debug"
	CreateSyslogPluginLogLevelInfo    CreateSyslogPluginLogLevel = "info"
	CreateSyslogPluginLogLevelNotice  CreateSyslogPluginLogLevel = "notice"
	CreateSyslogPluginLogLevelWarning CreateSyslogPluginLogLevel = "warning"
	CreateSyslogPluginLogLevelErr     CreateSyslogPluginLogLevel = "err"
	CreateSyslogPluginLogLevelCrit    CreateSyslogPluginLogLevel = "crit"
	CreateSyslogPluginLogLevelAlert   CreateSyslogPluginLogLevel = "alert"
	CreateSyslogPluginLogLevelEmerg   CreateSyslogPluginLogLevel = "emerg"
)

func (e CreateSyslogPluginLogLevel) ToPointer() *CreateSyslogPluginLogLevel {
	return &e
}
func (e *CreateSyslogPluginLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = CreateSyslogPluginLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSyslogPluginLogLevel: %v", v)
	}
}

type CreateSyslogPluginServerErrorsSeverity string

const (
	CreateSyslogPluginServerErrorsSeverityDebug   CreateSyslogPluginServerErrorsSeverity = "debug"
	CreateSyslogPluginServerErrorsSeverityInfo    CreateSyslogPluginServerErrorsSeverity = "info"
	CreateSyslogPluginServerErrorsSeverityNotice  CreateSyslogPluginServerErrorsSeverity = "notice"
	CreateSyslogPluginServerErrorsSeverityWarning CreateSyslogPluginServerErrorsSeverity = "warning"
	CreateSyslogPluginServerErrorsSeverityErr     CreateSyslogPluginServerErrorsSeverity = "err"
	CreateSyslogPluginServerErrorsSeverityCrit    CreateSyslogPluginServerErrorsSeverity = "crit"
	CreateSyslogPluginServerErrorsSeverityAlert   CreateSyslogPluginServerErrorsSeverity = "alert"
	CreateSyslogPluginServerErrorsSeverityEmerg   CreateSyslogPluginServerErrorsSeverity = "emerg"
)

func (e CreateSyslogPluginServerErrorsSeverity) ToPointer() *CreateSyslogPluginServerErrorsSeverity {
	return &e
}
func (e *CreateSyslogPluginServerErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = CreateSyslogPluginServerErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSyslogPluginServerErrorsSeverity: %v", v)
	}
}

type CreateSyslogPluginSuccessfulSeverity string

const (
	CreateSyslogPluginSuccessfulSeverityDebug   CreateSyslogPluginSuccessfulSeverity = "debug"
	CreateSyslogPluginSuccessfulSeverityInfo    CreateSyslogPluginSuccessfulSeverity = "info"
	CreateSyslogPluginSuccessfulSeverityNotice  CreateSyslogPluginSuccessfulSeverity = "notice"
	CreateSyslogPluginSuccessfulSeverityWarning CreateSyslogPluginSuccessfulSeverity = "warning"
	CreateSyslogPluginSuccessfulSeverityErr     CreateSyslogPluginSuccessfulSeverity = "err"
	CreateSyslogPluginSuccessfulSeverityCrit    CreateSyslogPluginSuccessfulSeverity = "crit"
	CreateSyslogPluginSuccessfulSeverityAlert   CreateSyslogPluginSuccessfulSeverity = "alert"
	CreateSyslogPluginSuccessfulSeverityEmerg   CreateSyslogPluginSuccessfulSeverity = "emerg"
)

func (e CreateSyslogPluginSuccessfulSeverity) ToPointer() *CreateSyslogPluginSuccessfulSeverity {
	return &e
}
func (e *CreateSyslogPluginSuccessfulSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = CreateSyslogPluginSuccessfulSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSyslogPluginSuccessfulSeverity: %v", v)
	}
}

type CreateSyslogPluginConfig struct {
	ClientErrorsSeverity *CreateSyslogPluginClientErrorsSeverity `json:"client_errors_severity,omitempty"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// The facility is used by the operating system to decide how to handle each log message.
	Facility             *CreateSyslogPluginFacility             `json:"facility,omitempty"`
	LogLevel             *CreateSyslogPluginLogLevel             `json:"log_level,omitempty"`
	ServerErrorsSeverity *CreateSyslogPluginServerErrorsSeverity `json:"server_errors_severity,omitempty"`
	SuccessfulSeverity   *CreateSyslogPluginSuccessfulSeverity   `json:"successful_severity,omitempty"`
}

func (o *CreateSyslogPluginConfig) GetClientErrorsSeverity() *CreateSyslogPluginClientErrorsSeverity {
	if o == nil {
		return nil
	}
	return o.ClientErrorsSeverity
}

func (o *CreateSyslogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *CreateSyslogPluginConfig) GetFacility() *CreateSyslogPluginFacility {
	if o == nil {
		return nil
	}
	return o.Facility
}

func (o *CreateSyslogPluginConfig) GetLogLevel() *CreateSyslogPluginLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *CreateSyslogPluginConfig) GetServerErrorsSeverity() *CreateSyslogPluginServerErrorsSeverity {
	if o == nil {
		return nil
	}
	return o.ServerErrorsSeverity
}

func (o *CreateSyslogPluginConfig) GetSuccessfulSeverity() *CreateSyslogPluginSuccessfulSeverity {
	if o == nil {
		return nil
	}
	return o.SuccessfulSeverity
}

type CreateSyslogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateSyslogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateSyslogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateSyslogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateSyslogPluginOrdering struct {
	After  *CreateSyslogPluginAfter  `json:"after,omitempty"`
	Before *CreateSyslogPluginBefore `json:"before,omitempty"`
}

func (o *CreateSyslogPluginOrdering) GetAfter() *CreateSyslogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateSyslogPluginOrdering) GetBefore() *CreateSyslogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateSyslogPluginProtocols string

const (
	CreateSyslogPluginProtocolsGrpc           CreateSyslogPluginProtocols = "grpc"
	CreateSyslogPluginProtocolsGrpcs          CreateSyslogPluginProtocols = "grpcs"
	CreateSyslogPluginProtocolsHTTP           CreateSyslogPluginProtocols = "http"
	CreateSyslogPluginProtocolsHTTPS          CreateSyslogPluginProtocols = "https"
	CreateSyslogPluginProtocolsTCP            CreateSyslogPluginProtocols = "tcp"
	CreateSyslogPluginProtocolsTLS            CreateSyslogPluginProtocols = "tls"
	CreateSyslogPluginProtocolsTLSPassthrough CreateSyslogPluginProtocols = "tls_passthrough"
	CreateSyslogPluginProtocolsUDP            CreateSyslogPluginProtocols = "udp"
	CreateSyslogPluginProtocolsWs             CreateSyslogPluginProtocols = "ws"
	CreateSyslogPluginProtocolsWss            CreateSyslogPluginProtocols = "wss"
)

func (e CreateSyslogPluginProtocols) ToPointer() *CreateSyslogPluginProtocols {
	return &e
}
func (e *CreateSyslogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateSyslogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSyslogPluginProtocols: %v", v)
	}
}

// CreateSyslogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateSyslogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSyslogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateSyslogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSyslogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateSyslogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateSyslogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSyslogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateSyslogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateSyslogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSyslogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateSyslogPlugin struct {
	Config *CreateSyslogPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                       `json:"enabled,omitempty"`
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         *string                     `const:"syslog" json:"name,omitempty"`
	Ordering     *CreateSyslogPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateSyslogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateSyslogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateSyslogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateSyslogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateSyslogPluginService `json:"service,omitempty"`
}

func (c CreateSyslogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateSyslogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateSyslogPlugin) GetConfig() *CreateSyslogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateSyslogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateSyslogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateSyslogPlugin) GetName() *string {
	return types.String("syslog")
}

func (o *CreateSyslogPlugin) GetOrdering() *CreateSyslogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateSyslogPlugin) GetProtocols() []CreateSyslogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateSyslogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateSyslogPlugin) GetConsumer() *CreateSyslogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateSyslogPlugin) GetConsumerGroup() *CreateSyslogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateSyslogPlugin) GetRoute() *CreateSyslogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateSyslogPlugin) GetService() *CreateSyslogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
