// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateAzureFunctionsPluginConfig struct {
	// The apikey to access the Azure resources. If provided, it is injected as the `x-functions-key` header.
	Apikey *string `json:"apikey,omitempty"`
	// The Azure app name.
	Appname *string `json:"appname,omitempty"`
	// The `clientid` to access the Azure resources. If provided, it is injected as the `x-functions-clientid` header.
	Clientid *string `json:"clientid,omitempty"`
	// Name of the Azure function to invoke.
	Functionname *string `json:"functionname,omitempty"`
	// The domain where the function resides.
	Hostdomain *string `json:"hostdomain,omitempty"`
	// Use of HTTPS to connect with the Azure Functions server.
	HTTPS *bool `json:"https,omitempty"`
	// Set to `true` to authenticate the Azure Functions server.
	HTTPSVerify *bool `json:"https_verify,omitempty"`
	// Time in milliseconds during which an idle connection to the Azure Functions server lives before being closed.
	Keepalive *float64 `json:"keepalive,omitempty"`
	// Route prefix to use.
	Routeprefix *string `json:"routeprefix,omitempty"`
	// Timeout in milliseconds before closing a connection to the Azure Functions server.
	Timeout *float64 `json:"timeout,omitempty"`
}

func (o *CreateAzureFunctionsPluginConfig) GetApikey() *string {
	if o == nil {
		return nil
	}
	return o.Apikey
}

func (o *CreateAzureFunctionsPluginConfig) GetAppname() *string {
	if o == nil {
		return nil
	}
	return o.Appname
}

func (o *CreateAzureFunctionsPluginConfig) GetClientid() *string {
	if o == nil {
		return nil
	}
	return o.Clientid
}

func (o *CreateAzureFunctionsPluginConfig) GetFunctionname() *string {
	if o == nil {
		return nil
	}
	return o.Functionname
}

func (o *CreateAzureFunctionsPluginConfig) GetHostdomain() *string {
	if o == nil {
		return nil
	}
	return o.Hostdomain
}

func (o *CreateAzureFunctionsPluginConfig) GetHTTPS() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPS
}

func (o *CreateAzureFunctionsPluginConfig) GetHTTPSVerify() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPSVerify
}

func (o *CreateAzureFunctionsPluginConfig) GetKeepalive() *float64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *CreateAzureFunctionsPluginConfig) GetRouteprefix() *string {
	if o == nil {
		return nil
	}
	return o.Routeprefix
}

func (o *CreateAzureFunctionsPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

type CreateAzureFunctionsPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAzureFunctionsPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAzureFunctionsPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAzureFunctionsPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAzureFunctionsPluginOrdering struct {
	After  *CreateAzureFunctionsPluginAfter  `json:"after,omitempty"`
	Before *CreateAzureFunctionsPluginBefore `json:"before,omitempty"`
}

func (o *CreateAzureFunctionsPluginOrdering) GetAfter() *CreateAzureFunctionsPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateAzureFunctionsPluginOrdering) GetBefore() *CreateAzureFunctionsPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateAzureFunctionsPluginProtocols string

const (
	CreateAzureFunctionsPluginProtocolsGrpc           CreateAzureFunctionsPluginProtocols = "grpc"
	CreateAzureFunctionsPluginProtocolsGrpcs          CreateAzureFunctionsPluginProtocols = "grpcs"
	CreateAzureFunctionsPluginProtocolsHTTP           CreateAzureFunctionsPluginProtocols = "http"
	CreateAzureFunctionsPluginProtocolsHTTPS          CreateAzureFunctionsPluginProtocols = "https"
	CreateAzureFunctionsPluginProtocolsTCP            CreateAzureFunctionsPluginProtocols = "tcp"
	CreateAzureFunctionsPluginProtocolsTLS            CreateAzureFunctionsPluginProtocols = "tls"
	CreateAzureFunctionsPluginProtocolsTLSPassthrough CreateAzureFunctionsPluginProtocols = "tls_passthrough"
	CreateAzureFunctionsPluginProtocolsUDP            CreateAzureFunctionsPluginProtocols = "udp"
	CreateAzureFunctionsPluginProtocolsWs             CreateAzureFunctionsPluginProtocols = "ws"
	CreateAzureFunctionsPluginProtocolsWss            CreateAzureFunctionsPluginProtocols = "wss"
)

func (e CreateAzureFunctionsPluginProtocols) ToPointer() *CreateAzureFunctionsPluginProtocols {
	return &e
}
func (e *CreateAzureFunctionsPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateAzureFunctionsPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAzureFunctionsPluginProtocols: %v", v)
	}
}

// CreateAzureFunctionsPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateAzureFunctionsPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAzureFunctionsPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAzureFunctionsPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAzureFunctionsPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAzureFunctionsPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateAzureFunctionsPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAzureFunctionsPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAzureFunctionsPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateAzureFunctionsPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAzureFunctionsPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAzureFunctionsPlugin struct {
	Config *CreateAzureFunctionsPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                               `json:"enabled,omitempty"`
	InstanceName *string                             `json:"instance_name,omitempty"`
	name         *string                             `const:"azure-functions" json:"name,omitempty"`
	Ordering     *CreateAzureFunctionsPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateAzureFunctionsPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateAzureFunctionsPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateAzureFunctionsPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateAzureFunctionsPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateAzureFunctionsPluginService `json:"service,omitempty"`
}

func (c CreateAzureFunctionsPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAzureFunctionsPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAzureFunctionsPlugin) GetConfig() *CreateAzureFunctionsPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateAzureFunctionsPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateAzureFunctionsPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateAzureFunctionsPlugin) GetName() *string {
	return types.String("azure-functions")
}

func (o *CreateAzureFunctionsPlugin) GetOrdering() *CreateAzureFunctionsPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateAzureFunctionsPlugin) GetProtocols() []CreateAzureFunctionsPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateAzureFunctionsPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateAzureFunctionsPlugin) GetConsumer() *CreateAzureFunctionsPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateAzureFunctionsPlugin) GetConsumerGroup() *CreateAzureFunctionsPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateAzureFunctionsPlugin) GetRoute() *CreateAzureFunctionsPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateAzureFunctionsPlugin) GetService() *CreateAzureFunctionsPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
