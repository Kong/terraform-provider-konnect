// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"time"
)

type AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType string

const (
	AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyTypeOpenidConnect AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType = "openid_connect"
)

func (e AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType) ToPointer() *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType {
	return &e
}

func (e *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openid_connect":
		*e = AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType: %v", v)
	}
}

// AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseConfigs - JSON-B object containing the configuration for the OIDC strategy
type AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseConfigs struct {
	// A more advanced mode to configure an API Product Version’s Application Auth Strategy.
	// Using this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests.
	// Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy.
	// An OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.
	//
	OpenidConnect AppAuthStrategyConfigOpenIDConnect `json:"openid-connect"`
}

func (o *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseConfigs) GetOpenidConnect() AppAuthStrategyConfigOpenIDConnect {
	if o == nil {
		return AppAuthStrategyConfigOpenIDConnect{}
	}
	return o.OpenidConnect
}

type AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider struct {
	// Contains a unique identifier used by the API for this resource.
	ID   string `json:"id"`
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType DcrProviderType `json:"provider_type"`
}

func (o *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider) GetProviderType() DcrProviderType {
	if o == nil {
		return DcrProviderType("")
	}
	return o.ProviderType
}

// AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse - Response payload from creating an OIDC Application Auth Strategy
type AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse struct {
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName  string                                                                     `json:"display_name"`
	StrategyType AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType `json:"strategy_type"`
	// JSON-B object containing the configuration for the OIDC strategy
	Configs AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseConfigs `json:"configs"`
	// At least one published product version is using this auth strategy.
	Active      bool                                                                       `json:"active"`
	DcrProvider *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider `json:"dcr_provider"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (a AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetStrategyType() AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType {
	if o == nil {
		return AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType("")
	}
	return o.StrategyType
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetConfigs() AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseConfigs {
	if o == nil {
		return AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseConfigs{}
	}
	return o.Configs
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetDcrProvider() *AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseDcrProvider {
	if o == nil {
		return nil
	}
	return o.DcrProvider
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType string

const (
	AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyTypeKeyAuth AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType = "key_auth"
)

func (e AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType) ToPointer() *AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType {
	return &e
}

func (e *AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "key_auth":
		*e = AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType: %v", v)
	}
}

// AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseConfigs - JSON-B object containing the configuration for the Key Auth strategy
type AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseConfigs struct {
	// The most basic mode to configure an Application Auth Strategy for an API Product Version.
	// Using this mode will allow developers to generate API keys that will authenticate their application requests.
	// Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.
	//
	KeyAuth AppAuthStrategyConfigKeyAuth `json:"key-auth"`
}

func (o *AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseConfigs) GetKeyAuth() AppAuthStrategyConfigKeyAuth {
	if o == nil {
		return AppAuthStrategyConfigKeyAuth{}
	}
	return o.KeyAuth
}

type AppAuthStrategyKeyAuthResponseDcrProvider struct {
	// Contains a unique identifier used by the API for this resource.
	ID   string `json:"id"`
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http
	ProviderType DcrProviderType `json:"provider_type"`
}

func (o *AppAuthStrategyKeyAuthResponseDcrProvider) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AppAuthStrategyKeyAuthResponseDcrProvider) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AppAuthStrategyKeyAuthResponseDcrProvider) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *AppAuthStrategyKeyAuthResponseDcrProvider) GetProviderType() DcrProviderType {
	if o == nil {
		return DcrProviderType("")
	}
	return o.ProviderType
}

// AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse - Response payload from creating or updating a Key Auth Application Auth Strategy
type AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse struct {
	// Contains a unique identifier used by the API for this resource.
	ID string `json:"id"`
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName  string                                                               `json:"display_name"`
	StrategyType AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType `json:"strategy_type"`
	// JSON-B object containing the configuration for the Key Auth strategy
	Configs AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseConfigs `json:"configs"`
	// At least one published product version is using this auth strategy.
	Active      bool                                       `json:"active"`
	DcrProvider *AppAuthStrategyKeyAuthResponseDcrProvider `json:"dcr_provider"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (a AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetStrategyType() AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType {
	if o == nil {
		return AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType("")
	}
	return o.StrategyType
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetConfigs() AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseConfigs {
	if o == nil {
		return AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseConfigs{}
	}
	return o.Configs
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetDcrProvider() *AppAuthStrategyKeyAuthResponseDcrProvider {
	if o == nil {
		return nil
	}
	return o.DcrProvider
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

type GetAppAuthStrategyResponseType string

const (
	GetAppAuthStrategyResponseTypeKeyAuth       GetAppAuthStrategyResponseType = "key_auth"
	GetAppAuthStrategyResponseTypeOpenidConnect GetAppAuthStrategyResponseType = "openid_connect"
)

// GetAppAuthStrategyResponse - A set of plugin configurations that represent how the gateway will perform authentication and authorization for a Product Version. Called “Auth Strategy” for short in the context of portals/applications. The plugins are synced to any Gateway Service that is currently linked or becomes linked to the Product Version.
type GetAppAuthStrategyResponse struct {
	AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse             *AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse
	AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse *AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse

	Type GetAppAuthStrategyResponseType
}

func CreateGetAppAuthStrategyResponseKeyAuth(keyAuth AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse) GetAppAuthStrategyResponse {
	typ := GetAppAuthStrategyResponseTypeKeyAuth

	typStr := AppAuthStrategyKeyAuthResponseGetAppAuthStrategyResponseStrategyType(typ)
	keyAuth.StrategyType = typStr

	return GetAppAuthStrategyResponse{
		AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse: &keyAuth,
		Type: typ,
	}
}

func CreateGetAppAuthStrategyResponseOpenidConnect(openidConnect AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse) GetAppAuthStrategyResponse {
	typ := GetAppAuthStrategyResponseTypeOpenidConnect

	typStr := AppAuthStrategyOpenIDConnectResponseGetAppAuthStrategyResponseStrategyType(typ)
	openidConnect.StrategyType = typStr

	return GetAppAuthStrategyResponse{
		AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse: &openidConnect,
		Type: typ,
	}
}

func (u *GetAppAuthStrategyResponse) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		StrategyType string `json:"strategy_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.StrategyType {
	case "key_auth":
		appAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse := new(AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse)
		if err := utils.UnmarshalJSON(data, &appAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse = appAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse
		u.Type = GetAppAuthStrategyResponseTypeKeyAuth
		return nil
	case "openid_connect":
		appAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse := new(AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse)
		if err := utils.UnmarshalJSON(data, &appAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse, "", true, true); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse = appAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse
		u.Type = GetAppAuthStrategyResponseTypeOpenidConnect
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetAppAuthStrategyResponse) MarshalJSON() ([]byte, error) {
	if u.AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse != nil {
		return utils.MarshalJSON(u.AppAuthStrategyKeyAuthResponseAppAuthStrategyKeyAuthResponse, "", true)
	}

	if u.AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse != nil {
		return utils.MarshalJSON(u.AppAuthStrategyOpenIDConnectResponseAppAuthStrategyOpenIDConnectResponse, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}
