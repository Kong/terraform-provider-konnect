// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type Templates struct {
	// Unique name for the template, can be called with `{template://NAME}`
	Name string `json:"name"`
	// Template string for this request, supports mustache-style `{{"{{"}}placeholders}}`
	Template string `json:"template"`
}

func (o *Templates) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Templates) GetTemplate() string {
	if o == nil {
		return ""
	}
	return o.Template
}

type AIPromptTemplatePluginConfig struct {
	// Set true to allow requests that don't call or match any template.
	AllowUntemplatedRequests *bool `json:"allow_untemplated_requests,omitempty"`
	// Set true to add the original request to the Kong log plugin(s) output.
	LogOriginalRequest *bool `json:"log_original_request,omitempty"`
	// Array of templates available to the request context.
	Templates []Templates `json:"templates,omitempty"`
}

func (o *AIPromptTemplatePluginConfig) GetAllowUntemplatedRequests() *bool {
	if o == nil {
		return nil
	}
	return o.AllowUntemplatedRequests
}

func (o *AIPromptTemplatePluginConfig) GetLogOriginalRequest() *bool {
	if o == nil {
		return nil
	}
	return o.LogOriginalRequest
}

func (o *AIPromptTemplatePluginConfig) GetTemplates() []Templates {
	if o == nil {
		return nil
	}
	return o.Templates
}

type AIPromptTemplatePluginProtocols string

const (
	AIPromptTemplatePluginProtocolsGrpc           AIPromptTemplatePluginProtocols = "grpc"
	AIPromptTemplatePluginProtocolsGrpcs          AIPromptTemplatePluginProtocols = "grpcs"
	AIPromptTemplatePluginProtocolsHTTP           AIPromptTemplatePluginProtocols = "http"
	AIPromptTemplatePluginProtocolsHTTPS          AIPromptTemplatePluginProtocols = "https"
	AIPromptTemplatePluginProtocolsTCP            AIPromptTemplatePluginProtocols = "tcp"
	AIPromptTemplatePluginProtocolsTLS            AIPromptTemplatePluginProtocols = "tls"
	AIPromptTemplatePluginProtocolsTLSPassthrough AIPromptTemplatePluginProtocols = "tls_passthrough"
	AIPromptTemplatePluginProtocolsUDP            AIPromptTemplatePluginProtocols = "udp"
	AIPromptTemplatePluginProtocolsWs             AIPromptTemplatePluginProtocols = "ws"
	AIPromptTemplatePluginProtocolsWss            AIPromptTemplatePluginProtocols = "wss"
)

func (e AIPromptTemplatePluginProtocols) ToPointer() *AIPromptTemplatePluginProtocols {
	return &e
}
func (e *AIPromptTemplatePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = AIPromptTemplatePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AIPromptTemplatePluginProtocols: %v", v)
	}
}

// AIPromptTemplatePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AIPromptTemplatePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AIPromptTemplatePluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AIPromptTemplatePluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *AIPromptTemplatePluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AIPromptTemplatePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type AIPromptTemplatePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AIPromptTemplatePluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AIPromptTemplatePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AIPromptTemplatePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AIPromptTemplatePluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AIPromptTemplatePlugin struct {
	Config *AIPromptTemplatePluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	ID           *string `json:"id,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"ai-prompt-template" json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []AIPromptTemplatePluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *AIPromptTemplatePluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *AIPromptTemplatePluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *AIPromptTemplatePluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AIPromptTemplatePluginService `json:"service,omitempty"`
}

func (a AIPromptTemplatePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AIPromptTemplatePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AIPromptTemplatePlugin) GetConfig() *AIPromptTemplatePluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *AIPromptTemplatePlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AIPromptTemplatePlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AIPromptTemplatePlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AIPromptTemplatePlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AIPromptTemplatePlugin) GetName() *string {
	return types.String("ai-prompt-template")
}

func (o *AIPromptTemplatePlugin) GetProtocols() []AIPromptTemplatePluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AIPromptTemplatePlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AIPromptTemplatePlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AIPromptTemplatePlugin) GetConsumer() *AIPromptTemplatePluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AIPromptTemplatePlugin) GetConsumerGroup() *AIPromptTemplatePluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AIPromptTemplatePlugin) GetRoute() *AIPromptTemplatePluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AIPromptTemplatePlugin) GetService() *AIPromptTemplatePluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
