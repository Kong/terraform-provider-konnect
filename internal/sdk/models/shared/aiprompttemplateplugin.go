// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AiPromptTemplatePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptTemplatePluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptTemplatePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptTemplatePluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptTemplatePluginOrdering struct {
	After  *AiPromptTemplatePluginAfter  `json:"after,omitempty"`
	Before *AiPromptTemplatePluginBefore `json:"before,omitempty"`
}

func (a *AiPromptTemplatePluginOrdering) GetAfter() *AiPromptTemplatePluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiPromptTemplatePluginOrdering) GetBefore() *AiPromptTemplatePluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiPromptTemplatePluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiPromptTemplatePluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptTemplatePluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiPromptTemplatePluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

type Templates struct {
	// Unique name for the template, can be called with `{template://NAME}`
	Name string `json:"name"`
	// Template string for this request, supports mustache-style `{{"{{"}}placeholders}}`
	Template string `json:"template"`
}

func (t *Templates) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *Templates) GetTemplate() string {
	if t == nil {
		return ""
	}
	return t.Template
}

type AiPromptTemplatePluginConfig struct {
	// Set true to allow requests that don't call or match any template.
	AllowUntemplatedRequests *bool `default:"true" json:"allow_untemplated_requests"`
	// Set true to add the original request to the Kong log plugin(s) output.
	LogOriginalRequest *bool `default:"false" json:"log_original_request"`
	// max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.
	MaxRequestBodySize *int64 `default:"8192" json:"max_request_body_size"`
	// Array of templates available to the request context.
	Templates []Templates `json:"templates"`
}

func (a AiPromptTemplatePluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptTemplatePluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"templates"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptTemplatePluginConfig) GetAllowUntemplatedRequests() *bool {
	if a == nil {
		return nil
	}
	return a.AllowUntemplatedRequests
}

func (a *AiPromptTemplatePluginConfig) GetLogOriginalRequest() *bool {
	if a == nil {
		return nil
	}
	return a.LogOriginalRequest
}

func (a *AiPromptTemplatePluginConfig) GetMaxRequestBodySize() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxRequestBodySize
}

func (a *AiPromptTemplatePluginConfig) GetTemplates() []Templates {
	if a == nil {
		return []Templates{}
	}
	return a.Templates
}

// AiPromptTemplatePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiPromptTemplatePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptTemplatePluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptTemplatePluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiPromptTemplatePluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptTemplatePluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiPromptTemplatePluginProtocols string

const (
	AiPromptTemplatePluginProtocolsGrpc  AiPromptTemplatePluginProtocols = "grpc"
	AiPromptTemplatePluginProtocolsGrpcs AiPromptTemplatePluginProtocols = "grpcs"
	AiPromptTemplatePluginProtocolsHTTP  AiPromptTemplatePluginProtocols = "http"
	AiPromptTemplatePluginProtocolsHTTPS AiPromptTemplatePluginProtocols = "https"
)

func (e AiPromptTemplatePluginProtocols) ToPointer() *AiPromptTemplatePluginProtocols {
	return &e
}
func (e *AiPromptTemplatePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiPromptTemplatePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiPromptTemplatePluginProtocols: %v", v)
	}
}

// AiPromptTemplatePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiPromptTemplatePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptTemplatePluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptTemplatePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiPromptTemplatePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptTemplatePluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptTemplatePlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiPromptTemplatePlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                         `default:"null" json:"instance_name"`
	name         string                          `const:"ai-prompt-template" json:"name"`
	Ordering     *AiPromptTemplatePluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiPromptTemplatePluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                       `json:"updated_at,omitempty"`
	Config    AiPromptTemplatePluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiPromptTemplatePluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiPromptTemplatePluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiPromptTemplatePluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiPromptTemplatePluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiPromptTemplatePluginService `json:"service"`
}

func (a AiPromptTemplatePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptTemplatePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "ordering", "partials", "tags", "config", "consumer", "consumer_group", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptTemplatePlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiPromptTemplatePlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiPromptTemplatePlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptTemplatePlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiPromptTemplatePlugin) GetName() string {
	return "ai-prompt-template"
}

func (a *AiPromptTemplatePlugin) GetOrdering() *AiPromptTemplatePluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiPromptTemplatePlugin) GetPartials() []AiPromptTemplatePluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiPromptTemplatePlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiPromptTemplatePlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiPromptTemplatePlugin) GetConfig() AiPromptTemplatePluginConfig {
	if a == nil {
		return AiPromptTemplatePluginConfig{}
	}
	return a.Config
}

func (a *AiPromptTemplatePlugin) GetConsumer() *AiPromptTemplatePluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiPromptTemplatePlugin) GetConsumerGroup() *AiPromptTemplatePluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiPromptTemplatePlugin) GetProtocols() []AiPromptTemplatePluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiPromptTemplatePlugin) GetRoute() *AiPromptTemplatePluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiPromptTemplatePlugin) GetService() *AiPromptTemplatePluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
