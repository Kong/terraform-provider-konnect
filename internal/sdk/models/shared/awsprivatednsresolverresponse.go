// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
	"time"
)

// AwsPrivateDNSResolverResponsePrivateDNSStateMetadata - Metadata describing the backing state of the Private Dns and why it may be in an erroneous state.
type AwsPrivateDNSResolverResponsePrivateDNSStateMetadata struct {
	// Reported status of the Private Dns from backing infrastructure.
	ReportedStatus *string `default:"null" json:"reported_status"`
	// Reason why the Private Dns may be in an erroneous state, reported from backing infrastructure.
	//
	Reason *string `default:"null" json:"reason"`
}

func (a AwsPrivateDNSResolverResponsePrivateDNSStateMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AwsPrivateDNSResolverResponsePrivateDNSStateMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AwsPrivateDNSResolverResponsePrivateDNSStateMetadata) GetReportedStatus() *string {
	if a == nil {
		return nil
	}
	return a.ReportedStatus
}

func (a *AwsPrivateDNSResolverResponsePrivateDNSStateMetadata) GetReason() *string {
	if a == nil {
		return nil
	}
	return a.Reason
}

type AwsPrivateDNSResolverResponse struct {
	ID string `json:"id"`
	// The current state of the Private DNS attachment. Possible values:
	// - `created` - The attachment has been created but is not attached to Private DNS.
	// - `initializing` - The attachment is in the process of being initialized and is setting up necessary resources.
	// - `pending-association` The attachment request is awaiting association to the cloud provider infrastructure in order for provisioning to proceed.
	// - `ready` - The attachment is fully operational and can route traffic as configured.
	// - `error` - The attachment is in an error state, and is not operational.
	// - `terminating` - The attachment is in the process of being deleted.
	// - `terminated` - The attachment has been fully deleted and is no longer available.
	//
	State PrivateDNSState `json:"state"`
	// Metadata describing the backing state of the Private Dns and why it may be in an erroneous state.
	//
	StateMetadata AwsPrivateDNSResolverResponsePrivateDNSStateMetadata `json:"state_metadata"`
	// Monotonically-increasing version count of the Private DNS, to indicate the order of updates to the
	// Private DNS.
	//
	EntityVersion int64 `json:"entity_version"`
	// An RFC-3339 timestamp representation of Private DNS creation date.
	CreatedAt time.Time `json:"created_at"`
	// An RFC-3339 timestamp representation of Private DNS update date.
	UpdatedAt time.Time `json:"updated_at"`
	// Human-readable name of the Private DNS.
	Name                       string                                `json:"name"`
	PrivateDNSAttachmentConfig AwsPrivateDNSResolverAttachmentConfig `json:"private_dns_attachment_config"`
}

func (a AwsPrivateDNSResolverResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AwsPrivateDNSResolverResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"id", "state", "state_metadata", "entity_version", "created_at", "updated_at", "name", "private_dns_attachment_config"}); err != nil {
		return err
	}
	return nil
}

func (a *AwsPrivateDNSResolverResponse) GetID() string {
	if a == nil {
		return ""
	}
	return a.ID
}

func (a *AwsPrivateDNSResolverResponse) GetState() PrivateDNSState {
	if a == nil {
		return PrivateDNSState("")
	}
	return a.State
}

func (a *AwsPrivateDNSResolverResponse) GetStateMetadata() AwsPrivateDNSResolverResponsePrivateDNSStateMetadata {
	if a == nil {
		return AwsPrivateDNSResolverResponsePrivateDNSStateMetadata{}
	}
	return a.StateMetadata
}

func (a *AwsPrivateDNSResolverResponse) GetEntityVersion() int64 {
	if a == nil {
		return 0
	}
	return a.EntityVersion
}

func (a *AwsPrivateDNSResolverResponse) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *AwsPrivateDNSResolverResponse) GetUpdatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.UpdatedAt
}

func (a *AwsPrivateDNSResolverResponse) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AwsPrivateDNSResolverResponse) GetPrivateDNSAttachmentConfig() AwsPrivateDNSResolverAttachmentConfig {
	if a == nil {
		return AwsPrivateDNSResolverAttachmentConfig{}
	}
	return a.PrivateDNSAttachmentConfig
}
