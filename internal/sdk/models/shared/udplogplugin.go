// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type UDPLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *UDPLogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type UDPLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *UDPLogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type UDPLogPluginOrdering struct {
	After  *UDPLogPluginAfter  `json:"after,omitempty"`
	Before *UDPLogPluginBefore `json:"before,omitempty"`
}

func (o *UDPLogPluginOrdering) GetAfter() *UDPLogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *UDPLogPluginOrdering) GetBefore() *UDPLogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type UDPLogPluginPartials struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *UDPLogPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UDPLogPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UDPLogPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type UDPLogPluginConfig struct {
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *float64 `default:"10000" json:"timeout"`
}

func (u UDPLogPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UDPLogPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UDPLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *UDPLogPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *UDPLogPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *UDPLogPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

// UDPLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type UDPLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *UDPLogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// UDPLogPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type UDPLogPluginProtocols string

const (
	UDPLogPluginProtocolsGrpc           UDPLogPluginProtocols = "grpc"
	UDPLogPluginProtocolsGrpcs          UDPLogPluginProtocols = "grpcs"
	UDPLogPluginProtocolsHTTP           UDPLogPluginProtocols = "http"
	UDPLogPluginProtocolsHTTPS          UDPLogPluginProtocols = "https"
	UDPLogPluginProtocolsTCP            UDPLogPluginProtocols = "tcp"
	UDPLogPluginProtocolsTLS            UDPLogPluginProtocols = "tls"
	UDPLogPluginProtocolsTLSPassthrough UDPLogPluginProtocols = "tls_passthrough"
	UDPLogPluginProtocolsUDP            UDPLogPluginProtocols = "udp"
	UDPLogPluginProtocolsWs             UDPLogPluginProtocols = "ws"
	UDPLogPluginProtocolsWss            UDPLogPluginProtocols = "wss"
)

func (e UDPLogPluginProtocols) ToPointer() *UDPLogPluginProtocols {
	return &e
}
func (e *UDPLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = UDPLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UDPLogPluginProtocols: %v", v)
	}
}

// UDPLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type UDPLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *UDPLogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// UDPLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type UDPLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *UDPLogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// UDPLogPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type UDPLogPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                  `default:"true" json:"enabled"`
	ID           *string                `json:"id,omitempty"`
	InstanceName *string                `json:"instance_name,omitempty"`
	name         string                 `const:"udp-log" json:"name"`
	Ordering     *UDPLogPluginOrdering  `json:"ordering,omitempty"`
	Partials     []UDPLogPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64              `json:"updated_at,omitempty"`
	Config    *UDPLogPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *UDPLogPluginConsumer `json:"consumer"`
	// A set of strings representing protocols.
	Protocols []UDPLogPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *UDPLogPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *UDPLogPluginService `json:"service"`
}

func (u UDPLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UDPLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UDPLogPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UDPLogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UDPLogPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UDPLogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *UDPLogPlugin) GetName() string {
	return "udp-log"
}

func (o *UDPLogPlugin) GetOrdering() *UDPLogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *UDPLogPlugin) GetPartials() []UDPLogPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *UDPLogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UDPLogPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UDPLogPlugin) GetConfig() *UDPLogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *UDPLogPlugin) GetConsumer() *UDPLogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *UDPLogPlugin) GetProtocols() []UDPLogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *UDPLogPlugin) GetRoute() *UDPLogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *UDPLogPlugin) GetService() *UDPLogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
