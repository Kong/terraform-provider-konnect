// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateKeyAuthEncPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
	Anonymous *string `json:"anonymous,omitempty"`
	// An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request (i.e., the header, query string, or request body containing the key) before proxying it.
	HideCredentials *bool `json:"hide_credentials,omitempty"`
	// If enabled, the plugin reads the request body (if said request has one and its MIME type is supported) and tries to find the key in it. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
	KeyInBody *bool `json:"key_in_body,omitempty"`
	// If enabled (default), the plugin reads the request header and tries to find the key in it.
	KeyInHeader *bool `json:"key_in_header,omitempty"`
	// If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.
	KeyInQuery *bool `json:"key_in_query,omitempty"`
	// Describes an array of parameter names where the plugin will look for a key. The client must send the authentication key in one of those key names, and the plugin will try to read the credential from a header, request body, or query string parameter with the same name.  Key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.
	KeyNames []string `json:"key_names,omitempty"`
	// When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
	Realm *string `json:"realm,omitempty"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.
	RunOnPreflight *bool `json:"run_on_preflight,omitempty"`
}

func (o *CreateKeyAuthEncPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *CreateKeyAuthEncPluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *CreateKeyAuthEncPluginConfig) GetKeyInBody() *bool {
	if o == nil {
		return nil
	}
	return o.KeyInBody
}

func (o *CreateKeyAuthEncPluginConfig) GetKeyInHeader() *bool {
	if o == nil {
		return nil
	}
	return o.KeyInHeader
}

func (o *CreateKeyAuthEncPluginConfig) GetKeyInQuery() *bool {
	if o == nil {
		return nil
	}
	return o.KeyInQuery
}

func (o *CreateKeyAuthEncPluginConfig) GetKeyNames() []string {
	if o == nil {
		return nil
	}
	return o.KeyNames
}

func (o *CreateKeyAuthEncPluginConfig) GetRealm() *string {
	if o == nil {
		return nil
	}
	return o.Realm
}

func (o *CreateKeyAuthEncPluginConfig) GetRunOnPreflight() *bool {
	if o == nil {
		return nil
	}
	return o.RunOnPreflight
}

type CreateKeyAuthEncPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateKeyAuthEncPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateKeyAuthEncPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateKeyAuthEncPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateKeyAuthEncPluginOrdering struct {
	After  *CreateKeyAuthEncPluginAfter  `json:"after,omitempty"`
	Before *CreateKeyAuthEncPluginBefore `json:"before,omitempty"`
}

func (o *CreateKeyAuthEncPluginOrdering) GetAfter() *CreateKeyAuthEncPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateKeyAuthEncPluginOrdering) GetBefore() *CreateKeyAuthEncPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateKeyAuthEncPluginProtocols string

const (
	CreateKeyAuthEncPluginProtocolsGrpc           CreateKeyAuthEncPluginProtocols = "grpc"
	CreateKeyAuthEncPluginProtocolsGrpcs          CreateKeyAuthEncPluginProtocols = "grpcs"
	CreateKeyAuthEncPluginProtocolsHTTP           CreateKeyAuthEncPluginProtocols = "http"
	CreateKeyAuthEncPluginProtocolsHTTPS          CreateKeyAuthEncPluginProtocols = "https"
	CreateKeyAuthEncPluginProtocolsTCP            CreateKeyAuthEncPluginProtocols = "tcp"
	CreateKeyAuthEncPluginProtocolsTLS            CreateKeyAuthEncPluginProtocols = "tls"
	CreateKeyAuthEncPluginProtocolsTLSPassthrough CreateKeyAuthEncPluginProtocols = "tls_passthrough"
	CreateKeyAuthEncPluginProtocolsUDP            CreateKeyAuthEncPluginProtocols = "udp"
	CreateKeyAuthEncPluginProtocolsWs             CreateKeyAuthEncPluginProtocols = "ws"
	CreateKeyAuthEncPluginProtocolsWss            CreateKeyAuthEncPluginProtocols = "wss"
)

func (e CreateKeyAuthEncPluginProtocols) ToPointer() *CreateKeyAuthEncPluginProtocols {
	return &e
}
func (e *CreateKeyAuthEncPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateKeyAuthEncPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateKeyAuthEncPluginProtocols: %v", v)
	}
}

// CreateKeyAuthEncPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateKeyAuthEncPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKeyAuthEncPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateKeyAuthEncPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKeyAuthEncPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateKeyAuthEncPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateKeyAuthEncPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKeyAuthEncPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateKeyAuthEncPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateKeyAuthEncPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKeyAuthEncPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateKeyAuthEncPlugin struct {
	Config *CreateKeyAuthEncPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                           `json:"enabled,omitempty"`
	InstanceName *string                         `json:"instance_name,omitempty"`
	name         *string                         `const:"key-auth-enc" json:"name,omitempty"`
	Ordering     *CreateKeyAuthEncPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateKeyAuthEncPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateKeyAuthEncPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateKeyAuthEncPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateKeyAuthEncPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateKeyAuthEncPluginService `json:"service,omitempty"`
}

func (c CreateKeyAuthEncPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateKeyAuthEncPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateKeyAuthEncPlugin) GetConfig() *CreateKeyAuthEncPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateKeyAuthEncPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateKeyAuthEncPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateKeyAuthEncPlugin) GetName() *string {
	return types.String("key-auth-enc")
}

func (o *CreateKeyAuthEncPlugin) GetOrdering() *CreateKeyAuthEncPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateKeyAuthEncPlugin) GetProtocols() []CreateKeyAuthEncPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateKeyAuthEncPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateKeyAuthEncPlugin) GetConsumer() *CreateKeyAuthEncPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateKeyAuthEncPlugin) GetConsumerGroup() *CreateKeyAuthEncPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateKeyAuthEncPlugin) GetRoute() *CreateKeyAuthEncPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateKeyAuthEncPlugin) GetService() *CreateKeyAuthEncPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
