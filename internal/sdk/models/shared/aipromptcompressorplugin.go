// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AiPromptCompressorPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptCompressorPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptCompressorPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptCompressorPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptCompressorPluginOrdering struct {
	After  *AiPromptCompressorPluginAfter  `json:"after,omitempty"`
	Before *AiPromptCompressorPluginBefore `json:"before,omitempty"`
}

func (a *AiPromptCompressorPluginOrdering) GetAfter() *AiPromptCompressorPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiPromptCompressorPluginOrdering) GetBefore() *AiPromptCompressorPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiPromptCompressorPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiPromptCompressorPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptCompressorPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiPromptCompressorPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

type CompressionRanges struct {
	MaxTokens int64   `json:"max_tokens"`
	MinTokens int64   `json:"min_tokens"`
	Value     float64 `json:"value"`
}

func (c *CompressionRanges) GetMaxTokens() int64 {
	if c == nil {
		return 0
	}
	return c.MaxTokens
}

func (c *CompressionRanges) GetMinTokens() int64 {
	if c == nil {
		return 0
	}
	return c.MinTokens
}

func (c *CompressionRanges) GetValue() float64 {
	if c == nil {
		return 0.0
	}
	return c.Value
}

// CompressorType - What compression type to use to compress with
type CompressorType string

const (
	CompressorTypeRate        CompressorType = "rate"
	CompressorTypeTargetToken CompressorType = "target_token"
)

func (e CompressorType) ToPointer() *CompressorType {
	return &e
}
func (e *CompressorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rate":
		fallthrough
	case "target_token":
		*e = CompressorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompressorType: %v", v)
	}
}

type MessageType string

const (
	MessageTypeAssistant MessageType = "assistant"
	MessageTypeSystem    MessageType = "system"
	MessageTypeUser      MessageType = "user"
)

func (e MessageType) ToPointer() *MessageType {
	return &e
}
func (e *MessageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assistant":
		fallthrough
	case "system":
		fallthrough
	case "user":
		*e = MessageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageType: %v", v)
	}
}

type AiPromptCompressorPluginConfig struct {
	// What value to be used to compress with. The 'value' is interpreted as rate or target_token depending on compressor_type.
	CompressionRanges []CompressionRanges `json:"compression_ranges"`
	// What compression type to use to compress with
	CompressorType *CompressorType `default:"rate" json:"compressor_type"`
	// The url of the compressor
	CompressorURL *string `default:"http://localhost:8080" json:"compressor_url"`
	// The keepalive timeout for the established http connnection
	KeepaliveTimeout *float64 `default:"60000" json:"keepalive_timeout"`
	// Log the text data
	LogTextData *bool         `default:"false" json:"log_text_data"`
	MessageType []MessageType `json:"message_type,omitempty"`
	// Stop processing if an error occurs
	StopOnError *bool `default:"true" json:"stop_on_error"`
	// Connection timeout with the compressor
	Timeout *float64 `default:"10000" json:"timeout"`
}

func (a AiPromptCompressorPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptCompressorPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"compression_ranges"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptCompressorPluginConfig) GetCompressionRanges() []CompressionRanges {
	if a == nil {
		return []CompressionRanges{}
	}
	return a.CompressionRanges
}

func (a *AiPromptCompressorPluginConfig) GetCompressorType() *CompressorType {
	if a == nil {
		return nil
	}
	return a.CompressorType
}

func (a *AiPromptCompressorPluginConfig) GetCompressorURL() *string {
	if a == nil {
		return nil
	}
	return a.CompressorURL
}

func (a *AiPromptCompressorPluginConfig) GetKeepaliveTimeout() *float64 {
	if a == nil {
		return nil
	}
	return a.KeepaliveTimeout
}

func (a *AiPromptCompressorPluginConfig) GetLogTextData() *bool {
	if a == nil {
		return nil
	}
	return a.LogTextData
}

func (a *AiPromptCompressorPluginConfig) GetMessageType() []MessageType {
	if a == nil {
		return nil
	}
	return a.MessageType
}

func (a *AiPromptCompressorPluginConfig) GetStopOnError() *bool {
	if a == nil {
		return nil
	}
	return a.StopOnError
}

func (a *AiPromptCompressorPluginConfig) GetTimeout() *float64 {
	if a == nil {
		return nil
	}
	return a.Timeout
}

// AiPromptCompressorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiPromptCompressorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptCompressorPluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptCompressorPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiPromptCompressorPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptCompressorPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiPromptCompressorPluginProtocols string

const (
	AiPromptCompressorPluginProtocolsGrpc  AiPromptCompressorPluginProtocols = "grpc"
	AiPromptCompressorPluginProtocolsGrpcs AiPromptCompressorPluginProtocols = "grpcs"
	AiPromptCompressorPluginProtocolsHTTP  AiPromptCompressorPluginProtocols = "http"
	AiPromptCompressorPluginProtocolsHTTPS AiPromptCompressorPluginProtocols = "https"
)

func (e AiPromptCompressorPluginProtocols) ToPointer() *AiPromptCompressorPluginProtocols {
	return &e
}
func (e *AiPromptCompressorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiPromptCompressorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiPromptCompressorPluginProtocols: %v", v)
	}
}

// AiPromptCompressorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiPromptCompressorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptCompressorPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptCompressorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiPromptCompressorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptCompressorPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptCompressorPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiPromptCompressorPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                           `default:"null" json:"instance_name"`
	name         string                            `const:"ai-prompt-compressor" json:"name"`
	Ordering     *AiPromptCompressorPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiPromptCompressorPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                         `json:"updated_at,omitempty"`
	Config    AiPromptCompressorPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiPromptCompressorPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiPromptCompressorPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiPromptCompressorPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiPromptCompressorPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiPromptCompressorPluginService `json:"service"`
}

func (a AiPromptCompressorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptCompressorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "ordering", "partials", "tags", "config", "consumer", "consumer_group", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptCompressorPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiPromptCompressorPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiPromptCompressorPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptCompressorPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiPromptCompressorPlugin) GetName() string {
	return "ai-prompt-compressor"
}

func (a *AiPromptCompressorPlugin) GetOrdering() *AiPromptCompressorPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiPromptCompressorPlugin) GetPartials() []AiPromptCompressorPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiPromptCompressorPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiPromptCompressorPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiPromptCompressorPlugin) GetConfig() AiPromptCompressorPluginConfig {
	if a == nil {
		return AiPromptCompressorPluginConfig{}
	}
	return a.Config
}

func (a *AiPromptCompressorPlugin) GetConsumer() *AiPromptCompressorPluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiPromptCompressorPlugin) GetConsumerGroup() *AiPromptCompressorPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiPromptCompressorPlugin) GetProtocols() []AiPromptCompressorPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiPromptCompressorPlugin) GetRoute() *AiPromptCompressorPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiPromptCompressorPlugin) GetService() *AiPromptCompressorPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
