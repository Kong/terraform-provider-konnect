// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type KeyAuthPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (k *KeyAuthPluginAfter) GetAccess() []string {
	if k == nil {
		return nil
	}
	return k.Access
}

type KeyAuthPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (k *KeyAuthPluginBefore) GetAccess() []string {
	if k == nil {
		return nil
	}
	return k.Access
}

type KeyAuthPluginOrdering struct {
	After  *KeyAuthPluginAfter  `json:"after,omitempty"`
	Before *KeyAuthPluginBefore `json:"before,omitempty"`
}

func (k *KeyAuthPluginOrdering) GetAfter() *KeyAuthPluginAfter {
	if k == nil {
		return nil
	}
	return k.After
}

func (k *KeyAuthPluginOrdering) GetBefore() *KeyAuthPluginBefore {
	if k == nil {
		return nil
	}
	return k.Before
}

type KeyAuthPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (k *KeyAuthPluginPartials) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KeyAuthPluginPartials) GetName() *string {
	if k == nil {
		return nil
	}
	return k.Name
}

func (k *KeyAuthPluginPartials) GetPath() *string {
	if k == nil {
		return nil
	}
	return k.Path
}

type Scope string

const (
	ScopeCp    Scope = "cp"
	ScopeRealm Scope = "realm"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cp":
		fallthrough
	case "realm":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

type IdentityRealms struct {
	// A string representing a UUID (universally unique identifier).
	ID     *string `json:"id,omitempty"`
	Region *string `default:"null" json:"region"`
	Scope  *Scope  `json:"scope,omitempty"`
}

func (i IdentityRealms) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IdentityRealms) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (i *IdentityRealms) GetID() *string {
	if i == nil {
		return nil
	}
	return i.ID
}

func (i *IdentityRealms) GetRegion() *string {
	if i == nil {
		return nil
	}
	return i.Region
}

func (i *IdentityRealms) GetScope() *Scope {
	if i == nil {
		return nil
	}
	return i.Scope
}

type KeyAuthPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`.
	Anonymous *string `default:"null" json:"anonymous"`
	// An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request.
	HideCredentials *bool `default:"false" json:"hide_credentials"`
	// A configuration of Konnect Identity Realms that indicate where to source a consumer from.
	IdentityRealms []IdentityRealms `json:"identity_realms,omitempty"`
	// If enabled, the plugin reads the request body. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
	KeyInBody *bool `default:"false" json:"key_in_body"`
	// If enabled (default), the plugin reads the request header and tries to find the key in it.
	KeyInHeader *bool `default:"true" json:"key_in_header"`
	// If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.
	KeyInQuery *bool `default:"true" json:"key_in_query"`
	// Describes an array of parameter names where the plugin will look for a key. The key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.
	KeyNames []string `json:"key_names,omitempty"`
	// When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
	Realm *string `default:"null" json:"realm"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.
	RunOnPreflight *bool `default:"true" json:"run_on_preflight"`
}

func (k KeyAuthPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyAuthPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *KeyAuthPluginConfig) GetAnonymous() *string {
	if k == nil {
		return nil
	}
	return k.Anonymous
}

func (k *KeyAuthPluginConfig) GetHideCredentials() *bool {
	if k == nil {
		return nil
	}
	return k.HideCredentials
}

func (k *KeyAuthPluginConfig) GetIdentityRealms() []IdentityRealms {
	if k == nil {
		return nil
	}
	return k.IdentityRealms
}

func (k *KeyAuthPluginConfig) GetKeyInBody() *bool {
	if k == nil {
		return nil
	}
	return k.KeyInBody
}

func (k *KeyAuthPluginConfig) GetKeyInHeader() *bool {
	if k == nil {
		return nil
	}
	return k.KeyInHeader
}

func (k *KeyAuthPluginConfig) GetKeyInQuery() *bool {
	if k == nil {
		return nil
	}
	return k.KeyInQuery
}

func (k *KeyAuthPluginConfig) GetKeyNames() []string {
	if k == nil {
		return nil
	}
	return k.KeyNames
}

func (k *KeyAuthPluginConfig) GetRealm() *string {
	if k == nil {
		return nil
	}
	return k.Realm
}

func (k *KeyAuthPluginConfig) GetRunOnPreflight() *bool {
	if k == nil {
		return nil
	}
	return k.RunOnPreflight
}

type KeyAuthPluginProtocols string

const (
	KeyAuthPluginProtocolsGrpc  KeyAuthPluginProtocols = "grpc"
	KeyAuthPluginProtocolsGrpcs KeyAuthPluginProtocols = "grpcs"
	KeyAuthPluginProtocolsHTTP  KeyAuthPluginProtocols = "http"
	KeyAuthPluginProtocolsHTTPS KeyAuthPluginProtocols = "https"
	KeyAuthPluginProtocolsWs    KeyAuthPluginProtocols = "ws"
	KeyAuthPluginProtocolsWss   KeyAuthPluginProtocols = "wss"
)

func (e KeyAuthPluginProtocols) ToPointer() *KeyAuthPluginProtocols {
	return &e
}
func (e *KeyAuthPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = KeyAuthPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeyAuthPluginProtocols: %v", v)
	}
}

// KeyAuthPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type KeyAuthPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (k *KeyAuthPluginRoute) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

// KeyAuthPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type KeyAuthPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (k *KeyAuthPluginService) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

// KeyAuthPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type KeyAuthPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                `default:"null" json:"instance_name"`
	name         string                 `const:"key-auth" json:"name"`
	Ordering     *KeyAuthPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []KeyAuthPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64               `json:"updated_at,omitempty"`
	Config    *KeyAuthPluginConfig `json:"config"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []KeyAuthPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *KeyAuthPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *KeyAuthPluginService `json:"service"`
}

func (k KeyAuthPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyAuthPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (k *KeyAuthPlugin) GetCreatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.CreatedAt
}

func (k *KeyAuthPlugin) GetEnabled() *bool {
	if k == nil {
		return nil
	}
	return k.Enabled
}

func (k *KeyAuthPlugin) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KeyAuthPlugin) GetInstanceName() *string {
	if k == nil {
		return nil
	}
	return k.InstanceName
}

func (k *KeyAuthPlugin) GetName() string {
	return "key-auth"
}

func (k *KeyAuthPlugin) GetOrdering() *KeyAuthPluginOrdering {
	if k == nil {
		return nil
	}
	return k.Ordering
}

func (k *KeyAuthPlugin) GetPartials() []KeyAuthPluginPartials {
	if k == nil {
		return nil
	}
	return k.Partials
}

func (k *KeyAuthPlugin) GetTags() []string {
	if k == nil {
		return nil
	}
	return k.Tags
}

func (k *KeyAuthPlugin) GetUpdatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.UpdatedAt
}

func (k *KeyAuthPlugin) GetConfig() *KeyAuthPluginConfig {
	if k == nil {
		return nil
	}
	return k.Config
}

func (k *KeyAuthPlugin) GetProtocols() []KeyAuthPluginProtocols {
	if k == nil {
		return nil
	}
	return k.Protocols
}

func (k *KeyAuthPlugin) GetRoute() *KeyAuthPluginRoute {
	if k == nil {
		return nil
	}
	return k.Route
}

func (k *KeyAuthPlugin) GetService() *KeyAuthPluginService {
	if k == nil {
		return nil
	}
	return k.Service
}
