// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type SyslogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (s *SyslogPluginAfter) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SyslogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (s *SyslogPluginBefore) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SyslogPluginOrdering struct {
	After  *SyslogPluginAfter  `json:"after,omitempty"`
	Before *SyslogPluginBefore `json:"before,omitempty"`
}

func (s *SyslogPluginOrdering) GetAfter() *SyslogPluginAfter {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *SyslogPluginOrdering) GetBefore() *SyslogPluginBefore {
	if s == nil {
		return nil
	}
	return s.Before
}

type SyslogPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (s *SyslogPluginPartials) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SyslogPluginPartials) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SyslogPluginPartials) GetPath() *string {
	if s == nil {
		return nil
	}
	return s.Path
}

type SyslogPluginClientErrorsSeverity string

const (
	SyslogPluginClientErrorsSeverityAlert   SyslogPluginClientErrorsSeverity = "alert"
	SyslogPluginClientErrorsSeverityCrit    SyslogPluginClientErrorsSeverity = "crit"
	SyslogPluginClientErrorsSeverityDebug   SyslogPluginClientErrorsSeverity = "debug"
	SyslogPluginClientErrorsSeverityEmerg   SyslogPluginClientErrorsSeverity = "emerg"
	SyslogPluginClientErrorsSeverityErr     SyslogPluginClientErrorsSeverity = "err"
	SyslogPluginClientErrorsSeverityInfo    SyslogPluginClientErrorsSeverity = "info"
	SyslogPluginClientErrorsSeverityNotice  SyslogPluginClientErrorsSeverity = "notice"
	SyslogPluginClientErrorsSeverityWarning SyslogPluginClientErrorsSeverity = "warning"
)

func (e SyslogPluginClientErrorsSeverity) ToPointer() *SyslogPluginClientErrorsSeverity {
	return &e
}
func (e *SyslogPluginClientErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = SyslogPluginClientErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginClientErrorsSeverity: %v", v)
	}
}

// Facility - The facility is used by the operating system to decide how to handle each log message.
type Facility string

const (
	FacilityAuth     Facility = "auth"
	FacilityAuthpriv Facility = "authpriv"
	FacilityCron     Facility = "cron"
	FacilityDaemon   Facility = "daemon"
	FacilityFtp      Facility = "ftp"
	FacilityKern     Facility = "kern"
	FacilityLocal0   Facility = "local0"
	FacilityLocal1   Facility = "local1"
	FacilityLocal2   Facility = "local2"
	FacilityLocal3   Facility = "local3"
	FacilityLocal4   Facility = "local4"
	FacilityLocal5   Facility = "local5"
	FacilityLocal6   Facility = "local6"
	FacilityLocal7   Facility = "local7"
	FacilityLpr      Facility = "lpr"
	FacilityMail     Facility = "mail"
	FacilityNews     Facility = "news"
	FacilitySyslog   Facility = "syslog"
	FacilityUser     Facility = "user"
	FacilityUucp     Facility = "uucp"
)

func (e Facility) ToPointer() *Facility {
	return &e
}
func (e *Facility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auth":
		fallthrough
	case "authpriv":
		fallthrough
	case "cron":
		fallthrough
	case "daemon":
		fallthrough
	case "ftp":
		fallthrough
	case "kern":
		fallthrough
	case "local0":
		fallthrough
	case "local1":
		fallthrough
	case "local2":
		fallthrough
	case "local3":
		fallthrough
	case "local4":
		fallthrough
	case "local5":
		fallthrough
	case "local6":
		fallthrough
	case "local7":
		fallthrough
	case "lpr":
		fallthrough
	case "mail":
		fallthrough
	case "news":
		fallthrough
	case "syslog":
		fallthrough
	case "user":
		fallthrough
	case "uucp":
		*e = Facility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Facility: %v", v)
	}
}

type SyslogPluginLogLevel string

const (
	SyslogPluginLogLevelAlert   SyslogPluginLogLevel = "alert"
	SyslogPluginLogLevelCrit    SyslogPluginLogLevel = "crit"
	SyslogPluginLogLevelDebug   SyslogPluginLogLevel = "debug"
	SyslogPluginLogLevelEmerg   SyslogPluginLogLevel = "emerg"
	SyslogPluginLogLevelErr     SyslogPluginLogLevel = "err"
	SyslogPluginLogLevelInfo    SyslogPluginLogLevel = "info"
	SyslogPluginLogLevelNotice  SyslogPluginLogLevel = "notice"
	SyslogPluginLogLevelWarning SyslogPluginLogLevel = "warning"
)

func (e SyslogPluginLogLevel) ToPointer() *SyslogPluginLogLevel {
	return &e
}
func (e *SyslogPluginLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = SyslogPluginLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginLogLevel: %v", v)
	}
}

type SyslogPluginServerErrorsSeverity string

const (
	SyslogPluginServerErrorsSeverityAlert   SyslogPluginServerErrorsSeverity = "alert"
	SyslogPluginServerErrorsSeverityCrit    SyslogPluginServerErrorsSeverity = "crit"
	SyslogPluginServerErrorsSeverityDebug   SyslogPluginServerErrorsSeverity = "debug"
	SyslogPluginServerErrorsSeverityEmerg   SyslogPluginServerErrorsSeverity = "emerg"
	SyslogPluginServerErrorsSeverityErr     SyslogPluginServerErrorsSeverity = "err"
	SyslogPluginServerErrorsSeverityInfo    SyslogPluginServerErrorsSeverity = "info"
	SyslogPluginServerErrorsSeverityNotice  SyslogPluginServerErrorsSeverity = "notice"
	SyslogPluginServerErrorsSeverityWarning SyslogPluginServerErrorsSeverity = "warning"
)

func (e SyslogPluginServerErrorsSeverity) ToPointer() *SyslogPluginServerErrorsSeverity {
	return &e
}
func (e *SyslogPluginServerErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = SyslogPluginServerErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginServerErrorsSeverity: %v", v)
	}
}

type SyslogPluginSuccessfulSeverity string

const (
	SyslogPluginSuccessfulSeverityAlert   SyslogPluginSuccessfulSeverity = "alert"
	SyslogPluginSuccessfulSeverityCrit    SyslogPluginSuccessfulSeverity = "crit"
	SyslogPluginSuccessfulSeverityDebug   SyslogPluginSuccessfulSeverity = "debug"
	SyslogPluginSuccessfulSeverityEmerg   SyslogPluginSuccessfulSeverity = "emerg"
	SyslogPluginSuccessfulSeverityErr     SyslogPluginSuccessfulSeverity = "err"
	SyslogPluginSuccessfulSeverityInfo    SyslogPluginSuccessfulSeverity = "info"
	SyslogPluginSuccessfulSeverityNotice  SyslogPluginSuccessfulSeverity = "notice"
	SyslogPluginSuccessfulSeverityWarning SyslogPluginSuccessfulSeverity = "warning"
)

func (e SyslogPluginSuccessfulSeverity) ToPointer() *SyslogPluginSuccessfulSeverity {
	return &e
}
func (e *SyslogPluginSuccessfulSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alert":
		fallthrough
	case "crit":
		fallthrough
	case "debug":
		fallthrough
	case "emerg":
		fallthrough
	case "err":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		*e = SyslogPluginSuccessfulSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginSuccessfulSeverity: %v", v)
	}
}

type SyslogPluginConfig struct {
	ClientErrorsSeverity *SyslogPluginClientErrorsSeverity `default:"info" json:"client_errors_severity"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]string `json:"custom_fields_by_lua,omitempty"`
	// The facility is used by the operating system to decide how to handle each log message.
	Facility             *Facility                         `default:"user" json:"facility"`
	LogLevel             *SyslogPluginLogLevel             `default:"info" json:"log_level"`
	ServerErrorsSeverity *SyslogPluginServerErrorsSeverity `default:"info" json:"server_errors_severity"`
	SuccessfulSeverity   *SyslogPluginSuccessfulSeverity   `default:"info" json:"successful_severity"`
}

func (s SyslogPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SyslogPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SyslogPluginConfig) GetClientErrorsSeverity() *SyslogPluginClientErrorsSeverity {
	if s == nil {
		return nil
	}
	return s.ClientErrorsSeverity
}

func (s *SyslogPluginConfig) GetCustomFieldsByLua() map[string]string {
	if s == nil {
		return nil
	}
	return s.CustomFieldsByLua
}

func (s *SyslogPluginConfig) GetFacility() *Facility {
	if s == nil {
		return nil
	}
	return s.Facility
}

func (s *SyslogPluginConfig) GetLogLevel() *SyslogPluginLogLevel {
	if s == nil {
		return nil
	}
	return s.LogLevel
}

func (s *SyslogPluginConfig) GetServerErrorsSeverity() *SyslogPluginServerErrorsSeverity {
	if s == nil {
		return nil
	}
	return s.ServerErrorsSeverity
}

func (s *SyslogPluginConfig) GetSuccessfulSeverity() *SyslogPluginSuccessfulSeverity {
	if s == nil {
		return nil
	}
	return s.SuccessfulSeverity
}

// SyslogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type SyslogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (s *SyslogPluginConsumer) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SyslogPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type SyslogPluginProtocols string

const (
	SyslogPluginProtocolsGrpc           SyslogPluginProtocols = "grpc"
	SyslogPluginProtocolsGrpcs          SyslogPluginProtocols = "grpcs"
	SyslogPluginProtocolsHTTP           SyslogPluginProtocols = "http"
	SyslogPluginProtocolsHTTPS          SyslogPluginProtocols = "https"
	SyslogPluginProtocolsTCP            SyslogPluginProtocols = "tcp"
	SyslogPluginProtocolsTLS            SyslogPluginProtocols = "tls"
	SyslogPluginProtocolsTLSPassthrough SyslogPluginProtocols = "tls_passthrough"
	SyslogPluginProtocolsUDP            SyslogPluginProtocols = "udp"
	SyslogPluginProtocolsWs             SyslogPluginProtocols = "ws"
	SyslogPluginProtocolsWss            SyslogPluginProtocols = "wss"
)

func (e SyslogPluginProtocols) ToPointer() *SyslogPluginProtocols {
	return &e
}
func (e *SyslogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = SyslogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginProtocols: %v", v)
	}
}

// SyslogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type SyslogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (s *SyslogPluginRoute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SyslogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SyslogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (s *SyslogPluginService) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SyslogPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SyslogPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string               `default:"null" json:"instance_name"`
	name         string                `const:"syslog" json:"name"`
	Ordering     *SyslogPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []SyslogPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64              `json:"updated_at,omitempty"`
	Config    *SyslogPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *SyslogPluginConsumer `json:"consumer"`
	// A set of strings representing protocols.
	Protocols []SyslogPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *SyslogPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SyslogPluginService `json:"service"`
}

func (s SyslogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SyslogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (s *SyslogPlugin) GetCreatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SyslogPlugin) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *SyslogPlugin) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SyslogPlugin) GetInstanceName() *string {
	if s == nil {
		return nil
	}
	return s.InstanceName
}

func (s *SyslogPlugin) GetName() string {
	return "syslog"
}

func (s *SyslogPlugin) GetOrdering() *SyslogPluginOrdering {
	if s == nil {
		return nil
	}
	return s.Ordering
}

func (s *SyslogPlugin) GetPartials() []SyslogPluginPartials {
	if s == nil {
		return nil
	}
	return s.Partials
}

func (s *SyslogPlugin) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *SyslogPlugin) GetUpdatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SyslogPlugin) GetConfig() *SyslogPluginConfig {
	if s == nil {
		return nil
	}
	return s.Config
}

func (s *SyslogPlugin) GetConsumer() *SyslogPluginConsumer {
	if s == nil {
		return nil
	}
	return s.Consumer
}

func (s *SyslogPlugin) GetProtocols() []SyslogPluginProtocols {
	if s == nil {
		return nil
	}
	return s.Protocols
}

func (s *SyslogPlugin) GetRoute() *SyslogPluginRoute {
	if s == nil {
		return nil
	}
	return s.Route
}

func (s *SyslogPlugin) GetService() *SyslogPluginService {
	if s == nil {
		return nil
	}
	return s.Service
}
