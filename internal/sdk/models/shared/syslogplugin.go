// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type SyslogPluginClientErrorsSeverity string

const (
	SyslogPluginClientErrorsSeverityDebug   SyslogPluginClientErrorsSeverity = "debug"
	SyslogPluginClientErrorsSeverityInfo    SyslogPluginClientErrorsSeverity = "info"
	SyslogPluginClientErrorsSeverityNotice  SyslogPluginClientErrorsSeverity = "notice"
	SyslogPluginClientErrorsSeverityWarning SyslogPluginClientErrorsSeverity = "warning"
	SyslogPluginClientErrorsSeverityErr     SyslogPluginClientErrorsSeverity = "err"
	SyslogPluginClientErrorsSeverityCrit    SyslogPluginClientErrorsSeverity = "crit"
	SyslogPluginClientErrorsSeverityAlert   SyslogPluginClientErrorsSeverity = "alert"
	SyslogPluginClientErrorsSeverityEmerg   SyslogPluginClientErrorsSeverity = "emerg"
)

func (e SyslogPluginClientErrorsSeverity) ToPointer() *SyslogPluginClientErrorsSeverity {
	return &e
}
func (e *SyslogPluginClientErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = SyslogPluginClientErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginClientErrorsSeverity: %v", v)
	}
}

// Facility - The facility is used by the operating system to decide how to handle each log message.
type Facility string

const (
	FacilityAuth     Facility = "auth"
	FacilityAuthpriv Facility = "authpriv"
	FacilityCron     Facility = "cron"
	FacilityDaemon   Facility = "daemon"
	FacilityFtp      Facility = "ftp"
	FacilityKern     Facility = "kern"
	FacilityLpr      Facility = "lpr"
	FacilityMail     Facility = "mail"
	FacilityNews     Facility = "news"
	FacilitySyslog   Facility = "syslog"
	FacilityUser     Facility = "user"
	FacilityUucp     Facility = "uucp"
	FacilityLocal0   Facility = "local0"
	FacilityLocal1   Facility = "local1"
	FacilityLocal2   Facility = "local2"
	FacilityLocal3   Facility = "local3"
	FacilityLocal4   Facility = "local4"
	FacilityLocal5   Facility = "local5"
	FacilityLocal6   Facility = "local6"
	FacilityLocal7   Facility = "local7"
)

func (e Facility) ToPointer() *Facility {
	return &e
}
func (e *Facility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auth":
		fallthrough
	case "authpriv":
		fallthrough
	case "cron":
		fallthrough
	case "daemon":
		fallthrough
	case "ftp":
		fallthrough
	case "kern":
		fallthrough
	case "lpr":
		fallthrough
	case "mail":
		fallthrough
	case "news":
		fallthrough
	case "syslog":
		fallthrough
	case "user":
		fallthrough
	case "uucp":
		fallthrough
	case "local0":
		fallthrough
	case "local1":
		fallthrough
	case "local2":
		fallthrough
	case "local3":
		fallthrough
	case "local4":
		fallthrough
	case "local5":
		fallthrough
	case "local6":
		fallthrough
	case "local7":
		*e = Facility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Facility: %v", v)
	}
}

type SyslogPluginLogLevel string

const (
	SyslogPluginLogLevelDebug   SyslogPluginLogLevel = "debug"
	SyslogPluginLogLevelInfo    SyslogPluginLogLevel = "info"
	SyslogPluginLogLevelNotice  SyslogPluginLogLevel = "notice"
	SyslogPluginLogLevelWarning SyslogPluginLogLevel = "warning"
	SyslogPluginLogLevelErr     SyslogPluginLogLevel = "err"
	SyslogPluginLogLevelCrit    SyslogPluginLogLevel = "crit"
	SyslogPluginLogLevelAlert   SyslogPluginLogLevel = "alert"
	SyslogPluginLogLevelEmerg   SyslogPluginLogLevel = "emerg"
)

func (e SyslogPluginLogLevel) ToPointer() *SyslogPluginLogLevel {
	return &e
}
func (e *SyslogPluginLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = SyslogPluginLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginLogLevel: %v", v)
	}
}

type SyslogPluginServerErrorsSeverity string

const (
	SyslogPluginServerErrorsSeverityDebug   SyslogPluginServerErrorsSeverity = "debug"
	SyslogPluginServerErrorsSeverityInfo    SyslogPluginServerErrorsSeverity = "info"
	SyslogPluginServerErrorsSeverityNotice  SyslogPluginServerErrorsSeverity = "notice"
	SyslogPluginServerErrorsSeverityWarning SyslogPluginServerErrorsSeverity = "warning"
	SyslogPluginServerErrorsSeverityErr     SyslogPluginServerErrorsSeverity = "err"
	SyslogPluginServerErrorsSeverityCrit    SyslogPluginServerErrorsSeverity = "crit"
	SyslogPluginServerErrorsSeverityAlert   SyslogPluginServerErrorsSeverity = "alert"
	SyslogPluginServerErrorsSeverityEmerg   SyslogPluginServerErrorsSeverity = "emerg"
)

func (e SyslogPluginServerErrorsSeverity) ToPointer() *SyslogPluginServerErrorsSeverity {
	return &e
}
func (e *SyslogPluginServerErrorsSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = SyslogPluginServerErrorsSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginServerErrorsSeverity: %v", v)
	}
}

type SyslogPluginSuccessfulSeverity string

const (
	SyslogPluginSuccessfulSeverityDebug   SyslogPluginSuccessfulSeverity = "debug"
	SyslogPluginSuccessfulSeverityInfo    SyslogPluginSuccessfulSeverity = "info"
	SyslogPluginSuccessfulSeverityNotice  SyslogPluginSuccessfulSeverity = "notice"
	SyslogPluginSuccessfulSeverityWarning SyslogPluginSuccessfulSeverity = "warning"
	SyslogPluginSuccessfulSeverityErr     SyslogPluginSuccessfulSeverity = "err"
	SyslogPluginSuccessfulSeverityCrit    SyslogPluginSuccessfulSeverity = "crit"
	SyslogPluginSuccessfulSeverityAlert   SyslogPluginSuccessfulSeverity = "alert"
	SyslogPluginSuccessfulSeverityEmerg   SyslogPluginSuccessfulSeverity = "emerg"
)

func (e SyslogPluginSuccessfulSeverity) ToPointer() *SyslogPluginSuccessfulSeverity {
	return &e
}
func (e *SyslogPluginSuccessfulSeverity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "notice":
		fallthrough
	case "warning":
		fallthrough
	case "err":
		fallthrough
	case "crit":
		fallthrough
	case "alert":
		fallthrough
	case "emerg":
		*e = SyslogPluginSuccessfulSeverity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginSuccessfulSeverity: %v", v)
	}
}

type SyslogPluginConfig struct {
	ClientErrorsSeverity *SyslogPluginClientErrorsSeverity `json:"client_errors_severity,omitempty"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// The facility is used by the operating system to decide how to handle each log message.
	Facility             *Facility                         `json:"facility,omitempty"`
	LogLevel             *SyslogPluginLogLevel             `json:"log_level,omitempty"`
	ServerErrorsSeverity *SyslogPluginServerErrorsSeverity `json:"server_errors_severity,omitempty"`
	SuccessfulSeverity   *SyslogPluginSuccessfulSeverity   `json:"successful_severity,omitempty"`
}

func (o *SyslogPluginConfig) GetClientErrorsSeverity() *SyslogPluginClientErrorsSeverity {
	if o == nil {
		return nil
	}
	return o.ClientErrorsSeverity
}

func (o *SyslogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *SyslogPluginConfig) GetFacility() *Facility {
	if o == nil {
		return nil
	}
	return o.Facility
}

func (o *SyslogPluginConfig) GetLogLevel() *SyslogPluginLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *SyslogPluginConfig) GetServerErrorsSeverity() *SyslogPluginServerErrorsSeverity {
	if o == nil {
		return nil
	}
	return o.ServerErrorsSeverity
}

func (o *SyslogPluginConfig) GetSuccessfulSeverity() *SyslogPluginSuccessfulSeverity {
	if o == nil {
		return nil
	}
	return o.SuccessfulSeverity
}

type SyslogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *SyslogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type SyslogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *SyslogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type SyslogPluginOrdering struct {
	After  *SyslogPluginAfter  `json:"after,omitempty"`
	Before *SyslogPluginBefore `json:"before,omitempty"`
}

func (o *SyslogPluginOrdering) GetAfter() *SyslogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *SyslogPluginOrdering) GetBefore() *SyslogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type SyslogPluginProtocols string

const (
	SyslogPluginProtocolsGrpc           SyslogPluginProtocols = "grpc"
	SyslogPluginProtocolsGrpcs          SyslogPluginProtocols = "grpcs"
	SyslogPluginProtocolsHTTP           SyslogPluginProtocols = "http"
	SyslogPluginProtocolsHTTPS          SyslogPluginProtocols = "https"
	SyslogPluginProtocolsTCP            SyslogPluginProtocols = "tcp"
	SyslogPluginProtocolsTLS            SyslogPluginProtocols = "tls"
	SyslogPluginProtocolsTLSPassthrough SyslogPluginProtocols = "tls_passthrough"
	SyslogPluginProtocolsUDP            SyslogPluginProtocols = "udp"
	SyslogPluginProtocolsWs             SyslogPluginProtocols = "ws"
	SyslogPluginProtocolsWss            SyslogPluginProtocols = "wss"
)

func (e SyslogPluginProtocols) ToPointer() *SyslogPluginProtocols {
	return &e
}
func (e *SyslogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = SyslogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyslogPluginProtocols: %v", v)
	}
}

// SyslogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type SyslogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *SyslogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type SyslogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *SyslogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// SyslogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type SyslogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *SyslogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// SyslogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SyslogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *SyslogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type SyslogPlugin struct {
	Config *SyslogPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                 `json:"enabled,omitempty"`
	ID           *string               `json:"id,omitempty"`
	InstanceName *string               `json:"instance_name,omitempty"`
	name         *string               `const:"syslog" json:"name,omitempty"`
	Ordering     *SyslogPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []SyslogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *SyslogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *SyslogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *SyslogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SyslogPluginService `json:"service,omitempty"`
}

func (s SyslogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SyslogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SyslogPlugin) GetConfig() *SyslogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *SyslogPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SyslogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SyslogPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SyslogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *SyslogPlugin) GetName() *string {
	return types.String("syslog")
}

func (o *SyslogPlugin) GetOrdering() *SyslogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *SyslogPlugin) GetProtocols() []SyslogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *SyslogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SyslogPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *SyslogPlugin) GetConsumer() *SyslogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *SyslogPlugin) GetConsumerGroup() *SyslogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *SyslogPlugin) GetRoute() *SyslogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *SyslogPlugin) GetService() *SyslogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
