// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateCorrelationIDPluginGenerator - The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See [Generators](#generators).
type CreateCorrelationIDPluginGenerator string

const (
	CreateCorrelationIDPluginGeneratorUUID              CreateCorrelationIDPluginGenerator = "uuid"
	CreateCorrelationIDPluginGeneratorUUIDNumberCounter CreateCorrelationIDPluginGenerator = "uuid#counter"
	CreateCorrelationIDPluginGeneratorTracker           CreateCorrelationIDPluginGenerator = "tracker"
)

func (e CreateCorrelationIDPluginGenerator) ToPointer() *CreateCorrelationIDPluginGenerator {
	return &e
}
func (e *CreateCorrelationIDPluginGenerator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "uuid":
		fallthrough
	case "uuid#counter":
		fallthrough
	case "tracker":
		*e = CreateCorrelationIDPluginGenerator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCorrelationIDPluginGenerator: %v", v)
	}
}

type CreateCorrelationIDPluginConfig struct {
	// Whether to echo the header back to downstream (the client).
	EchoDownstream *bool `json:"echo_downstream,omitempty"`
	// The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See [Generators](#generators).
	Generator *CreateCorrelationIDPluginGenerator `json:"generator,omitempty"`
	// The HTTP header name to use for the correlation ID.
	HeaderName *string `json:"header_name,omitempty"`
}

func (o *CreateCorrelationIDPluginConfig) GetEchoDownstream() *bool {
	if o == nil {
		return nil
	}
	return o.EchoDownstream
}

func (o *CreateCorrelationIDPluginConfig) GetGenerator() *CreateCorrelationIDPluginGenerator {
	if o == nil {
		return nil
	}
	return o.Generator
}

func (o *CreateCorrelationIDPluginConfig) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

type CreateCorrelationIDPluginProtocols string

const (
	CreateCorrelationIDPluginProtocolsGrpc           CreateCorrelationIDPluginProtocols = "grpc"
	CreateCorrelationIDPluginProtocolsGrpcs          CreateCorrelationIDPluginProtocols = "grpcs"
	CreateCorrelationIDPluginProtocolsHTTP           CreateCorrelationIDPluginProtocols = "http"
	CreateCorrelationIDPluginProtocolsHTTPS          CreateCorrelationIDPluginProtocols = "https"
	CreateCorrelationIDPluginProtocolsTCP            CreateCorrelationIDPluginProtocols = "tcp"
	CreateCorrelationIDPluginProtocolsTLS            CreateCorrelationIDPluginProtocols = "tls"
	CreateCorrelationIDPluginProtocolsTLSPassthrough CreateCorrelationIDPluginProtocols = "tls_passthrough"
	CreateCorrelationIDPluginProtocolsUDP            CreateCorrelationIDPluginProtocols = "udp"
	CreateCorrelationIDPluginProtocolsWs             CreateCorrelationIDPluginProtocols = "ws"
	CreateCorrelationIDPluginProtocolsWss            CreateCorrelationIDPluginProtocols = "wss"
)

func (e CreateCorrelationIDPluginProtocols) ToPointer() *CreateCorrelationIDPluginProtocols {
	return &e
}
func (e *CreateCorrelationIDPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateCorrelationIDPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCorrelationIDPluginProtocols: %v", v)
	}
}

// CreateCorrelationIDPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateCorrelationIDPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorrelationIDPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateCorrelationIDPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorrelationIDPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateCorrelationIDPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateCorrelationIDPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorrelationIDPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateCorrelationIDPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateCorrelationIDPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorrelationIDPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateCorrelationIDPlugin struct {
	Config *CreateCorrelationIDPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"correlation-id" json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateCorrelationIDPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateCorrelationIDPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateCorrelationIDPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateCorrelationIDPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateCorrelationIDPluginService `json:"service,omitempty"`
}

func (c CreateCorrelationIDPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateCorrelationIDPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateCorrelationIDPlugin) GetConfig() *CreateCorrelationIDPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateCorrelationIDPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateCorrelationIDPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateCorrelationIDPlugin) GetName() *string {
	return types.String("correlation-id")
}

func (o *CreateCorrelationIDPlugin) GetProtocols() []CreateCorrelationIDPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateCorrelationIDPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateCorrelationIDPlugin) GetConsumer() *CreateCorrelationIDPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateCorrelationIDPlugin) GetConsumerGroup() *CreateCorrelationIDPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateCorrelationIDPlugin) GetRoute() *CreateCorrelationIDPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateCorrelationIDPlugin) GetService() *CreateCorrelationIDPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
