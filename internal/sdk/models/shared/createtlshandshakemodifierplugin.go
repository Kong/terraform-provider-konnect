// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateTLSHandshakeModifierPluginTLSClientCertificate - TLS Client Certificate
type CreateTLSHandshakeModifierPluginTLSClientCertificate string

const (
	CreateTLSHandshakeModifierPluginTLSClientCertificateRequest CreateTLSHandshakeModifierPluginTLSClientCertificate = "REQUEST"
)

func (e CreateTLSHandshakeModifierPluginTLSClientCertificate) ToPointer() *CreateTLSHandshakeModifierPluginTLSClientCertificate {
	return &e
}
func (e *CreateTLSHandshakeModifierPluginTLSClientCertificate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REQUEST":
		*e = CreateTLSHandshakeModifierPluginTLSClientCertificate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTLSHandshakeModifierPluginTLSClientCertificate: %v", v)
	}
}

type CreateTLSHandshakeModifierPluginConfig struct {
	// TLS Client Certificate
	TLSClientCertificate *CreateTLSHandshakeModifierPluginTLSClientCertificate `json:"tls_client_certificate,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginConfig) GetTLSClientCertificate() *CreateTLSHandshakeModifierPluginTLSClientCertificate {
	if o == nil {
		return nil
	}
	return o.TLSClientCertificate
}

type CreateTLSHandshakeModifierPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateTLSHandshakeModifierPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateTLSHandshakeModifierPluginOrdering struct {
	After  *CreateTLSHandshakeModifierPluginAfter  `json:"after,omitempty"`
	Before *CreateTLSHandshakeModifierPluginBefore `json:"before,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginOrdering) GetAfter() *CreateTLSHandshakeModifierPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateTLSHandshakeModifierPluginOrdering) GetBefore() *CreateTLSHandshakeModifierPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateTLSHandshakeModifierPluginProtocols string

const (
	CreateTLSHandshakeModifierPluginProtocolsGrpc           CreateTLSHandshakeModifierPluginProtocols = "grpc"
	CreateTLSHandshakeModifierPluginProtocolsGrpcs          CreateTLSHandshakeModifierPluginProtocols = "grpcs"
	CreateTLSHandshakeModifierPluginProtocolsHTTP           CreateTLSHandshakeModifierPluginProtocols = "http"
	CreateTLSHandshakeModifierPluginProtocolsHTTPS          CreateTLSHandshakeModifierPluginProtocols = "https"
	CreateTLSHandshakeModifierPluginProtocolsTCP            CreateTLSHandshakeModifierPluginProtocols = "tcp"
	CreateTLSHandshakeModifierPluginProtocolsTLS            CreateTLSHandshakeModifierPluginProtocols = "tls"
	CreateTLSHandshakeModifierPluginProtocolsTLSPassthrough CreateTLSHandshakeModifierPluginProtocols = "tls_passthrough"
	CreateTLSHandshakeModifierPluginProtocolsUDP            CreateTLSHandshakeModifierPluginProtocols = "udp"
	CreateTLSHandshakeModifierPluginProtocolsWs             CreateTLSHandshakeModifierPluginProtocols = "ws"
	CreateTLSHandshakeModifierPluginProtocolsWss            CreateTLSHandshakeModifierPluginProtocols = "wss"
)

func (e CreateTLSHandshakeModifierPluginProtocols) ToPointer() *CreateTLSHandshakeModifierPluginProtocols {
	return &e
}
func (e *CreateTLSHandshakeModifierPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateTLSHandshakeModifierPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTLSHandshakeModifierPluginProtocols: %v", v)
	}
}

// CreateTLSHandshakeModifierPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateTLSHandshakeModifierPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateTLSHandshakeModifierPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateTLSHandshakeModifierPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateTLSHandshakeModifierPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateTLSHandshakeModifierPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateTLSHandshakeModifierPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSHandshakeModifierPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateTLSHandshakeModifierPlugin struct {
	Config *CreateTLSHandshakeModifierPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                     `json:"enabled,omitempty"`
	InstanceName *string                                   `json:"instance_name,omitempty"`
	name         *string                                   `const:"tls-handshake-modifier" json:"name,omitempty"`
	Ordering     *CreateTLSHandshakeModifierPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateTLSHandshakeModifierPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateTLSHandshakeModifierPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateTLSHandshakeModifierPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateTLSHandshakeModifierPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateTLSHandshakeModifierPluginService `json:"service,omitempty"`
}

func (c CreateTLSHandshakeModifierPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTLSHandshakeModifierPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTLSHandshakeModifierPlugin) GetConfig() *CreateTLSHandshakeModifierPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateTLSHandshakeModifierPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateTLSHandshakeModifierPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateTLSHandshakeModifierPlugin) GetName() *string {
	return types.String("tls-handshake-modifier")
}

func (o *CreateTLSHandshakeModifierPlugin) GetOrdering() *CreateTLSHandshakeModifierPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateTLSHandshakeModifierPlugin) GetProtocols() []CreateTLSHandshakeModifierPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateTLSHandshakeModifierPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateTLSHandshakeModifierPlugin) GetConsumer() *CreateTLSHandshakeModifierPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateTLSHandshakeModifierPlugin) GetConsumerGroup() *CreateTLSHandshakeModifierPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateTLSHandshakeModifierPlugin) GetRoute() *CreateTLSHandshakeModifierPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateTLSHandshakeModifierPlugin) GetService() *CreateTLSHandshakeModifierPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
