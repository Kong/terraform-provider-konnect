// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type AiSemanticPromptGuardPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiSemanticPromptGuardPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiSemanticPromptGuardPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *AiSemanticPromptGuardPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type AiSemanticPromptGuardPluginOrdering struct {
	After  *AiSemanticPromptGuardPluginAfter  `json:"after,omitempty"`
	Before *AiSemanticPromptGuardPluginBefore `json:"before,omitempty"`
}

func (o *AiSemanticPromptGuardPluginOrdering) GetAfter() *AiSemanticPromptGuardPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *AiSemanticPromptGuardPluginOrdering) GetBefore() *AiSemanticPromptGuardPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type AiSemanticPromptGuardPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *AiSemanticPromptGuardPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiSemanticPromptGuardPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AiSemanticPromptGuardPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// AiSemanticPromptGuardPluginParamLocation - Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
type AiSemanticPromptGuardPluginParamLocation string

const (
	AiSemanticPromptGuardPluginParamLocationBody  AiSemanticPromptGuardPluginParamLocation = "body"
	AiSemanticPromptGuardPluginParamLocationQuery AiSemanticPromptGuardPluginParamLocation = "query"
)

func (e AiSemanticPromptGuardPluginParamLocation) ToPointer() *AiSemanticPromptGuardPluginParamLocation {
	return &e
}
func (e *AiSemanticPromptGuardPluginParamLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "query":
		*e = AiSemanticPromptGuardPluginParamLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginParamLocation: %v", v)
	}
}

type AiSemanticPromptGuardPluginAuth struct {
	// If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.
	AllowOverride *bool `default:"false" json:"allow_override"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
	AzureClientID *string `json:"azure_client_id,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
	AzureClientSecret *string `json:"azure_client_secret,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
	AzureTenantID *string `json:"azure_tenant_id,omitempty"`
	// Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
	AzureUseManagedIdentity *bool `default:"false" json:"azure_use_managed_identity"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.
	GcpServiceAccountJSON *string `json:"gcp_service_account_json,omitempty"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `default:"false" json:"gcp_use_service_account"`
	// If AI model requires authentication via Authorization or API key header, specify its name here.
	HeaderName *string `json:"header_name,omitempty"`
	// Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
	HeaderValue *string `json:"header_value,omitempty"`
	// Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
	ParamLocation *AiSemanticPromptGuardPluginParamLocation `json:"param_location,omitempty"`
	// If AI model requires authentication via query parameter, specify its name here.
	ParamName *string `json:"param_name,omitempty"`
	// Specify the full parameter value for 'param_name'.
	ParamValue *string `json:"param_value,omitempty"`
}

func (a AiSemanticPromptGuardPluginAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginAuth) GetAllowOverride() *bool {
	if o == nil {
		return nil
	}
	return o.AllowOverride
}

func (o *AiSemanticPromptGuardPluginAuth) GetAwsAccessKeyID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccessKeyID
}

func (o *AiSemanticPromptGuardPluginAuth) GetAwsSecretAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretAccessKey
}

func (o *AiSemanticPromptGuardPluginAuth) GetAzureClientID() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientID
}

func (o *AiSemanticPromptGuardPluginAuth) GetAzureClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientSecret
}

func (o *AiSemanticPromptGuardPluginAuth) GetAzureTenantID() *string {
	if o == nil {
		return nil
	}
	return o.AzureTenantID
}

func (o *AiSemanticPromptGuardPluginAuth) GetAzureUseManagedIdentity() *bool {
	if o == nil {
		return nil
	}
	return o.AzureUseManagedIdentity
}

func (o *AiSemanticPromptGuardPluginAuth) GetGcpServiceAccountJSON() *string {
	if o == nil {
		return nil
	}
	return o.GcpServiceAccountJSON
}

func (o *AiSemanticPromptGuardPluginAuth) GetGcpUseServiceAccount() *bool {
	if o == nil {
		return nil
	}
	return o.GcpUseServiceAccount
}

func (o *AiSemanticPromptGuardPluginAuth) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *AiSemanticPromptGuardPluginAuth) GetHeaderValue() *string {
	if o == nil {
		return nil
	}
	return o.HeaderValue
}

func (o *AiSemanticPromptGuardPluginAuth) GetParamLocation() *AiSemanticPromptGuardPluginParamLocation {
	if o == nil {
		return nil
	}
	return o.ParamLocation
}

func (o *AiSemanticPromptGuardPluginAuth) GetParamName() *string {
	if o == nil {
		return nil
	}
	return o.ParamName
}

func (o *AiSemanticPromptGuardPluginAuth) GetParamValue() *string {
	if o == nil {
		return nil
	}
	return o.ParamValue
}

type AiSemanticPromptGuardPluginAzure struct {
	// 'api-version' for Azure OpenAI instances.
	APIVersion *string `default:"2023-05-15" json:"api_version"`
	// Deployment ID for Azure OpenAI instances.
	DeploymentID *string `json:"deployment_id,omitempty"`
	// Instance name for Azure OpenAI hosted models.
	Instance *string `json:"instance,omitempty"`
}

func (a AiSemanticPromptGuardPluginAzure) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginAzure) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginAzure) GetAPIVersion() *string {
	if o == nil {
		return nil
	}
	return o.APIVersion
}

func (o *AiSemanticPromptGuardPluginAzure) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *AiSemanticPromptGuardPluginAzure) GetInstance() *string {
	if o == nil {
		return nil
	}
	return o.Instance
}

type AiSemanticPromptGuardPluginBedrock struct {
	// If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.
	AwsRegion *string `json:"aws_region,omitempty"`
	// If using AWS providers (Bedrock), set the identifier of the assumed role session.
	AwsRoleSessionName *string `json:"aws_role_session_name,omitempty"`
	// If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role.
	AwsStsEndpointURL *string `json:"aws_sts_endpoint_url,omitempty"`
	// If using AWS providers (Bedrock), set to true to normalize the embeddings.
	EmbeddingsNormalize *bool `default:"false" json:"embeddings_normalize"`
	// Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration.
	PerformanceConfigLatency *string `json:"performance_config_latency,omitempty"`
}

func (a AiSemanticPromptGuardPluginBedrock) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginBedrock) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginBedrock) GetAwsAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AwsAssumeRoleArn
}

func (o *AiSemanticPromptGuardPluginBedrock) GetAwsRegion() *string {
	if o == nil {
		return nil
	}
	return o.AwsRegion
}

func (o *AiSemanticPromptGuardPluginBedrock) GetAwsRoleSessionName() *string {
	if o == nil {
		return nil
	}
	return o.AwsRoleSessionName
}

func (o *AiSemanticPromptGuardPluginBedrock) GetAwsStsEndpointURL() *string {
	if o == nil {
		return nil
	}
	return o.AwsStsEndpointURL
}

func (o *AiSemanticPromptGuardPluginBedrock) GetEmbeddingsNormalize() *bool {
	if o == nil {
		return nil
	}
	return o.EmbeddingsNormalize
}

func (o *AiSemanticPromptGuardPluginBedrock) GetPerformanceConfigLatency() *string {
	if o == nil {
		return nil
	}
	return o.PerformanceConfigLatency
}

type AiSemanticPromptGuardPluginGemini struct {
	// If running Gemini on Vertex, specify the regional API endpoint (hostname only).
	APIEndpoint *string `json:"api_endpoint,omitempty"`
	// If running Gemini on Vertex, specify the location ID.
	LocationID *string `json:"location_id,omitempty"`
	// If running Gemini on Vertex, specify the project ID.
	ProjectID *string `json:"project_id,omitempty"`
}

func (o *AiSemanticPromptGuardPluginGemini) GetAPIEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.APIEndpoint
}

func (o *AiSemanticPromptGuardPluginGemini) GetLocationID() *string {
	if o == nil {
		return nil
	}
	return o.LocationID
}

func (o *AiSemanticPromptGuardPluginGemini) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

type AiSemanticPromptGuardPluginHuggingface struct {
	// Use the cache layer on the inference API
	UseCache *bool `json:"use_cache,omitempty"`
	// Wait for the model if it is not ready
	WaitForModel *bool `json:"wait_for_model,omitempty"`
}

func (o *AiSemanticPromptGuardPluginHuggingface) GetUseCache() *bool {
	if o == nil {
		return nil
	}
	return o.UseCache
}

func (o *AiSemanticPromptGuardPluginHuggingface) GetWaitForModel() *bool {
	if o == nil {
		return nil
	}
	return o.WaitForModel
}

// AiSemanticPromptGuardPluginOptions - Key/value settings for the model
type AiSemanticPromptGuardPluginOptions struct {
	Azure       AiSemanticPromptGuardPluginAzure        `json:"azure"`
	Bedrock     *AiSemanticPromptGuardPluginBedrock     `json:"bedrock,omitempty"`
	Gemini      *AiSemanticPromptGuardPluginGemini      `json:"gemini,omitempty"`
	Huggingface *AiSemanticPromptGuardPluginHuggingface `json:"huggingface,omitempty"`
	// upstream url for the embeddings
	UpstreamURL *string `json:"upstream_url,omitempty"`
}

func (o *AiSemanticPromptGuardPluginOptions) GetAzure() AiSemanticPromptGuardPluginAzure {
	if o == nil {
		return AiSemanticPromptGuardPluginAzure{}
	}
	return o.Azure
}

func (o *AiSemanticPromptGuardPluginOptions) GetBedrock() *AiSemanticPromptGuardPluginBedrock {
	if o == nil {
		return nil
	}
	return o.Bedrock
}

func (o *AiSemanticPromptGuardPluginOptions) GetGemini() *AiSemanticPromptGuardPluginGemini {
	if o == nil {
		return nil
	}
	return o.Gemini
}

func (o *AiSemanticPromptGuardPluginOptions) GetHuggingface() *AiSemanticPromptGuardPluginHuggingface {
	if o == nil {
		return nil
	}
	return o.Huggingface
}

func (o *AiSemanticPromptGuardPluginOptions) GetUpstreamURL() *string {
	if o == nil {
		return nil
	}
	return o.UpstreamURL
}

// AiSemanticPromptGuardPluginProvider - AI provider format to use for embeddings API
type AiSemanticPromptGuardPluginProvider string

const (
	AiSemanticPromptGuardPluginProviderAzure       AiSemanticPromptGuardPluginProvider = "azure"
	AiSemanticPromptGuardPluginProviderBedrock     AiSemanticPromptGuardPluginProvider = "bedrock"
	AiSemanticPromptGuardPluginProviderGemini      AiSemanticPromptGuardPluginProvider = "gemini"
	AiSemanticPromptGuardPluginProviderHuggingface AiSemanticPromptGuardPluginProvider = "huggingface"
	AiSemanticPromptGuardPluginProviderMistral     AiSemanticPromptGuardPluginProvider = "mistral"
	AiSemanticPromptGuardPluginProviderOpenai      AiSemanticPromptGuardPluginProvider = "openai"
)

func (e AiSemanticPromptGuardPluginProvider) ToPointer() *AiSemanticPromptGuardPluginProvider {
	return &e
}
func (e *AiSemanticPromptGuardPluginProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azure":
		fallthrough
	case "bedrock":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "mistral":
		fallthrough
	case "openai":
		*e = AiSemanticPromptGuardPluginProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginProvider: %v", v)
	}
}

type AiSemanticPromptGuardPluginModel struct {
	// Model name to execute.
	Name string `json:"name"`
	// Key/value settings for the model
	Options *AiSemanticPromptGuardPluginOptions `json:"options,omitempty"`
	// AI provider format to use for embeddings API
	Provider AiSemanticPromptGuardPluginProvider `json:"provider"`
}

func (o *AiSemanticPromptGuardPluginModel) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AiSemanticPromptGuardPluginModel) GetOptions() *AiSemanticPromptGuardPluginOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *AiSemanticPromptGuardPluginModel) GetProvider() AiSemanticPromptGuardPluginProvider {
	if o == nil {
		return AiSemanticPromptGuardPluginProvider("")
	}
	return o.Provider
}

type AiSemanticPromptGuardPluginEmbeddings struct {
	Auth  *AiSemanticPromptGuardPluginAuth `json:"auth,omitempty"`
	Model AiSemanticPromptGuardPluginModel `json:"model"`
}

func (o *AiSemanticPromptGuardPluginEmbeddings) GetAuth() *AiSemanticPromptGuardPluginAuth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *AiSemanticPromptGuardPluginEmbeddings) GetModel() AiSemanticPromptGuardPluginModel {
	if o == nil {
		return AiSemanticPromptGuardPluginModel{}
	}
	return o.Model
}

// AiSemanticPromptGuardPluginGenaiCategory - Generative AI category of the request
type AiSemanticPromptGuardPluginGenaiCategory string

const (
	AiSemanticPromptGuardPluginGenaiCategoryAudioSpeech        AiSemanticPromptGuardPluginGenaiCategory = "audio/speech"
	AiSemanticPromptGuardPluginGenaiCategoryAudioTranscription AiSemanticPromptGuardPluginGenaiCategory = "audio/transcription"
	AiSemanticPromptGuardPluginGenaiCategoryImageGeneration    AiSemanticPromptGuardPluginGenaiCategory = "image/generation"
	AiSemanticPromptGuardPluginGenaiCategoryRealtimeGeneration AiSemanticPromptGuardPluginGenaiCategory = "realtime/generation"
	AiSemanticPromptGuardPluginGenaiCategoryTextEmbeddings     AiSemanticPromptGuardPluginGenaiCategory = "text/embeddings"
	AiSemanticPromptGuardPluginGenaiCategoryTextGeneration     AiSemanticPromptGuardPluginGenaiCategory = "text/generation"
)

func (e AiSemanticPromptGuardPluginGenaiCategory) ToPointer() *AiSemanticPromptGuardPluginGenaiCategory {
	return &e
}
func (e *AiSemanticPromptGuardPluginGenaiCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio/speech":
		fallthrough
	case "audio/transcription":
		fallthrough
	case "image/generation":
		fallthrough
	case "realtime/generation":
		fallthrough
	case "text/embeddings":
		fallthrough
	case "text/generation":
		*e = AiSemanticPromptGuardPluginGenaiCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginGenaiCategory: %v", v)
	}
}

// AiSemanticPromptGuardPluginLlmFormat - LLM input and output format and schema to use
type AiSemanticPromptGuardPluginLlmFormat string

const (
	AiSemanticPromptGuardPluginLlmFormatBedrock     AiSemanticPromptGuardPluginLlmFormat = "bedrock"
	AiSemanticPromptGuardPluginLlmFormatCohere      AiSemanticPromptGuardPluginLlmFormat = "cohere"
	AiSemanticPromptGuardPluginLlmFormatGemini      AiSemanticPromptGuardPluginLlmFormat = "gemini"
	AiSemanticPromptGuardPluginLlmFormatHuggingface AiSemanticPromptGuardPluginLlmFormat = "huggingface"
	AiSemanticPromptGuardPluginLlmFormatOpenai      AiSemanticPromptGuardPluginLlmFormat = "openai"
)

func (e AiSemanticPromptGuardPluginLlmFormat) ToPointer() *AiSemanticPromptGuardPluginLlmFormat {
	return &e
}
func (e *AiSemanticPromptGuardPluginLlmFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "openai":
		*e = AiSemanticPromptGuardPluginLlmFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginLlmFormat: %v", v)
	}
}

type Rules struct {
	// List of prompts to allow.
	AllowPrompts []string `json:"allow_prompts,omitempty"`
	// List of prompts to deny.
	DenyPrompts []string `json:"deny_prompts,omitempty"`
	// If false, will ignore all previous chat prompts from the conversation history.
	MatchAllConversationHistory *bool `default:"false" json:"match_all_conversation_history"`
	// If true, will match all roles in addition to 'user' role in conversation history.
	MatchAllRoles *bool `default:"false" json:"match_all_roles"`
	// max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.
	MaxRequestBodySize *int64 `default:"8192" json:"max_request_body_size"`
}

func (r Rules) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Rules) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Rules) GetAllowPrompts() []string {
	if o == nil {
		return nil
	}
	return o.AllowPrompts
}

func (o *Rules) GetDenyPrompts() []string {
	if o == nil {
		return nil
	}
	return o.DenyPrompts
}

func (o *Rules) GetMatchAllConversationHistory() *bool {
	if o == nil {
		return nil
	}
	return o.MatchAllConversationHistory
}

func (o *Rules) GetMatchAllRoles() *bool {
	if o == nil {
		return nil
	}
	return o.MatchAllRoles
}

func (o *Rules) GetMaxRequestBodySize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRequestBodySize
}

type Search struct {
	// Threshold for the similarity score to be considered a match.
	Threshold *float64 `default:"0.5" json:"threshold"`
}

func (s Search) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Search) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Search) GetThreshold() *float64 {
	if o == nil {
		return nil
	}
	return o.Threshold
}

// AiSemanticPromptGuardPluginDistanceMetric - the distance metric to use for vector searches
type AiSemanticPromptGuardPluginDistanceMetric string

const (
	AiSemanticPromptGuardPluginDistanceMetricCosine    AiSemanticPromptGuardPluginDistanceMetric = "cosine"
	AiSemanticPromptGuardPluginDistanceMetricEuclidean AiSemanticPromptGuardPluginDistanceMetric = "euclidean"
)

func (e AiSemanticPromptGuardPluginDistanceMetric) ToPointer() *AiSemanticPromptGuardPluginDistanceMetric {
	return &e
}
func (e *AiSemanticPromptGuardPluginDistanceMetric) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cosine":
		fallthrough
	case "euclidean":
		*e = AiSemanticPromptGuardPluginDistanceMetric(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginDistanceMetric: %v", v)
	}
}

// AiSemanticPromptGuardPluginSslVersion - the ssl version to use for the pgvector database
type AiSemanticPromptGuardPluginSslVersion string

const (
	AiSemanticPromptGuardPluginSslVersionAny    AiSemanticPromptGuardPluginSslVersion = "any"
	AiSemanticPromptGuardPluginSslVersionTlsv12 AiSemanticPromptGuardPluginSslVersion = "tlsv1_2"
	AiSemanticPromptGuardPluginSslVersionTlsv13 AiSemanticPromptGuardPluginSslVersion = "tlsv1_3"
)

func (e AiSemanticPromptGuardPluginSslVersion) ToPointer() *AiSemanticPromptGuardPluginSslVersion {
	return &e
}
func (e *AiSemanticPromptGuardPluginSslVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "tlsv1_2":
		fallthrough
	case "tlsv1_3":
		*e = AiSemanticPromptGuardPluginSslVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginSslVersion: %v", v)
	}
}

type AiSemanticPromptGuardPluginPgvector struct {
	// the database of the pgvector database
	Database *string `default:"kong-pgvector" json:"database"`
	// the host of the pgvector database
	Host *string `default:"127.0.0.1" json:"host"`
	// the password of the pgvector database
	Password *string `json:"password,omitempty"`
	// the port of the pgvector database
	Port *int64 `default:"5432" json:"port"`
	// whether to use ssl for the pgvector database
	Ssl *bool `default:"false" json:"ssl"`
	// the path of ssl cert to use for the pgvector database
	SslCert *string `json:"ssl_cert,omitempty"`
	// the path of ssl cert key to use for the pgvector database
	SslCertKey *string `json:"ssl_cert_key,omitempty"`
	// whether ssl is required for the pgvector database
	SslRequired *bool `default:"false" json:"ssl_required"`
	// whether to verify ssl for the pgvector database
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// the ssl version to use for the pgvector database
	SslVersion *AiSemanticPromptGuardPluginSslVersion `default:"tlsv1_2" json:"ssl_version"`
	// the timeout of the pgvector database
	Timeout *float64 `default:"5000" json:"timeout"`
	// the user of the pgvector database
	User *string `default:"postgres" json:"user"`
}

func (a AiSemanticPromptGuardPluginPgvector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginPgvector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginPgvector) GetDatabase() *string {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *AiSemanticPromptGuardPluginPgvector) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AiSemanticPromptGuardPluginPgvector) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *AiSemanticPromptGuardPluginPgvector) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AiSemanticPromptGuardPluginPgvector) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *AiSemanticPromptGuardPluginPgvector) GetSslCert() *string {
	if o == nil {
		return nil
	}
	return o.SslCert
}

func (o *AiSemanticPromptGuardPluginPgvector) GetSslCertKey() *string {
	if o == nil {
		return nil
	}
	return o.SslCertKey
}

func (o *AiSemanticPromptGuardPluginPgvector) GetSslRequired() *bool {
	if o == nil {
		return nil
	}
	return o.SslRequired
}

func (o *AiSemanticPromptGuardPluginPgvector) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *AiSemanticPromptGuardPluginPgvector) GetSslVersion() *AiSemanticPromptGuardPluginSslVersion {
	if o == nil {
		return nil
	}
	return o.SslVersion
}

func (o *AiSemanticPromptGuardPluginPgvector) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *AiSemanticPromptGuardPluginPgvector) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

type AiSemanticPromptGuardPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `default:"127.0.0.1" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (a AiSemanticPromptGuardPluginClusterNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginClusterNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *AiSemanticPromptGuardPluginClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type AiSemanticPromptGuardPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (a AiSemanticPromptGuardPluginSentinelNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginSentinelNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginSentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AiSemanticPromptGuardPluginSentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// AiSemanticPromptGuardPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type AiSemanticPromptGuardPluginSentinelRole string

const (
	AiSemanticPromptGuardPluginSentinelRoleAny    AiSemanticPromptGuardPluginSentinelRole = "any"
	AiSemanticPromptGuardPluginSentinelRoleMaster AiSemanticPromptGuardPluginSentinelRole = "master"
	AiSemanticPromptGuardPluginSentinelRoleSlave  AiSemanticPromptGuardPluginSentinelRole = "slave"
)

func (e AiSemanticPromptGuardPluginSentinelRole) ToPointer() *AiSemanticPromptGuardPluginSentinelRole {
	return &e
}
func (e *AiSemanticPromptGuardPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = AiSemanticPromptGuardPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginSentinelRole: %v", v)
	}
}

type AiSemanticPromptGuardPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []AiSemanticPromptGuardPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `default:"2000" json:"connect_timeout"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `default:"2000" json:"read_timeout"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"2000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []AiSemanticPromptGuardPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *AiSemanticPromptGuardPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (a AiSemanticPromptGuardPluginRedis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginRedis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginRedis) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *AiSemanticPromptGuardPluginRedis) GetClusterNodes() []AiSemanticPromptGuardPluginClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *AiSemanticPromptGuardPluginRedis) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *AiSemanticPromptGuardPluginRedis) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *AiSemanticPromptGuardPluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *AiSemanticPromptGuardPluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AiSemanticPromptGuardPluginRedis) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *AiSemanticPromptGuardPluginRedis) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *AiSemanticPromptGuardPluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *AiSemanticPromptGuardPluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AiSemanticPromptGuardPluginRedis) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *AiSemanticPromptGuardPluginRedis) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *AiSemanticPromptGuardPluginRedis) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *AiSemanticPromptGuardPluginRedis) GetSentinelNodes() []AiSemanticPromptGuardPluginSentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *AiSemanticPromptGuardPluginRedis) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *AiSemanticPromptGuardPluginRedis) GetSentinelRole() *AiSemanticPromptGuardPluginSentinelRole {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *AiSemanticPromptGuardPluginRedis) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *AiSemanticPromptGuardPluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *AiSemanticPromptGuardPluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *AiSemanticPromptGuardPluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *AiSemanticPromptGuardPluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// AiSemanticPromptGuardPluginStrategy - which vector database driver to use
type AiSemanticPromptGuardPluginStrategy string

const (
	AiSemanticPromptGuardPluginStrategyPgvector AiSemanticPromptGuardPluginStrategy = "pgvector"
	AiSemanticPromptGuardPluginStrategyRedis    AiSemanticPromptGuardPluginStrategy = "redis"
)

func (e AiSemanticPromptGuardPluginStrategy) ToPointer() *AiSemanticPromptGuardPluginStrategy {
	return &e
}
func (e *AiSemanticPromptGuardPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pgvector":
		fallthrough
	case "redis":
		*e = AiSemanticPromptGuardPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginStrategy: %v", v)
	}
}

type AiSemanticPromptGuardPluginVectordb struct {
	// the desired dimensionality for the vectors
	Dimensions int64 `json:"dimensions"`
	// the distance metric to use for vector searches
	DistanceMetric AiSemanticPromptGuardPluginDistanceMetric `json:"distance_metric"`
	Pgvector       *AiSemanticPromptGuardPluginPgvector      `json:"pgvector,omitempty"`
	Redis          *AiSemanticPromptGuardPluginRedis         `json:"redis,omitempty"`
	// which vector database driver to use
	Strategy AiSemanticPromptGuardPluginStrategy `json:"strategy"`
	// the default similarity threshold for accepting semantic search results (float)
	Threshold float64 `json:"threshold"`
}

func (o *AiSemanticPromptGuardPluginVectordb) GetDimensions() int64 {
	if o == nil {
		return 0
	}
	return o.Dimensions
}

func (o *AiSemanticPromptGuardPluginVectordb) GetDistanceMetric() AiSemanticPromptGuardPluginDistanceMetric {
	if o == nil {
		return AiSemanticPromptGuardPluginDistanceMetric("")
	}
	return o.DistanceMetric
}

func (o *AiSemanticPromptGuardPluginVectordb) GetPgvector() *AiSemanticPromptGuardPluginPgvector {
	if o == nil {
		return nil
	}
	return o.Pgvector
}

func (o *AiSemanticPromptGuardPluginVectordb) GetRedis() *AiSemanticPromptGuardPluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *AiSemanticPromptGuardPluginVectordb) GetStrategy() AiSemanticPromptGuardPluginStrategy {
	if o == nil {
		return AiSemanticPromptGuardPluginStrategy("")
	}
	return o.Strategy
}

func (o *AiSemanticPromptGuardPluginVectordb) GetThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.Threshold
}

type AiSemanticPromptGuardPluginConfig struct {
	Embeddings AiSemanticPromptGuardPluginEmbeddings `json:"embeddings"`
	// Generative AI category of the request
	GenaiCategory *AiSemanticPromptGuardPluginGenaiCategory `default:"text/generation" json:"genai_category"`
	// LLM input and output format and schema to use
	LlmFormat *AiSemanticPromptGuardPluginLlmFormat `default:"openai" json:"llm_format"`
	Rules     *Rules                                `json:"rules,omitempty"`
	Search    *Search                               `json:"search,omitempty"`
	Vectordb  AiSemanticPromptGuardPluginVectordb   `json:"vectordb"`
}

func (a AiSemanticPromptGuardPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPluginConfig) GetEmbeddings() AiSemanticPromptGuardPluginEmbeddings {
	if o == nil {
		return AiSemanticPromptGuardPluginEmbeddings{}
	}
	return o.Embeddings
}

func (o *AiSemanticPromptGuardPluginConfig) GetGenaiCategory() *AiSemanticPromptGuardPluginGenaiCategory {
	if o == nil {
		return nil
	}
	return o.GenaiCategory
}

func (o *AiSemanticPromptGuardPluginConfig) GetLlmFormat() *AiSemanticPromptGuardPluginLlmFormat {
	if o == nil {
		return nil
	}
	return o.LlmFormat
}

func (o *AiSemanticPromptGuardPluginConfig) GetRules() *Rules {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *AiSemanticPromptGuardPluginConfig) GetSearch() *Search {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *AiSemanticPromptGuardPluginConfig) GetVectordb() AiSemanticPromptGuardPluginVectordb {
	if o == nil {
		return AiSemanticPromptGuardPluginVectordb{}
	}
	return o.Vectordb
}

// AiSemanticPromptGuardPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiSemanticPromptGuardPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSemanticPromptGuardPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiSemanticPromptGuardPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiSemanticPromptGuardPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSemanticPromptGuardPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type AiSemanticPromptGuardPluginProtocols string

const (
	AiSemanticPromptGuardPluginProtocolsGrpc  AiSemanticPromptGuardPluginProtocols = "grpc"
	AiSemanticPromptGuardPluginProtocolsGrpcs AiSemanticPromptGuardPluginProtocols = "grpcs"
	AiSemanticPromptGuardPluginProtocolsHTTP  AiSemanticPromptGuardPluginProtocols = "http"
	AiSemanticPromptGuardPluginProtocolsHTTPS AiSemanticPromptGuardPluginProtocols = "https"
)

func (e AiSemanticPromptGuardPluginProtocols) ToPointer() *AiSemanticPromptGuardPluginProtocols {
	return &e
}
func (e *AiSemanticPromptGuardPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiSemanticPromptGuardPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiSemanticPromptGuardPluginProtocols: %v", v)
	}
}

// AiSemanticPromptGuardPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiSemanticPromptGuardPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSemanticPromptGuardPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiSemanticPromptGuardPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiSemanticPromptGuardPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AiSemanticPromptGuardPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AiSemanticPromptGuardPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiSemanticPromptGuardPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                              `default:"null" json:"instance_name"`
	name         string                               `const:"ai-semantic-prompt-guard" json:"name"`
	Ordering     *AiSemanticPromptGuardPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiSemanticPromptGuardPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                            `json:"updated_at,omitempty"`
	Config    AiSemanticPromptGuardPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiSemanticPromptGuardPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiSemanticPromptGuardPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiSemanticPromptGuardPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiSemanticPromptGuardPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiSemanticPromptGuardPluginService `json:"service"`
}

func (a AiSemanticPromptGuardPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiSemanticPromptGuardPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AiSemanticPromptGuardPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AiSemanticPromptGuardPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AiSemanticPromptGuardPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AiSemanticPromptGuardPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AiSemanticPromptGuardPlugin) GetName() string {
	return "ai-semantic-prompt-guard"
}

func (o *AiSemanticPromptGuardPlugin) GetOrdering() *AiSemanticPromptGuardPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *AiSemanticPromptGuardPlugin) GetPartials() []AiSemanticPromptGuardPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *AiSemanticPromptGuardPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AiSemanticPromptGuardPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *AiSemanticPromptGuardPlugin) GetConfig() AiSemanticPromptGuardPluginConfig {
	if o == nil {
		return AiSemanticPromptGuardPluginConfig{}
	}
	return o.Config
}

func (o *AiSemanticPromptGuardPlugin) GetConsumer() *AiSemanticPromptGuardPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AiSemanticPromptGuardPlugin) GetConsumerGroup() *AiSemanticPromptGuardPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *AiSemanticPromptGuardPlugin) GetProtocols() []AiSemanticPromptGuardPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *AiSemanticPromptGuardPlugin) GetRoute() *AiSemanticPromptGuardPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AiSemanticPromptGuardPlugin) GetService() *AiSemanticPromptGuardPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
