// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc. The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its `protocol`, `host`, `port` and `path` individually. Services are associated to Routes (a Service can have many Routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a Route is matched, Kong proxies the request to its associated Service. See the [Proxy Reference][proxy-reference] for a detailed explanation of how Kong proxies traffic.
type Service struct {
	// Unix epoch when the resource was created.
	CreatedAt int64  `json:"created_at"`
	ID        string `json:"id"`
	// Unix epoch when the resource was last updated.
	UpdatedAt int64 `json:"updated_at"`
}

func (o *Service) GetCreatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedAt
}

func (o *Service) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Service) GetUpdatedAt() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedAt
}
