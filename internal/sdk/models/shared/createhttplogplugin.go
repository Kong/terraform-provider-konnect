// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateHTTPLogPluginContentType - Indicates the type of data sent. The only available option is `application/json`.
type CreateHTTPLogPluginContentType string

const (
	CreateHTTPLogPluginContentTypeApplicationJSON                 CreateHTTPLogPluginContentType = "application/json"
	CreateHTTPLogPluginContentTypeApplicationJSONCharsetEqualUTF8 CreateHTTPLogPluginContentType = "application/json; charset=utf-8"
)

func (e CreateHTTPLogPluginContentType) ToPointer() *CreateHTTPLogPluginContentType {
	return &e
}
func (e *CreateHTTPLogPluginContentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application/json":
		fallthrough
	case "application/json; charset=utf-8":
		*e = CreateHTTPLogPluginContentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHTTPLogPluginContentType: %v", v)
	}
}

// CreateHTTPLogPluginMethod - An optional method used to send data to the HTTP server. Supported values are `POST` (default), `PUT`, and `PATCH`.
type CreateHTTPLogPluginMethod string

const (
	CreateHTTPLogPluginMethodPost  CreateHTTPLogPluginMethod = "POST"
	CreateHTTPLogPluginMethodPut   CreateHTTPLogPluginMethod = "PUT"
	CreateHTTPLogPluginMethodPatch CreateHTTPLogPluginMethod = "PATCH"
)

func (e CreateHTTPLogPluginMethod) ToPointer() *CreateHTTPLogPluginMethod {
	return &e
}
func (e *CreateHTTPLogPluginMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		*e = CreateHTTPLogPluginMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHTTPLogPluginMethod: %v", v)
	}
}

// CreateHTTPLogPluginConcurrencyLimit - The number of of queue delivery timers. -1 indicates unlimited.
type CreateHTTPLogPluginConcurrencyLimit int64

const (
	CreateHTTPLogPluginConcurrencyLimitMinus1 CreateHTTPLogPluginConcurrencyLimit = -1
	CreateHTTPLogPluginConcurrencyLimitOne    CreateHTTPLogPluginConcurrencyLimit = 1
)

func (e CreateHTTPLogPluginConcurrencyLimit) ToPointer() *CreateHTTPLogPluginConcurrencyLimit {
	return &e
}
func (e *CreateHTTPLogPluginConcurrencyLimit) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 1:
		*e = CreateHTTPLogPluginConcurrencyLimit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHTTPLogPluginConcurrencyLimit: %v", v)
	}
}

type CreateHTTPLogPluginQueue struct {
	// The number of of queue delivery timers. -1 indicates unlimited.
	ConcurrencyLimit *CreateHTTPLogPluginConcurrencyLimit `json:"concurrency_limit,omitempty"`
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `json:"initial_retry_delay,omitempty"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `json:"max_batch_size,omitempty"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `json:"max_bytes,omitempty"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `json:"max_coalescing_delay,omitempty"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `json:"max_entries,omitempty"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `json:"max_retry_delay,omitempty"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `json:"max_retry_time,omitempty"`
}

func (o *CreateHTTPLogPluginQueue) GetConcurrencyLimit() *CreateHTTPLogPluginConcurrencyLimit {
	if o == nil {
		return nil
	}
	return o.ConcurrencyLimit
}

func (o *CreateHTTPLogPluginQueue) GetInitialRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialRetryDelay
}

func (o *CreateHTTPLogPluginQueue) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

func (o *CreateHTTPLogPluginQueue) GetMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBytes
}

func (o *CreateHTTPLogPluginQueue) GetMaxCoalescingDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCoalescingDelay
}

func (o *CreateHTTPLogPluginQueue) GetMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxEntries
}

func (o *CreateHTTPLogPluginQueue) GetMaxRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryDelay
}

func (o *CreateHTTPLogPluginQueue) GetMaxRetryTime() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryTime
}

type CreateHTTPLogPluginConfig struct {
	// Indicates the type of data sent. The only available option is `application/json`.
	ContentType *CreateHTTPLogPluginContentType `json:"content_type,omitempty"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// Optional time in seconds. If `queue_size` > 1, this is the max idle time before sending a log with less than `queue_size` records.
	FlushTimeout *float64 `json:"flush_timeout,omitempty"`
	// An optional table of headers included in the HTTP message to the upstream server. Values are indexed by header name, and each header name accepts a single string.
	Headers map[string]any `json:"headers,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	HTTPEndpoint *string `json:"http_endpoint,omitempty"`
	// An optional value in milliseconds that defines how long an idle connection will live before being closed.
	Keepalive *float64 `json:"keepalive,omitempty"`
	// An optional method used to send data to the HTTP server. Supported values are `POST` (default), `PUT`, and `PATCH`.
	Method *CreateHTTPLogPluginMethod `json:"method,omitempty"`
	Queue  *CreateHTTPLogPluginQueue  `json:"queue,omitempty"`
	// Maximum number of log entries to be sent on each message to the upstream server.
	QueueSize *int64 `json:"queue_size,omitempty"`
	// Number of times to retry when sending data to the upstream server.
	RetryCount *int64 `json:"retry_count,omitempty"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *float64 `json:"timeout,omitempty"`
}

func (o *CreateHTTPLogPluginConfig) GetContentType() *CreateHTTPLogPluginContentType {
	if o == nil {
		return nil
	}
	return o.ContentType
}

func (o *CreateHTTPLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *CreateHTTPLogPluginConfig) GetFlushTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FlushTimeout
}

func (o *CreateHTTPLogPluginConfig) GetHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateHTTPLogPluginConfig) GetHTTPEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.HTTPEndpoint
}

func (o *CreateHTTPLogPluginConfig) GetKeepalive() *float64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *CreateHTTPLogPluginConfig) GetMethod() *CreateHTTPLogPluginMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *CreateHTTPLogPluginConfig) GetQueue() *CreateHTTPLogPluginQueue {
	if o == nil {
		return nil
	}
	return o.Queue
}

func (o *CreateHTTPLogPluginConfig) GetQueueSize() *int64 {
	if o == nil {
		return nil
	}
	return o.QueueSize
}

func (o *CreateHTTPLogPluginConfig) GetRetryCount() *int64 {
	if o == nil {
		return nil
	}
	return o.RetryCount
}

func (o *CreateHTTPLogPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

type CreateHTTPLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateHTTPLogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateHTTPLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateHTTPLogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateHTTPLogPluginOrdering struct {
	After  *CreateHTTPLogPluginAfter  `json:"after,omitempty"`
	Before *CreateHTTPLogPluginBefore `json:"before,omitempty"`
}

func (o *CreateHTTPLogPluginOrdering) GetAfter() *CreateHTTPLogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateHTTPLogPluginOrdering) GetBefore() *CreateHTTPLogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateHTTPLogPluginProtocols string

const (
	CreateHTTPLogPluginProtocolsGrpc           CreateHTTPLogPluginProtocols = "grpc"
	CreateHTTPLogPluginProtocolsGrpcs          CreateHTTPLogPluginProtocols = "grpcs"
	CreateHTTPLogPluginProtocolsHTTP           CreateHTTPLogPluginProtocols = "http"
	CreateHTTPLogPluginProtocolsHTTPS          CreateHTTPLogPluginProtocols = "https"
	CreateHTTPLogPluginProtocolsTCP            CreateHTTPLogPluginProtocols = "tcp"
	CreateHTTPLogPluginProtocolsTLS            CreateHTTPLogPluginProtocols = "tls"
	CreateHTTPLogPluginProtocolsTLSPassthrough CreateHTTPLogPluginProtocols = "tls_passthrough"
	CreateHTTPLogPluginProtocolsUDP            CreateHTTPLogPluginProtocols = "udp"
	CreateHTTPLogPluginProtocolsWs             CreateHTTPLogPluginProtocols = "ws"
	CreateHTTPLogPluginProtocolsWss            CreateHTTPLogPluginProtocols = "wss"
)

func (e CreateHTTPLogPluginProtocols) ToPointer() *CreateHTTPLogPluginProtocols {
	return &e
}
func (e *CreateHTTPLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateHTTPLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHTTPLogPluginProtocols: %v", v)
	}
}

// CreateHTTPLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateHTTPLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHTTPLogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateHTTPLogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHTTPLogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateHTTPLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateHTTPLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHTTPLogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateHTTPLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateHTTPLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateHTTPLogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateHTTPLogPlugin struct {
	Config *CreateHTTPLogPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                        `json:"enabled,omitempty"`
	InstanceName *string                      `json:"instance_name,omitempty"`
	name         *string                      `const:"http-log" json:"name,omitempty"`
	Ordering     *CreateHTTPLogPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateHTTPLogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateHTTPLogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateHTTPLogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateHTTPLogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateHTTPLogPluginService `json:"service,omitempty"`
}

func (c CreateHTTPLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHTTPLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHTTPLogPlugin) GetConfig() *CreateHTTPLogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateHTTPLogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateHTTPLogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateHTTPLogPlugin) GetName() *string {
	return types.String("http-log")
}

func (o *CreateHTTPLogPlugin) GetOrdering() *CreateHTTPLogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateHTTPLogPlugin) GetProtocols() []CreateHTTPLogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateHTTPLogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateHTTPLogPlugin) GetConsumer() *CreateHTTPLogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateHTTPLogPlugin) GetConsumerGroup() *CreateHTTPLogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateHTTPLogPlugin) GetRoute() *CreateHTTPLogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateHTTPLogPlugin) GetService() *CreateHTTPLogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
