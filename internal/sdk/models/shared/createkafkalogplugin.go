// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateKafkaLogPluginMechanism - The SASL authentication mechanism.  Supported options: `PLAIN` or `SCRAM-SHA-256`.
type CreateKafkaLogPluginMechanism string

const (
	CreateKafkaLogPluginMechanismPlain       CreateKafkaLogPluginMechanism = "PLAIN"
	CreateKafkaLogPluginMechanismScramSha256 CreateKafkaLogPluginMechanism = "SCRAM-SHA-256"
	CreateKafkaLogPluginMechanismScramSha512 CreateKafkaLogPluginMechanism = "SCRAM-SHA-512"
)

func (e CreateKafkaLogPluginMechanism) ToPointer() *CreateKafkaLogPluginMechanism {
	return &e
}
func (e *CreateKafkaLogPluginMechanism) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLAIN":
		fallthrough
	case "SCRAM-SHA-256":
		fallthrough
	case "SCRAM-SHA-512":
		*e = CreateKafkaLogPluginMechanism(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateKafkaLogPluginMechanism: %v", v)
	}
}

// CreateKafkaLogPluginStrategy - The authentication strategy for the plugin, the only option for the value is `sasl`.
type CreateKafkaLogPluginStrategy string

const (
	CreateKafkaLogPluginStrategySasl CreateKafkaLogPluginStrategy = "sasl"
)

func (e CreateKafkaLogPluginStrategy) ToPointer() *CreateKafkaLogPluginStrategy {
	return &e
}
func (e *CreateKafkaLogPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sasl":
		*e = CreateKafkaLogPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateKafkaLogPluginStrategy: %v", v)
	}
}

type CreateKafkaLogPluginAuthentication struct {
	// The SASL authentication mechanism.  Supported options: `PLAIN` or `SCRAM-SHA-256`.
	Mechanism *CreateKafkaLogPluginMechanism `json:"mechanism,omitempty"`
	// Password for SASL authentication.
	Password *string `json:"password,omitempty"`
	// The authentication strategy for the plugin, the only option for the value is `sasl`.
	Strategy *CreateKafkaLogPluginStrategy `json:"strategy,omitempty"`
	// Enable this to indicate `DelegationToken` authentication
	Tokenauth *bool `json:"tokenauth,omitempty"`
	// Username for SASL authentication.
	User *string `json:"user,omitempty"`
}

func (o *CreateKafkaLogPluginAuthentication) GetMechanism() *CreateKafkaLogPluginMechanism {
	if o == nil {
		return nil
	}
	return o.Mechanism
}

func (o *CreateKafkaLogPluginAuthentication) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateKafkaLogPluginAuthentication) GetStrategy() *CreateKafkaLogPluginStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *CreateKafkaLogPluginAuthentication) GetTokenauth() *bool {
	if o == nil {
		return nil
	}
	return o.Tokenauth
}

func (o *CreateKafkaLogPluginAuthentication) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

type CreateKafkaLogPluginBootstrapServers struct {
	// A string representing a host name, such as example.com.
	Host string `json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port int64 `json:"port"`
}

func (o *CreateKafkaLogPluginBootstrapServers) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateKafkaLogPluginBootstrapServers) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

// CreateKafkaLogPluginProducerRequestAcks - The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments; 1 for only the leader; and -1 for the full ISR (In-Sync Replica set).
type CreateKafkaLogPluginProducerRequestAcks int64

const (
	CreateKafkaLogPluginProducerRequestAcksMinus1 CreateKafkaLogPluginProducerRequestAcks = -1
	CreateKafkaLogPluginProducerRequestAcksZero   CreateKafkaLogPluginProducerRequestAcks = 0
	CreateKafkaLogPluginProducerRequestAcksOne    CreateKafkaLogPluginProducerRequestAcks = 1
)

func (e CreateKafkaLogPluginProducerRequestAcks) ToPointer() *CreateKafkaLogPluginProducerRequestAcks {
	return &e
}
func (e *CreateKafkaLogPluginProducerRequestAcks) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 0:
		fallthrough
	case 1:
		*e = CreateKafkaLogPluginProducerRequestAcks(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateKafkaLogPluginProducerRequestAcks: %v", v)
	}
}

type CreateKafkaLogPluginSecurity struct {
	// UUID of certificate entity for mTLS authentication.
	CertificateID *string `json:"certificate_id,omitempty"`
	// Enables TLS.
	Ssl *bool `json:"ssl,omitempty"`
}

func (o *CreateKafkaLogPluginSecurity) GetCertificateID() *string {
	if o == nil {
		return nil
	}
	return o.CertificateID
}

func (o *CreateKafkaLogPluginSecurity) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

type CreateKafkaLogPluginConfig struct {
	Authentication *CreateKafkaLogPluginAuthentication `json:"authentication,omitempty"`
	// Set of bootstrap brokers in a `{host: host, port: port}` list format.
	BootstrapServers []CreateKafkaLogPluginBootstrapServers `json:"bootstrap_servers,omitempty"`
	// An identifier for the Kafka cluster. By default, this field generates a random string. You can also set your own custom cluster identifier.  If more than one Kafka plugin is configured without a `cluster_name` (that is, if the default autogenerated value is removed), these plugins will use the same producer, and by extension, the same cluster. Logs will be sent to the leader of the cluster.
	ClusterName *string `json:"cluster_name,omitempty"`
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	Keepalive         *int64         `json:"keepalive,omitempty"`
	KeepaliveEnabled  *bool          `json:"keepalive_enabled,omitempty"`
	// Flag to enable asynchronous mode.
	ProducerAsync *bool `json:"producer_async,omitempty"`
	// Maximum number of messages that can be buffered in memory in asynchronous mode.
	ProducerAsyncBufferingLimitsMessagesInMemory *int64 `json:"producer_async_buffering_limits_messages_in_memory,omitempty"`
	// Maximum time interval in milliseconds between buffer flushes in asynchronous mode.
	ProducerAsyncFlushTimeout *int64 `json:"producer_async_flush_timeout,omitempty"`
	// The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments; 1 for only the leader; and -1 for the full ISR (In-Sync Replica set).
	ProducerRequestAcks *CreateKafkaLogPluginProducerRequestAcks `json:"producer_request_acks,omitempty"`
	// Maximum size of a Produce request in bytes.
	ProducerRequestLimitsBytesPerRequest *int64 `json:"producer_request_limits_bytes_per_request,omitempty"`
	// Maximum number of messages to include into a single Produce request.
	ProducerRequestLimitsMessagesPerRequest *int64 `json:"producer_request_limits_messages_per_request,omitempty"`
	// Backoff interval between retry attempts in milliseconds.
	ProducerRequestRetriesBackoffTimeout *int64 `json:"producer_request_retries_backoff_timeout,omitempty"`
	// Maximum number of retry attempts per single Produce request.
	ProducerRequestRetriesMaxAttempts *int64 `json:"producer_request_retries_max_attempts,omitempty"`
	// Time to wait for a Produce response in milliseconds
	ProducerRequestTimeout *int64                        `json:"producer_request_timeout,omitempty"`
	Security               *CreateKafkaLogPluginSecurity `json:"security,omitempty"`
	// Socket timeout in milliseconds.
	Timeout *int64 `json:"timeout,omitempty"`
	// The Kafka topic to publish to.
	Topic *string `json:"topic,omitempty"`
}

func (o *CreateKafkaLogPluginConfig) GetAuthentication() *CreateKafkaLogPluginAuthentication {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *CreateKafkaLogPluginConfig) GetBootstrapServers() []CreateKafkaLogPluginBootstrapServers {
	if o == nil {
		return nil
	}
	return o.BootstrapServers
}

func (o *CreateKafkaLogPluginConfig) GetClusterName() *string {
	if o == nil {
		return nil
	}
	return o.ClusterName
}

func (o *CreateKafkaLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *CreateKafkaLogPluginConfig) GetKeepalive() *int64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *CreateKafkaLogPluginConfig) GetKeepaliveEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.KeepaliveEnabled
}

func (o *CreateKafkaLogPluginConfig) GetProducerAsync() *bool {
	if o == nil {
		return nil
	}
	return o.ProducerAsync
}

func (o *CreateKafkaLogPluginConfig) GetProducerAsyncBufferingLimitsMessagesInMemory() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerAsyncBufferingLimitsMessagesInMemory
}

func (o *CreateKafkaLogPluginConfig) GetProducerAsyncFlushTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerAsyncFlushTimeout
}

func (o *CreateKafkaLogPluginConfig) GetProducerRequestAcks() *CreateKafkaLogPluginProducerRequestAcks {
	if o == nil {
		return nil
	}
	return o.ProducerRequestAcks
}

func (o *CreateKafkaLogPluginConfig) GetProducerRequestLimitsBytesPerRequest() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerRequestLimitsBytesPerRequest
}

func (o *CreateKafkaLogPluginConfig) GetProducerRequestLimitsMessagesPerRequest() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerRequestLimitsMessagesPerRequest
}

func (o *CreateKafkaLogPluginConfig) GetProducerRequestRetriesBackoffTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerRequestRetriesBackoffTimeout
}

func (o *CreateKafkaLogPluginConfig) GetProducerRequestRetriesMaxAttempts() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerRequestRetriesMaxAttempts
}

func (o *CreateKafkaLogPluginConfig) GetProducerRequestTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ProducerRequestTimeout
}

func (o *CreateKafkaLogPluginConfig) GetSecurity() *CreateKafkaLogPluginSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *CreateKafkaLogPluginConfig) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *CreateKafkaLogPluginConfig) GetTopic() *string {
	if o == nil {
		return nil
	}
	return o.Topic
}

type CreateKafkaLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateKafkaLogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateKafkaLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateKafkaLogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateKafkaLogPluginOrdering struct {
	After  *CreateKafkaLogPluginAfter  `json:"after,omitempty"`
	Before *CreateKafkaLogPluginBefore `json:"before,omitempty"`
}

func (o *CreateKafkaLogPluginOrdering) GetAfter() *CreateKafkaLogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateKafkaLogPluginOrdering) GetBefore() *CreateKafkaLogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateKafkaLogPluginProtocols string

const (
	CreateKafkaLogPluginProtocolsGrpc           CreateKafkaLogPluginProtocols = "grpc"
	CreateKafkaLogPluginProtocolsGrpcs          CreateKafkaLogPluginProtocols = "grpcs"
	CreateKafkaLogPluginProtocolsHTTP           CreateKafkaLogPluginProtocols = "http"
	CreateKafkaLogPluginProtocolsHTTPS          CreateKafkaLogPluginProtocols = "https"
	CreateKafkaLogPluginProtocolsTCP            CreateKafkaLogPluginProtocols = "tcp"
	CreateKafkaLogPluginProtocolsTLS            CreateKafkaLogPluginProtocols = "tls"
	CreateKafkaLogPluginProtocolsTLSPassthrough CreateKafkaLogPluginProtocols = "tls_passthrough"
	CreateKafkaLogPluginProtocolsUDP            CreateKafkaLogPluginProtocols = "udp"
	CreateKafkaLogPluginProtocolsWs             CreateKafkaLogPluginProtocols = "ws"
	CreateKafkaLogPluginProtocolsWss            CreateKafkaLogPluginProtocols = "wss"
)

func (e CreateKafkaLogPluginProtocols) ToPointer() *CreateKafkaLogPluginProtocols {
	return &e
}
func (e *CreateKafkaLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateKafkaLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateKafkaLogPluginProtocols: %v", v)
	}
}

// CreateKafkaLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateKafkaLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKafkaLogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateKafkaLogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKafkaLogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateKafkaLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateKafkaLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKafkaLogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateKafkaLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateKafkaLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateKafkaLogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateKafkaLogPlugin struct {
	Config *CreateKafkaLogPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                         `json:"enabled,omitempty"`
	InstanceName *string                       `json:"instance_name,omitempty"`
	name         *string                       `const:"kafka-log" json:"name,omitempty"`
	Ordering     *CreateKafkaLogPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateKafkaLogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateKafkaLogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateKafkaLogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateKafkaLogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateKafkaLogPluginService `json:"service,omitempty"`
}

func (c CreateKafkaLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateKafkaLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateKafkaLogPlugin) GetConfig() *CreateKafkaLogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateKafkaLogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateKafkaLogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateKafkaLogPlugin) GetName() *string {
	return types.String("kafka-log")
}

func (o *CreateKafkaLogPlugin) GetOrdering() *CreateKafkaLogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateKafkaLogPlugin) GetProtocols() []CreateKafkaLogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateKafkaLogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateKafkaLogPlugin) GetConsumer() *CreateKafkaLogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateKafkaLogPlugin) GetConsumerGroup() *CreateKafkaLogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateKafkaLogPlugin) GetRoute() *CreateKafkaLogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateKafkaLogPlugin) GetService() *CreateKafkaLogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
