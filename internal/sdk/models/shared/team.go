// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
	"time"
)

// Team - The team object contains information about a group of users.
type Team struct {
	// The team ID.
	ID *string `json:"id,omitempty"`
	// The name of the team.
	Name *string `default:"null" json:"name"`
	// The team description in Konnect.
	Description *string `default:"null" json:"description"`
	// Returns True if a user belongs to a `system_team`. System teams are teams that can manage Konnect objects, like "Organization Admin", or "Service"
	SystemTeam *bool `default:"false" json:"system_team"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
	// A Unix timestamp representation of team creation.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A Unix timestamp representation of the most recent change to the team object in Konnect.
	//
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

func (t Team) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Team) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *Team) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *Team) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

func (t *Team) GetDescription() *string {
	if t == nil {
		return nil
	}
	return t.Description
}

func (t *Team) GetSystemTeam() *bool {
	if t == nil {
		return nil
	}
	return t.SystemTeam
}

func (t *Team) GetLabels() map[string]*string {
	if t == nil {
		return nil
	}
	return t.Labels
}

func (t *Team) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *Team) GetUpdatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}
