// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type ServiceProtectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *ServiceProtectionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type ServiceProtectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *ServiceProtectionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type ServiceProtectionPluginOrdering struct {
	After  *ServiceProtectionPluginAfter  `json:"after,omitempty"`
	Before *ServiceProtectionPluginBefore `json:"before,omitempty"`
}

func (o *ServiceProtectionPluginOrdering) GetAfter() *ServiceProtectionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ServiceProtectionPluginOrdering) GetBefore() *ServiceProtectionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type ServiceProtectionPluginPartials struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *ServiceProtectionPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ServiceProtectionPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ServiceProtectionPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type ServiceProtectionPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `json:"ip,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (o *ServiceProtectionPluginClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *ServiceProtectionPluginClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type ServiceProtectionPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (o *ServiceProtectionPluginSentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *ServiceProtectionPluginSentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// ServiceProtectionPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type ServiceProtectionPluginSentinelRole string

const (
	ServiceProtectionPluginSentinelRoleAny    ServiceProtectionPluginSentinelRole = "any"
	ServiceProtectionPluginSentinelRoleMaster ServiceProtectionPluginSentinelRole = "master"
	ServiceProtectionPluginSentinelRoleSlave  ServiceProtectionPluginSentinelRole = "slave"
)

func (e ServiceProtectionPluginSentinelRole) ToPointer() *ServiceProtectionPluginSentinelRole {
	return &e
}
func (e *ServiceProtectionPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = ServiceProtectionPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceProtectionPluginSentinelRole: %v", v)
	}
}

type ServiceProtectionPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `json:"cluster_max_redirections,omitempty"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []ServiceProtectionPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `json:"connection_is_proxied,omitempty"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `json:"keepalive_pool_size,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	// This field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).
	// This field is [encrypted](/gateway/keyring/).
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []ServiceProtectionPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	// This field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).
	// This field is [encrypted](/gateway/keyring/).
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *ServiceProtectionPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	// This field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	// This field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).
	Username *string `json:"username,omitempty"`
}

func (o *ServiceProtectionPluginRedis) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *ServiceProtectionPluginRedis) GetClusterNodes() []ServiceProtectionPluginClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *ServiceProtectionPluginRedis) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *ServiceProtectionPluginRedis) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *ServiceProtectionPluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *ServiceProtectionPluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *ServiceProtectionPluginRedis) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *ServiceProtectionPluginRedis) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *ServiceProtectionPluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *ServiceProtectionPluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ServiceProtectionPluginRedis) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *ServiceProtectionPluginRedis) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *ServiceProtectionPluginRedis) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *ServiceProtectionPluginRedis) GetSentinelNodes() []ServiceProtectionPluginSentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *ServiceProtectionPluginRedis) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *ServiceProtectionPluginRedis) GetSentinelRole() *ServiceProtectionPluginSentinelRole {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *ServiceProtectionPluginRedis) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *ServiceProtectionPluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *ServiceProtectionPluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *ServiceProtectionPluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *ServiceProtectionPluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// ServiceProtectionPluginStrategy - The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`.
type ServiceProtectionPluginStrategy string

const (
	ServiceProtectionPluginStrategyCluster ServiceProtectionPluginStrategy = "cluster"
	ServiceProtectionPluginStrategyLocal   ServiceProtectionPluginStrategy = "local"
	ServiceProtectionPluginStrategyRedis   ServiceProtectionPluginStrategy = "redis"
)

func (e ServiceProtectionPluginStrategy) ToPointer() *ServiceProtectionPluginStrategy {
	return &e
}
func (e *ServiceProtectionPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cluster":
		fallthrough
	case "local":
		fallthrough
	case "redis":
		*e = ServiceProtectionPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceProtectionPluginStrategy: %v", v)
	}
}

// ServiceProtectionPluginWindowType - Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters.
type ServiceProtectionPluginWindowType string

const (
	ServiceProtectionPluginWindowTypeFixed   ServiceProtectionPluginWindowType = "fixed"
	ServiceProtectionPluginWindowTypeSliding ServiceProtectionPluginWindowType = "sliding"
)

func (e ServiceProtectionPluginWindowType) ToPointer() *ServiceProtectionPluginWindowType {
	return &e
}
func (e *ServiceProtectionPluginWindowType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "sliding":
		*e = ServiceProtectionPluginWindowType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceProtectionPluginWindowType: %v", v)
	}
}

type ServiceProtectionPluginConfig struct {
	// The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.
	DictionaryName *string `json:"dictionary_name,omitempty"`
	// If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.
	DisablePenalty *bool `json:"disable_penalty,omitempty"`
	// Set a custom error code to return when the rate limit is exceeded.
	ErrorCode *float64 `json:"error_code,omitempty"`
	// Set a custom error message to return when the rate limit is exceeded.
	ErrorMessage *string `json:"error_message,omitempty"`
	// Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.
	HideClientHeaders *bool `json:"hide_client_headers,omitempty"`
	// One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
	Limit []float64 `json:"limit"`
	// The shared dictionary where concurrency control locks are stored. The default shared dictionary is `kong_locks`. The shared dictionary should be declared in nginx-kong.conf.
	LockDictionaryName *string `json:"lock_dictionary_name,omitempty"`
	// The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `dictionary_name`, need to be the same.
	Namespace string                        `json:"namespace"`
	Redis     *ServiceProtectionPluginRedis `json:"redis,omitempty"`
	// The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.
	RetryAfterJitterMax *float64 `json:"retry_after_jitter_max,omitempty"`
	// The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`.
	Strategy *ServiceProtectionPluginStrategy `json:"strategy,omitempty"`
	// How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).
	SyncRate *float64 `json:"sync_rate,omitempty"`
	// One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
	WindowSize []float64 `json:"window_size"`
	// Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters.
	WindowType *ServiceProtectionPluginWindowType `json:"window_type,omitempty"`
}

func (o *ServiceProtectionPluginConfig) GetDictionaryName() *string {
	if o == nil {
		return nil
	}
	return o.DictionaryName
}

func (o *ServiceProtectionPluginConfig) GetDisablePenalty() *bool {
	if o == nil {
		return nil
	}
	return o.DisablePenalty
}

func (o *ServiceProtectionPluginConfig) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *ServiceProtectionPluginConfig) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *ServiceProtectionPluginConfig) GetHideClientHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.HideClientHeaders
}

func (o *ServiceProtectionPluginConfig) GetLimit() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.Limit
}

func (o *ServiceProtectionPluginConfig) GetLockDictionaryName() *string {
	if o == nil {
		return nil
	}
	return o.LockDictionaryName
}

func (o *ServiceProtectionPluginConfig) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *ServiceProtectionPluginConfig) GetRedis() *ServiceProtectionPluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *ServiceProtectionPluginConfig) GetRetryAfterJitterMax() *float64 {
	if o == nil {
		return nil
	}
	return o.RetryAfterJitterMax
}

func (o *ServiceProtectionPluginConfig) GetStrategy() *ServiceProtectionPluginStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *ServiceProtectionPluginConfig) GetSyncRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SyncRate
}

func (o *ServiceProtectionPluginConfig) GetWindowSize() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.WindowSize
}

func (o *ServiceProtectionPluginConfig) GetWindowType() *ServiceProtectionPluginWindowType {
	if o == nil {
		return nil
	}
	return o.WindowType
}

type ServiceProtectionPluginProtocols string

const (
	ServiceProtectionPluginProtocolsGrpc  ServiceProtectionPluginProtocols = "grpc"
	ServiceProtectionPluginProtocolsGrpcs ServiceProtectionPluginProtocols = "grpcs"
	ServiceProtectionPluginProtocolsHTTP  ServiceProtectionPluginProtocols = "http"
	ServiceProtectionPluginProtocolsHTTPS ServiceProtectionPluginProtocols = "https"
)

func (e ServiceProtectionPluginProtocols) ToPointer() *ServiceProtectionPluginProtocols {
	return &e
}
func (e *ServiceProtectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ServiceProtectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceProtectionPluginProtocols: %v", v)
	}
}

// ServiceProtectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ServiceProtectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *ServiceProtectionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ServiceProtectionPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ServiceProtectionPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                             `json:"enabled,omitempty"`
	ID           *string                           `json:"id,omitempty"`
	InstanceName *string                           `json:"instance_name,omitempty"`
	name         string                            `const:"service-protection" json:"name"`
	Ordering     *ServiceProtectionPluginOrdering  `json:"ordering,omitempty"`
	Partials     []ServiceProtectionPluginPartials `json:"partials,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                        `json:"updated_at,omitempty"`
	Config    ServiceProtectionPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []ServiceProtectionPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ServiceProtectionPluginService `json:"service"`
}

func (s ServiceProtectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ServiceProtectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ServiceProtectionPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ServiceProtectionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ServiceProtectionPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ServiceProtectionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *ServiceProtectionPlugin) GetName() string {
	return "service-protection"
}

func (o *ServiceProtectionPlugin) GetOrdering() *ServiceProtectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *ServiceProtectionPlugin) GetPartials() []ServiceProtectionPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *ServiceProtectionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ServiceProtectionPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ServiceProtectionPlugin) GetConfig() ServiceProtectionPluginConfig {
	if o == nil {
		return ServiceProtectionPluginConfig{}
	}
	return o.Config
}

func (o *ServiceProtectionPlugin) GetProtocols() []ServiceProtectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *ServiceProtectionPlugin) GetService() *ServiceProtectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
