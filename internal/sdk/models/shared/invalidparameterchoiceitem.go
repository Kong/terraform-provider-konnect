// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InvalidParameterChoiceItemRule - invalid parameters rules
type InvalidParameterChoiceItemRule string

const (
	InvalidParameterChoiceItemRuleEnum InvalidParameterChoiceItemRule = "enum"
)

func (e InvalidParameterChoiceItemRule) ToPointer() *InvalidParameterChoiceItemRule {
	return &e
}
func (e *InvalidParameterChoiceItemRule) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enum":
		*e = InvalidParameterChoiceItemRule(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidParameterChoiceItemRule: %v", v)
	}
}

type InvalidParameterChoiceItem struct {
	Choices []any  `json:"choices"`
	Field   string `json:"field"`
	Reason  string `json:"reason"`
	// invalid parameters rules
	Rule   InvalidParameterChoiceItemRule `json:"rule"`
	Source *string                        `json:"source,omitempty"`
}

func (o *InvalidParameterChoiceItem) GetChoices() []any {
	if o == nil {
		return []any{}
	}
	return o.Choices
}

func (o *InvalidParameterChoiceItem) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *InvalidParameterChoiceItem) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *InvalidParameterChoiceItem) GetRule() InvalidParameterChoiceItemRule {
	if o == nil {
		return InvalidParameterChoiceItemRule("")
	}
	return o.Rule
}

func (o *InvalidParameterChoiceItem) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}
