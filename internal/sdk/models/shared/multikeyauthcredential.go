// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"time"
)

// MultiKeyAuthCredential - Represents a credential scoped to an integration instance that supports the `Multi Key` authorization strategy.
type MultiKeyAuthCredential struct {
	ID string `json:"id"`
	// Short-hand descriptor of an integration instance.
	IntegrationInstance IntegrationInstanceRef `json:"integration_instance"`
	// List of detected missing permissions required to enable the full functionality of the given integration instance.
	MissingPermissions []MissingPermission `json:"missing_permissions"`
	// Indicates that the credential is no longer valid and must be replaced with a new valid credential.
	Tainted bool `json:"tainted"`
	// Timestamp denoting when the when the credential will expire in RFC-3339 format with a "T" character separating date from time within the field value.
	// When expired, the credential must be replaced with a new valid credential to re-enable full functionality for the given integration instance.
	//
	// A `null` value indicates no known expiration time.
	//
	ExpiresAt *time.Time `json:"expires_at"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt time.Time `json:"created_at"`
	type_     string    `const:"multi_key_auth" json:"type"`
}

func (m MultiKeyAuthCredential) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MultiKeyAuthCredential) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *MultiKeyAuthCredential) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MultiKeyAuthCredential) GetIntegrationInstance() IntegrationInstanceRef {
	if o == nil {
		return IntegrationInstanceRef{}
	}
	return o.IntegrationInstance
}

func (o *MultiKeyAuthCredential) GetMissingPermissions() []MissingPermission {
	if o == nil {
		return []MissingPermission{}
	}
	return o.MissingPermissions
}

func (o *MultiKeyAuthCredential) GetTainted() bool {
	if o == nil {
		return false
	}
	return o.Tainted
}

func (o *MultiKeyAuthCredential) GetExpiresAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *MultiKeyAuthCredential) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *MultiKeyAuthCredential) GetType() string {
	return "multi_key_auth"
}
