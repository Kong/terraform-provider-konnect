// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateAiResponseTransformerPluginParamLocation - Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
type CreateAiResponseTransformerPluginParamLocation string

const (
	CreateAiResponseTransformerPluginParamLocationQuery CreateAiResponseTransformerPluginParamLocation = "query"
	CreateAiResponseTransformerPluginParamLocationBody  CreateAiResponseTransformerPluginParamLocation = "body"
)

func (e CreateAiResponseTransformerPluginParamLocation) ToPointer() *CreateAiResponseTransformerPluginParamLocation {
	return &e
}
func (e *CreateAiResponseTransformerPluginParamLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "query":
		fallthrough
	case "body":
		*e = CreateAiResponseTransformerPluginParamLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiResponseTransformerPluginParamLocation: %v", v)
	}
}

type CreateAiResponseTransformerPluginAuth struct {
	// If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.
	AllowOverride *bool `json:"allow_override,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.
	AwsAccessKeyID *string `json:"aws_access_key_id,omitempty"`
	// Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.
	AwsSecretAccessKey *string `json:"aws_secret_access_key,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
	AzureClientID *string `json:"azure_client_id,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
	AzureClientSecret *string `json:"azure_client_secret,omitempty"`
	// If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
	AzureTenantID *string `json:"azure_tenant_id,omitempty"`
	// Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
	AzureUseManagedIdentity *bool `json:"azure_use_managed_identity,omitempty"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.
	GcpServiceAccountJSON *string `json:"gcp_service_account_json,omitempty"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `json:"gcp_use_service_account,omitempty"`
	// If AI model requires authentication via Authorization or API key header, specify its name here.
	HeaderName *string `json:"header_name,omitempty"`
	// Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
	HeaderValue *string `json:"header_value,omitempty"`
	// Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.
	ParamLocation *CreateAiResponseTransformerPluginParamLocation `json:"param_location,omitempty"`
	// If AI model requires authentication via query parameter, specify its name here.
	ParamName *string `json:"param_name,omitempty"`
	// Specify the full parameter value for 'param_name'.
	ParamValue *string `json:"param_value,omitempty"`
}

func (o *CreateAiResponseTransformerPluginAuth) GetAllowOverride() *bool {
	if o == nil {
		return nil
	}
	return o.AllowOverride
}

func (o *CreateAiResponseTransformerPluginAuth) GetAwsAccessKeyID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccessKeyID
}

func (o *CreateAiResponseTransformerPluginAuth) GetAwsSecretAccessKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretAccessKey
}

func (o *CreateAiResponseTransformerPluginAuth) GetAzureClientID() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientID
}

func (o *CreateAiResponseTransformerPluginAuth) GetAzureClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.AzureClientSecret
}

func (o *CreateAiResponseTransformerPluginAuth) GetAzureTenantID() *string {
	if o == nil {
		return nil
	}
	return o.AzureTenantID
}

func (o *CreateAiResponseTransformerPluginAuth) GetAzureUseManagedIdentity() *bool {
	if o == nil {
		return nil
	}
	return o.AzureUseManagedIdentity
}

func (o *CreateAiResponseTransformerPluginAuth) GetGcpServiceAccountJSON() *string {
	if o == nil {
		return nil
	}
	return o.GcpServiceAccountJSON
}

func (o *CreateAiResponseTransformerPluginAuth) GetGcpUseServiceAccount() *bool {
	if o == nil {
		return nil
	}
	return o.GcpUseServiceAccount
}

func (o *CreateAiResponseTransformerPluginAuth) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *CreateAiResponseTransformerPluginAuth) GetHeaderValue() *string {
	if o == nil {
		return nil
	}
	return o.HeaderValue
}

func (o *CreateAiResponseTransformerPluginAuth) GetParamLocation() *CreateAiResponseTransformerPluginParamLocation {
	if o == nil {
		return nil
	}
	return o.ParamLocation
}

func (o *CreateAiResponseTransformerPluginAuth) GetParamName() *string {
	if o == nil {
		return nil
	}
	return o.ParamName
}

func (o *CreateAiResponseTransformerPluginAuth) GetParamValue() *string {
	if o == nil {
		return nil
	}
	return o.ParamValue
}

type CreateAiResponseTransformerPluginLogging struct {
	// If enabled, will log the request and response body into the Kong log plugin(s) output.
	LogPayloads *bool `json:"log_payloads,omitempty"`
	// If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
	LogStatistics *bool `json:"log_statistics,omitempty"`
}

func (o *CreateAiResponseTransformerPluginLogging) GetLogPayloads() *bool {
	if o == nil {
		return nil
	}
	return o.LogPayloads
}

func (o *CreateAiResponseTransformerPluginLogging) GetLogStatistics() *bool {
	if o == nil {
		return nil
	}
	return o.LogStatistics
}

type CreateAiResponseTransformerPluginBedrock struct {
	// If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.
	AwsRegion *string `json:"aws_region,omitempty"`
}

func (o *CreateAiResponseTransformerPluginBedrock) GetAwsRegion() *string {
	if o == nil {
		return nil
	}
	return o.AwsRegion
}

type CreateAiResponseTransformerPluginGemini struct {
	// If running Gemini on Vertex, specify the regional API endpoint (hostname only).
	APIEndpoint *string `json:"api_endpoint,omitempty"`
	// If running Gemini on Vertex, specify the location ID.
	LocationID *string `json:"location_id,omitempty"`
	// If running Gemini on Vertex, specify the project ID.
	ProjectID *string `json:"project_id,omitempty"`
}

func (o *CreateAiResponseTransformerPluginGemini) GetAPIEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.APIEndpoint
}

func (o *CreateAiResponseTransformerPluginGemini) GetLocationID() *string {
	if o == nil {
		return nil
	}
	return o.LocationID
}

func (o *CreateAiResponseTransformerPluginGemini) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

// CreateAiResponseTransformerPluginLlama2Format - If using llama2 provider, select the upstream message format.
type CreateAiResponseTransformerPluginLlama2Format string

const (
	CreateAiResponseTransformerPluginLlama2FormatRaw    CreateAiResponseTransformerPluginLlama2Format = "raw"
	CreateAiResponseTransformerPluginLlama2FormatOpenai CreateAiResponseTransformerPluginLlama2Format = "openai"
	CreateAiResponseTransformerPluginLlama2FormatOllama CreateAiResponseTransformerPluginLlama2Format = "ollama"
)

func (e CreateAiResponseTransformerPluginLlama2Format) ToPointer() *CreateAiResponseTransformerPluginLlama2Format {
	return &e
}
func (e *CreateAiResponseTransformerPluginLlama2Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raw":
		fallthrough
	case "openai":
		fallthrough
	case "ollama":
		*e = CreateAiResponseTransformerPluginLlama2Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiResponseTransformerPluginLlama2Format: %v", v)
	}
}

// CreateAiResponseTransformerPluginMistralFormat - If using mistral provider, select the upstream message format.
type CreateAiResponseTransformerPluginMistralFormat string

const (
	CreateAiResponseTransformerPluginMistralFormatOpenai CreateAiResponseTransformerPluginMistralFormat = "openai"
	CreateAiResponseTransformerPluginMistralFormatOllama CreateAiResponseTransformerPluginMistralFormat = "ollama"
)

func (e CreateAiResponseTransformerPluginMistralFormat) ToPointer() *CreateAiResponseTransformerPluginMistralFormat {
	return &e
}
func (e *CreateAiResponseTransformerPluginMistralFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		fallthrough
	case "ollama":
		*e = CreateAiResponseTransformerPluginMistralFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiResponseTransformerPluginMistralFormat: %v", v)
	}
}

// CreateAiResponseTransformerPluginOptions - Key/value settings for the model
type CreateAiResponseTransformerPluginOptions struct {
	// Defines the schema/API version, if using Anthropic provider.
	AnthropicVersion *string `json:"anthropic_version,omitempty"`
	// 'api-version' for Azure OpenAI instances.
	AzureAPIVersion *string `json:"azure_api_version,omitempty"`
	// Deployment ID for Azure OpenAI instances.
	AzureDeploymentID *string `json:"azure_deployment_id,omitempty"`
	// Instance name for Azure OpenAI hosted models.
	AzureInstance *string                                   `json:"azure_instance,omitempty"`
	Bedrock       *CreateAiResponseTransformerPluginBedrock `json:"bedrock,omitempty"`
	Gemini        *CreateAiResponseTransformerPluginGemini  `json:"gemini,omitempty"`
	// Defines the cost per 1M tokens in your prompt.
	InputCost *float64 `json:"input_cost,omitempty"`
	// If using llama2 provider, select the upstream message format.
	Llama2Format *CreateAiResponseTransformerPluginLlama2Format `json:"llama2_format,omitempty"`
	// Defines the max_tokens, if using chat or completion models.
	MaxTokens *int64 `json:"max_tokens,omitempty"`
	// If using mistral provider, select the upstream message format.
	MistralFormat *CreateAiResponseTransformerPluginMistralFormat `json:"mistral_format,omitempty"`
	// Defines the cost per 1M tokens in the output of the AI.
	OutputCost *float64 `json:"output_cost,omitempty"`
	// Defines the matching temperature, if using chat or completion models.
	Temperature *float64 `json:"temperature,omitempty"`
	// Defines the top-k most likely tokens, if supported.
	TopK *int64 `json:"top_k,omitempty"`
	// Defines the top-p probability mass, if supported.
	TopP *float64 `json:"top_p,omitempty"`
	// Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.
	UpstreamPath *string `json:"upstream_path,omitempty"`
	// Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
	UpstreamURL *string `json:"upstream_url,omitempty"`
}

func (o *CreateAiResponseTransformerPluginOptions) GetAnthropicVersion() *string {
	if o == nil {
		return nil
	}
	return o.AnthropicVersion
}

func (o *CreateAiResponseTransformerPluginOptions) GetAzureAPIVersion() *string {
	if o == nil {
		return nil
	}
	return o.AzureAPIVersion
}

func (o *CreateAiResponseTransformerPluginOptions) GetAzureDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.AzureDeploymentID
}

func (o *CreateAiResponseTransformerPluginOptions) GetAzureInstance() *string {
	if o == nil {
		return nil
	}
	return o.AzureInstance
}

func (o *CreateAiResponseTransformerPluginOptions) GetBedrock() *CreateAiResponseTransformerPluginBedrock {
	if o == nil {
		return nil
	}
	return o.Bedrock
}

func (o *CreateAiResponseTransformerPluginOptions) GetGemini() *CreateAiResponseTransformerPluginGemini {
	if o == nil {
		return nil
	}
	return o.Gemini
}

func (o *CreateAiResponseTransformerPluginOptions) GetInputCost() *float64 {
	if o == nil {
		return nil
	}
	return o.InputCost
}

func (o *CreateAiResponseTransformerPluginOptions) GetLlama2Format() *CreateAiResponseTransformerPluginLlama2Format {
	if o == nil {
		return nil
	}
	return o.Llama2Format
}

func (o *CreateAiResponseTransformerPluginOptions) GetMaxTokens() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxTokens
}

func (o *CreateAiResponseTransformerPluginOptions) GetMistralFormat() *CreateAiResponseTransformerPluginMistralFormat {
	if o == nil {
		return nil
	}
	return o.MistralFormat
}

func (o *CreateAiResponseTransformerPluginOptions) GetOutputCost() *float64 {
	if o == nil {
		return nil
	}
	return o.OutputCost
}

func (o *CreateAiResponseTransformerPluginOptions) GetTemperature() *float64 {
	if o == nil {
		return nil
	}
	return o.Temperature
}

func (o *CreateAiResponseTransformerPluginOptions) GetTopK() *int64 {
	if o == nil {
		return nil
	}
	return o.TopK
}

func (o *CreateAiResponseTransformerPluginOptions) GetTopP() *float64 {
	if o == nil {
		return nil
	}
	return o.TopP
}

func (o *CreateAiResponseTransformerPluginOptions) GetUpstreamPath() *string {
	if o == nil {
		return nil
	}
	return o.UpstreamPath
}

func (o *CreateAiResponseTransformerPluginOptions) GetUpstreamURL() *string {
	if o == nil {
		return nil
	}
	return o.UpstreamURL
}

// CreateAiResponseTransformerPluginProvider - AI provider request format - Kong translates requests to and from the specified backend compatible formats.
type CreateAiResponseTransformerPluginProvider string

const (
	CreateAiResponseTransformerPluginProviderOpenai    CreateAiResponseTransformerPluginProvider = "openai"
	CreateAiResponseTransformerPluginProviderAzure     CreateAiResponseTransformerPluginProvider = "azure"
	CreateAiResponseTransformerPluginProviderAnthropic CreateAiResponseTransformerPluginProvider = "anthropic"
	CreateAiResponseTransformerPluginProviderCohere    CreateAiResponseTransformerPluginProvider = "cohere"
	CreateAiResponseTransformerPluginProviderMistral   CreateAiResponseTransformerPluginProvider = "mistral"
	CreateAiResponseTransformerPluginProviderLlama2    CreateAiResponseTransformerPluginProvider = "llama2"
	CreateAiResponseTransformerPluginProviderGemini    CreateAiResponseTransformerPluginProvider = "gemini"
	CreateAiResponseTransformerPluginProviderBedrock   CreateAiResponseTransformerPluginProvider = "bedrock"
)

func (e CreateAiResponseTransformerPluginProvider) ToPointer() *CreateAiResponseTransformerPluginProvider {
	return &e
}
func (e *CreateAiResponseTransformerPluginProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "openai":
		fallthrough
	case "azure":
		fallthrough
	case "anthropic":
		fallthrough
	case "cohere":
		fallthrough
	case "mistral":
		fallthrough
	case "llama2":
		fallthrough
	case "gemini":
		fallthrough
	case "bedrock":
		*e = CreateAiResponseTransformerPluginProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiResponseTransformerPluginProvider: %v", v)
	}
}

type CreateAiResponseTransformerPluginModel struct {
	// Model name to execute.
	Name *string `json:"name,omitempty"`
	// Key/value settings for the model
	Options *CreateAiResponseTransformerPluginOptions `json:"options,omitempty"`
	// AI provider request format - Kong translates requests to and from the specified backend compatible formats.
	Provider *CreateAiResponseTransformerPluginProvider `json:"provider,omitempty"`
}

func (o *CreateAiResponseTransformerPluginModel) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateAiResponseTransformerPluginModel) GetOptions() *CreateAiResponseTransformerPluginOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *CreateAiResponseTransformerPluginModel) GetProvider() *CreateAiResponseTransformerPluginProvider {
	if o == nil {
		return nil
	}
	return o.Provider
}

// CreateAiResponseTransformerPluginRouteType - The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation.
type CreateAiResponseTransformerPluginRouteType string

const (
	CreateAiResponseTransformerPluginRouteTypeLlmV1Chat        CreateAiResponseTransformerPluginRouteType = "llm/v1/chat"
	CreateAiResponseTransformerPluginRouteTypeLlmV1Completions CreateAiResponseTransformerPluginRouteType = "llm/v1/completions"
	CreateAiResponseTransformerPluginRouteTypePreserve         CreateAiResponseTransformerPluginRouteType = "preserve"
)

func (e CreateAiResponseTransformerPluginRouteType) ToPointer() *CreateAiResponseTransformerPluginRouteType {
	return &e
}
func (e *CreateAiResponseTransformerPluginRouteType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "llm/v1/chat":
		fallthrough
	case "llm/v1/completions":
		fallthrough
	case "preserve":
		*e = CreateAiResponseTransformerPluginRouteType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiResponseTransformerPluginRouteType: %v", v)
	}
}

type CreateAiResponseTransformerPluginLlm struct {
	Auth    *CreateAiResponseTransformerPluginAuth    `json:"auth,omitempty"`
	Logging *CreateAiResponseTransformerPluginLogging `json:"logging,omitempty"`
	Model   *CreateAiResponseTransformerPluginModel   `json:"model,omitempty"`
	// The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation.
	RouteType *CreateAiResponseTransformerPluginRouteType `json:"route_type,omitempty"`
}

func (o *CreateAiResponseTransformerPluginLlm) GetAuth() *CreateAiResponseTransformerPluginAuth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *CreateAiResponseTransformerPluginLlm) GetLogging() *CreateAiResponseTransformerPluginLogging {
	if o == nil {
		return nil
	}
	return o.Logging
}

func (o *CreateAiResponseTransformerPluginLlm) GetModel() *CreateAiResponseTransformerPluginModel {
	if o == nil {
		return nil
	}
	return o.Model
}

func (o *CreateAiResponseTransformerPluginLlm) GetRouteType() *CreateAiResponseTransformerPluginRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

type CreateAiResponseTransformerPluginConfig struct {
	// A string representing a host name, such as example.com.
	HTTPProxyHost *string `json:"http_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPProxyPort *int64 `json:"http_proxy_port,omitempty"`
	// Timeout in milliseconds for the AI upstream service.
	HTTPTimeout *int64 `json:"http_timeout,omitempty"`
	// A string representing a host name, such as example.com.
	HTTPSProxyHost *string `json:"https_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPSProxyPort *int64 `json:"https_proxy_port,omitempty"`
	// Verify the TLS certificate of the AI upstream service.
	HTTPSVerify *bool                                 `json:"https_verify,omitempty"`
	Llm         *CreateAiResponseTransformerPluginLlm `json:"llm,omitempty"`
	// max allowed body size allowed to be introspected
	MaxRequestBodySize *int64 `json:"max_request_body_size,omitempty"`
	// Set true to read specific response format from the LLM, and accordingly set the status code / body / headers that proxy back to the client. You need to engineer your LLM prompt to return the correct format, see plugin docs 'Overview' page for usage instructions.
	ParseLlmResponseJSONInstructions *bool `json:"parse_llm_response_json_instructions,omitempty"`
	// Use this prompt to tune the LLM system/assistant message for the returning proxy response (from the upstream), adn what response format you are expecting.
	Prompt *string `json:"prompt,omitempty"`
	// Defines the regular expression that must match to indicate a successful AI transformation at the response phase. The first match will be set as the returning body. If the AI service's response doesn't match this pattern, a failure is returned to the client.
	TransformationExtractPattern *string `json:"transformation_extract_pattern,omitempty"`
}

func (o *CreateAiResponseTransformerPluginConfig) GetHTTPProxyHost() *string {
	if o == nil {
		return nil
	}
	return o.HTTPProxyHost
}

func (o *CreateAiResponseTransformerPluginConfig) GetHTTPProxyPort() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPProxyPort
}

func (o *CreateAiResponseTransformerPluginConfig) GetHTTPTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPTimeout
}

func (o *CreateAiResponseTransformerPluginConfig) GetHTTPSProxyHost() *string {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyHost
}

func (o *CreateAiResponseTransformerPluginConfig) GetHTTPSProxyPort() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyPort
}

func (o *CreateAiResponseTransformerPluginConfig) GetHTTPSVerify() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPSVerify
}

func (o *CreateAiResponseTransformerPluginConfig) GetLlm() *CreateAiResponseTransformerPluginLlm {
	if o == nil {
		return nil
	}
	return o.Llm
}

func (o *CreateAiResponseTransformerPluginConfig) GetMaxRequestBodySize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRequestBodySize
}

func (o *CreateAiResponseTransformerPluginConfig) GetParseLlmResponseJSONInstructions() *bool {
	if o == nil {
		return nil
	}
	return o.ParseLlmResponseJSONInstructions
}

func (o *CreateAiResponseTransformerPluginConfig) GetPrompt() *string {
	if o == nil {
		return nil
	}
	return o.Prompt
}

func (o *CreateAiResponseTransformerPluginConfig) GetTransformationExtractPattern() *string {
	if o == nil {
		return nil
	}
	return o.TransformationExtractPattern
}

type CreateAiResponseTransformerPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAiResponseTransformerPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAiResponseTransformerPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateAiResponseTransformerPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateAiResponseTransformerPluginOrdering struct {
	After  *CreateAiResponseTransformerPluginAfter  `json:"after,omitempty"`
	Before *CreateAiResponseTransformerPluginBefore `json:"before,omitempty"`
}

func (o *CreateAiResponseTransformerPluginOrdering) GetAfter() *CreateAiResponseTransformerPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateAiResponseTransformerPluginOrdering) GetBefore() *CreateAiResponseTransformerPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateAiResponseTransformerPluginProtocols string

const (
	CreateAiResponseTransformerPluginProtocolsGrpc           CreateAiResponseTransformerPluginProtocols = "grpc"
	CreateAiResponseTransformerPluginProtocolsGrpcs          CreateAiResponseTransformerPluginProtocols = "grpcs"
	CreateAiResponseTransformerPluginProtocolsHTTP           CreateAiResponseTransformerPluginProtocols = "http"
	CreateAiResponseTransformerPluginProtocolsHTTPS          CreateAiResponseTransformerPluginProtocols = "https"
	CreateAiResponseTransformerPluginProtocolsTCP            CreateAiResponseTransformerPluginProtocols = "tcp"
	CreateAiResponseTransformerPluginProtocolsTLS            CreateAiResponseTransformerPluginProtocols = "tls"
	CreateAiResponseTransformerPluginProtocolsTLSPassthrough CreateAiResponseTransformerPluginProtocols = "tls_passthrough"
	CreateAiResponseTransformerPluginProtocolsUDP            CreateAiResponseTransformerPluginProtocols = "udp"
	CreateAiResponseTransformerPluginProtocolsWs             CreateAiResponseTransformerPluginProtocols = "ws"
	CreateAiResponseTransformerPluginProtocolsWss            CreateAiResponseTransformerPluginProtocols = "wss"
)

func (e CreateAiResponseTransformerPluginProtocols) ToPointer() *CreateAiResponseTransformerPluginProtocols {
	return &e
}
func (e *CreateAiResponseTransformerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateAiResponseTransformerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAiResponseTransformerPluginProtocols: %v", v)
	}
}

// CreateAiResponseTransformerPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateAiResponseTransformerPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiResponseTransformerPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAiResponseTransformerPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiResponseTransformerPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAiResponseTransformerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateAiResponseTransformerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiResponseTransformerPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateAiResponseTransformerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateAiResponseTransformerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateAiResponseTransformerPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateAiResponseTransformerPlugin struct {
	Config *CreateAiResponseTransformerPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                      `json:"enabled,omitempty"`
	InstanceName *string                                    `json:"instance_name,omitempty"`
	name         *string                                    `const:"ai-response-transformer" json:"name,omitempty"`
	Ordering     *CreateAiResponseTransformerPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateAiResponseTransformerPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateAiResponseTransformerPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateAiResponseTransformerPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateAiResponseTransformerPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateAiResponseTransformerPluginService `json:"service,omitempty"`
}

func (c CreateAiResponseTransformerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAiResponseTransformerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAiResponseTransformerPlugin) GetConfig() *CreateAiResponseTransformerPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateAiResponseTransformerPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateAiResponseTransformerPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateAiResponseTransformerPlugin) GetName() *string {
	return types.String("ai-response-transformer")
}

func (o *CreateAiResponseTransformerPlugin) GetOrdering() *CreateAiResponseTransformerPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateAiResponseTransformerPlugin) GetProtocols() []CreateAiResponseTransformerPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateAiResponseTransformerPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateAiResponseTransformerPlugin) GetConsumer() *CreateAiResponseTransformerPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateAiResponseTransformerPlugin) GetConsumerGroup() *CreateAiResponseTransformerPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateAiResponseTransformerPlugin) GetRoute() *CreateAiResponseTransformerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateAiResponseTransformerPlugin) GetService() *CreateAiResponseTransformerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
