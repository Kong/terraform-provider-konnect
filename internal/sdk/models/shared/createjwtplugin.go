// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateJwtPluginClaimsToVerify string

const (
	CreateJwtPluginClaimsToVerifyExp CreateJwtPluginClaimsToVerify = "exp"
	CreateJwtPluginClaimsToVerifyNbf CreateJwtPluginClaimsToVerify = "nbf"
)

func (e CreateJwtPluginClaimsToVerify) ToPointer() *CreateJwtPluginClaimsToVerify {
	return &e
}
func (e *CreateJwtPluginClaimsToVerify) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exp":
		fallthrough
	case "nbf":
		*e = CreateJwtPluginClaimsToVerify(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateJwtPluginClaimsToVerify: %v", v)
	}
}

type CreateJwtPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
	Anonymous *string `json:"anonymous,omitempty"`
	// A list of registered claims (according to RFC 7519) that Kong can verify as well. Accepted values: one of exp or nbf.
	ClaimsToVerify []CreateJwtPluginClaimsToVerify `json:"claims_to_verify,omitempty"`
	// A list of cookie names that Kong will inspect to retrieve JWTs.
	CookieNames []string `json:"cookie_names,omitempty"`
	// A list of HTTP header names that Kong will inspect to retrieve JWTs.
	HeaderNames []string `json:"header_names,omitempty"`
	// The name of the claim in which the key identifying the secret must be passed. The plugin will attempt to read this claim from the JWT payload and the header, in that order.
	KeyClaimName *string `json:"key_claim_name,omitempty"`
	// A value between 0 and 31536000 (365 days) limiting the lifetime of the JWT to maximum_expiration seconds in the future.
	MaximumExpiration *float64 `json:"maximum_expiration,omitempty"`
	// When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
	Realm *string `json:"realm,omitempty"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on OPTIONS preflight requests. If set to false, then OPTIONS requests will always be allowed.
	RunOnPreflight *bool `json:"run_on_preflight,omitempty"`
	// If true, the plugin assumes the credential’s secret to be base64 encoded. You will need to create a base64-encoded secret for your Consumer, and sign your JWT with the original secret.
	SecretIsBase64 *bool `json:"secret_is_base64,omitempty"`
	// A list of querystring parameters that Kong will inspect to retrieve JWTs.
	URIParamNames []string `json:"uri_param_names,omitempty"`
}

func (o *CreateJwtPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *CreateJwtPluginConfig) GetClaimsToVerify() []CreateJwtPluginClaimsToVerify {
	if o == nil {
		return nil
	}
	return o.ClaimsToVerify
}

func (o *CreateJwtPluginConfig) GetCookieNames() []string {
	if o == nil {
		return nil
	}
	return o.CookieNames
}

func (o *CreateJwtPluginConfig) GetHeaderNames() []string {
	if o == nil {
		return nil
	}
	return o.HeaderNames
}

func (o *CreateJwtPluginConfig) GetKeyClaimName() *string {
	if o == nil {
		return nil
	}
	return o.KeyClaimName
}

func (o *CreateJwtPluginConfig) GetMaximumExpiration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaximumExpiration
}

func (o *CreateJwtPluginConfig) GetRealm() *string {
	if o == nil {
		return nil
	}
	return o.Realm
}

func (o *CreateJwtPluginConfig) GetRunOnPreflight() *bool {
	if o == nil {
		return nil
	}
	return o.RunOnPreflight
}

func (o *CreateJwtPluginConfig) GetSecretIsBase64() *bool {
	if o == nil {
		return nil
	}
	return o.SecretIsBase64
}

func (o *CreateJwtPluginConfig) GetURIParamNames() []string {
	if o == nil {
		return nil
	}
	return o.URIParamNames
}

type CreateJwtPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateJwtPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateJwtPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateJwtPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateJwtPluginOrdering struct {
	After  *CreateJwtPluginAfter  `json:"after,omitempty"`
	Before *CreateJwtPluginBefore `json:"before,omitempty"`
}

func (o *CreateJwtPluginOrdering) GetAfter() *CreateJwtPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateJwtPluginOrdering) GetBefore() *CreateJwtPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateJwtPluginProtocols string

const (
	CreateJwtPluginProtocolsGrpc           CreateJwtPluginProtocols = "grpc"
	CreateJwtPluginProtocolsGrpcs          CreateJwtPluginProtocols = "grpcs"
	CreateJwtPluginProtocolsHTTP           CreateJwtPluginProtocols = "http"
	CreateJwtPluginProtocolsHTTPS          CreateJwtPluginProtocols = "https"
	CreateJwtPluginProtocolsTCP            CreateJwtPluginProtocols = "tcp"
	CreateJwtPluginProtocolsTLS            CreateJwtPluginProtocols = "tls"
	CreateJwtPluginProtocolsTLSPassthrough CreateJwtPluginProtocols = "tls_passthrough"
	CreateJwtPluginProtocolsUDP            CreateJwtPluginProtocols = "udp"
	CreateJwtPluginProtocolsWs             CreateJwtPluginProtocols = "ws"
	CreateJwtPluginProtocolsWss            CreateJwtPluginProtocols = "wss"
)

func (e CreateJwtPluginProtocols) ToPointer() *CreateJwtPluginProtocols {
	return &e
}
func (e *CreateJwtPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateJwtPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateJwtPluginProtocols: %v", v)
	}
}

// CreateJwtPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateJwtPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateJwtPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateJwtPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateJwtPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateJwtPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateJwtPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateJwtPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateJwtPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateJwtPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateJwtPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateJwtPlugin struct {
	Config *CreateJwtPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                    `json:"enabled,omitempty"`
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         *string                  `const:"jwt" json:"name,omitempty"`
	Ordering     *CreateJwtPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateJwtPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateJwtPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateJwtPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateJwtPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateJwtPluginService `json:"service,omitempty"`
}

func (c CreateJwtPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateJwtPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateJwtPlugin) GetConfig() *CreateJwtPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateJwtPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateJwtPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateJwtPlugin) GetName() *string {
	return types.String("jwt")
}

func (o *CreateJwtPlugin) GetOrdering() *CreateJwtPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateJwtPlugin) GetProtocols() []CreateJwtPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateJwtPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateJwtPlugin) GetConsumer() *CreateJwtPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateJwtPlugin) GetConsumerGroup() *CreateJwtPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateJwtPlugin) GetRoute() *CreateJwtPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateJwtPlugin) GetService() *CreateJwtPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
