// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/types"
)

type KeyAuthEncPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *KeyAuthEncPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type KeyAuthEncPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *KeyAuthEncPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type KeyAuthEncPluginOrdering struct {
	After  *KeyAuthEncPluginAfter  `json:"after,omitempty"`
	Before *KeyAuthEncPluginBefore `json:"before,omitempty"`
}

func (o *KeyAuthEncPluginOrdering) GetAfter() *KeyAuthEncPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *KeyAuthEncPluginOrdering) GetBefore() *KeyAuthEncPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type KeyAuthEncPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (k KeyAuthEncPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyAuthEncPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *KeyAuthEncPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *KeyAuthEncPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *KeyAuthEncPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type KeyAuthEncPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
	Anonymous *string `default:"null" json:"anonymous"`
	// An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request (i.e., the header, query string, or request body containing the key) before proxying it.
	HideCredentials *bool `default:"false" json:"hide_credentials"`
	// If enabled, the plugin reads the request body (if said request has one and its MIME type is supported) and tries to find the key in it. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
	KeyInBody *bool `default:"false" json:"key_in_body"`
	// If enabled (default), the plugin reads the request header and tries to find the key in it.
	KeyInHeader *bool `default:"true" json:"key_in_header"`
	// If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.
	KeyInQuery *bool `default:"true" json:"key_in_query"`
	// Describes an array of parameter names where the plugin will look for a key. The client must send the authentication key in one of those key names, and the plugin will try to read the credential from a header, request body, or query string parameter with the same name.  Key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.
	KeyNames []string `json:"key_names,omitempty"`
	// When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
	Realm *string `default:"null" json:"realm"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.
	RunOnPreflight *bool `default:"true" json:"run_on_preflight"`
}

func (k KeyAuthEncPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyAuthEncPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *KeyAuthEncPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *KeyAuthEncPluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *KeyAuthEncPluginConfig) GetKeyInBody() *bool {
	if o == nil {
		return nil
	}
	return o.KeyInBody
}

func (o *KeyAuthEncPluginConfig) GetKeyInHeader() *bool {
	if o == nil {
		return nil
	}
	return o.KeyInHeader
}

func (o *KeyAuthEncPluginConfig) GetKeyInQuery() *bool {
	if o == nil {
		return nil
	}
	return o.KeyInQuery
}

func (o *KeyAuthEncPluginConfig) GetKeyNames() []string {
	if o == nil {
		return nil
	}
	return o.KeyNames
}

func (o *KeyAuthEncPluginConfig) GetRealm() *string {
	if o == nil {
		return nil
	}
	return o.Realm
}

func (o *KeyAuthEncPluginConfig) GetRunOnPreflight() *bool {
	if o == nil {
		return nil
	}
	return o.RunOnPreflight
}

type KeyAuthEncPluginProtocols string

const (
	KeyAuthEncPluginProtocolsGrpc  KeyAuthEncPluginProtocols = "grpc"
	KeyAuthEncPluginProtocolsGrpcs KeyAuthEncPluginProtocols = "grpcs"
	KeyAuthEncPluginProtocolsHTTP  KeyAuthEncPluginProtocols = "http"
	KeyAuthEncPluginProtocolsHTTPS KeyAuthEncPluginProtocols = "https"
	KeyAuthEncPluginProtocolsWs    KeyAuthEncPluginProtocols = "ws"
	KeyAuthEncPluginProtocolsWss   KeyAuthEncPluginProtocols = "wss"
)

func (e KeyAuthEncPluginProtocols) ToPointer() *KeyAuthEncPluginProtocols {
	return &e
}
func (e *KeyAuthEncPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = KeyAuthEncPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KeyAuthEncPluginProtocols: %v", v)
	}
}

// KeyAuthEncPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type KeyAuthEncPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *KeyAuthEncPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// KeyAuthEncPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type KeyAuthEncPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *KeyAuthEncPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// KeyAuthEncPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type KeyAuthEncPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                   `default:"null" json:"instance_name"`
	name         *string                   `const:"key-auth-enc" json:"name"`
	Ordering     *KeyAuthEncPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []KeyAuthEncPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                  `json:"updated_at,omitempty"`
	Config    *KeyAuthEncPluginConfig `json:"config,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []KeyAuthEncPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *KeyAuthEncPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *KeyAuthEncPluginService `json:"service"`
}

func (k KeyAuthEncPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KeyAuthEncPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *KeyAuthEncPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *KeyAuthEncPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *KeyAuthEncPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *KeyAuthEncPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *KeyAuthEncPlugin) GetName() *string {
	return types.String("key-auth-enc")
}

func (o *KeyAuthEncPlugin) GetOrdering() *KeyAuthEncPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *KeyAuthEncPlugin) GetPartials() []KeyAuthEncPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *KeyAuthEncPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *KeyAuthEncPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *KeyAuthEncPlugin) GetConfig() *KeyAuthEncPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *KeyAuthEncPlugin) GetProtocols() []KeyAuthEncPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *KeyAuthEncPlugin) GetRoute() *KeyAuthEncPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *KeyAuthEncPlugin) GetService() *KeyAuthEncPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
