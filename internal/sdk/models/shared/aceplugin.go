// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AcePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AcePluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AcePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AcePluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AcePluginOrdering struct {
	After  *AcePluginAfter  `json:"after,omitempty"`
	Before *AcePluginBefore `json:"before,omitempty"`
}

func (a *AcePluginOrdering) GetAfter() *AcePluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AcePluginOrdering) GetBefore() *AcePluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type Partials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (p *Partials) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *Partials) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *Partials) GetPath() *string {
	if p == nil {
		return nil
	}
	return p.Path
}

type MatchPolicy string

const (
	MatchPolicyIfPresent MatchPolicy = "if_present"
	MatchPolicyRequired  MatchPolicy = "required"
)

func (e MatchPolicy) ToPointer() *MatchPolicy {
	return &e
}
func (e *MatchPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "if_present":
		fallthrough
	case "required":
		*e = MatchPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MatchPolicy: %v", v)
	}
}

type AcePluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `default:"127.0.0.1" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (a AcePluginClusterNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AcePluginClusterNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AcePluginClusterNodes) GetIP() *string {
	if a == nil {
		return nil
	}
	return a.IP
}

func (a *AcePluginClusterNodes) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

type AcePluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (a AcePluginSentinelNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AcePluginSentinelNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AcePluginSentinelNodes) GetHost() *string {
	if a == nil {
		return nil
	}
	return a.Host
}

func (a *AcePluginSentinelNodes) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

// AcePluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type AcePluginSentinelRole string

const (
	AcePluginSentinelRoleAny    AcePluginSentinelRole = "any"
	AcePluginSentinelRoleMaster AcePluginSentinelRole = "master"
	AcePluginSentinelRoleSlave  AcePluginSentinelRole = "slave"
)

func (e AcePluginSentinelRole) ToPointer() *AcePluginSentinelRole {
	return &e
}
func (e *AcePluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = AcePluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcePluginSentinelRole: %v", v)
	}
}

type AcePluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []AcePluginClusterNodes `json:"cluster_nodes"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `default:"2000" json:"connect_timeout"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `default:"null" json:"keepalive_backlog"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `default:"2000" json:"read_timeout"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"2000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `default:"null" json:"sentinel_master"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []AcePluginSentinelNodes `json:"sentinel_nodes"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `default:"null" json:"sentinel_password"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *AcePluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `default:"null" json:"sentinel_username"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (a AcePluginRedis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AcePluginRedis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AcePluginRedis) GetClusterMaxRedirections() *int64 {
	if a == nil {
		return nil
	}
	return a.ClusterMaxRedirections
}

func (a *AcePluginRedis) GetClusterNodes() []AcePluginClusterNodes {
	if a == nil {
		return nil
	}
	return a.ClusterNodes
}

func (a *AcePluginRedis) GetConnectTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.ConnectTimeout
}

func (a *AcePluginRedis) GetConnectionIsProxied() *bool {
	if a == nil {
		return nil
	}
	return a.ConnectionIsProxied
}

func (a *AcePluginRedis) GetDatabase() *int64 {
	if a == nil {
		return nil
	}
	return a.Database
}

func (a *AcePluginRedis) GetHost() *string {
	if a == nil {
		return nil
	}
	return a.Host
}

func (a *AcePluginRedis) GetKeepaliveBacklog() *int64 {
	if a == nil {
		return nil
	}
	return a.KeepaliveBacklog
}

func (a *AcePluginRedis) GetKeepalivePoolSize() *int64 {
	if a == nil {
		return nil
	}
	return a.KeepalivePoolSize
}

func (a *AcePluginRedis) GetPassword() *string {
	if a == nil {
		return nil
	}
	return a.Password
}

func (a *AcePluginRedis) GetPort() *int64 {
	if a == nil {
		return nil
	}
	return a.Port
}

func (a *AcePluginRedis) GetReadTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.ReadTimeout
}

func (a *AcePluginRedis) GetSendTimeout() *int64 {
	if a == nil {
		return nil
	}
	return a.SendTimeout
}

func (a *AcePluginRedis) GetSentinelMaster() *string {
	if a == nil {
		return nil
	}
	return a.SentinelMaster
}

func (a *AcePluginRedis) GetSentinelNodes() []AcePluginSentinelNodes {
	if a == nil {
		return nil
	}
	return a.SentinelNodes
}

func (a *AcePluginRedis) GetSentinelPassword() *string {
	if a == nil {
		return nil
	}
	return a.SentinelPassword
}

func (a *AcePluginRedis) GetSentinelRole() *AcePluginSentinelRole {
	if a == nil {
		return nil
	}
	return a.SentinelRole
}

func (a *AcePluginRedis) GetSentinelUsername() *string {
	if a == nil {
		return nil
	}
	return a.SentinelUsername
}

func (a *AcePluginRedis) GetServerName() *string {
	if a == nil {
		return nil
	}
	return a.ServerName
}

func (a *AcePluginRedis) GetSsl() *bool {
	if a == nil {
		return nil
	}
	return a.Ssl
}

func (a *AcePluginRedis) GetSslVerify() *bool {
	if a == nil {
		return nil
	}
	return a.SslVerify
}

func (a *AcePluginRedis) GetUsername() *string {
	if a == nil {
		return nil
	}
	return a.Username
}

type RateLimiting struct {
	Redis    *AcePluginRedis `json:"redis"`
	SyncRate *float64        `default:"null" json:"sync_rate"`
}

func (r RateLimiting) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimiting) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RateLimiting) GetRedis() *AcePluginRedis {
	if r == nil {
		return nil
	}
	return r.Redis
}

func (r *RateLimiting) GetSyncRate() *float64 {
	if r == nil {
		return nil
	}
	return r.SyncRate
}

type AcePluginConfig struct {
	Anonymous    *string       `default:"null" json:"anonymous"`
	MatchPolicy  *MatchPolicy  `default:"if_present" json:"match_policy"`
	RateLimiting *RateLimiting `json:"rate_limiting"`
}

func (a AcePluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AcePluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AcePluginConfig) GetAnonymous() *string {
	if a == nil {
		return nil
	}
	return a.Anonymous
}

func (a *AcePluginConfig) GetMatchPolicy() *MatchPolicy {
	if a == nil {
		return nil
	}
	return a.MatchPolicy
}

func (a *AcePluginConfig) GetRateLimiting() *RateLimiting {
	if a == nil {
		return nil
	}
	return a.RateLimiting
}

type AcePluginProtocols string

const (
	AcePluginProtocolsGrpc  AcePluginProtocols = "grpc"
	AcePluginProtocolsGrpcs AcePluginProtocols = "grpcs"
	AcePluginProtocolsHTTP  AcePluginProtocols = "http"
	AcePluginProtocolsHTTPS AcePluginProtocols = "https"
)

func (e AcePluginProtocols) ToPointer() *AcePluginProtocols {
	return &e
}
func (e *AcePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AcePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AcePluginProtocols: %v", v)
	}
}

// AcePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AcePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AcePluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AcePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AcePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AcePluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AcePlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AcePlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string            `default:"null" json:"instance_name"`
	name         string             `const:"ace" json:"name"`
	Ordering     *AcePluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []Partials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64           `json:"updated_at,omitempty"`
	Config    *AcePluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []AcePluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AcePluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AcePluginService `json:"service"`
}

func (a AcePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AcePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (a *AcePlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AcePlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AcePlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AcePlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AcePlugin) GetName() string {
	return "ace"
}

func (a *AcePlugin) GetOrdering() *AcePluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AcePlugin) GetPartials() []Partials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AcePlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AcePlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AcePlugin) GetConfig() *AcePluginConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AcePlugin) GetProtocols() []AcePluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AcePlugin) GetRoute() *AcePluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AcePlugin) GetService() *AcePluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
