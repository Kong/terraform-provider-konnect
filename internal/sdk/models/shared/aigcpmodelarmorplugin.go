// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AiGcpModelArmorPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiGcpModelArmorPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiGcpModelArmorPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiGcpModelArmorPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiGcpModelArmorPluginOrdering struct {
	After  *AiGcpModelArmorPluginAfter  `json:"after,omitempty"`
	Before *AiGcpModelArmorPluginBefore `json:"before,omitempty"`
}

func (a *AiGcpModelArmorPluginOrdering) GetAfter() *AiGcpModelArmorPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiGcpModelArmorPluginOrdering) GetBefore() *AiGcpModelArmorPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiGcpModelArmorPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiGcpModelArmorPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiGcpModelArmorPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiGcpModelArmorPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

// AiGcpModelArmorPluginGuardingMode - The guardrail mode to use for the request
type AiGcpModelArmorPluginGuardingMode string

const (
	AiGcpModelArmorPluginGuardingModeBoth   AiGcpModelArmorPluginGuardingMode = "BOTH"
	AiGcpModelArmorPluginGuardingModeInput  AiGcpModelArmorPluginGuardingMode = "INPUT"
	AiGcpModelArmorPluginGuardingModeOutput AiGcpModelArmorPluginGuardingMode = "OUTPUT"
)

func (e AiGcpModelArmorPluginGuardingMode) ToPointer() *AiGcpModelArmorPluginGuardingMode {
	return &e
}
func (e *AiGcpModelArmorPluginGuardingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOTH":
		fallthrough
	case "INPUT":
		fallthrough
	case "OUTPUT":
		*e = AiGcpModelArmorPluginGuardingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiGcpModelArmorPluginGuardingMode: %v", v)
	}
}

// AiGcpModelArmorPluginTextSource - Select where to pick the 'text' for the GCP Model Armor Services request.
type AiGcpModelArmorPluginTextSource string

const (
	AiGcpModelArmorPluginTextSourceConcatenateAllContent  AiGcpModelArmorPluginTextSource = "concatenate_all_content"
	AiGcpModelArmorPluginTextSourceConcatenateUserContent AiGcpModelArmorPluginTextSource = "concatenate_user_content"
	AiGcpModelArmorPluginTextSourceLastMessage            AiGcpModelArmorPluginTextSource = "last_message"
)

func (e AiGcpModelArmorPluginTextSource) ToPointer() *AiGcpModelArmorPluginTextSource {
	return &e
}
func (e *AiGcpModelArmorPluginTextSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "concatenate_all_content":
		fallthrough
	case "concatenate_user_content":
		fallthrough
	case "last_message":
		*e = AiGcpModelArmorPluginTextSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiGcpModelArmorPluginTextSource: %v", v)
	}
}

type AiGcpModelArmorPluginConfig struct {
	// Enables multi-language detection mode. Must be used with 'source_language'.
	EnableMultiLanguageDetection *bool `default:"false" json:"enable_multi_language_detection"`
	// Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT` or from the instance/container metadata service.
	GcpServiceAccountJSON *string `default:"null" json:"gcp_service_account_json"`
	// Use service account auth for GCP-based providers and models.
	GcpUseServiceAccount *bool `default:"false" json:"gcp_use_service_account"`
	// The guardrail mode to use for the request
	GuardingMode *AiGcpModelArmorPluginGuardingMode `default:"INPUT" json:"guarding_mode"`
	// GCP Location ID for the GCP Model Armor subscription.
	LocationID string `json:"location_id"`
	// GCP Project ID for the GCP Model Armor subscription.
	ProjectID string `json:"project_id"`
	// The message to return when a failure occurs on the request phase.
	RequestFailureMessage *string `default:"Request was filtered by GCP Model Armor" json:"request_failure_message"`
	// The amount of bytes receiving from upstream to be buffered before sending to the model armor service. This only applies to the response content guard.
	ResponseBufferSize *float64 `default:"100" json:"response_buffer_size"`
	// The message to return when a failure occurs on the response phase.
	ResponseFailureMessage *string `default:"Response was filtered by GCP Model Armor" json:"response_failure_message"`
	// Whether to reveal failure categories in the response to the caller.
	RevealFailureCategories *bool `default:"false" json:"reveal_failure_categories"`
	// Source language (ISO code) to use when 'enable_multi_language_detection' is enabled.
	SourceLanguage *string `default:"null" json:"source_language"`
	// Stop processing if an error occurs.
	StopOnError *bool `default:"true" json:"stop_on_error"`
	// GCP Model Armor Template ID to enforce.
	TemplateID string `json:"template_id"`
	// Select where to pick the 'text' for the GCP Model Armor Services request.
	TextSource *AiGcpModelArmorPluginTextSource `default:"last_message" json:"text_source"`
	// Connection timeout with the GCP Model Armor service
	Timeout *float64 `default:"10000" json:"timeout"`
}

func (a AiGcpModelArmorPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiGcpModelArmorPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"location_id", "project_id", "template_id"}); err != nil {
		return err
	}
	return nil
}

func (a *AiGcpModelArmorPluginConfig) GetEnableMultiLanguageDetection() *bool {
	if a == nil {
		return nil
	}
	return a.EnableMultiLanguageDetection
}

func (a *AiGcpModelArmorPluginConfig) GetGcpServiceAccountJSON() *string {
	if a == nil {
		return nil
	}
	return a.GcpServiceAccountJSON
}

func (a *AiGcpModelArmorPluginConfig) GetGcpUseServiceAccount() *bool {
	if a == nil {
		return nil
	}
	return a.GcpUseServiceAccount
}

func (a *AiGcpModelArmorPluginConfig) GetGuardingMode() *AiGcpModelArmorPluginGuardingMode {
	if a == nil {
		return nil
	}
	return a.GuardingMode
}

func (a *AiGcpModelArmorPluginConfig) GetLocationID() string {
	if a == nil {
		return ""
	}
	return a.LocationID
}

func (a *AiGcpModelArmorPluginConfig) GetProjectID() string {
	if a == nil {
		return ""
	}
	return a.ProjectID
}

func (a *AiGcpModelArmorPluginConfig) GetRequestFailureMessage() *string {
	if a == nil {
		return nil
	}
	return a.RequestFailureMessage
}

func (a *AiGcpModelArmorPluginConfig) GetResponseBufferSize() *float64 {
	if a == nil {
		return nil
	}
	return a.ResponseBufferSize
}

func (a *AiGcpModelArmorPluginConfig) GetResponseFailureMessage() *string {
	if a == nil {
		return nil
	}
	return a.ResponseFailureMessage
}

func (a *AiGcpModelArmorPluginConfig) GetRevealFailureCategories() *bool {
	if a == nil {
		return nil
	}
	return a.RevealFailureCategories
}

func (a *AiGcpModelArmorPluginConfig) GetSourceLanguage() *string {
	if a == nil {
		return nil
	}
	return a.SourceLanguage
}

func (a *AiGcpModelArmorPluginConfig) GetStopOnError() *bool {
	if a == nil {
		return nil
	}
	return a.StopOnError
}

func (a *AiGcpModelArmorPluginConfig) GetTemplateID() string {
	if a == nil {
		return ""
	}
	return a.TemplateID
}

func (a *AiGcpModelArmorPluginConfig) GetTextSource() *AiGcpModelArmorPluginTextSource {
	if a == nil {
		return nil
	}
	return a.TextSource
}

func (a *AiGcpModelArmorPluginConfig) GetTimeout() *float64 {
	if a == nil {
		return nil
	}
	return a.Timeout
}

// AiGcpModelArmorPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiGcpModelArmorPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiGcpModelArmorPluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiGcpModelArmorPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiGcpModelArmorPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiGcpModelArmorPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiGcpModelArmorPluginProtocols string

const (
	AiGcpModelArmorPluginProtocolsGrpc  AiGcpModelArmorPluginProtocols = "grpc"
	AiGcpModelArmorPluginProtocolsGrpcs AiGcpModelArmorPluginProtocols = "grpcs"
	AiGcpModelArmorPluginProtocolsHTTP  AiGcpModelArmorPluginProtocols = "http"
	AiGcpModelArmorPluginProtocolsHTTPS AiGcpModelArmorPluginProtocols = "https"
)

func (e AiGcpModelArmorPluginProtocols) ToPointer() *AiGcpModelArmorPluginProtocols {
	return &e
}
func (e *AiGcpModelArmorPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiGcpModelArmorPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiGcpModelArmorPluginProtocols: %v", v)
	}
}

// AiGcpModelArmorPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiGcpModelArmorPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiGcpModelArmorPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiGcpModelArmorPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiGcpModelArmorPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiGcpModelArmorPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiGcpModelArmorPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiGcpModelArmorPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                        `default:"null" json:"instance_name"`
	name         string                         `const:"ai-gcp-model-armor" json:"name"`
	Ordering     *AiGcpModelArmorPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiGcpModelArmorPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                      `json:"updated_at,omitempty"`
	Config    AiGcpModelArmorPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiGcpModelArmorPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiGcpModelArmorPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiGcpModelArmorPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiGcpModelArmorPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiGcpModelArmorPluginService `json:"service"`
}

func (a AiGcpModelArmorPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiGcpModelArmorPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (a *AiGcpModelArmorPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiGcpModelArmorPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiGcpModelArmorPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiGcpModelArmorPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiGcpModelArmorPlugin) GetName() string {
	return "ai-gcp-model-armor"
}

func (a *AiGcpModelArmorPlugin) GetOrdering() *AiGcpModelArmorPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiGcpModelArmorPlugin) GetPartials() []AiGcpModelArmorPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiGcpModelArmorPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiGcpModelArmorPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiGcpModelArmorPlugin) GetConfig() AiGcpModelArmorPluginConfig {
	if a == nil {
		return AiGcpModelArmorPluginConfig{}
	}
	return a.Config
}

func (a *AiGcpModelArmorPlugin) GetConsumer() *AiGcpModelArmorPluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiGcpModelArmorPlugin) GetConsumerGroup() *AiGcpModelArmorPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiGcpModelArmorPlugin) GetProtocols() []AiGcpModelArmorPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiGcpModelArmorPlugin) GetRoute() *AiGcpModelArmorPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiGcpModelArmorPlugin) GetService() *AiGcpModelArmorPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
