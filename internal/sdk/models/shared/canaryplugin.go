// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type CanaryPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (c *CanaryPluginAfter) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type CanaryPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (c *CanaryPluginBefore) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type CanaryPluginOrdering struct {
	After  *CanaryPluginAfter  `json:"after,omitempty"`
	Before *CanaryPluginBefore `json:"before,omitempty"`
}

func (c *CanaryPluginOrdering) GetAfter() *CanaryPluginAfter {
	if c == nil {
		return nil
	}
	return c.After
}

func (c *CanaryPluginOrdering) GetBefore() *CanaryPluginBefore {
	if c == nil {
		return nil
	}
	return c.Before
}

type CanaryPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (c *CanaryPluginPartials) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CanaryPluginPartials) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CanaryPluginPartials) GetPath() *string {
	if c == nil {
		return nil
	}
	return c.Path
}

// Hash algorithm to be used for canary release.
//
// * `consumer`: The hash will be based on the consumer.
// * `ip`: The hash will be based on the client IP address.
// * `none`: No hash will be applied.
// * `allow`: Allows the specified groups to access the canary release.
// * `deny`: Denies the specified groups from accessing the canary release.
// * `header`: The hash will be based on the specified header value.
type Hash string

const (
	HashAllow    Hash = "allow"
	HashConsumer Hash = "consumer"
	HashDeny     Hash = "deny"
	HashHeader   Hash = "header"
	HashIP       Hash = "ip"
	HashNone     Hash = "none"
)

func (e Hash) ToPointer() *Hash {
	return &e
}
func (e *Hash) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "consumer":
		fallthrough
	case "deny":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "none":
		*e = Hash(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hash: %v", v)
	}
}

type CanaryPluginConfig struct {
	// A string representing an HTTP header name.
	CanaryByHeaderName *string `default:"null" json:"canary_by_header_name"`
	// The duration of the canary release in seconds.
	Duration *float64 `default:"3600" json:"duration"`
	// The groups allowed to access the canary release.
	Groups []string `json:"groups"`
	// Hash algorithm to be used for canary release.
	//
	// * `consumer`: The hash will be based on the consumer.
	// * `ip`: The hash will be based on the client IP address.
	// * `none`: No hash will be applied.
	// * `allow`: Allows the specified groups to access the canary release.
	// * `deny`: Denies the specified groups from accessing the canary release.
	// * `header`: The hash will be based on the specified header value.
	Hash *Hash `default:"consumer" json:"hash"`
	// A string representing an HTTP header name.
	HashHeader *string `default:"null" json:"hash_header"`
	// The percentage of traffic to be routed to the canary release.
	Percentage *float64 `default:"null" json:"percentage"`
	// Future time in seconds since epoch, when the canary release will start. Ignored when `percentage` is set, or when using `allow` or `deny` in `hash`.
	Start *float64 `default:"null" json:"start"`
	// The number of steps for the canary release.
	Steps *float64 `default:"1000" json:"steps"`
	// Specifies whether to fallback to the upstream server if the canary release fails.
	UpstreamFallback *bool `default:"false" json:"upstream_fallback"`
	// A string representing a host name, such as example.com.
	UpstreamHost *string `default:"null" json:"upstream_host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	UpstreamPort *int64 `default:"null" json:"upstream_port"`
	// The URI of the upstream server to be used for the canary release.
	UpstreamURI *string `default:"null" json:"upstream_uri"`
}

func (c CanaryPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CanaryPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"groups"}); err != nil {
		return err
	}
	return nil
}

func (c *CanaryPluginConfig) GetCanaryByHeaderName() *string {
	if c == nil {
		return nil
	}
	return c.CanaryByHeaderName
}

func (c *CanaryPluginConfig) GetDuration() *float64 {
	if c == nil {
		return nil
	}
	return c.Duration
}

func (c *CanaryPluginConfig) GetGroups() []string {
	if c == nil {
		return nil
	}
	return c.Groups
}

func (c *CanaryPluginConfig) GetHash() *Hash {
	if c == nil {
		return nil
	}
	return c.Hash
}

func (c *CanaryPluginConfig) GetHashHeader() *string {
	if c == nil {
		return nil
	}
	return c.HashHeader
}

func (c *CanaryPluginConfig) GetPercentage() *float64 {
	if c == nil {
		return nil
	}
	return c.Percentage
}

func (c *CanaryPluginConfig) GetStart() *float64 {
	if c == nil {
		return nil
	}
	return c.Start
}

func (c *CanaryPluginConfig) GetSteps() *float64 {
	if c == nil {
		return nil
	}
	return c.Steps
}

func (c *CanaryPluginConfig) GetUpstreamFallback() *bool {
	if c == nil {
		return nil
	}
	return c.UpstreamFallback
}

func (c *CanaryPluginConfig) GetUpstreamHost() *string {
	if c == nil {
		return nil
	}
	return c.UpstreamHost
}

func (c *CanaryPluginConfig) GetUpstreamPort() *int64 {
	if c == nil {
		return nil
	}
	return c.UpstreamPort
}

func (c *CanaryPluginConfig) GetUpstreamURI() *string {
	if c == nil {
		return nil
	}
	return c.UpstreamURI
}

type CanaryPluginProtocols string

const (
	CanaryPluginProtocolsGrpc  CanaryPluginProtocols = "grpc"
	CanaryPluginProtocolsGrpcs CanaryPluginProtocols = "grpcs"
	CanaryPluginProtocolsHTTP  CanaryPluginProtocols = "http"
	CanaryPluginProtocolsHTTPS CanaryPluginProtocols = "https"
)

func (e CanaryPluginProtocols) ToPointer() *CanaryPluginProtocols {
	return &e
}
func (e *CanaryPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = CanaryPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CanaryPluginProtocols: %v", v)
	}
}

// CanaryPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type CanaryPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (c *CanaryPluginRoute) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// CanaryPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CanaryPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (c *CanaryPluginService) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// CanaryPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type CanaryPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string               `default:"null" json:"instance_name"`
	name         string                `const:"canary" json:"name"`
	Ordering     *CanaryPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []CanaryPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64              `json:"updated_at,omitempty"`
	Config    *CanaryPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []CanaryPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *CanaryPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CanaryPluginService `json:"service"`
}

func (c CanaryPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CanaryPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "ordering", "partials", "tags", "config", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (c *CanaryPlugin) GetCreatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *CanaryPlugin) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *CanaryPlugin) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *CanaryPlugin) GetInstanceName() *string {
	if c == nil {
		return nil
	}
	return c.InstanceName
}

func (c *CanaryPlugin) GetName() string {
	return "canary"
}

func (c *CanaryPlugin) GetOrdering() *CanaryPluginOrdering {
	if c == nil {
		return nil
	}
	return c.Ordering
}

func (c *CanaryPlugin) GetPartials() []CanaryPluginPartials {
	if c == nil {
		return nil
	}
	return c.Partials
}

func (c *CanaryPlugin) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *CanaryPlugin) GetUpdatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *CanaryPlugin) GetConfig() *CanaryPluginConfig {
	if c == nil {
		return nil
	}
	return c.Config
}

func (c *CanaryPlugin) GetProtocols() []CanaryPluginProtocols {
	if c == nil {
		return nil
	}
	return c.Protocols
}

func (c *CanaryPlugin) GetRoute() *CanaryPluginRoute {
	if c == nil {
		return nil
	}
	return c.Route
}

func (c *CanaryPlugin) GetService() *CanaryPluginService {
	if c == nil {
		return nil
	}
	return c.Service
}
