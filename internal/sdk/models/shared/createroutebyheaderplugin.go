// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateRouteByHeaderPluginRules struct {
	Condition    map[string]any `json:"condition"`
	UpstreamName string         `json:"upstream_name"`
}

func (o *CreateRouteByHeaderPluginRules) GetCondition() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Condition
}

func (o *CreateRouteByHeaderPluginRules) GetUpstreamName() string {
	if o == nil {
		return ""
	}
	return o.UpstreamName
}

type CreateRouteByHeaderPluginConfig struct {
	// Route by header rules.
	Rules []CreateRouteByHeaderPluginRules `json:"rules,omitempty"`
}

func (o *CreateRouteByHeaderPluginConfig) GetRules() []CreateRouteByHeaderPluginRules {
	if o == nil {
		return nil
	}
	return o.Rules
}

type CreateRouteByHeaderPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateRouteByHeaderPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateRouteByHeaderPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateRouteByHeaderPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateRouteByHeaderPluginOrdering struct {
	After  *CreateRouteByHeaderPluginAfter  `json:"after,omitempty"`
	Before *CreateRouteByHeaderPluginBefore `json:"before,omitempty"`
}

func (o *CreateRouteByHeaderPluginOrdering) GetAfter() *CreateRouteByHeaderPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateRouteByHeaderPluginOrdering) GetBefore() *CreateRouteByHeaderPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateRouteByHeaderPluginProtocols string

const (
	CreateRouteByHeaderPluginProtocolsGrpc           CreateRouteByHeaderPluginProtocols = "grpc"
	CreateRouteByHeaderPluginProtocolsGrpcs          CreateRouteByHeaderPluginProtocols = "grpcs"
	CreateRouteByHeaderPluginProtocolsHTTP           CreateRouteByHeaderPluginProtocols = "http"
	CreateRouteByHeaderPluginProtocolsHTTPS          CreateRouteByHeaderPluginProtocols = "https"
	CreateRouteByHeaderPluginProtocolsTCP            CreateRouteByHeaderPluginProtocols = "tcp"
	CreateRouteByHeaderPluginProtocolsTLS            CreateRouteByHeaderPluginProtocols = "tls"
	CreateRouteByHeaderPluginProtocolsTLSPassthrough CreateRouteByHeaderPluginProtocols = "tls_passthrough"
	CreateRouteByHeaderPluginProtocolsUDP            CreateRouteByHeaderPluginProtocols = "udp"
	CreateRouteByHeaderPluginProtocolsWs             CreateRouteByHeaderPluginProtocols = "ws"
	CreateRouteByHeaderPluginProtocolsWss            CreateRouteByHeaderPluginProtocols = "wss"
)

func (e CreateRouteByHeaderPluginProtocols) ToPointer() *CreateRouteByHeaderPluginProtocols {
	return &e
}
func (e *CreateRouteByHeaderPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateRouteByHeaderPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRouteByHeaderPluginProtocols: %v", v)
	}
}

// CreateRouteByHeaderPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateRouteByHeaderPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteByHeaderPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRouteByHeaderPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteByHeaderPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRouteByHeaderPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateRouteByHeaderPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteByHeaderPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRouteByHeaderPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateRouteByHeaderPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRouteByHeaderPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRouteByHeaderPlugin struct {
	Config *CreateRouteByHeaderPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                              `json:"enabled,omitempty"`
	InstanceName *string                            `json:"instance_name,omitempty"`
	name         *string                            `const:"route-by-header" json:"name,omitempty"`
	Ordering     *CreateRouteByHeaderPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateRouteByHeaderPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateRouteByHeaderPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateRouteByHeaderPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateRouteByHeaderPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateRouteByHeaderPluginService `json:"service,omitempty"`
}

func (c CreateRouteByHeaderPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRouteByHeaderPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateRouteByHeaderPlugin) GetConfig() *CreateRouteByHeaderPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateRouteByHeaderPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateRouteByHeaderPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateRouteByHeaderPlugin) GetName() *string {
	return types.String("route-by-header")
}

func (o *CreateRouteByHeaderPlugin) GetOrdering() *CreateRouteByHeaderPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateRouteByHeaderPlugin) GetProtocols() []CreateRouteByHeaderPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateRouteByHeaderPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateRouteByHeaderPlugin) GetConsumer() *CreateRouteByHeaderPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateRouteByHeaderPlugin) GetConsumerGroup() *CreateRouteByHeaderPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateRouteByHeaderPlugin) GetRoute() *CreateRouteByHeaderPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateRouteByHeaderPlugin) GetService() *CreateRouteByHeaderPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
