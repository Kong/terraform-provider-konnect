// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type GrpcGatewayPluginConfig struct {
	// Describes the gRPC types and methods.
	Proto *string `json:"proto,omitempty"`
}

func (o *GrpcGatewayPluginConfig) GetProto() *string {
	if o == nil {
		return nil
	}
	return o.Proto
}

type GrpcGatewayPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *GrpcGatewayPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type GrpcGatewayPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *GrpcGatewayPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type GrpcGatewayPluginOrdering struct {
	After  *GrpcGatewayPluginAfter  `json:"after,omitempty"`
	Before *GrpcGatewayPluginBefore `json:"before,omitempty"`
}

func (o *GrpcGatewayPluginOrdering) GetAfter() *GrpcGatewayPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *GrpcGatewayPluginOrdering) GetBefore() *GrpcGatewayPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type GrpcGatewayPluginProtocols string

const (
	GrpcGatewayPluginProtocolsGrpc           GrpcGatewayPluginProtocols = "grpc"
	GrpcGatewayPluginProtocolsGrpcs          GrpcGatewayPluginProtocols = "grpcs"
	GrpcGatewayPluginProtocolsHTTP           GrpcGatewayPluginProtocols = "http"
	GrpcGatewayPluginProtocolsHTTPS          GrpcGatewayPluginProtocols = "https"
	GrpcGatewayPluginProtocolsTCP            GrpcGatewayPluginProtocols = "tcp"
	GrpcGatewayPluginProtocolsTLS            GrpcGatewayPluginProtocols = "tls"
	GrpcGatewayPluginProtocolsTLSPassthrough GrpcGatewayPluginProtocols = "tls_passthrough"
	GrpcGatewayPluginProtocolsUDP            GrpcGatewayPluginProtocols = "udp"
	GrpcGatewayPluginProtocolsWs             GrpcGatewayPluginProtocols = "ws"
	GrpcGatewayPluginProtocolsWss            GrpcGatewayPluginProtocols = "wss"
)

func (e GrpcGatewayPluginProtocols) ToPointer() *GrpcGatewayPluginProtocols {
	return &e
}
func (e *GrpcGatewayPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = GrpcGatewayPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrpcGatewayPluginProtocols: %v", v)
	}
}

// GrpcGatewayPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type GrpcGatewayPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcGatewayPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type GrpcGatewayPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcGatewayPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// GrpcGatewayPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type GrpcGatewayPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcGatewayPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// GrpcGatewayPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type GrpcGatewayPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *GrpcGatewayPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type GrpcGatewayPlugin struct {
	Config *GrpcGatewayPluginConfig `json:"config,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                      `json:"enabled,omitempty"`
	ID           *string                    `json:"id,omitempty"`
	InstanceName *string                    `json:"instance_name,omitempty"`
	name         *string                    `const:"grpc-gateway" json:"name,omitempty"`
	Ordering     *GrpcGatewayPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []GrpcGatewayPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GrpcGatewayPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *GrpcGatewayPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GrpcGatewayPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GrpcGatewayPluginService `json:"service,omitempty"`
}

func (g GrpcGatewayPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GrpcGatewayPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GrpcGatewayPlugin) GetConfig() *GrpcGatewayPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *GrpcGatewayPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GrpcGatewayPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *GrpcGatewayPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GrpcGatewayPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *GrpcGatewayPlugin) GetName() *string {
	return types.String("grpc-gateway")
}

func (o *GrpcGatewayPlugin) GetOrdering() *GrpcGatewayPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *GrpcGatewayPlugin) GetProtocols() []GrpcGatewayPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *GrpcGatewayPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GrpcGatewayPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GrpcGatewayPlugin) GetConsumer() *GrpcGatewayPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *GrpcGatewayPlugin) GetConsumerGroup() *GrpcGatewayPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *GrpcGatewayPlugin) GetRoute() *GrpcGatewayPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *GrpcGatewayPlugin) GetService() *GrpcGatewayPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
