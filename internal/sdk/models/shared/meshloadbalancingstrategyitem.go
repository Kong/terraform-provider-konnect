// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"time"
)

// MeshLoadBalancingStrategyItemType - the type of the resource
type MeshLoadBalancingStrategyItemType string

const (
	MeshLoadBalancingStrategyItemTypeMeshLoadBalancingStrategy MeshLoadBalancingStrategyItemType = "MeshLoadBalancingStrategy"
)

func (e MeshLoadBalancingStrategyItemType) ToPointer() *MeshLoadBalancingStrategyItemType {
	return &e
}
func (e *MeshLoadBalancingStrategyItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshLoadBalancingStrategy":
		*e = MeshLoadBalancingStrategyItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemType: %v", v)
	}
}

// MeshLoadBalancingStrategyItemKind - Kind of the referenced resource
type MeshLoadBalancingStrategyItemKind string

const (
	MeshLoadBalancingStrategyItemKindMesh                 MeshLoadBalancingStrategyItemKind = "Mesh"
	MeshLoadBalancingStrategyItemKindMeshSubset           MeshLoadBalancingStrategyItemKind = "MeshSubset"
	MeshLoadBalancingStrategyItemKindMeshGateway          MeshLoadBalancingStrategyItemKind = "MeshGateway"
	MeshLoadBalancingStrategyItemKindMeshService          MeshLoadBalancingStrategyItemKind = "MeshService"
	MeshLoadBalancingStrategyItemKindMeshExternalService  MeshLoadBalancingStrategyItemKind = "MeshExternalService"
	MeshLoadBalancingStrategyItemKindMeshMultiZoneService MeshLoadBalancingStrategyItemKind = "MeshMultiZoneService"
	MeshLoadBalancingStrategyItemKindMeshServiceSubset    MeshLoadBalancingStrategyItemKind = "MeshServiceSubset"
	MeshLoadBalancingStrategyItemKindMeshHTTPRoute        MeshLoadBalancingStrategyItemKind = "MeshHTTPRoute"
	MeshLoadBalancingStrategyItemKindDataplane            MeshLoadBalancingStrategyItemKind = "Dataplane"
)

func (e MeshLoadBalancingStrategyItemKind) ToPointer() *MeshLoadBalancingStrategyItemKind {
	return &e
}
func (e *MeshLoadBalancingStrategyItemKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshLoadBalancingStrategyItemKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemKind: %v", v)
	}
}

type MeshLoadBalancingStrategyItemProxyTypes string

const (
	MeshLoadBalancingStrategyItemProxyTypesSidecar MeshLoadBalancingStrategyItemProxyTypes = "Sidecar"
	MeshLoadBalancingStrategyItemProxyTypesGateway MeshLoadBalancingStrategyItemProxyTypes = "Gateway"
)

func (e MeshLoadBalancingStrategyItemProxyTypes) ToPointer() *MeshLoadBalancingStrategyItemProxyTypes {
	return &e
}
func (e *MeshLoadBalancingStrategyItemProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshLoadBalancingStrategyItemProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemProxyTypes: %v", v)
	}
}

// MeshLoadBalancingStrategyItemTargetRef - TargetRef is a reference to the resource the policy takes an effect on.
// The resource could be either a real store object or virtual resource
// defined inplace.
type MeshLoadBalancingStrategyItemTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshLoadBalancingStrategyItemKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshLoadBalancingStrategyItemProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetKind() *MeshLoadBalancingStrategyItemKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetProxyTypes() []MeshLoadBalancingStrategyItemProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshLoadBalancingStrategyItemTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type ActiveRequestBiasType string

const (
	ActiveRequestBiasTypeInteger ActiveRequestBiasType = "integer"
	ActiveRequestBiasTypeStr     ActiveRequestBiasType = "str"
)

// ActiveRequestBias refers to dynamic weights applied when hosts have varying load
// balancing weights. A higher value here aggressively reduces the weight of endpoints
// that are currently handling active requests. In essence, the higher the ActiveRequestBias
// value, the more forcefully it reduces the load balancing weight of endpoints that are
// actively serving requests.
type ActiveRequestBias struct {
	Integer *int64  `queryParam:"inline"`
	Str     *string `queryParam:"inline"`

	Type ActiveRequestBiasType
}

func CreateActiveRequestBiasInteger(integer int64) ActiveRequestBias {
	typ := ActiveRequestBiasTypeInteger

	return ActiveRequestBias{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateActiveRequestBiasStr(str string) ActiveRequestBias {
	typ := ActiveRequestBiasTypeStr

	return ActiveRequestBias{
		Str:  &str,
		Type: typ,
	}
}

func (u *ActiveRequestBias) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = ActiveRequestBiasTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ActiveRequestBiasTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ActiveRequestBias", string(data))
}

func (u ActiveRequestBias) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type ActiveRequestBias: all fields are null")
}

// LeastRequest selects N random available hosts as specified in 'choiceCount' (2 by default)
// and picks the host which has the fewest active requests
type LeastRequest struct {
	// ActiveRequestBias refers to dynamic weights applied when hosts have varying load
	// balancing weights. A higher value here aggressively reduces the weight of endpoints
	// that are currently handling active requests. In essence, the higher the ActiveRequestBias
	// value, the more forcefully it reduces the load balancing weight of endpoints that are
	// actively serving requests.
	ActiveRequestBias *ActiveRequestBias `json:"activeRequestBias,omitempty"`
	// ChoiceCount is the number of random healthy hosts from which the host with
	// the fewest active requests will be chosen. Defaults to 2 so that Envoy performs
	// two-choice selection if the field is not set.
	ChoiceCount *int `json:"choiceCount,omitempty"`
}

func (o *LeastRequest) GetActiveRequestBias() *ActiveRequestBias {
	if o == nil {
		return nil
	}
	return o.ActiveRequestBias
}

func (o *LeastRequest) GetChoiceCount() *int {
	if o == nil {
		return nil
	}
	return o.ChoiceCount
}

type Connection struct {
	// Hash on source IP address.
	SourceIP *bool `json:"sourceIP,omitempty"`
}

func (o *Connection) GetSourceIP() *bool {
	if o == nil {
		return nil
	}
	return o.SourceIP
}

type Cookie struct {
	// The name of the cookie that will be used to obtain the hash key.
	Name string `json:"name"`
	// The name of the path for the cookie.
	Path *string `json:"path,omitempty"`
	// If specified, a cookie with the TTL will be generated if the cookie is not present.
	TTL *string `json:"ttl,omitempty"`
}

func (o *Cookie) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Cookie) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Cookie) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

type FilterState struct {
	// The name of the Object in the per-request filterState, which is
	// an Envoy::Hashable object. If there is no data associated with the key,
	// or the stored object is not Envoy::Hashable, no hash will be produced.
	Key string `json:"key"`
}

func (o *FilterState) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

type MeshLoadBalancingStrategyItemSpecHeader struct {
	// The name of the request header that will be used to obtain the hash key.
	Name string `json:"name"`
}

func (o *MeshLoadBalancingStrategyItemSpecHeader) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type QueryParameter struct {
	// The name of the URL query parameter that will be used to obtain the hash key.
	// If the parameter is not present, no hash will be produced. Query parameter names
	// are case-sensitive.
	Name string `json:"name"`
}

func (o *QueryParameter) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type MeshLoadBalancingStrategyItemSpecToDefaultType string

const (
	MeshLoadBalancingStrategyItemSpecToDefaultTypeHeader         MeshLoadBalancingStrategyItemSpecToDefaultType = "Header"
	MeshLoadBalancingStrategyItemSpecToDefaultTypeCookie         MeshLoadBalancingStrategyItemSpecToDefaultType = "Cookie"
	MeshLoadBalancingStrategyItemSpecToDefaultTypeConnection     MeshLoadBalancingStrategyItemSpecToDefaultType = "Connection"
	MeshLoadBalancingStrategyItemSpecToDefaultTypeSourceIP       MeshLoadBalancingStrategyItemSpecToDefaultType = "SourceIP"
	MeshLoadBalancingStrategyItemSpecToDefaultTypeQueryParameter MeshLoadBalancingStrategyItemSpecToDefaultType = "QueryParameter"
	MeshLoadBalancingStrategyItemSpecToDefaultTypeFilterState    MeshLoadBalancingStrategyItemSpecToDefaultType = "FilterState"
)

func (e MeshLoadBalancingStrategyItemSpecToDefaultType) ToPointer() *MeshLoadBalancingStrategyItemSpecToDefaultType {
	return &e
}
func (e *MeshLoadBalancingStrategyItemSpecToDefaultType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Header":
		fallthrough
	case "Cookie":
		fallthrough
	case "Connection":
		fallthrough
	case "SourceIP":
		fallthrough
	case "QueryParameter":
		fallthrough
	case "FilterState":
		*e = MeshLoadBalancingStrategyItemSpecToDefaultType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemSpecToDefaultType: %v", v)
	}
}

type HashPolicies struct {
	Connection     *Connection                              `json:"connection,omitempty"`
	Cookie         *Cookie                                  `json:"cookie,omitempty"`
	FilterState    *FilterState                             `json:"filterState,omitempty"`
	Header         *MeshLoadBalancingStrategyItemSpecHeader `json:"header,omitempty"`
	QueryParameter *QueryParameter                          `json:"queryParameter,omitempty"`
	// Terminal is a flag that short-circuits the hash computing. This field provides
	// a ‘fallback’ style of configuration: “if a terminal policy doesn’t work, fallback
	// to rest of the policy list”, it saves time when the terminal policy works.
	// If true, and there is already a hash computed, ignore rest of the list of hash polices.
	Terminal *bool                                          `json:"terminal,omitempty"`
	Type     MeshLoadBalancingStrategyItemSpecToDefaultType `json:"type"`
}

func (o *HashPolicies) GetConnection() *Connection {
	if o == nil {
		return nil
	}
	return o.Connection
}

func (o *HashPolicies) GetCookie() *Cookie {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *HashPolicies) GetFilterState() *FilterState {
	if o == nil {
		return nil
	}
	return o.FilterState
}

func (o *HashPolicies) GetHeader() *MeshLoadBalancingStrategyItemSpecHeader {
	if o == nil {
		return nil
	}
	return o.Header
}

func (o *HashPolicies) GetQueryParameter() *QueryParameter {
	if o == nil {
		return nil
	}
	return o.QueryParameter
}

func (o *HashPolicies) GetTerminal() *bool {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *HashPolicies) GetType() MeshLoadBalancingStrategyItemSpecToDefaultType {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpecToDefaultType("")
	}
	return o.Type
}

// Maglev implements consistent hashing to upstream hosts. Maglev can be used as
// a drop in replacement for the ring hash load balancer any place in which
// consistent hashing is desired.
type Maglev struct {
	// HashPolicies specify a list of request/connection properties that are used to calculate a hash.
	// These hash policies are executed in the specified order. If a hash policy has the “terminal” attribute
	// set to true, and there is already a hash generated, the hash is returned immediately,
	// ignoring the rest of the hash policy list.
	HashPolicies []HashPolicies `json:"hashPolicies,omitempty"`
	// The table size for Maglev hashing. Maglev aims for “minimal disruption”
	// rather than an absolute guarantee. Minimal disruption means that when
	// the set of upstream hosts change, a connection will likely be sent
	// to the same upstream as it was before. Increasing the table size reduces
	// the amount of disruption. The table size must be prime number limited to 5000011.
	// If it is not specified, the default is 65537.
	TableSize *int `json:"tableSize,omitempty"`
}

func (o *Maglev) GetHashPolicies() []HashPolicies {
	if o == nil {
		return nil
	}
	return o.HashPolicies
}

func (o *Maglev) GetTableSize() *int {
	if o == nil {
		return nil
	}
	return o.TableSize
}

// MeshLoadBalancingStrategyItemRandom - Random selects a random available host. The random load balancer generally
// performs better than round-robin if no health checking policy is configured.
// Random selection avoids bias towards the host in the set that comes after a failed host.
type MeshLoadBalancingStrategyItemRandom struct {
}

// HashFunction is a function used to hash hosts onto the ketama ring.
// The value defaults to XX_HASH. Available values – XX_HASH, MURMUR_HASH_2.
type HashFunction string

const (
	HashFunctionXxHash      HashFunction = "XXHash"
	HashFunctionMurmurHash2 HashFunction = "MurmurHash2"
)

func (e HashFunction) ToPointer() *HashFunction {
	return &e
}
func (e *HashFunction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "XXHash":
		fallthrough
	case "MurmurHash2":
		*e = HashFunction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HashFunction: %v", v)
	}
}

type MeshLoadBalancingStrategyItemConnection struct {
	// Hash on source IP address.
	SourceIP *bool `json:"sourceIP,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemConnection) GetSourceIP() *bool {
	if o == nil {
		return nil
	}
	return o.SourceIP
}

type MeshLoadBalancingStrategyItemCookie struct {
	// The name of the cookie that will be used to obtain the hash key.
	Name string `json:"name"`
	// The name of the path for the cookie.
	Path *string `json:"path,omitempty"`
	// If specified, a cookie with the TTL will be generated if the cookie is not present.
	TTL *string `json:"ttl,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemCookie) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshLoadBalancingStrategyItemCookie) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *MeshLoadBalancingStrategyItemCookie) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

type MeshLoadBalancingStrategyItemFilterState struct {
	// The name of the Object in the per-request filterState, which is
	// an Envoy::Hashable object. If there is no data associated with the key,
	// or the stored object is not Envoy::Hashable, no hash will be produced.
	Key string `json:"key"`
}

func (o *MeshLoadBalancingStrategyItemFilterState) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

type MeshLoadBalancingStrategyItemHeader struct {
	// The name of the request header that will be used to obtain the hash key.
	Name string `json:"name"`
}

func (o *MeshLoadBalancingStrategyItemHeader) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type MeshLoadBalancingStrategyItemQueryParameter struct {
	// The name of the URL query parameter that will be used to obtain the hash key.
	// If the parameter is not present, no hash will be produced. Query parameter names
	// are case-sensitive.
	Name string `json:"name"`
}

func (o *MeshLoadBalancingStrategyItemQueryParameter) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type MeshLoadBalancingStrategyItemSpecToType string

const (
	MeshLoadBalancingStrategyItemSpecToTypeHeader         MeshLoadBalancingStrategyItemSpecToType = "Header"
	MeshLoadBalancingStrategyItemSpecToTypeCookie         MeshLoadBalancingStrategyItemSpecToType = "Cookie"
	MeshLoadBalancingStrategyItemSpecToTypeConnection     MeshLoadBalancingStrategyItemSpecToType = "Connection"
	MeshLoadBalancingStrategyItemSpecToTypeSourceIP       MeshLoadBalancingStrategyItemSpecToType = "SourceIP"
	MeshLoadBalancingStrategyItemSpecToTypeQueryParameter MeshLoadBalancingStrategyItemSpecToType = "QueryParameter"
	MeshLoadBalancingStrategyItemSpecToTypeFilterState    MeshLoadBalancingStrategyItemSpecToType = "FilterState"
)

func (e MeshLoadBalancingStrategyItemSpecToType) ToPointer() *MeshLoadBalancingStrategyItemSpecToType {
	return &e
}
func (e *MeshLoadBalancingStrategyItemSpecToType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Header":
		fallthrough
	case "Cookie":
		fallthrough
	case "Connection":
		fallthrough
	case "SourceIP":
		fallthrough
	case "QueryParameter":
		fallthrough
	case "FilterState":
		*e = MeshLoadBalancingStrategyItemSpecToType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemSpecToType: %v", v)
	}
}

type MeshLoadBalancingStrategyItemHashPolicies struct {
	Connection     *MeshLoadBalancingStrategyItemConnection     `json:"connection,omitempty"`
	Cookie         *MeshLoadBalancingStrategyItemCookie         `json:"cookie,omitempty"`
	FilterState    *MeshLoadBalancingStrategyItemFilterState    `json:"filterState,omitempty"`
	Header         *MeshLoadBalancingStrategyItemHeader         `json:"header,omitempty"`
	QueryParameter *MeshLoadBalancingStrategyItemQueryParameter `json:"queryParameter,omitempty"`
	// Terminal is a flag that short-circuits the hash computing. This field provides
	// a ‘fallback’ style of configuration: “if a terminal policy doesn’t work, fallback
	// to rest of the policy list”, it saves time when the terminal policy works.
	// If true, and there is already a hash computed, ignore rest of the list of hash polices.
	Terminal *bool                                   `json:"terminal,omitempty"`
	Type     MeshLoadBalancingStrategyItemSpecToType `json:"type"`
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetConnection() *MeshLoadBalancingStrategyItemConnection {
	if o == nil {
		return nil
	}
	return o.Connection
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetCookie() *MeshLoadBalancingStrategyItemCookie {
	if o == nil {
		return nil
	}
	return o.Cookie
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetFilterState() *MeshLoadBalancingStrategyItemFilterState {
	if o == nil {
		return nil
	}
	return o.FilterState
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetHeader() *MeshLoadBalancingStrategyItemHeader {
	if o == nil {
		return nil
	}
	return o.Header
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetQueryParameter() *MeshLoadBalancingStrategyItemQueryParameter {
	if o == nil {
		return nil
	}
	return o.QueryParameter
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetTerminal() *bool {
	if o == nil {
		return nil
	}
	return o.Terminal
}

func (o *MeshLoadBalancingStrategyItemHashPolicies) GetType() MeshLoadBalancingStrategyItemSpecToType {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpecToType("")
	}
	return o.Type
}

// RingHash  implements consistent hashing to upstream hosts. Each host is mapped
// onto a circle (the “ring”) by hashing its address; each request is then routed
// to a host by hashing some property of the request, and finding the nearest
// corresponding host clockwise around the ring.
type RingHash struct {
	// HashFunction is a function used to hash hosts onto the ketama ring.
	// The value defaults to XX_HASH. Available values – XX_HASH, MURMUR_HASH_2.
	HashFunction *HashFunction `json:"hashFunction,omitempty"`
	// HashPolicies specify a list of request/connection properties that are used to calculate a hash.
	// These hash policies are executed in the specified order. If a hash policy has the “terminal” attribute
	// set to true, and there is already a hash generated, the hash is returned immediately,
	// ignoring the rest of the hash policy list.
	HashPolicies []MeshLoadBalancingStrategyItemHashPolicies `json:"hashPolicies,omitempty"`
	// Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries,
	// but can be lowered to further constrain resource use.
	MaxRingSize *int `json:"maxRingSize,omitempty"`
	// Minimum hash ring size. The larger the ring is (that is,
	// the more hashes there are for each provided host) the better the request distribution
	// will reflect the desired weights. Defaults to 1024 entries, and limited to 8M entries.
	MinRingSize *int `json:"minRingSize,omitempty"`
}

func (o *RingHash) GetHashFunction() *HashFunction {
	if o == nil {
		return nil
	}
	return o.HashFunction
}

func (o *RingHash) GetHashPolicies() []MeshLoadBalancingStrategyItemHashPolicies {
	if o == nil {
		return nil
	}
	return o.HashPolicies
}

func (o *RingHash) GetMaxRingSize() *int {
	if o == nil {
		return nil
	}
	return o.MaxRingSize
}

func (o *RingHash) GetMinRingSize() *int {
	if o == nil {
		return nil
	}
	return o.MinRingSize
}

// RoundRobin is a load balancing algorithm that distributes requests
// across available upstream hosts in round-robin order.
type RoundRobin struct {
}

type MeshLoadBalancingStrategyItemSpecType string

const (
	MeshLoadBalancingStrategyItemSpecTypeRoundRobin   MeshLoadBalancingStrategyItemSpecType = "RoundRobin"
	MeshLoadBalancingStrategyItemSpecTypeLeastRequest MeshLoadBalancingStrategyItemSpecType = "LeastRequest"
	MeshLoadBalancingStrategyItemSpecTypeRingHash     MeshLoadBalancingStrategyItemSpecType = "RingHash"
	MeshLoadBalancingStrategyItemSpecTypeRandom       MeshLoadBalancingStrategyItemSpecType = "Random"
	MeshLoadBalancingStrategyItemSpecTypeMaglev       MeshLoadBalancingStrategyItemSpecType = "Maglev"
)

func (e MeshLoadBalancingStrategyItemSpecType) ToPointer() *MeshLoadBalancingStrategyItemSpecType {
	return &e
}
func (e *MeshLoadBalancingStrategyItemSpecType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RoundRobin":
		fallthrough
	case "LeastRequest":
		fallthrough
	case "RingHash":
		fallthrough
	case "Random":
		fallthrough
	case "Maglev":
		*e = MeshLoadBalancingStrategyItemSpecType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemSpecType: %v", v)
	}
}

// LoadBalancer allows to specify load balancing algorithm.
type LoadBalancer struct {
	// LeastRequest selects N random available hosts as specified in 'choiceCount' (2 by default)
	// and picks the host which has the fewest active requests
	LeastRequest *LeastRequest `json:"leastRequest,omitempty"`
	// Maglev implements consistent hashing to upstream hosts. Maglev can be used as
	// a drop in replacement for the ring hash load balancer any place in which
	// consistent hashing is desired.
	Maglev *Maglev `json:"maglev,omitempty"`
	// Random selects a random available host. The random load balancer generally
	// performs better than round-robin if no health checking policy is configured.
	// Random selection avoids bias towards the host in the set that comes after a failed host.
	Random *MeshLoadBalancingStrategyItemRandom `json:"random,omitempty"`
	// RingHash  implements consistent hashing to upstream hosts. Each host is mapped
	// onto a circle (the “ring”) by hashing its address; each request is then routed
	// to a host by hashing some property of the request, and finding the nearest
	// corresponding host clockwise around the ring.
	RingHash *RingHash `json:"ringHash,omitempty"`
	// RoundRobin is a load balancing algorithm that distributes requests
	// across available upstream hosts in round-robin order.
	RoundRobin *RoundRobin                           `json:"roundRobin,omitempty"`
	Type       MeshLoadBalancingStrategyItemSpecType `json:"type"`
}

func (o *LoadBalancer) GetLeastRequest() *LeastRequest {
	if o == nil {
		return nil
	}
	return o.LeastRequest
}

func (o *LoadBalancer) GetMaglev() *Maglev {
	if o == nil {
		return nil
	}
	return o.Maglev
}

func (o *LoadBalancer) GetRandom() *MeshLoadBalancingStrategyItemRandom {
	if o == nil {
		return nil
	}
	return o.Random
}

func (o *LoadBalancer) GetRingHash() *RingHash {
	if o == nil {
		return nil
	}
	return o.RingHash
}

func (o *LoadBalancer) GetRoundRobin() *RoundRobin {
	if o == nil {
		return nil
	}
	return o.RoundRobin
}

func (o *LoadBalancer) GetType() MeshLoadBalancingStrategyItemSpecType {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpecType("")
	}
	return o.Type
}

// MeshLoadBalancingStrategyItemFrom - From defines the list of zones to which the rule applies
type MeshLoadBalancingStrategyItemFrom struct {
	Zones []string `json:"zones"`
}

func (o *MeshLoadBalancingStrategyItemFrom) GetZones() []string {
	if o == nil {
		return []string{}
	}
	return o.Zones
}

// MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType - Type defines how target zones will be picked from available zones
type MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType string

const (
	MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessTypeNone      MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType = "None"
	MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessTypeOnly      MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType = "Only"
	MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessTypeAny       MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType = "Any"
	MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessTypeAnyExcept MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType = "AnyExcept"
)

func (e MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType) ToPointer() *MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType {
	return &e
}
func (e *MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "None":
		fallthrough
	case "Only":
		fallthrough
	case "Any":
		fallthrough
	case "AnyExcept":
		*e = MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType: %v", v)
	}
}

// MeshLoadBalancingStrategyItemSpecTo - To defines to which zones the traffic should be load balanced
type MeshLoadBalancingStrategyItemSpecTo struct {
	// Type defines how target zones will be picked from available zones
	Type  MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType `json:"type"`
	Zones []string                                                        `json:"zones,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemSpecTo) GetType() MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpecToDefaultLocalityAwarenessType("")
	}
	return o.Type
}

func (o *MeshLoadBalancingStrategyItemSpecTo) GetZones() []string {
	if o == nil {
		return nil
	}
	return o.Zones
}

type Failover struct {
	// From defines the list of zones to which the rule applies
	From *MeshLoadBalancingStrategyItemFrom `json:"from,omitempty"`
	// To defines to which zones the traffic should be load balanced
	To MeshLoadBalancingStrategyItemSpecTo `json:"to"`
}

func (o *Failover) GetFrom() *MeshLoadBalancingStrategyItemFrom {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *Failover) GetTo() MeshLoadBalancingStrategyItemSpecTo {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpecTo{}
	}
	return o.To
}

type MeshLoadBalancingStrategyItemPercentageType string

const (
	MeshLoadBalancingStrategyItemPercentageTypeInteger MeshLoadBalancingStrategyItemPercentageType = "integer"
	MeshLoadBalancingStrategyItemPercentageTypeStr     MeshLoadBalancingStrategyItemPercentageType = "str"
)

type MeshLoadBalancingStrategyItemPercentage struct {
	Integer *int64  `queryParam:"inline"`
	Str     *string `queryParam:"inline"`

	Type MeshLoadBalancingStrategyItemPercentageType
}

func CreateMeshLoadBalancingStrategyItemPercentageInteger(integer int64) MeshLoadBalancingStrategyItemPercentage {
	typ := MeshLoadBalancingStrategyItemPercentageTypeInteger

	return MeshLoadBalancingStrategyItemPercentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMeshLoadBalancingStrategyItemPercentageStr(str string) MeshLoadBalancingStrategyItemPercentage {
	typ := MeshLoadBalancingStrategyItemPercentageTypeStr

	return MeshLoadBalancingStrategyItemPercentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeshLoadBalancingStrategyItemPercentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MeshLoadBalancingStrategyItemPercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeshLoadBalancingStrategyItemPercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MeshLoadBalancingStrategyItemPercentage", string(data))
}

func (u MeshLoadBalancingStrategyItemPercentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MeshLoadBalancingStrategyItemPercentage: all fields are null")
}

// FailoverThreshold defines the percentage of live destination dataplane proxies below which load balancing to the
// next priority starts.
// Example: If you configure failoverThreshold to 70, and you have deployed 10 destination dataplane proxies.
// Load balancing to next priority will start when number of live destination dataplane proxies drops below 7.
// Default 50
type FailoverThreshold struct {
	Percentage MeshLoadBalancingStrategyItemPercentage `json:"percentage"`
}

func (o *FailoverThreshold) GetPercentage() MeshLoadBalancingStrategyItemPercentage {
	if o == nil {
		return MeshLoadBalancingStrategyItemPercentage{}
	}
	return o.Percentage
}

// CrossZone defines locality aware load balancing priorities when dataplane proxies inside local zone
// are unavailable
type CrossZone struct {
	// Failover defines list of load balancing rules in order of priority
	Failover []Failover `json:"failover,omitempty"`
	// FailoverThreshold defines the percentage of live destination dataplane proxies below which load balancing to the
	// next priority starts.
	// Example: If you configure failoverThreshold to 70, and you have deployed 10 destination dataplane proxies.
	// Load balancing to next priority will start when number of live destination dataplane proxies drops below 7.
	// Default 50
	FailoverThreshold *FailoverThreshold `json:"failoverThreshold,omitempty"`
}

func (o *CrossZone) GetFailover() []Failover {
	if o == nil {
		return nil
	}
	return o.Failover
}

func (o *CrossZone) GetFailoverThreshold() *FailoverThreshold {
	if o == nil {
		return nil
	}
	return o.FailoverThreshold
}

type AffinityTags struct {
	// Key defines tag for which affinity is configured
	Key string `json:"key"`
	// Weight of the tag used for load balancing. The bigger the weight the bigger the priority.
	// Percentage of local traffic load balanced to tag is computed by dividing weight by sum of weights from all tags.
	// For example with two affinity tags first with weight 80 and second with weight 20,
	// then 80% of traffic will be redirected to the first tag, and 20% of traffic will be redirected to second one.
	// Setting weights is not mandatory. When weights are not set control plane will compute default weight based on list order.
	// Default: If you do not specify weight we will adjust them so that 90% traffic goes to first tag, 9% to next, and 1% to third and so on.
	Weight *int `json:"weight,omitempty"`
}

func (o *AffinityTags) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *AffinityTags) GetWeight() *int {
	if o == nil {
		return nil
	}
	return o.Weight
}

// LocalZone defines locality aware load balancing priorities between dataplane proxies inside a zone
type LocalZone struct {
	// AffinityTags list of tags for local zone load balancing.
	AffinityTags []AffinityTags `json:"affinityTags,omitempty"`
}

func (o *LocalZone) GetAffinityTags() []AffinityTags {
	if o == nil {
		return nil
	}
	return o.AffinityTags
}

// LocalityAwareness contains configuration for locality aware load balancing.
type LocalityAwareness struct {
	// CrossZone defines locality aware load balancing priorities when dataplane proxies inside local zone
	// are unavailable
	CrossZone *CrossZone `json:"crossZone,omitempty"`
	// Disabled allows to disable locality-aware load balancing.
	// When disabled requests are distributed across all endpoints regardless of locality.
	Disabled *bool `json:"disabled,omitempty"`
	// LocalZone defines locality aware load balancing priorities between dataplane proxies inside a zone
	LocalZone *LocalZone `json:"localZone,omitempty"`
}

func (o *LocalityAwareness) GetCrossZone() *CrossZone {
	if o == nil {
		return nil
	}
	return o.CrossZone
}

func (o *LocalityAwareness) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *LocalityAwareness) GetLocalZone() *LocalZone {
	if o == nil {
		return nil
	}
	return o.LocalZone
}

// MeshLoadBalancingStrategyItemDefault - Default is a configuration specific to the group of destinations referenced in
// 'targetRef'
type MeshLoadBalancingStrategyItemDefault struct {
	// LoadBalancer allows to specify load balancing algorithm.
	LoadBalancer *LoadBalancer `json:"loadBalancer,omitempty"`
	// LocalityAwareness contains configuration for locality aware load balancing.
	LocalityAwareness *LocalityAwareness `json:"localityAwareness,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemDefault) GetLoadBalancer() *LoadBalancer {
	if o == nil {
		return nil
	}
	return o.LoadBalancer
}

func (o *MeshLoadBalancingStrategyItemDefault) GetLocalityAwareness() *LocalityAwareness {
	if o == nil {
		return nil
	}
	return o.LocalityAwareness
}

// MeshLoadBalancingStrategyItemSpecKind - Kind of the referenced resource
type MeshLoadBalancingStrategyItemSpecKind string

const (
	MeshLoadBalancingStrategyItemSpecKindMesh                 MeshLoadBalancingStrategyItemSpecKind = "Mesh"
	MeshLoadBalancingStrategyItemSpecKindMeshSubset           MeshLoadBalancingStrategyItemSpecKind = "MeshSubset"
	MeshLoadBalancingStrategyItemSpecKindMeshGateway          MeshLoadBalancingStrategyItemSpecKind = "MeshGateway"
	MeshLoadBalancingStrategyItemSpecKindMeshService          MeshLoadBalancingStrategyItemSpecKind = "MeshService"
	MeshLoadBalancingStrategyItemSpecKindMeshExternalService  MeshLoadBalancingStrategyItemSpecKind = "MeshExternalService"
	MeshLoadBalancingStrategyItemSpecKindMeshMultiZoneService MeshLoadBalancingStrategyItemSpecKind = "MeshMultiZoneService"
	MeshLoadBalancingStrategyItemSpecKindMeshServiceSubset    MeshLoadBalancingStrategyItemSpecKind = "MeshServiceSubset"
	MeshLoadBalancingStrategyItemSpecKindMeshHTTPRoute        MeshLoadBalancingStrategyItemSpecKind = "MeshHTTPRoute"
	MeshLoadBalancingStrategyItemSpecKindDataplane            MeshLoadBalancingStrategyItemSpecKind = "Dataplane"
)

func (e MeshLoadBalancingStrategyItemSpecKind) ToPointer() *MeshLoadBalancingStrategyItemSpecKind {
	return &e
}
func (e *MeshLoadBalancingStrategyItemSpecKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshLoadBalancingStrategyItemSpecKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemSpecKind: %v", v)
	}
}

type MeshLoadBalancingStrategyItemSpecProxyTypes string

const (
	MeshLoadBalancingStrategyItemSpecProxyTypesSidecar MeshLoadBalancingStrategyItemSpecProxyTypes = "Sidecar"
	MeshLoadBalancingStrategyItemSpecProxyTypesGateway MeshLoadBalancingStrategyItemSpecProxyTypes = "Gateway"
)

func (e MeshLoadBalancingStrategyItemSpecProxyTypes) ToPointer() *MeshLoadBalancingStrategyItemSpecProxyTypes {
	return &e
}
func (e *MeshLoadBalancingStrategyItemSpecProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshLoadBalancingStrategyItemSpecProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshLoadBalancingStrategyItemSpecProxyTypes: %v", v)
	}
}

// MeshLoadBalancingStrategyItemSpecTargetRef - TargetRef is a reference to the resource that represents a group of
// destinations.
type MeshLoadBalancingStrategyItemSpecTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshLoadBalancingStrategyItemSpecKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshLoadBalancingStrategyItemSpecProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetKind() *MeshLoadBalancingStrategyItemSpecKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetProxyTypes() []MeshLoadBalancingStrategyItemSpecProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshLoadBalancingStrategyItemSpecTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshLoadBalancingStrategyItemTo struct {
	// Default is a configuration specific to the group of destinations referenced in
	// 'targetRef'
	Default *MeshLoadBalancingStrategyItemDefault `json:"default,omitempty"`
	// TargetRef is a reference to the resource that represents a group of
	// destinations.
	TargetRef MeshLoadBalancingStrategyItemSpecTargetRef `json:"targetRef"`
}

func (o *MeshLoadBalancingStrategyItemTo) GetDefault() *MeshLoadBalancingStrategyItemDefault {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *MeshLoadBalancingStrategyItemTo) GetTargetRef() MeshLoadBalancingStrategyItemSpecTargetRef {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpecTargetRef{}
	}
	return o.TargetRef
}

// MeshLoadBalancingStrategyItemSpec - Spec is the specification of the Kuma MeshLoadBalancingStrategy resource.
type MeshLoadBalancingStrategyItemSpec struct {
	// TargetRef is a reference to the resource the policy takes an effect on.
	// The resource could be either a real store object or virtual resource
	// defined inplace.
	TargetRef *MeshLoadBalancingStrategyItemTargetRef `json:"targetRef,omitempty"`
	// To list makes a match between the consumed services and corresponding configurations
	To []MeshLoadBalancingStrategyItemTo `json:"to,omitempty"`
}

func (o *MeshLoadBalancingStrategyItemSpec) GetTargetRef() *MeshLoadBalancingStrategyItemTargetRef {
	if o == nil {
		return nil
	}
	return o.TargetRef
}

func (o *MeshLoadBalancingStrategyItemSpec) GetTo() []MeshLoadBalancingStrategyItemTo {
	if o == nil {
		return nil
	}
	return o.To
}

type MeshLoadBalancingStrategyItem struct {
	// the type of the resource
	Type MeshLoadBalancingStrategyItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshLoadBalancingStrategy resource.
	Spec MeshLoadBalancingStrategyItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
}

func (m MeshLoadBalancingStrategyItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshLoadBalancingStrategyItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeshLoadBalancingStrategyItem) GetType() MeshLoadBalancingStrategyItemType {
	if o == nil {
		return MeshLoadBalancingStrategyItemType("")
	}
	return o.Type
}

func (o *MeshLoadBalancingStrategyItem) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshLoadBalancingStrategyItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshLoadBalancingStrategyItem) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshLoadBalancingStrategyItem) GetSpec() MeshLoadBalancingStrategyItemSpec {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpec{}
	}
	return o.Spec
}

func (o *MeshLoadBalancingStrategyItem) GetCreationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreationTime
}

func (o *MeshLoadBalancingStrategyItem) GetModificationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModificationTime
}

type MeshLoadBalancingStrategyItemInput struct {
	// the type of the resource
	Type MeshLoadBalancingStrategyItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `default:"default" json:"mesh"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshLoadBalancingStrategy resource.
	Spec MeshLoadBalancingStrategyItemSpec `json:"spec"`
}

func (m MeshLoadBalancingStrategyItemInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshLoadBalancingStrategyItemInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeshLoadBalancingStrategyItemInput) GetType() MeshLoadBalancingStrategyItemType {
	if o == nil {
		return MeshLoadBalancingStrategyItemType("")
	}
	return o.Type
}

func (o *MeshLoadBalancingStrategyItemInput) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshLoadBalancingStrategyItemInput) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshLoadBalancingStrategyItemInput) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshLoadBalancingStrategyItemInput) GetSpec() MeshLoadBalancingStrategyItemSpec {
	if o == nil {
		return MeshLoadBalancingStrategyItemSpec{}
	}
	return o.Spec
}
