// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type VaultAuthPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *VaultAuthPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type VaultAuthPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *VaultAuthPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type VaultAuthPluginOrdering struct {
	After  *VaultAuthPluginAfter  `json:"after,omitempty"`
	Before *VaultAuthPluginBefore `json:"before,omitempty"`
}

func (o *VaultAuthPluginOrdering) GetAfter() *VaultAuthPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *VaultAuthPluginOrdering) GetBefore() *VaultAuthPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type VaultAuthPluginConfig struct {
	// Describes an array of comma-separated parameter names where the plugin looks for an access token. The client must send the access token in one of those key names, and the plugin will try to read the credential from a header or the querystring parameter with the same name. The key names can only contain [a-z], [A-Z], [0-9], [_], and [-].
	AccessTokenName *string `json:"access_token_name,omitempty"`
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request fails with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
	Anonymous *string `json:"anonymous,omitempty"`
	// An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin will strip the credential from the request (i.e. the header or querystring containing the key) before proxying it.
	HideCredentials *bool `json:"hide_credentials,omitempty"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests will always be allowed.
	RunOnPreflight *bool `json:"run_on_preflight,omitempty"`
	// Describes an array of comma-separated parameter names where the plugin looks for a secret token. The client must send the secret in one of those key names, and the plugin will try to read the credential from a header or the querystring parameter with the same name. The key names can only contain [a-z], [A-Z], [0-9], [_], and [-].
	SecretTokenName *string `json:"secret_token_name,omitempty"`
	// If enabled, the plugin will read the request body (if said request has one and its MIME type is supported) and try to find the key in it. Supported MIME types are `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
	TokensInBody *bool `json:"tokens_in_body,omitempty"`
	// A reference to an existing `vault` object within the database. `vault` entities define the connection and authentication parameters used to connect to a Vault HTTP(S) API.
	Vault *string `json:"vault,omitempty"`
}

func (o *VaultAuthPluginConfig) GetAccessTokenName() *string {
	if o == nil {
		return nil
	}
	return o.AccessTokenName
}

func (o *VaultAuthPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *VaultAuthPluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *VaultAuthPluginConfig) GetRunOnPreflight() *bool {
	if o == nil {
		return nil
	}
	return o.RunOnPreflight
}

func (o *VaultAuthPluginConfig) GetSecretTokenName() *string {
	if o == nil {
		return nil
	}
	return o.SecretTokenName
}

func (o *VaultAuthPluginConfig) GetTokensInBody() *bool {
	if o == nil {
		return nil
	}
	return o.TokensInBody
}

func (o *VaultAuthPluginConfig) GetVault() *string {
	if o == nil {
		return nil
	}
	return o.Vault
}

type VaultAuthPluginProtocols string

const (
	VaultAuthPluginProtocolsGrpc  VaultAuthPluginProtocols = "grpc"
	VaultAuthPluginProtocolsGrpcs VaultAuthPluginProtocols = "grpcs"
	VaultAuthPluginProtocolsHTTP  VaultAuthPluginProtocols = "http"
	VaultAuthPluginProtocolsHTTPS VaultAuthPluginProtocols = "https"
)

func (e VaultAuthPluginProtocols) ToPointer() *VaultAuthPluginProtocols {
	return &e
}
func (e *VaultAuthPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = VaultAuthPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VaultAuthPluginProtocols: %v", v)
	}
}

// VaultAuthPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type VaultAuthPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *VaultAuthPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// VaultAuthPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type VaultAuthPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *VaultAuthPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// VaultAuthPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type VaultAuthPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                    `json:"enabled,omitempty"`
	ID           *string                  `json:"id,omitempty"`
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         string                   `const:"vault-auth" json:"name"`
	Ordering     *VaultAuthPluginOrdering `json:"ordering,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                `json:"updated_at,omitempty"`
	Config    VaultAuthPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []VaultAuthPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *VaultAuthPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *VaultAuthPluginService `json:"service"`
}

func (v VaultAuthPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VaultAuthPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VaultAuthPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *VaultAuthPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *VaultAuthPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *VaultAuthPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *VaultAuthPlugin) GetName() string {
	return "vault-auth"
}

func (o *VaultAuthPlugin) GetOrdering() *VaultAuthPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *VaultAuthPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *VaultAuthPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *VaultAuthPlugin) GetConfig() VaultAuthPluginConfig {
	if o == nil {
		return VaultAuthPluginConfig{}
	}
	return o.Config
}

func (o *VaultAuthPlugin) GetProtocols() []VaultAuthPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *VaultAuthPlugin) GetRoute() *VaultAuthPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *VaultAuthPlugin) GetService() *VaultAuthPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

// VaultAuthPluginInput - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type VaultAuthPluginInput struct {
	// Whether the plugin is applied.
	Enabled      *bool                    `json:"enabled,omitempty"`
	ID           *string                  `json:"id,omitempty"`
	InstanceName *string                  `json:"instance_name,omitempty"`
	name         string                   `const:"vault-auth" json:"name"`
	Ordering     *VaultAuthPluginOrdering `json:"ordering,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags   []string              `json:"tags,omitempty"`
	Config VaultAuthPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []VaultAuthPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *VaultAuthPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *VaultAuthPluginService `json:"service"`
}

func (v VaultAuthPluginInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VaultAuthPluginInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VaultAuthPluginInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *VaultAuthPluginInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *VaultAuthPluginInput) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *VaultAuthPluginInput) GetName() string {
	return "vault-auth"
}

func (o *VaultAuthPluginInput) GetOrdering() *VaultAuthPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *VaultAuthPluginInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *VaultAuthPluginInput) GetConfig() VaultAuthPluginConfig {
	if o == nil {
		return VaultAuthPluginConfig{}
	}
	return o.Config
}

func (o *VaultAuthPluginInput) GetProtocols() []VaultAuthPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *VaultAuthPluginInput) GetRoute() *VaultAuthPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *VaultAuthPluginInput) GetService() *VaultAuthPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
