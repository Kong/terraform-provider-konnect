// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type AiPromptGuardPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptGuardPluginAfter) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptGuardPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (a *AiPromptGuardPluginBefore) GetAccess() []string {
	if a == nil {
		return nil
	}
	return a.Access
}

type AiPromptGuardPluginOrdering struct {
	After  *AiPromptGuardPluginAfter  `json:"after,omitempty"`
	Before *AiPromptGuardPluginBefore `json:"before,omitempty"`
}

func (a *AiPromptGuardPluginOrdering) GetAfter() *AiPromptGuardPluginAfter {
	if a == nil {
		return nil
	}
	return a.After
}

func (a *AiPromptGuardPluginOrdering) GetBefore() *AiPromptGuardPluginBefore {
	if a == nil {
		return nil
	}
	return a.Before
}

type AiPromptGuardPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (a *AiPromptGuardPluginPartials) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptGuardPluginPartials) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *AiPromptGuardPluginPartials) GetPath() *string {
	if a == nil {
		return nil
	}
	return a.Path
}

// GenaiCategory - Generative AI category of the request
type GenaiCategory string

const (
	GenaiCategoryAudioSpeech        GenaiCategory = "audio/speech"
	GenaiCategoryAudioTranscription GenaiCategory = "audio/transcription"
	GenaiCategoryImageGeneration    GenaiCategory = "image/generation"
	GenaiCategoryRealtimeGeneration GenaiCategory = "realtime/generation"
	GenaiCategoryTextEmbeddings     GenaiCategory = "text/embeddings"
	GenaiCategoryTextGeneration     GenaiCategory = "text/generation"
)

func (e GenaiCategory) ToPointer() *GenaiCategory {
	return &e
}
func (e *GenaiCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio/speech":
		fallthrough
	case "audio/transcription":
		fallthrough
	case "image/generation":
		fallthrough
	case "realtime/generation":
		fallthrough
	case "text/embeddings":
		fallthrough
	case "text/generation":
		*e = GenaiCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GenaiCategory: %v", v)
	}
}

// AiPromptGuardPluginLlmFormat - LLM input and output format and schema to use
type AiPromptGuardPluginLlmFormat string

const (
	AiPromptGuardPluginLlmFormatBedrock     AiPromptGuardPluginLlmFormat = "bedrock"
	AiPromptGuardPluginLlmFormatCohere      AiPromptGuardPluginLlmFormat = "cohere"
	AiPromptGuardPluginLlmFormatGemini      AiPromptGuardPluginLlmFormat = "gemini"
	AiPromptGuardPluginLlmFormatHuggingface AiPromptGuardPluginLlmFormat = "huggingface"
	AiPromptGuardPluginLlmFormatOpenai      AiPromptGuardPluginLlmFormat = "openai"
)

func (e AiPromptGuardPluginLlmFormat) ToPointer() *AiPromptGuardPluginLlmFormat {
	return &e
}
func (e *AiPromptGuardPluginLlmFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bedrock":
		fallthrough
	case "cohere":
		fallthrough
	case "gemini":
		fallthrough
	case "huggingface":
		fallthrough
	case "openai":
		*e = AiPromptGuardPluginLlmFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiPromptGuardPluginLlmFormat: %v", v)
	}
}

type AiPromptGuardPluginConfig struct {
	// If true, will ignore all previous chat prompts from the conversation history.
	AllowAllConversationHistory *bool `default:"false" json:"allow_all_conversation_history"`
	// Array of valid regex patterns, or valid questions from the 'user' role in chat.
	AllowPatterns []string `json:"allow_patterns"`
	// Array of invalid regex patterns, or invalid questions from the 'user' role in chat.
	DenyPatterns []string `json:"deny_patterns"`
	// Generative AI category of the request
	GenaiCategory *GenaiCategory `default:"text/generation" json:"genai_category"`
	// LLM input and output format and schema to use
	LlmFormat *AiPromptGuardPluginLlmFormat `default:"openai" json:"llm_format"`
	// If true, will match all roles in addition to 'user' role in conversation history.
	MatchAllRoles *bool `default:"false" json:"match_all_roles"`
	// max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.
	MaxRequestBodySize *int64 `default:"8192" json:"max_request_body_size"`
}

func (a AiPromptGuardPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptGuardPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"allow_patterns", "deny_patterns"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptGuardPluginConfig) GetAllowAllConversationHistory() *bool {
	if a == nil {
		return nil
	}
	return a.AllowAllConversationHistory
}

func (a *AiPromptGuardPluginConfig) GetAllowPatterns() []string {
	if a == nil {
		return nil
	}
	return a.AllowPatterns
}

func (a *AiPromptGuardPluginConfig) GetDenyPatterns() []string {
	if a == nil {
		return nil
	}
	return a.DenyPatterns
}

func (a *AiPromptGuardPluginConfig) GetGenaiCategory() *GenaiCategory {
	if a == nil {
		return nil
	}
	return a.GenaiCategory
}

func (a *AiPromptGuardPluginConfig) GetLlmFormat() *AiPromptGuardPluginLlmFormat {
	if a == nil {
		return nil
	}
	return a.LlmFormat
}

func (a *AiPromptGuardPluginConfig) GetMatchAllRoles() *bool {
	if a == nil {
		return nil
	}
	return a.MatchAllRoles
}

func (a *AiPromptGuardPluginConfig) GetMaxRequestBodySize() *int64 {
	if a == nil {
		return nil
	}
	return a.MaxRequestBodySize
}

// AiPromptGuardPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AiPromptGuardPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptGuardPluginConsumer) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptGuardPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type AiPromptGuardPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptGuardPluginConsumerGroup) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

type AiPromptGuardPluginProtocols string

const (
	AiPromptGuardPluginProtocolsGrpc  AiPromptGuardPluginProtocols = "grpc"
	AiPromptGuardPluginProtocolsGrpcs AiPromptGuardPluginProtocols = "grpcs"
	AiPromptGuardPluginProtocolsHTTP  AiPromptGuardPluginProtocols = "http"
	AiPromptGuardPluginProtocolsHTTPS AiPromptGuardPluginProtocols = "https"
)

func (e AiPromptGuardPluginProtocols) ToPointer() *AiPromptGuardPluginProtocols {
	return &e
}
func (e *AiPromptGuardPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = AiPromptGuardPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiPromptGuardPluginProtocols: %v", v)
	}
}

// AiPromptGuardPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type AiPromptGuardPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptGuardPluginRoute) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptGuardPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AiPromptGuardPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (a *AiPromptGuardPluginService) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

// AiPromptGuardPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AiPromptGuardPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                      `default:"null" json:"instance_name"`
	name         string                       `const:"ai-prompt-guard" json:"name"`
	Ordering     *AiPromptGuardPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []AiPromptGuardPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                     `json:"updated_at,omitempty"`
	Config    *AiPromptGuardPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AiPromptGuardPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *AiPromptGuardPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []AiPromptGuardPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *AiPromptGuardPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AiPromptGuardPluginService `json:"service"`
}

func (a AiPromptGuardPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AiPromptGuardPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"name", "ordering", "partials", "tags", "config", "consumer", "consumer_group", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (a *AiPromptGuardPlugin) GetCreatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.CreatedAt
}

func (a *AiPromptGuardPlugin) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *AiPromptGuardPlugin) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *AiPromptGuardPlugin) GetInstanceName() *string {
	if a == nil {
		return nil
	}
	return a.InstanceName
}

func (a *AiPromptGuardPlugin) GetName() string {
	return "ai-prompt-guard"
}

func (a *AiPromptGuardPlugin) GetOrdering() *AiPromptGuardPluginOrdering {
	if a == nil {
		return nil
	}
	return a.Ordering
}

func (a *AiPromptGuardPlugin) GetPartials() []AiPromptGuardPluginPartials {
	if a == nil {
		return nil
	}
	return a.Partials
}

func (a *AiPromptGuardPlugin) GetTags() []string {
	if a == nil {
		return nil
	}
	return a.Tags
}

func (a *AiPromptGuardPlugin) GetUpdatedAt() *int64 {
	if a == nil {
		return nil
	}
	return a.UpdatedAt
}

func (a *AiPromptGuardPlugin) GetConfig() *AiPromptGuardPluginConfig {
	if a == nil {
		return nil
	}
	return a.Config
}

func (a *AiPromptGuardPlugin) GetConsumer() *AiPromptGuardPluginConsumer {
	if a == nil {
		return nil
	}
	return a.Consumer
}

func (a *AiPromptGuardPlugin) GetConsumerGroup() *AiPromptGuardPluginConsumerGroup {
	if a == nil {
		return nil
	}
	return a.ConsumerGroup
}

func (a *AiPromptGuardPlugin) GetProtocols() []AiPromptGuardPluginProtocols {
	if a == nil {
		return nil
	}
	return a.Protocols
}

func (a *AiPromptGuardPlugin) GetRoute() *AiPromptGuardPluginRoute {
	if a == nil {
		return nil
	}
	return a.Route
}

func (a *AiPromptGuardPlugin) GetService() *AiPromptGuardPluginService {
	if a == nil {
		return nil
	}
	return a.Service
}
