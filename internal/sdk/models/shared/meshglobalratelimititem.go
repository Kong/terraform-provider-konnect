// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"time"
)

// MeshGlobalRateLimitItemType - the type of the resource
type MeshGlobalRateLimitItemType string

const (
	MeshGlobalRateLimitItemTypeMeshGlobalRateLimit MeshGlobalRateLimitItemType = "MeshGlobalRateLimit"
)

func (e MeshGlobalRateLimitItemType) ToPointer() *MeshGlobalRateLimitItemType {
	return &e
}
func (e *MeshGlobalRateLimitItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshGlobalRateLimit":
		*e = MeshGlobalRateLimitItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemType: %v", v)
	}
}

type RateLimitService struct {
	// LimitOnServiceFail will pass limit requests if ratelimit service is not reachable.
	LimitOnServiceFail *bool `json:"limitOnServiceFail,omitempty"`
	// Timeout for rate limit request made form Data Plane Proxy to rate limit service.
	Timeout string `json:"timeout"`
	// Url defines address of rate limit service.
	URL string `json:"url"`
}

func (o *RateLimitService) GetLimitOnServiceFail() *bool {
	if o == nil {
		return nil
	}
	return o.LimitOnServiceFail
}

func (o *RateLimitService) GetTimeout() string {
	if o == nil {
		return ""
	}
	return o.Timeout
}

func (o *RateLimitService) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

// Backend defines location of rate limit backend service.
type Backend struct {
	RateLimitService RateLimitService `json:"rateLimitService"`
}

func (o *Backend) GetRateLimitService() RateLimitService {
	if o == nil {
		return RateLimitService{}
	}
	return o.RateLimitService
}

type MeshGlobalRateLimitItemSpecAdd struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *MeshGlobalRateLimitItemSpecAdd) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemSpecAdd) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type MeshGlobalRateLimitItemSpecSet struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *MeshGlobalRateLimitItemSpecSet) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemSpecSet) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// MeshGlobalRateLimitItemSpecHeaders - The Headers to be added to the HTTP response on a rate limit event
type MeshGlobalRateLimitItemSpecHeaders struct {
	Add []MeshGlobalRateLimitItemSpecAdd `json:"add,omitempty"`
	Set []MeshGlobalRateLimitItemSpecSet `json:"set,omitempty"`
}

func (o *MeshGlobalRateLimitItemSpecHeaders) GetAdd() []MeshGlobalRateLimitItemSpecAdd {
	if o == nil {
		return nil
	}
	return o.Add
}

func (o *MeshGlobalRateLimitItemSpecHeaders) GetSet() []MeshGlobalRateLimitItemSpecSet {
	if o == nil {
		return nil
	}
	return o.Set
}

// OnRateLimit - Describes the actions to take on a rate limit event
type OnRateLimit struct {
	// The Headers to be added to the HTTP response on a rate limit event
	Headers *MeshGlobalRateLimitItemSpecHeaders `json:"headers,omitempty"`
	// The HTTP status code to be set on a rate limit event
	Status *int `json:"status,omitempty"`
}

func (o *OnRateLimit) GetHeaders() *MeshGlobalRateLimitItemSpecHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *OnRateLimit) GetStatus() *int {
	if o == nil {
		return nil
	}
	return o.Status
}

// MeshGlobalRateLimitItemSpecFromKind - Kind defines type of rate limit config. Possible options: OnHeader.
type MeshGlobalRateLimitItemSpecFromKind string

const (
	MeshGlobalRateLimitItemSpecFromKindOnHeader MeshGlobalRateLimitItemSpecFromKind = "OnHeader"
)

func (e MeshGlobalRateLimitItemSpecFromKind) ToPointer() *MeshGlobalRateLimitItemSpecFromKind {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecFromKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OnHeader":
		*e = MeshGlobalRateLimitItemSpecFromKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecFromKind: %v", v)
	}
}

// MeshGlobalRateLimitItemSpecFromRequestRate - Defines how many requests are allowed per interval.
type MeshGlobalRateLimitItemSpecFromRequestRate struct {
	// The interval the number of units is accounted for. Only 1s, 1m, 1h or 24h can be configured.
	Interval string `json:"interval"`
	// Number of units per interval (depending on usage it can be a number of requests,
	// or a number of connections).
	Num int `json:"num"`
}

func (o *MeshGlobalRateLimitItemSpecFromRequestRate) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *MeshGlobalRateLimitItemSpecFromRequestRate) GetNum() int {
	if o == nil {
		return 0
	}
	return o.Num
}

type Limits struct {
	// Defines how many requests are allowed per interval.
	RequestRate MeshGlobalRateLimitItemSpecFromRequestRate `json:"requestRate"`
	// Value of the request element on which rate limit should apply. E.g. header value.
	Value string `json:"value"`
}

func (o *Limits) GetRequestRate() MeshGlobalRateLimitItemSpecFromRequestRate {
	if o == nil {
		return MeshGlobalRateLimitItemSpecFromRequestRate{}
	}
	return o.RequestRate
}

func (o *Limits) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type RatelimitOnRequest struct {
	// Kind defines type of rate limit config. Possible options: OnHeader.
	Kind MeshGlobalRateLimitItemSpecFromKind `json:"kind"`
	// Limits defines limit configuration.
	Limits []Limits `json:"limits"`
	// Name of the request element on which rate limit should apply. E.g. header name.
	Name string `json:"name"`
}

func (o *RatelimitOnRequest) GetKind() MeshGlobalRateLimitItemSpecFromKind {
	if o == nil {
		return MeshGlobalRateLimitItemSpecFromKind("")
	}
	return o.Kind
}

func (o *RatelimitOnRequest) GetLimits() []Limits {
	if o == nil {
		return []Limits{}
	}
	return o.Limits
}

func (o *RatelimitOnRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// RequestRate - Defines how many requests are allowed per interval.
type RequestRate struct {
	// The interval the number of units is accounted for. Only 1s, 1m, 1h or 24h can be configured.
	Interval string `json:"interval"`
	// Number of units per interval (depending on usage it can be a number of requests,
	// or a number of connections).
	Num int `json:"num"`
}

func (o *RequestRate) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *RequestRate) GetNum() int {
	if o == nil {
		return 0
	}
	return o.Num
}

type MeshGlobalRateLimitItemHTTP struct {
	// Define if rate limiting should be disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Describes the actions to take on a rate limit event
	OnRateLimit *OnRateLimit `json:"onRateLimit,omitempty"`
	// Defines rate limit based on request content
	RatelimitOnRequest []RatelimitOnRequest `json:"ratelimitOnRequest,omitempty"`
	// Defines how many requests are allowed per interval.
	RequestRate *RequestRate `json:"requestRate,omitempty"`
}

func (o *MeshGlobalRateLimitItemHTTP) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *MeshGlobalRateLimitItemHTTP) GetOnRateLimit() *OnRateLimit {
	if o == nil {
		return nil
	}
	return o.OnRateLimit
}

func (o *MeshGlobalRateLimitItemHTTP) GetRatelimitOnRequest() []RatelimitOnRequest {
	if o == nil {
		return nil
	}
	return o.RatelimitOnRequest
}

func (o *MeshGlobalRateLimitItemHTTP) GetRequestRate() *RequestRate {
	if o == nil {
		return nil
	}
	return o.RequestRate
}

// MeshGlobalRateLimitItemMode - Mode defines rate limit behavior when limits are reached. Possible options: Limit and Shadow. Setting Shadow will
// not block over the limit requests but will update metrics. This is useful for testing rate limit configuration.
type MeshGlobalRateLimitItemMode string

const (
	MeshGlobalRateLimitItemModeLimit  MeshGlobalRateLimitItemMode = "Limit"
	MeshGlobalRateLimitItemModeShadow MeshGlobalRateLimitItemMode = "Shadow"
)

func (e MeshGlobalRateLimitItemMode) ToPointer() *MeshGlobalRateLimitItemMode {
	return &e
}
func (e *MeshGlobalRateLimitItemMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Limit":
		fallthrough
	case "Shadow":
		*e = MeshGlobalRateLimitItemMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemMode: %v", v)
	}
}

// MeshGlobalRateLimitItemDefault - Default is a configuration specific to the group of clients referenced in
// 'targetRef'
type MeshGlobalRateLimitItemDefault struct {
	// Backend defines location of rate limit backend service.
	Backend Backend                     `json:"backend"`
	HTTP    MeshGlobalRateLimitItemHTTP `json:"http"`
	// Mode defines rate limit behavior when limits are reached. Possible options: Limit and Shadow. Setting Shadow will
	// not block over the limit requests but will update metrics. This is useful for testing rate limit configuration.
	Mode *MeshGlobalRateLimitItemMode `json:"mode,omitempty"`
}

func (o *MeshGlobalRateLimitItemDefault) GetBackend() Backend {
	if o == nil {
		return Backend{}
	}
	return o.Backend
}

func (o *MeshGlobalRateLimitItemDefault) GetHTTP() MeshGlobalRateLimitItemHTTP {
	if o == nil {
		return MeshGlobalRateLimitItemHTTP{}
	}
	return o.HTTP
}

func (o *MeshGlobalRateLimitItemDefault) GetMode() *MeshGlobalRateLimitItemMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

// MeshGlobalRateLimitItemSpecKind - Kind of the referenced resource
type MeshGlobalRateLimitItemSpecKind string

const (
	MeshGlobalRateLimitItemSpecKindMesh                 MeshGlobalRateLimitItemSpecKind = "Mesh"
	MeshGlobalRateLimitItemSpecKindMeshSubset           MeshGlobalRateLimitItemSpecKind = "MeshSubset"
	MeshGlobalRateLimitItemSpecKindMeshGateway          MeshGlobalRateLimitItemSpecKind = "MeshGateway"
	MeshGlobalRateLimitItemSpecKindMeshService          MeshGlobalRateLimitItemSpecKind = "MeshService"
	MeshGlobalRateLimitItemSpecKindMeshExternalService  MeshGlobalRateLimitItemSpecKind = "MeshExternalService"
	MeshGlobalRateLimitItemSpecKindMeshMultiZoneService MeshGlobalRateLimitItemSpecKind = "MeshMultiZoneService"
	MeshGlobalRateLimitItemSpecKindMeshServiceSubset    MeshGlobalRateLimitItemSpecKind = "MeshServiceSubset"
	MeshGlobalRateLimitItemSpecKindMeshHTTPRoute        MeshGlobalRateLimitItemSpecKind = "MeshHTTPRoute"
	MeshGlobalRateLimitItemSpecKindDataplane            MeshGlobalRateLimitItemSpecKind = "Dataplane"
)

func (e MeshGlobalRateLimitItemSpecKind) ToPointer() *MeshGlobalRateLimitItemSpecKind {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshGlobalRateLimitItemSpecKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecKind: %v", v)
	}
}

type MeshGlobalRateLimitItemSpecProxyTypes string

const (
	MeshGlobalRateLimitItemSpecProxyTypesSidecar MeshGlobalRateLimitItemSpecProxyTypes = "Sidecar"
	MeshGlobalRateLimitItemSpecProxyTypesGateway MeshGlobalRateLimitItemSpecProxyTypes = "Gateway"
)

func (e MeshGlobalRateLimitItemSpecProxyTypes) ToPointer() *MeshGlobalRateLimitItemSpecProxyTypes {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshGlobalRateLimitItemSpecProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecProxyTypes: %v", v)
	}
}

// MeshGlobalRateLimitItemSpecTargetRef - TargetRef is a reference to the resource that represents a group of
// clients.
type MeshGlobalRateLimitItemSpecTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshGlobalRateLimitItemSpecKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshGlobalRateLimitItemSpecProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetKind() *MeshGlobalRateLimitItemSpecKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetProxyTypes() []MeshGlobalRateLimitItemSpecProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshGlobalRateLimitItemSpecTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshGlobalRateLimitItemFrom struct {
	// Default is a configuration specific to the group of clients referenced in
	// 'targetRef'
	Default *MeshGlobalRateLimitItemDefault `json:"default,omitempty"`
	// TargetRef is a reference to the resource that represents a group of
	// clients.
	TargetRef MeshGlobalRateLimitItemSpecTargetRef `json:"targetRef"`
}

func (o *MeshGlobalRateLimitItemFrom) GetDefault() *MeshGlobalRateLimitItemDefault {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *MeshGlobalRateLimitItemFrom) GetTargetRef() MeshGlobalRateLimitItemSpecTargetRef {
	if o == nil {
		return MeshGlobalRateLimitItemSpecTargetRef{}
	}
	return o.TargetRef
}

// MeshGlobalRateLimitItemKind - Kind of the referenced resource
type MeshGlobalRateLimitItemKind string

const (
	MeshGlobalRateLimitItemKindMesh                 MeshGlobalRateLimitItemKind = "Mesh"
	MeshGlobalRateLimitItemKindMeshSubset           MeshGlobalRateLimitItemKind = "MeshSubset"
	MeshGlobalRateLimitItemKindMeshGateway          MeshGlobalRateLimitItemKind = "MeshGateway"
	MeshGlobalRateLimitItemKindMeshService          MeshGlobalRateLimitItemKind = "MeshService"
	MeshGlobalRateLimitItemKindMeshExternalService  MeshGlobalRateLimitItemKind = "MeshExternalService"
	MeshGlobalRateLimitItemKindMeshMultiZoneService MeshGlobalRateLimitItemKind = "MeshMultiZoneService"
	MeshGlobalRateLimitItemKindMeshServiceSubset    MeshGlobalRateLimitItemKind = "MeshServiceSubset"
	MeshGlobalRateLimitItemKindMeshHTTPRoute        MeshGlobalRateLimitItemKind = "MeshHTTPRoute"
	MeshGlobalRateLimitItemKindDataplane            MeshGlobalRateLimitItemKind = "Dataplane"
)

func (e MeshGlobalRateLimitItemKind) ToPointer() *MeshGlobalRateLimitItemKind {
	return &e
}
func (e *MeshGlobalRateLimitItemKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshGlobalRateLimitItemKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemKind: %v", v)
	}
}

type MeshGlobalRateLimitItemProxyTypes string

const (
	MeshGlobalRateLimitItemProxyTypesSidecar MeshGlobalRateLimitItemProxyTypes = "Sidecar"
	MeshGlobalRateLimitItemProxyTypesGateway MeshGlobalRateLimitItemProxyTypes = "Gateway"
)

func (e MeshGlobalRateLimitItemProxyTypes) ToPointer() *MeshGlobalRateLimitItemProxyTypes {
	return &e
}
func (e *MeshGlobalRateLimitItemProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshGlobalRateLimitItemProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemProxyTypes: %v", v)
	}
}

// MeshGlobalRateLimitItemTargetRef - TargetRef is a reference to the resource the policy takes an effect on.
// The resource could be either a real store object or virtual resource
// defined inplace.
type MeshGlobalRateLimitItemTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshGlobalRateLimitItemKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshGlobalRateLimitItemProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshGlobalRateLimitItemTargetRef) GetKind() *MeshGlobalRateLimitItemKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshGlobalRateLimitItemTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshGlobalRateLimitItemTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshGlobalRateLimitItemTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshGlobalRateLimitItemTargetRef) GetProxyTypes() []MeshGlobalRateLimitItemProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshGlobalRateLimitItemTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshGlobalRateLimitItemTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshGlobalRateLimitItemRateLimitService struct {
	// LimitOnServiceFail will pass limit requests if ratelimit service is not reachable.
	LimitOnServiceFail *bool `json:"limitOnServiceFail,omitempty"`
	// Timeout for rate limit request made form Data Plane Proxy to rate limit service.
	Timeout string `json:"timeout"`
	// Url defines address of rate limit service.
	URL string `json:"url"`
}

func (o *MeshGlobalRateLimitItemRateLimitService) GetLimitOnServiceFail() *bool {
	if o == nil {
		return nil
	}
	return o.LimitOnServiceFail
}

func (o *MeshGlobalRateLimitItemRateLimitService) GetTimeout() string {
	if o == nil {
		return ""
	}
	return o.Timeout
}

func (o *MeshGlobalRateLimitItemRateLimitService) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

// MeshGlobalRateLimitItemBackend - Backend defines location of rate limit backend service.
type MeshGlobalRateLimitItemBackend struct {
	RateLimitService MeshGlobalRateLimitItemRateLimitService `json:"rateLimitService"`
}

func (o *MeshGlobalRateLimitItemBackend) GetRateLimitService() MeshGlobalRateLimitItemRateLimitService {
	if o == nil {
		return MeshGlobalRateLimitItemRateLimitService{}
	}
	return o.RateLimitService
}

type MeshGlobalRateLimitItemAdd struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *MeshGlobalRateLimitItemAdd) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemAdd) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type MeshGlobalRateLimitItemSet struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *MeshGlobalRateLimitItemSet) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemSet) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// MeshGlobalRateLimitItemHeaders - The Headers to be added to the HTTP response on a rate limit event
type MeshGlobalRateLimitItemHeaders struct {
	Add []MeshGlobalRateLimitItemAdd `json:"add,omitempty"`
	Set []MeshGlobalRateLimitItemSet `json:"set,omitempty"`
}

func (o *MeshGlobalRateLimitItemHeaders) GetAdd() []MeshGlobalRateLimitItemAdd {
	if o == nil {
		return nil
	}
	return o.Add
}

func (o *MeshGlobalRateLimitItemHeaders) GetSet() []MeshGlobalRateLimitItemSet {
	if o == nil {
		return nil
	}
	return o.Set
}

// MeshGlobalRateLimitItemOnRateLimit - Describes the actions to take on a rate limit event
type MeshGlobalRateLimitItemOnRateLimit struct {
	// The Headers to be added to the HTTP response on a rate limit event
	Headers *MeshGlobalRateLimitItemHeaders `json:"headers,omitempty"`
	// The HTTP status code to be set on a rate limit event
	Status *int `json:"status,omitempty"`
}

func (o *MeshGlobalRateLimitItemOnRateLimit) GetHeaders() *MeshGlobalRateLimitItemHeaders {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *MeshGlobalRateLimitItemOnRateLimit) GetStatus() *int {
	if o == nil {
		return nil
	}
	return o.Status
}

// MeshGlobalRateLimitItemSpecToDefaultKind - Kind defines type of rate limit config. Possible options: OnHeader.
type MeshGlobalRateLimitItemSpecToDefaultKind string

const (
	MeshGlobalRateLimitItemSpecToDefaultKindOnHeader MeshGlobalRateLimitItemSpecToDefaultKind = "OnHeader"
)

func (e MeshGlobalRateLimitItemSpecToDefaultKind) ToPointer() *MeshGlobalRateLimitItemSpecToDefaultKind {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecToDefaultKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OnHeader":
		*e = MeshGlobalRateLimitItemSpecToDefaultKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecToDefaultKind: %v", v)
	}
}

// MeshGlobalRateLimitItemSpecRequestRate - Defines how many requests are allowed per interval.
type MeshGlobalRateLimitItemSpecRequestRate struct {
	// The interval the number of units is accounted for. Only 1s, 1m, 1h or 24h can be configured.
	Interval string `json:"interval"`
	// Number of units per interval (depending on usage it can be a number of requests,
	// or a number of connections).
	Num int `json:"num"`
}

func (o *MeshGlobalRateLimitItemSpecRequestRate) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *MeshGlobalRateLimitItemSpecRequestRate) GetNum() int {
	if o == nil {
		return 0
	}
	return o.Num
}

type MeshGlobalRateLimitItemLimits struct {
	// Defines how many requests are allowed per interval.
	RequestRate MeshGlobalRateLimitItemSpecRequestRate `json:"requestRate"`
	// Value of the request element on which rate limit should apply. E.g. header value.
	Value string `json:"value"`
}

func (o *MeshGlobalRateLimitItemLimits) GetRequestRate() MeshGlobalRateLimitItemSpecRequestRate {
	if o == nil {
		return MeshGlobalRateLimitItemSpecRequestRate{}
	}
	return o.RequestRate
}

func (o *MeshGlobalRateLimitItemLimits) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type MeshGlobalRateLimitItemRatelimitOnRequest struct {
	// Kind defines type of rate limit config. Possible options: OnHeader.
	Kind MeshGlobalRateLimitItemSpecToDefaultKind `json:"kind"`
	// Limits defines limit configuration.
	Limits []MeshGlobalRateLimitItemLimits `json:"limits"`
	// Name of the request element on which rate limit should apply. E.g. header name.
	Name string `json:"name"`
}

func (o *MeshGlobalRateLimitItemRatelimitOnRequest) GetKind() MeshGlobalRateLimitItemSpecToDefaultKind {
	if o == nil {
		return MeshGlobalRateLimitItemSpecToDefaultKind("")
	}
	return o.Kind
}

func (o *MeshGlobalRateLimitItemRatelimitOnRequest) GetLimits() []MeshGlobalRateLimitItemLimits {
	if o == nil {
		return []MeshGlobalRateLimitItemLimits{}
	}
	return o.Limits
}

func (o *MeshGlobalRateLimitItemRatelimitOnRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// MeshGlobalRateLimitItemRequestRate - Defines how many requests are allowed per interval.
type MeshGlobalRateLimitItemRequestRate struct {
	// The interval the number of units is accounted for. Only 1s, 1m, 1h or 24h can be configured.
	Interval string `json:"interval"`
	// Number of units per interval (depending on usage it can be a number of requests,
	// or a number of connections).
	Num int `json:"num"`
}

func (o *MeshGlobalRateLimitItemRequestRate) GetInterval() string {
	if o == nil {
		return ""
	}
	return o.Interval
}

func (o *MeshGlobalRateLimitItemRequestRate) GetNum() int {
	if o == nil {
		return 0
	}
	return o.Num
}

type MeshGlobalRateLimitItemSpecHTTP struct {
	// Define if rate limiting should be disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Describes the actions to take on a rate limit event
	OnRateLimit *MeshGlobalRateLimitItemOnRateLimit `json:"onRateLimit,omitempty"`
	// Defines rate limit based on request content
	RatelimitOnRequest []MeshGlobalRateLimitItemRatelimitOnRequest `json:"ratelimitOnRequest,omitempty"`
	// Defines how many requests are allowed per interval.
	RequestRate *MeshGlobalRateLimitItemRequestRate `json:"requestRate,omitempty"`
}

func (o *MeshGlobalRateLimitItemSpecHTTP) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *MeshGlobalRateLimitItemSpecHTTP) GetOnRateLimit() *MeshGlobalRateLimitItemOnRateLimit {
	if o == nil {
		return nil
	}
	return o.OnRateLimit
}

func (o *MeshGlobalRateLimitItemSpecHTTP) GetRatelimitOnRequest() []MeshGlobalRateLimitItemRatelimitOnRequest {
	if o == nil {
		return nil
	}
	return o.RatelimitOnRequest
}

func (o *MeshGlobalRateLimitItemSpecHTTP) GetRequestRate() *MeshGlobalRateLimitItemRequestRate {
	if o == nil {
		return nil
	}
	return o.RequestRate
}

// MeshGlobalRateLimitItemSpecMode - Mode defines rate limit behavior when limits are reached. Possible options: Limit and Shadow. Setting Shadow will
// not block over the limit requests but will update metrics. This is useful for testing rate limit configuration.
type MeshGlobalRateLimitItemSpecMode string

const (
	MeshGlobalRateLimitItemSpecModeLimit  MeshGlobalRateLimitItemSpecMode = "Limit"
	MeshGlobalRateLimitItemSpecModeShadow MeshGlobalRateLimitItemSpecMode = "Shadow"
)

func (e MeshGlobalRateLimitItemSpecMode) ToPointer() *MeshGlobalRateLimitItemSpecMode {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Limit":
		fallthrough
	case "Shadow":
		*e = MeshGlobalRateLimitItemSpecMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecMode: %v", v)
	}
}

// MeshGlobalRateLimitItemSpecDefault - Default is a configuration specific to the group of clients referenced in
// 'targetRef'
type MeshGlobalRateLimitItemSpecDefault struct {
	// Backend defines location of rate limit backend service.
	Backend MeshGlobalRateLimitItemBackend  `json:"backend"`
	HTTP    MeshGlobalRateLimitItemSpecHTTP `json:"http"`
	// Mode defines rate limit behavior when limits are reached. Possible options: Limit and Shadow. Setting Shadow will
	// not block over the limit requests but will update metrics. This is useful for testing rate limit configuration.
	Mode *MeshGlobalRateLimitItemSpecMode `json:"mode,omitempty"`
}

func (o *MeshGlobalRateLimitItemSpecDefault) GetBackend() MeshGlobalRateLimitItemBackend {
	if o == nil {
		return MeshGlobalRateLimitItemBackend{}
	}
	return o.Backend
}

func (o *MeshGlobalRateLimitItemSpecDefault) GetHTTP() MeshGlobalRateLimitItemSpecHTTP {
	if o == nil {
		return MeshGlobalRateLimitItemSpecHTTP{}
	}
	return o.HTTP
}

func (o *MeshGlobalRateLimitItemSpecDefault) GetMode() *MeshGlobalRateLimitItemSpecMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

// MeshGlobalRateLimitItemSpecToKind - Kind of the referenced resource
type MeshGlobalRateLimitItemSpecToKind string

const (
	MeshGlobalRateLimitItemSpecToKindMesh                 MeshGlobalRateLimitItemSpecToKind = "Mesh"
	MeshGlobalRateLimitItemSpecToKindMeshSubset           MeshGlobalRateLimitItemSpecToKind = "MeshSubset"
	MeshGlobalRateLimitItemSpecToKindMeshGateway          MeshGlobalRateLimitItemSpecToKind = "MeshGateway"
	MeshGlobalRateLimitItemSpecToKindMeshService          MeshGlobalRateLimitItemSpecToKind = "MeshService"
	MeshGlobalRateLimitItemSpecToKindMeshExternalService  MeshGlobalRateLimitItemSpecToKind = "MeshExternalService"
	MeshGlobalRateLimitItemSpecToKindMeshMultiZoneService MeshGlobalRateLimitItemSpecToKind = "MeshMultiZoneService"
	MeshGlobalRateLimitItemSpecToKindMeshServiceSubset    MeshGlobalRateLimitItemSpecToKind = "MeshServiceSubset"
	MeshGlobalRateLimitItemSpecToKindMeshHTTPRoute        MeshGlobalRateLimitItemSpecToKind = "MeshHTTPRoute"
	MeshGlobalRateLimitItemSpecToKindDataplane            MeshGlobalRateLimitItemSpecToKind = "Dataplane"
)

func (e MeshGlobalRateLimitItemSpecToKind) ToPointer() *MeshGlobalRateLimitItemSpecToKind {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecToKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshGlobalRateLimitItemSpecToKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecToKind: %v", v)
	}
}

type MeshGlobalRateLimitItemSpecToProxyTypes string

const (
	MeshGlobalRateLimitItemSpecToProxyTypesSidecar MeshGlobalRateLimitItemSpecToProxyTypes = "Sidecar"
	MeshGlobalRateLimitItemSpecToProxyTypesGateway MeshGlobalRateLimitItemSpecToProxyTypes = "Gateway"
)

func (e MeshGlobalRateLimitItemSpecToProxyTypes) ToPointer() *MeshGlobalRateLimitItemSpecToProxyTypes {
	return &e
}
func (e *MeshGlobalRateLimitItemSpecToProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshGlobalRateLimitItemSpecToProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshGlobalRateLimitItemSpecToProxyTypes: %v", v)
	}
}

// MeshGlobalRateLimitItemSpecToTargetRef - TargetRef is a reference to the resource that represents a group of
// clients.
type MeshGlobalRateLimitItemSpecToTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshGlobalRateLimitItemSpecToKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshGlobalRateLimitItemSpecToProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetKind() *MeshGlobalRateLimitItemSpecToKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetProxyTypes() []MeshGlobalRateLimitItemSpecToProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshGlobalRateLimitItemSpecToTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshGlobalRateLimitItemTo struct {
	// Default is a configuration specific to the group of clients referenced in
	// 'targetRef'
	Default *MeshGlobalRateLimitItemSpecDefault `json:"default,omitempty"`
	// TargetRef is a reference to the resource that represents a group of
	// clients.
	TargetRef MeshGlobalRateLimitItemSpecToTargetRef `json:"targetRef"`
}

func (o *MeshGlobalRateLimitItemTo) GetDefault() *MeshGlobalRateLimitItemSpecDefault {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *MeshGlobalRateLimitItemTo) GetTargetRef() MeshGlobalRateLimitItemSpecToTargetRef {
	if o == nil {
		return MeshGlobalRateLimitItemSpecToTargetRef{}
	}
	return o.TargetRef
}

// MeshGlobalRateLimitItemSpec - Spec is the specification of the Kuma MeshGlobalRateLimit resource.
type MeshGlobalRateLimitItemSpec struct {
	// From list makes a match between clients and corresponding configurations
	From []MeshGlobalRateLimitItemFrom `json:"from,omitempty"`
	// TargetRef is a reference to the resource the policy takes an effect on.
	// The resource could be either a real store object or virtual resource
	// defined inplace.
	TargetRef *MeshGlobalRateLimitItemTargetRef `json:"targetRef,omitempty"`
	// To list makes a match between clients and corresponding configurations
	To []MeshGlobalRateLimitItemTo `json:"to,omitempty"`
}

func (o *MeshGlobalRateLimitItemSpec) GetFrom() []MeshGlobalRateLimitItemFrom {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *MeshGlobalRateLimitItemSpec) GetTargetRef() *MeshGlobalRateLimitItemTargetRef {
	if o == nil {
		return nil
	}
	return o.TargetRef
}

func (o *MeshGlobalRateLimitItemSpec) GetTo() []MeshGlobalRateLimitItemTo {
	if o == nil {
		return nil
	}
	return o.To
}

type MeshGlobalRateLimitItem struct {
	// the type of the resource
	Type MeshGlobalRateLimitItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshGlobalRateLimit resource.
	Spec MeshGlobalRateLimitItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
}

func (m MeshGlobalRateLimitItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshGlobalRateLimitItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeshGlobalRateLimitItem) GetType() MeshGlobalRateLimitItemType {
	if o == nil {
		return MeshGlobalRateLimitItemType("")
	}
	return o.Type
}

func (o *MeshGlobalRateLimitItem) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshGlobalRateLimitItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshGlobalRateLimitItem) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshGlobalRateLimitItem) GetSpec() MeshGlobalRateLimitItemSpec {
	if o == nil {
		return MeshGlobalRateLimitItemSpec{}
	}
	return o.Spec
}

func (o *MeshGlobalRateLimitItem) GetCreationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreationTime
}

func (o *MeshGlobalRateLimitItem) GetModificationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModificationTime
}
