// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type ResponseTransformerAdvancedPluginAfter struct {
	Access []string `json:"access"`
}

func (o *ResponseTransformerAdvancedPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type ResponseTransformerAdvancedPluginBefore struct {
	Access []string `json:"access"`
}

func (o *ResponseTransformerAdvancedPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type ResponseTransformerAdvancedPluginOrdering struct {
	After  *ResponseTransformerAdvancedPluginAfter  `json:"after"`
	Before *ResponseTransformerAdvancedPluginBefore `json:"before"`
}

func (o *ResponseTransformerAdvancedPluginOrdering) GetAfter() *ResponseTransformerAdvancedPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ResponseTransformerAdvancedPluginOrdering) GetBefore() *ResponseTransformerAdvancedPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type ResponseTransformerAdvancedPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (r ResponseTransformerAdvancedPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseTransformerAdvancedPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ResponseTransformerAdvancedPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ResponseTransformerAdvancedPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ResponseTransformerAdvancedPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type ResponseTransformerAdvancedPluginJSONTypes string

const (
	ResponseTransformerAdvancedPluginJSONTypesBoolean ResponseTransformerAdvancedPluginJSONTypes = "boolean"
	ResponseTransformerAdvancedPluginJSONTypesNumber  ResponseTransformerAdvancedPluginJSONTypes = "number"
	ResponseTransformerAdvancedPluginJSONTypesString  ResponseTransformerAdvancedPluginJSONTypes = "string"
)

func (e ResponseTransformerAdvancedPluginJSONTypes) ToPointer() *ResponseTransformerAdvancedPluginJSONTypes {
	return &e
}
func (e *ResponseTransformerAdvancedPluginJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = ResponseTransformerAdvancedPluginJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerAdvancedPluginJSONTypes: %v", v)
	}
}

type ResponseTransformerAdvancedPluginAdd struct {
	Headers   []string                                     `json:"headers,omitempty"`
	IfStatus  []string                                     `json:"if_status,omitempty"`
	JSON      []string                                     `json:"json,omitempty"`
	JSONTypes []ResponseTransformerAdvancedPluginJSONTypes `json:"json_types,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginAdd) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ResponseTransformerAdvancedPluginAdd) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

func (o *ResponseTransformerAdvancedPluginAdd) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerAdvancedPluginAdd) GetJSONTypes() []ResponseTransformerAdvancedPluginJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

type ResponseTransformerAdvancedPluginAllow struct {
	JSON []string `json:"json"`
}

func (o *ResponseTransformerAdvancedPluginAllow) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

type ResponseTransformerAdvancedPluginConfigJSONTypes string

const (
	ResponseTransformerAdvancedPluginConfigJSONTypesBoolean ResponseTransformerAdvancedPluginConfigJSONTypes = "boolean"
	ResponseTransformerAdvancedPluginConfigJSONTypesNumber  ResponseTransformerAdvancedPluginConfigJSONTypes = "number"
	ResponseTransformerAdvancedPluginConfigJSONTypesString  ResponseTransformerAdvancedPluginConfigJSONTypes = "string"
)

func (e ResponseTransformerAdvancedPluginConfigJSONTypes) ToPointer() *ResponseTransformerAdvancedPluginConfigJSONTypes {
	return &e
}
func (e *ResponseTransformerAdvancedPluginConfigJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = ResponseTransformerAdvancedPluginConfigJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerAdvancedPluginConfigJSONTypes: %v", v)
	}
}

type ResponseTransformerAdvancedPluginAppend struct {
	Headers   []string                                           `json:"headers,omitempty"`
	IfStatus  []string                                           `json:"if_status,omitempty"`
	JSON      []string                                           `json:"json,omitempty"`
	JSONTypes []ResponseTransformerAdvancedPluginConfigJSONTypes `json:"json_types,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginAppend) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ResponseTransformerAdvancedPluginAppend) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

func (o *ResponseTransformerAdvancedPluginAppend) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerAdvancedPluginAppend) GetJSONTypes() []ResponseTransformerAdvancedPluginConfigJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

type ResponseTransformerAdvancedPluginRemove struct {
	Headers  []string `json:"headers,omitempty"`
	IfStatus []string `json:"if_status,omitempty"`
	JSON     []string `json:"json,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginRemove) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ResponseTransformerAdvancedPluginRemove) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

func (o *ResponseTransformerAdvancedPluginRemove) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

type ResponseTransformerAdvancedPluginRename struct {
	Headers  []string `json:"headers,omitempty"`
	IfStatus []string `json:"if_status,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginRename) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ResponseTransformerAdvancedPluginRename) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

type ResponseTransformerAdvancedPluginConfigReplaceJSONTypes string

const (
	ResponseTransformerAdvancedPluginConfigReplaceJSONTypesBoolean ResponseTransformerAdvancedPluginConfigReplaceJSONTypes = "boolean"
	ResponseTransformerAdvancedPluginConfigReplaceJSONTypesNumber  ResponseTransformerAdvancedPluginConfigReplaceJSONTypes = "number"
	ResponseTransformerAdvancedPluginConfigReplaceJSONTypesString  ResponseTransformerAdvancedPluginConfigReplaceJSONTypes = "string"
)

func (e ResponseTransformerAdvancedPluginConfigReplaceJSONTypes) ToPointer() *ResponseTransformerAdvancedPluginConfigReplaceJSONTypes {
	return &e
}
func (e *ResponseTransformerAdvancedPluginConfigReplaceJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = ResponseTransformerAdvancedPluginConfigReplaceJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerAdvancedPluginConfigReplaceJSONTypes: %v", v)
	}
}

type ResponseTransformerAdvancedPluginReplace struct {
	// String with which to replace the entire response body.
	Body      *string                                                   `default:"null" json:"body"`
	Headers   []string                                                  `json:"headers,omitempty"`
	IfStatus  []string                                                  `json:"if_status,omitempty"`
	JSON      []string                                                  `json:"json,omitempty"`
	JSONTypes []ResponseTransformerAdvancedPluginConfigReplaceJSONTypes `json:"json_types,omitempty"`
}

func (r ResponseTransformerAdvancedPluginReplace) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseTransformerAdvancedPluginReplace) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ResponseTransformerAdvancedPluginReplace) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *ResponseTransformerAdvancedPluginReplace) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *ResponseTransformerAdvancedPluginReplace) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

func (o *ResponseTransformerAdvancedPluginReplace) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerAdvancedPluginReplace) GetJSONTypes() []ResponseTransformerAdvancedPluginConfigReplaceJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

type Transform struct {
	Functions []string `json:"functions,omitempty"`
	IfStatus  []string `json:"if_status,omitempty"`
	JSON      []string `json:"json,omitempty"`
}

func (o *Transform) GetFunctions() []string {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *Transform) GetIfStatus() []string {
	if o == nil {
		return nil
	}
	return o.IfStatus
}

func (o *Transform) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

type ResponseTransformerAdvancedPluginConfig struct {
	Add    *ResponseTransformerAdvancedPluginAdd    `json:"add"`
	Allow  *ResponseTransformerAdvancedPluginAllow  `json:"allow"`
	Append *ResponseTransformerAdvancedPluginAppend `json:"append"`
	// Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects..
	DotsInKeys *bool                                     `default:"true" json:"dots_in_keys"`
	Remove     *ResponseTransformerAdvancedPluginRemove  `json:"remove"`
	Rename     *ResponseTransformerAdvancedPluginRename  `json:"rename"`
	Replace    *ResponseTransformerAdvancedPluginReplace `json:"replace"`
	Transform  *Transform                                `json:"transform"`
}

func (r ResponseTransformerAdvancedPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseTransformerAdvancedPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ResponseTransformerAdvancedPluginConfig) GetAdd() *ResponseTransformerAdvancedPluginAdd {
	if o == nil {
		return nil
	}
	return o.Add
}

func (o *ResponseTransformerAdvancedPluginConfig) GetAllow() *ResponseTransformerAdvancedPluginAllow {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *ResponseTransformerAdvancedPluginConfig) GetAppend() *ResponseTransformerAdvancedPluginAppend {
	if o == nil {
		return nil
	}
	return o.Append
}

func (o *ResponseTransformerAdvancedPluginConfig) GetDotsInKeys() *bool {
	if o == nil {
		return nil
	}
	return o.DotsInKeys
}

func (o *ResponseTransformerAdvancedPluginConfig) GetRemove() *ResponseTransformerAdvancedPluginRemove {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *ResponseTransformerAdvancedPluginConfig) GetRename() *ResponseTransformerAdvancedPluginRename {
	if o == nil {
		return nil
	}
	return o.Rename
}

func (o *ResponseTransformerAdvancedPluginConfig) GetReplace() *ResponseTransformerAdvancedPluginReplace {
	if o == nil {
		return nil
	}
	return o.Replace
}

func (o *ResponseTransformerAdvancedPluginConfig) GetTransform() *Transform {
	if o == nil {
		return nil
	}
	return o.Transform
}

// ResponseTransformerAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ResponseTransformerAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ResponseTransformerAdvancedPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type ResponseTransformerAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type ResponseTransformerAdvancedPluginProtocols string

const (
	ResponseTransformerAdvancedPluginProtocolsGrpc  ResponseTransformerAdvancedPluginProtocols = "grpc"
	ResponseTransformerAdvancedPluginProtocolsGrpcs ResponseTransformerAdvancedPluginProtocols = "grpcs"
	ResponseTransformerAdvancedPluginProtocolsHTTP  ResponseTransformerAdvancedPluginProtocols = "http"
	ResponseTransformerAdvancedPluginProtocolsHTTPS ResponseTransformerAdvancedPluginProtocols = "https"
)

func (e ResponseTransformerAdvancedPluginProtocols) ToPointer() *ResponseTransformerAdvancedPluginProtocols {
	return &e
}
func (e *ResponseTransformerAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ResponseTransformerAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerAdvancedPluginProtocols: %v", v)
	}
}

// ResponseTransformerAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type ResponseTransformerAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ResponseTransformerAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ResponseTransformerAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ResponseTransformerAdvancedPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ResponseTransformerAdvancedPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                                    `default:"null" json:"instance_name"`
	name         string                                     `const:"response-transformer-advanced" json:"name"`
	Ordering     *ResponseTransformerAdvancedPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []ResponseTransformerAdvancedPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                                   `json:"updated_at,omitempty"`
	Config    *ResponseTransformerAdvancedPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ResponseTransformerAdvancedPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *ResponseTransformerAdvancedPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []ResponseTransformerAdvancedPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *ResponseTransformerAdvancedPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ResponseTransformerAdvancedPluginService `json:"service"`
}

func (r ResponseTransformerAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseTransformerAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ResponseTransformerAdvancedPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ResponseTransformerAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ResponseTransformerAdvancedPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ResponseTransformerAdvancedPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *ResponseTransformerAdvancedPlugin) GetName() string {
	return "response-transformer-advanced"
}

func (o *ResponseTransformerAdvancedPlugin) GetOrdering() *ResponseTransformerAdvancedPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *ResponseTransformerAdvancedPlugin) GetPartials() []ResponseTransformerAdvancedPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *ResponseTransformerAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ResponseTransformerAdvancedPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ResponseTransformerAdvancedPlugin) GetConfig() *ResponseTransformerAdvancedPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *ResponseTransformerAdvancedPlugin) GetConsumer() *ResponseTransformerAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *ResponseTransformerAdvancedPlugin) GetConsumerGroup() *ResponseTransformerAdvancedPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *ResponseTransformerAdvancedPlugin) GetProtocols() []ResponseTransformerAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *ResponseTransformerAdvancedPlugin) GetRoute() *ResponseTransformerAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *ResponseTransformerAdvancedPlugin) GetService() *ResponseTransformerAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
