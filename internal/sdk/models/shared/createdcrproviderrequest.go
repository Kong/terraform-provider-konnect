// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type CreateDcrProviderRequestHTTPProviderType string

const (
	CreateDcrProviderRequestHTTPProviderTypeHTTP CreateDcrProviderRequestHTTPProviderType = "http"
)

func (e CreateDcrProviderRequestHTTPProviderType) ToPointer() *CreateDcrProviderRequestHTTPProviderType {
	return &e
}
func (e *CreateDcrProviderRequestHTTPProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = CreateDcrProviderRequestHTTPProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDcrProviderRequestHTTPProviderType: %v", v)
	}
}

// CreateDcrProviderRequestHTTP - Request body for creating an HTTP DCR provider.
type CreateDcrProviderRequestHTTP struct {
	ProviderType CreateDcrProviderRequestHTTPProviderType `json:"provider_type"`
	// Payload to create an HTTP DCR provider.
	DcrConfig CreateDcrConfigHTTPInRequest `json:"dcr_config"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	Issuer      string  `json:"issuer"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
}

func (o *CreateDcrProviderRequestHTTP) GetProviderType() CreateDcrProviderRequestHTTPProviderType {
	if o == nil {
		return CreateDcrProviderRequestHTTPProviderType("")
	}
	return o.ProviderType
}

func (o *CreateDcrProviderRequestHTTP) GetDcrConfig() CreateDcrConfigHTTPInRequest {
	if o == nil {
		return CreateDcrConfigHTTPInRequest{}
	}
	return o.DcrConfig
}

func (o *CreateDcrProviderRequestHTTP) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDcrProviderRequestHTTP) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDcrProviderRequestHTTP) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDcrProviderRequestHTTP) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

type CreateDcrProviderRequestOktaProviderType string

const (
	CreateDcrProviderRequestOktaProviderTypeOkta CreateDcrProviderRequestOktaProviderType = "okta"
)

func (e CreateDcrProviderRequestOktaProviderType) ToPointer() *CreateDcrProviderRequestOktaProviderType {
	return &e
}
func (e *CreateDcrProviderRequestOktaProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "okta":
		*e = CreateDcrProviderRequestOktaProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDcrProviderRequestOktaProviderType: %v", v)
	}
}

// CreateDcrProviderRequestOkta - Request body for creating an Okta DCR provider.
type CreateDcrProviderRequestOkta struct {
	ProviderType CreateDcrProviderRequestOktaProviderType `json:"provider_type"`
	// Payload to create an Okta DCR provider.
	DcrConfig CreateDcrConfigOktaInRequest `json:"dcr_config"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	Issuer      string  `json:"issuer"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
}

func (o *CreateDcrProviderRequestOkta) GetProviderType() CreateDcrProviderRequestOktaProviderType {
	if o == nil {
		return CreateDcrProviderRequestOktaProviderType("")
	}
	return o.ProviderType
}

func (o *CreateDcrProviderRequestOkta) GetDcrConfig() CreateDcrConfigOktaInRequest {
	if o == nil {
		return CreateDcrConfigOktaInRequest{}
	}
	return o.DcrConfig
}

func (o *CreateDcrProviderRequestOkta) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDcrProviderRequestOkta) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDcrProviderRequestOkta) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDcrProviderRequestOkta) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

type CreateDcrProviderRequestCurityProviderType string

const (
	CreateDcrProviderRequestCurityProviderTypeCurity CreateDcrProviderRequestCurityProviderType = "curity"
)

func (e CreateDcrProviderRequestCurityProviderType) ToPointer() *CreateDcrProviderRequestCurityProviderType {
	return &e
}
func (e *CreateDcrProviderRequestCurityProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "curity":
		*e = CreateDcrProviderRequestCurityProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDcrProviderRequestCurityProviderType: %v", v)
	}
}

// CreateDcrProviderRequestCurity - Request body for creating a Curity DCR provider.
type CreateDcrProviderRequestCurity struct {
	ProviderType CreateDcrProviderRequestCurityProviderType `json:"provider_type"`
	// Payload to create a Curity DCR provider.
	DcrConfig CreateDcrConfigCurityInRequest `json:"dcr_config"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	Issuer      string  `json:"issuer"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
}

func (o *CreateDcrProviderRequestCurity) GetProviderType() CreateDcrProviderRequestCurityProviderType {
	if o == nil {
		return CreateDcrProviderRequestCurityProviderType("")
	}
	return o.ProviderType
}

func (o *CreateDcrProviderRequestCurity) GetDcrConfig() CreateDcrConfigCurityInRequest {
	if o == nil {
		return CreateDcrConfigCurityInRequest{}
	}
	return o.DcrConfig
}

func (o *CreateDcrProviderRequestCurity) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDcrProviderRequestCurity) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDcrProviderRequestCurity) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDcrProviderRequestCurity) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

type CreateDcrProviderRequestAzureAdProviderType string

const (
	CreateDcrProviderRequestAzureAdProviderTypeAzureAd CreateDcrProviderRequestAzureAdProviderType = "azureAd"
)

func (e CreateDcrProviderRequestAzureAdProviderType) ToPointer() *CreateDcrProviderRequestAzureAdProviderType {
	return &e
}
func (e *CreateDcrProviderRequestAzureAdProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "azureAd":
		*e = CreateDcrProviderRequestAzureAdProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDcrProviderRequestAzureAdProviderType: %v", v)
	}
}

// CreateDcrProviderRequestAzureAd - Request body for creating an Azure AD DCR provider.
type CreateDcrProviderRequestAzureAd struct {
	ProviderType CreateDcrProviderRequestAzureAdProviderType `json:"provider_type"`
	// Payload to create an Azure AD DCR provider.
	DcrConfig CreateDcrConfigAzureAdInRequest `json:"dcr_config"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	Issuer      string  `json:"issuer"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
}

func (o *CreateDcrProviderRequestAzureAd) GetProviderType() CreateDcrProviderRequestAzureAdProviderType {
	if o == nil {
		return CreateDcrProviderRequestAzureAdProviderType("")
	}
	return o.ProviderType
}

func (o *CreateDcrProviderRequestAzureAd) GetDcrConfig() CreateDcrConfigAzureAdInRequest {
	if o == nil {
		return CreateDcrConfigAzureAdInRequest{}
	}
	return o.DcrConfig
}

func (o *CreateDcrProviderRequestAzureAd) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDcrProviderRequestAzureAd) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDcrProviderRequestAzureAd) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDcrProviderRequestAzureAd) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

type ProviderType string

const (
	ProviderTypeAuth0 ProviderType = "auth0"
)

func (e ProviderType) ToPointer() *ProviderType {
	return &e
}
func (e *ProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auth0":
		*e = ProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProviderType: %v", v)
	}
}

// CreateDcrProviderRequestAuth0 - Request body for creating an Auth0 DCR provider.
type CreateDcrProviderRequestAuth0 struct {
	ProviderType ProviderType `json:"provider_type"`
	// Payload to create an Auth0 DCR provider.
	DcrConfig CreateDcrConfigAuth0InRequest `json:"dcr_config"`
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name string `json:"name"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	Issuer      string  `json:"issuer"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]string `json:"labels,omitempty"`
}

func (o *CreateDcrProviderRequestAuth0) GetProviderType() ProviderType {
	if o == nil {
		return ProviderType("")
	}
	return o.ProviderType
}

func (o *CreateDcrProviderRequestAuth0) GetDcrConfig() CreateDcrConfigAuth0InRequest {
	if o == nil {
		return CreateDcrConfigAuth0InRequest{}
	}
	return o.DcrConfig
}

func (o *CreateDcrProviderRequestAuth0) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDcrProviderRequestAuth0) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreateDcrProviderRequestAuth0) GetIssuer() string {
	if o == nil {
		return ""
	}
	return o.Issuer
}

func (o *CreateDcrProviderRequestAuth0) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

type CreateDcrProviderRequestType string

const (
	CreateDcrProviderRequestTypeAuth0   CreateDcrProviderRequestType = "auth0"
	CreateDcrProviderRequestTypeAzureAd CreateDcrProviderRequestType = "azureAd"
	CreateDcrProviderRequestTypeCurity  CreateDcrProviderRequestType = "curity"
	CreateDcrProviderRequestTypeOkta    CreateDcrProviderRequestType = "okta"
	CreateDcrProviderRequestTypeHTTP    CreateDcrProviderRequestType = "http"
)

// CreateDcrProviderRequest - Request body for creating a DCR provider. The provider_type cannot be updated after creation.
type CreateDcrProviderRequest struct {
	CreateDcrProviderRequestAuth0   *CreateDcrProviderRequestAuth0   `queryParam:"inline"`
	CreateDcrProviderRequestAzureAd *CreateDcrProviderRequestAzureAd `queryParam:"inline"`
	CreateDcrProviderRequestCurity  *CreateDcrProviderRequestCurity  `queryParam:"inline"`
	CreateDcrProviderRequestOkta    *CreateDcrProviderRequestOkta    `queryParam:"inline"`
	CreateDcrProviderRequestHTTP    *CreateDcrProviderRequestHTTP    `queryParam:"inline"`

	Type CreateDcrProviderRequestType
}

func CreateCreateDcrProviderRequestAuth0(auth0 CreateDcrProviderRequestAuth0) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeAuth0

	typStr := ProviderType(typ)
	auth0.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestAuth0: &auth0,
		Type:                          typ,
	}
}

func CreateCreateDcrProviderRequestAzureAd(azureAd CreateDcrProviderRequestAzureAd) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeAzureAd

	typStr := CreateDcrProviderRequestAzureAdProviderType(typ)
	azureAd.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestAzureAd: &azureAd,
		Type:                            typ,
	}
}

func CreateCreateDcrProviderRequestCurity(curity CreateDcrProviderRequestCurity) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeCurity

	typStr := CreateDcrProviderRequestCurityProviderType(typ)
	curity.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestCurity: &curity,
		Type:                           typ,
	}
}

func CreateCreateDcrProviderRequestOkta(okta CreateDcrProviderRequestOkta) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeOkta

	typStr := CreateDcrProviderRequestOktaProviderType(typ)
	okta.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestOkta: &okta,
		Type:                         typ,
	}
}

func CreateCreateDcrProviderRequestHTTP(http CreateDcrProviderRequestHTTP) CreateDcrProviderRequest {
	typ := CreateDcrProviderRequestTypeHTTP

	typStr := CreateDcrProviderRequestHTTPProviderType(typ)
	http.ProviderType = typStr

	return CreateDcrProviderRequest{
		CreateDcrProviderRequestHTTP: &http,
		Type:                         typ,
	}
}

func (u *CreateDcrProviderRequest) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		ProviderType string `json:"provider_type"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.ProviderType {
	case "auth0":
		createDcrProviderRequestAuth0 := new(CreateDcrProviderRequestAuth0)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestAuth0, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == auth0) type CreateDcrProviderRequestAuth0 within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestAuth0 = createDcrProviderRequestAuth0
		u.Type = CreateDcrProviderRequestTypeAuth0
		return nil
	case "azureAd":
		createDcrProviderRequestAzureAd := new(CreateDcrProviderRequestAzureAd)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestAzureAd, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == azureAd) type CreateDcrProviderRequestAzureAd within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestAzureAd = createDcrProviderRequestAzureAd
		u.Type = CreateDcrProviderRequestTypeAzureAd
		return nil
	case "curity":
		createDcrProviderRequestCurity := new(CreateDcrProviderRequestCurity)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestCurity, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == curity) type CreateDcrProviderRequestCurity within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestCurity = createDcrProviderRequestCurity
		u.Type = CreateDcrProviderRequestTypeCurity
		return nil
	case "okta":
		createDcrProviderRequestOkta := new(CreateDcrProviderRequestOkta)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestOkta, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == okta) type CreateDcrProviderRequestOkta within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestOkta = createDcrProviderRequestOkta
		u.Type = CreateDcrProviderRequestTypeOkta
		return nil
	case "http":
		createDcrProviderRequestHTTP := new(CreateDcrProviderRequestHTTP)
		if err := utils.UnmarshalJSON(data, &createDcrProviderRequestHTTP, "", true, false); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (ProviderType == http) type CreateDcrProviderRequestHTTP within CreateDcrProviderRequest: %w", string(data), err)
		}

		u.CreateDcrProviderRequestHTTP = createDcrProviderRequestHTTP
		u.Type = CreateDcrProviderRequestTypeHTTP
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDcrProviderRequest", string(data))
}

func (u CreateDcrProviderRequest) MarshalJSON() ([]byte, error) {
	if u.CreateDcrProviderRequestAuth0 != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestAuth0, "", true)
	}

	if u.CreateDcrProviderRequestAzureAd != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestAzureAd, "", true)
	}

	if u.CreateDcrProviderRequestCurity != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestCurity, "", true)
	}

	if u.CreateDcrProviderRequestOkta != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestOkta, "", true)
	}

	if u.CreateDcrProviderRequestHTTP != nil {
		return utils.MarshalJSON(u.CreateDcrProviderRequestHTTP, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDcrProviderRequest: all fields are null")
}
