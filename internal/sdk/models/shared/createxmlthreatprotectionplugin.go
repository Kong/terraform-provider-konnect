// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateXMLThreatProtectionPluginConfig struct {
	// Indicates whether an XML Document Type Definition (DTD) section is allowed.
	AllowDtd *bool `json:"allow_dtd,omitempty"`
	// A list of Content-Type values with payloads that are allowed, but aren't validated.
	AllowedContentTypes []string `json:"allowed_content_types,omitempty"`
	// Maximum size of the attribute value.
	Attribute *int64 `json:"attribute,omitempty"`
	// Sets the maximum allowed amplification. This protects against the Billion Laughs Attack.
	BlaMaxAmplification *float64 `json:"bla_max_amplification,omitempty"`
	// Sets the threshold after which the protection starts. This protects against the Billion Laughs Attack.
	BlaThreshold *int64 `json:"bla_threshold,omitempty"`
	// Maximum size of the unparsed buffer (see below).
	Buffer *int64 `json:"buffer,omitempty"`
	// A list of Content-Type values with payloads that must be validated.
	CheckedContentTypes []string `json:"checked_content_types,omitempty"`
	// Maximum size of comments.
	Comment *int64 `json:"comment,omitempty"`
	// Maximum size of the entire document.
	Document *int64 `json:"document,omitempty"`
	// Maximum size of entity values in EntityDecl.
	Entity *int64 `json:"entity,omitempty"`
	// Maximum size of entity names in EntityDecl.
	Entityname *int64 `json:"entityname,omitempty"`
	// Maximum size of systemId, publicId, or notationName in EntityDecl.
	Entityproperty *int64 `json:"entityproperty,omitempty"`
	// Maximum size of the localname. This applies to tags and attributes.
	Localname *int64 `json:"localname,omitempty"`
	// Maximum number of attributes allowed on a tag, including default ones. Note: If namespace-aware parsing is disabled, then the namespaces definitions are counted as attributes.
	MaxAttributes *int64 `json:"max_attributes,omitempty"`
	// Maximum number of children allowed (Element, Text, Comment, ProcessingInstruction, CDATASection). Note: Adjacent text and CDATA sections are counted as one. For example, text-cdata-text-cdata is one child.
	MaxChildren *int64 `json:"max_children,omitempty"`
	// Maximum depth of tags. Child elements such as Text or Comments are not counted as another level.
	MaxDepth *int64 `json:"max_depth,omitempty"`
	// Maximum number of namespaces defined on a tag. This value is required if parsing is namespace-aware.
	MaxNamespaces *int64 `json:"max_namespaces,omitempty"`
	// If not parsing namespace aware, all prefixes and namespace attributes will be counted as regular attributes and element names, and validated as such.
	NamespaceAware *bool `json:"namespace_aware,omitempty"`
	// Maximum size of the namespace URI. This value is required if parsing is namespace-aware.
	Namespaceuri *int64 `json:"namespaceuri,omitempty"`
	// Maximum size of processing instruction data.
	Pidata *int64 `json:"pidata,omitempty"`
	// Maximum size of processing instruction targets.
	Pitarget *int64 `json:"pitarget,omitempty"`
	// Maximum size of the prefix. This applies to tags and attributes. This value is required if parsing is namespace-aware.
	Prefix *int64 `json:"prefix,omitempty"`
	// Maximum text inside tags (counted over all adjacent text/CDATA elements combined).
	Text *int64 `json:"text,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginConfig) GetAllowDtd() *bool {
	if o == nil {
		return nil
	}
	return o.AllowDtd
}

func (o *CreateXMLThreatProtectionPluginConfig) GetAllowedContentTypes() []string {
	if o == nil {
		return nil
	}
	return o.AllowedContentTypes
}

func (o *CreateXMLThreatProtectionPluginConfig) GetAttribute() *int64 {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *CreateXMLThreatProtectionPluginConfig) GetBlaMaxAmplification() *float64 {
	if o == nil {
		return nil
	}
	return o.BlaMaxAmplification
}

func (o *CreateXMLThreatProtectionPluginConfig) GetBlaThreshold() *int64 {
	if o == nil {
		return nil
	}
	return o.BlaThreshold
}

func (o *CreateXMLThreatProtectionPluginConfig) GetBuffer() *int64 {
	if o == nil {
		return nil
	}
	return o.Buffer
}

func (o *CreateXMLThreatProtectionPluginConfig) GetCheckedContentTypes() []string {
	if o == nil {
		return nil
	}
	return o.CheckedContentTypes
}

func (o *CreateXMLThreatProtectionPluginConfig) GetComment() *int64 {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateXMLThreatProtectionPluginConfig) GetDocument() *int64 {
	if o == nil {
		return nil
	}
	return o.Document
}

func (o *CreateXMLThreatProtectionPluginConfig) GetEntity() *int64 {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *CreateXMLThreatProtectionPluginConfig) GetEntityname() *int64 {
	if o == nil {
		return nil
	}
	return o.Entityname
}

func (o *CreateXMLThreatProtectionPluginConfig) GetEntityproperty() *int64 {
	if o == nil {
		return nil
	}
	return o.Entityproperty
}

func (o *CreateXMLThreatProtectionPluginConfig) GetLocalname() *int64 {
	if o == nil {
		return nil
	}
	return o.Localname
}

func (o *CreateXMLThreatProtectionPluginConfig) GetMaxAttributes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxAttributes
}

func (o *CreateXMLThreatProtectionPluginConfig) GetMaxChildren() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxChildren
}

func (o *CreateXMLThreatProtectionPluginConfig) GetMaxDepth() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxDepth
}

func (o *CreateXMLThreatProtectionPluginConfig) GetMaxNamespaces() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxNamespaces
}

func (o *CreateXMLThreatProtectionPluginConfig) GetNamespaceAware() *bool {
	if o == nil {
		return nil
	}
	return o.NamespaceAware
}

func (o *CreateXMLThreatProtectionPluginConfig) GetNamespaceuri() *int64 {
	if o == nil {
		return nil
	}
	return o.Namespaceuri
}

func (o *CreateXMLThreatProtectionPluginConfig) GetPidata() *int64 {
	if o == nil {
		return nil
	}
	return o.Pidata
}

func (o *CreateXMLThreatProtectionPluginConfig) GetPitarget() *int64 {
	if o == nil {
		return nil
	}
	return o.Pitarget
}

func (o *CreateXMLThreatProtectionPluginConfig) GetPrefix() *int64 {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *CreateXMLThreatProtectionPluginConfig) GetText() *int64 {
	if o == nil {
		return nil
	}
	return o.Text
}

type CreateXMLThreatProtectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateXMLThreatProtectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateXMLThreatProtectionPluginOrdering struct {
	After  *CreateXMLThreatProtectionPluginAfter  `json:"after,omitempty"`
	Before *CreateXMLThreatProtectionPluginBefore `json:"before,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginOrdering) GetAfter() *CreateXMLThreatProtectionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateXMLThreatProtectionPluginOrdering) GetBefore() *CreateXMLThreatProtectionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateXMLThreatProtectionPluginProtocols string

const (
	CreateXMLThreatProtectionPluginProtocolsGrpc           CreateXMLThreatProtectionPluginProtocols = "grpc"
	CreateXMLThreatProtectionPluginProtocolsGrpcs          CreateXMLThreatProtectionPluginProtocols = "grpcs"
	CreateXMLThreatProtectionPluginProtocolsHTTP           CreateXMLThreatProtectionPluginProtocols = "http"
	CreateXMLThreatProtectionPluginProtocolsHTTPS          CreateXMLThreatProtectionPluginProtocols = "https"
	CreateXMLThreatProtectionPluginProtocolsTCP            CreateXMLThreatProtectionPluginProtocols = "tcp"
	CreateXMLThreatProtectionPluginProtocolsTLS            CreateXMLThreatProtectionPluginProtocols = "tls"
	CreateXMLThreatProtectionPluginProtocolsTLSPassthrough CreateXMLThreatProtectionPluginProtocols = "tls_passthrough"
	CreateXMLThreatProtectionPluginProtocolsUDP            CreateXMLThreatProtectionPluginProtocols = "udp"
	CreateXMLThreatProtectionPluginProtocolsWs             CreateXMLThreatProtectionPluginProtocols = "ws"
	CreateXMLThreatProtectionPluginProtocolsWss            CreateXMLThreatProtectionPluginProtocols = "wss"
)

func (e CreateXMLThreatProtectionPluginProtocols) ToPointer() *CreateXMLThreatProtectionPluginProtocols {
	return &e
}
func (e *CreateXMLThreatProtectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateXMLThreatProtectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateXMLThreatProtectionPluginProtocols: %v", v)
	}
}

// CreateXMLThreatProtectionPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateXMLThreatProtectionPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateXMLThreatProtectionPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateXMLThreatProtectionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateXMLThreatProtectionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateXMLThreatProtectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateXMLThreatProtectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateXMLThreatProtectionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateXMLThreatProtectionPlugin struct {
	Config *CreateXMLThreatProtectionPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                    `json:"enabled,omitempty"`
	InstanceName *string                                  `json:"instance_name,omitempty"`
	name         *string                                  `const:"xml-threat-protection" json:"name,omitempty"`
	Ordering     *CreateXMLThreatProtectionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateXMLThreatProtectionPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateXMLThreatProtectionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateXMLThreatProtectionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateXMLThreatProtectionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateXMLThreatProtectionPluginService `json:"service,omitempty"`
}

func (c CreateXMLThreatProtectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateXMLThreatProtectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateXMLThreatProtectionPlugin) GetConfig() *CreateXMLThreatProtectionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateXMLThreatProtectionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateXMLThreatProtectionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateXMLThreatProtectionPlugin) GetName() *string {
	return types.String("xml-threat-protection")
}

func (o *CreateXMLThreatProtectionPlugin) GetOrdering() *CreateXMLThreatProtectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateXMLThreatProtectionPlugin) GetProtocols() []CreateXMLThreatProtectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateXMLThreatProtectionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateXMLThreatProtectionPlugin) GetConsumer() *CreateXMLThreatProtectionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateXMLThreatProtectionPlugin) GetConsumerGroup() *CreateXMLThreatProtectionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateXMLThreatProtectionPlugin) GetRoute() *CreateXMLThreatProtectionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateXMLThreatProtectionPlugin) GetService() *CreateXMLThreatProtectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
