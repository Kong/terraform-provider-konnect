// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type InjectionProtectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *InjectionProtectionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type InjectionProtectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *InjectionProtectionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type InjectionProtectionPluginOrdering struct {
	After  *InjectionProtectionPluginAfter  `json:"after,omitempty"`
	Before *InjectionProtectionPluginBefore `json:"before,omitempty"`
}

func (o *InjectionProtectionPluginOrdering) GetAfter() *InjectionProtectionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *InjectionProtectionPluginOrdering) GetBefore() *InjectionProtectionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type InjectionProtectionPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (i InjectionProtectionPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InjectionProtectionPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InjectionProtectionPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InjectionProtectionPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *InjectionProtectionPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type CustomInjections struct {
	// A unique name for this injection.
	Name string `json:"name"`
	// The regex to match against.
	Regex string `json:"regex"`
}

func (o *CustomInjections) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomInjections) GetRegex() string {
	if o == nil {
		return ""
	}
	return o.Regex
}

// EnforcementMode - Enforcement mode of the security policy.
type EnforcementMode string

const (
	EnforcementModeBlock   EnforcementMode = "block"
	EnforcementModeLogOnly EnforcementMode = "log_only"
)

func (e EnforcementMode) ToPointer() *EnforcementMode {
	return &e
}
func (e *EnforcementMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "log_only":
		*e = EnforcementMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnforcementMode: %v", v)
	}
}

type InjectionTypes string

const (
	InjectionTypesJavaException    InjectionTypes = "java_exception"
	InjectionTypesJs               InjectionTypes = "js"
	InjectionTypesSQL              InjectionTypes = "sql"
	InjectionTypesSsi              InjectionTypes = "ssi"
	InjectionTypesXpathAbbreviated InjectionTypes = "xpath_abbreviated"
	InjectionTypesXpathExtended    InjectionTypes = "xpath_extended"
)

func (e InjectionTypes) ToPointer() *InjectionTypes {
	return &e
}
func (e *InjectionTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "java_exception":
		fallthrough
	case "js":
		fallthrough
	case "sql":
		fallthrough
	case "ssi":
		fallthrough
	case "xpath_abbreviated":
		fallthrough
	case "xpath_extended":
		*e = InjectionTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InjectionTypes: %v", v)
	}
}

type Locations string

const (
	LocationsBody         Locations = "body"
	LocationsHeaders      Locations = "headers"
	LocationsPathAndQuery Locations = "path_and_query"
)

func (e Locations) ToPointer() *Locations {
	return &e
}
func (e *Locations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "body":
		fallthrough
	case "headers":
		fallthrough
	case "path_and_query":
		*e = Locations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Locations: %v", v)
	}
}

type InjectionProtectionPluginConfig struct {
	// Custom regexes to check for.
	CustomInjections []CustomInjections `json:"custom_injections"`
	// Enforcement mode of the security policy.
	EnforcementMode *EnforcementMode `default:"block" json:"enforcement_mode"`
	// The response message when validation fails
	ErrorMessage *string `default:"Bad Request" json:"error_message"`
	// The response status code when validation fails.
	ErrorStatusCode *int64 `default:"400" json:"error_status_code"`
	// The type of injections to check for.
	InjectionTypes []InjectionTypes `json:"injection_types,omitempty"`
	// The locations to check for injection.
	Locations []Locations `json:"locations,omitempty"`
}

func (i InjectionProtectionPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InjectionProtectionPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InjectionProtectionPluginConfig) GetCustomInjections() []CustomInjections {
	if o == nil {
		return nil
	}
	return o.CustomInjections
}

func (o *InjectionProtectionPluginConfig) GetEnforcementMode() *EnforcementMode {
	if o == nil {
		return nil
	}
	return o.EnforcementMode
}

func (o *InjectionProtectionPluginConfig) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *InjectionProtectionPluginConfig) GetErrorStatusCode() *int64 {
	if o == nil {
		return nil
	}
	return o.ErrorStatusCode
}

func (o *InjectionProtectionPluginConfig) GetInjectionTypes() []InjectionTypes {
	if o == nil {
		return nil
	}
	return o.InjectionTypes
}

func (o *InjectionProtectionPluginConfig) GetLocations() []Locations {
	if o == nil {
		return nil
	}
	return o.Locations
}

type InjectionProtectionPluginProtocols string

const (
	InjectionProtectionPluginProtocolsGrpc  InjectionProtectionPluginProtocols = "grpc"
	InjectionProtectionPluginProtocolsGrpcs InjectionProtectionPluginProtocols = "grpcs"
	InjectionProtectionPluginProtocolsHTTP  InjectionProtectionPluginProtocols = "http"
	InjectionProtectionPluginProtocolsHTTPS InjectionProtectionPluginProtocols = "https"
)

func (e InjectionProtectionPluginProtocols) ToPointer() *InjectionProtectionPluginProtocols {
	return &e
}
func (e *InjectionProtectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = InjectionProtectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InjectionProtectionPluginProtocols: %v", v)
	}
}

// InjectionProtectionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type InjectionProtectionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *InjectionProtectionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// InjectionProtectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type InjectionProtectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *InjectionProtectionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// InjectionProtectionPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type InjectionProtectionPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                            `default:"null" json:"instance_name"`
	name         string                             `const:"injection-protection" json:"name"`
	Ordering     *InjectionProtectionPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []InjectionProtectionPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                           `json:"updated_at,omitempty"`
	Config    *InjectionProtectionPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []InjectionProtectionPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *InjectionProtectionPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *InjectionProtectionPluginService `json:"service"`
}

func (i InjectionProtectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InjectionProtectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InjectionProtectionPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *InjectionProtectionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *InjectionProtectionPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InjectionProtectionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *InjectionProtectionPlugin) GetName() string {
	return "injection-protection"
}

func (o *InjectionProtectionPlugin) GetOrdering() *InjectionProtectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *InjectionProtectionPlugin) GetPartials() []InjectionProtectionPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *InjectionProtectionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *InjectionProtectionPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *InjectionProtectionPlugin) GetConfig() *InjectionProtectionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *InjectionProtectionPlugin) GetProtocols() []InjectionProtectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *InjectionProtectionPlugin) GetRoute() *InjectionProtectionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *InjectionProtectionPlugin) GetService() *InjectionProtectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
