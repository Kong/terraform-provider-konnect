// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateGrpcGatewayPluginConfig struct {
	// Describes the gRPC types and methods.
	Proto *string `json:"proto,omitempty"`
}

func (o *CreateGrpcGatewayPluginConfig) GetProto() *string {
	if o == nil {
		return nil
	}
	return o.Proto
}

type CreateGrpcGatewayPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateGrpcGatewayPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateGrpcGatewayPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateGrpcGatewayPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateGrpcGatewayPluginOrdering struct {
	After  *CreateGrpcGatewayPluginAfter  `json:"after,omitempty"`
	Before *CreateGrpcGatewayPluginBefore `json:"before,omitempty"`
}

func (o *CreateGrpcGatewayPluginOrdering) GetAfter() *CreateGrpcGatewayPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateGrpcGatewayPluginOrdering) GetBefore() *CreateGrpcGatewayPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateGrpcGatewayPluginProtocols string

const (
	CreateGrpcGatewayPluginProtocolsGrpc           CreateGrpcGatewayPluginProtocols = "grpc"
	CreateGrpcGatewayPluginProtocolsGrpcs          CreateGrpcGatewayPluginProtocols = "grpcs"
	CreateGrpcGatewayPluginProtocolsHTTP           CreateGrpcGatewayPluginProtocols = "http"
	CreateGrpcGatewayPluginProtocolsHTTPS          CreateGrpcGatewayPluginProtocols = "https"
	CreateGrpcGatewayPluginProtocolsTCP            CreateGrpcGatewayPluginProtocols = "tcp"
	CreateGrpcGatewayPluginProtocolsTLS            CreateGrpcGatewayPluginProtocols = "tls"
	CreateGrpcGatewayPluginProtocolsTLSPassthrough CreateGrpcGatewayPluginProtocols = "tls_passthrough"
	CreateGrpcGatewayPluginProtocolsUDP            CreateGrpcGatewayPluginProtocols = "udp"
	CreateGrpcGatewayPluginProtocolsWs             CreateGrpcGatewayPluginProtocols = "ws"
	CreateGrpcGatewayPluginProtocolsWss            CreateGrpcGatewayPluginProtocols = "wss"
)

func (e CreateGrpcGatewayPluginProtocols) ToPointer() *CreateGrpcGatewayPluginProtocols {
	return &e
}
func (e *CreateGrpcGatewayPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateGrpcGatewayPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateGrpcGatewayPluginProtocols: %v", v)
	}
}

// CreateGrpcGatewayPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateGrpcGatewayPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGrpcGatewayPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateGrpcGatewayPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGrpcGatewayPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateGrpcGatewayPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateGrpcGatewayPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGrpcGatewayPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateGrpcGatewayPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateGrpcGatewayPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateGrpcGatewayPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateGrpcGatewayPlugin struct {
	Config *CreateGrpcGatewayPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                            `json:"enabled,omitempty"`
	InstanceName *string                          `json:"instance_name,omitempty"`
	name         *string                          `const:"grpc-gateway" json:"name,omitempty"`
	Ordering     *CreateGrpcGatewayPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateGrpcGatewayPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateGrpcGatewayPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateGrpcGatewayPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateGrpcGatewayPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateGrpcGatewayPluginService `json:"service,omitempty"`
}

func (c CreateGrpcGatewayPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateGrpcGatewayPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateGrpcGatewayPlugin) GetConfig() *CreateGrpcGatewayPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateGrpcGatewayPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateGrpcGatewayPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateGrpcGatewayPlugin) GetName() *string {
	return types.String("grpc-gateway")
}

func (o *CreateGrpcGatewayPlugin) GetOrdering() *CreateGrpcGatewayPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateGrpcGatewayPlugin) GetProtocols() []CreateGrpcGatewayPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateGrpcGatewayPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateGrpcGatewayPlugin) GetConsumer() *CreateGrpcGatewayPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateGrpcGatewayPlugin) GetConsumerGroup() *CreateGrpcGatewayPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateGrpcGatewayPlugin) GetRoute() *CreateGrpcGatewayPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateGrpcGatewayPlugin) GetService() *CreateGrpcGatewayPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
