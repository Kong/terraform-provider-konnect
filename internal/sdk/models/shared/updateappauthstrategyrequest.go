// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type ConfigsType string

const (
	ConfigsTypeUpdateAppAuthStrategyRequestOpenIDConnect ConfigsType = "UpdateAppAuthStrategyRequestOpenIdConnect"
	ConfigsTypeUpdateAppAuthStrategyRequestKeyAuth       ConfigsType = "UpdateAppAuthStrategyRequestKeyAuth"
)

// Configs - JSON-B object containing the configuration for the OIDC strategy under the key 'openid-connect' or the configuration for the Key Auth strategy under the key 'key-auth'
type Configs struct {
	UpdateAppAuthStrategyRequestOpenIDConnect *UpdateAppAuthStrategyRequestOpenIDConnect `queryParam:"inline,name=configs"`
	UpdateAppAuthStrategyRequestKeyAuth       *UpdateAppAuthStrategyRequestKeyAuth       `queryParam:"inline,name=configs"`

	Type ConfigsType
}

func CreateConfigsUpdateAppAuthStrategyRequestOpenIDConnect(updateAppAuthStrategyRequestOpenIDConnect UpdateAppAuthStrategyRequestOpenIDConnect) Configs {
	typ := ConfigsTypeUpdateAppAuthStrategyRequestOpenIDConnect

	return Configs{
		UpdateAppAuthStrategyRequestOpenIDConnect: &updateAppAuthStrategyRequestOpenIDConnect,
		Type: typ,
	}
}

func CreateConfigsUpdateAppAuthStrategyRequestKeyAuth(updateAppAuthStrategyRequestKeyAuth UpdateAppAuthStrategyRequestKeyAuth) Configs {
	typ := ConfigsTypeUpdateAppAuthStrategyRequestKeyAuth

	return Configs{
		UpdateAppAuthStrategyRequestKeyAuth: &updateAppAuthStrategyRequestKeyAuth,
		Type:                                typ,
	}
}

func (u *Configs) UnmarshalJSON(data []byte) error {

	var updateAppAuthStrategyRequestOpenIDConnect UpdateAppAuthStrategyRequestOpenIDConnect = UpdateAppAuthStrategyRequestOpenIDConnect{}
	if err := utils.UnmarshalJSON(data, &updateAppAuthStrategyRequestOpenIDConnect, "", true, nil); err == nil {
		u.UpdateAppAuthStrategyRequestOpenIDConnect = &updateAppAuthStrategyRequestOpenIDConnect
		u.Type = ConfigsTypeUpdateAppAuthStrategyRequestOpenIDConnect
		return nil
	}

	var updateAppAuthStrategyRequestKeyAuth UpdateAppAuthStrategyRequestKeyAuth = UpdateAppAuthStrategyRequestKeyAuth{}
	if err := utils.UnmarshalJSON(data, &updateAppAuthStrategyRequestKeyAuth, "", true, nil); err == nil {
		u.UpdateAppAuthStrategyRequestKeyAuth = &updateAppAuthStrategyRequestKeyAuth
		u.Type = ConfigsTypeUpdateAppAuthStrategyRequestKeyAuth
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Configs", string(data))
}

func (u Configs) MarshalJSON() ([]byte, error) {
	if u.UpdateAppAuthStrategyRequestOpenIDConnect != nil {
		return utils.MarshalJSON(u.UpdateAppAuthStrategyRequestOpenIDConnect, "", true)
	}

	if u.UpdateAppAuthStrategyRequestKeyAuth != nil {
		return utils.MarshalJSON(u.UpdateAppAuthStrategyRequestKeyAuth, "", true)
	}

	return nil, errors.New("could not marshal union type Configs: all fields are null")
}

// UpdateAppAuthStrategyRequest - Request body for updating an Application Auth Strategy
type UpdateAppAuthStrategyRequest struct {
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	//
	Name *string `json:"name,omitempty"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Labels are intended to store **INTERNAL** metadata.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels        map[string]*string `json:"labels,omitempty"`
	DcrProviderID *string            `default:"null" json:"dcr_provider_id"`
	// JSON-B object containing the configuration for the OIDC strategy under the key 'openid-connect' or the configuration for the Key Auth strategy under the key 'key-auth'
	Configs *Configs `json:"configs,omitempty"`
}

func (u UpdateAppAuthStrategyRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateAppAuthStrategyRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *UpdateAppAuthStrategyRequest) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdateAppAuthStrategyRequest) GetDisplayName() *string {
	if u == nil {
		return nil
	}
	return u.DisplayName
}

func (u *UpdateAppAuthStrategyRequest) GetLabels() map[string]*string {
	if u == nil {
		return nil
	}
	return u.Labels
}

func (u *UpdateAppAuthStrategyRequest) GetDcrProviderID() *string {
	if u == nil {
		return nil
	}
	return u.DcrProviderID
}

func (u *UpdateAppAuthStrategyRequest) GetConfigs() *Configs {
	if u == nil {
		return nil
	}
	return u.Configs
}
