// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type ConfluentConsumePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (c *ConfluentConsumePluginAfter) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type ConfluentConsumePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (c *ConfluentConsumePluginBefore) GetAccess() []string {
	if c == nil {
		return nil
	}
	return c.Access
}

type ConfluentConsumePluginOrdering struct {
	After  *ConfluentConsumePluginAfter  `json:"after,omitempty"`
	Before *ConfluentConsumePluginBefore `json:"before,omitempty"`
}

func (c *ConfluentConsumePluginOrdering) GetAfter() *ConfluentConsumePluginAfter {
	if c == nil {
		return nil
	}
	return c.After
}

func (c *ConfluentConsumePluginOrdering) GetBefore() *ConfluentConsumePluginBefore {
	if c == nil {
		return nil
	}
	return c.Before
}

type ConfluentConsumePluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (c *ConfluentConsumePluginPartials) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConfluentConsumePluginPartials) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ConfluentConsumePluginPartials) GetPath() *string {
	if c == nil {
		return nil
	}
	return c.Path
}

// AutoOffsetReset - The offset to start from when there is no initial offset in the consumer group.
type AutoOffsetReset string

const (
	AutoOffsetResetEarliest AutoOffsetReset = "earliest"
	AutoOffsetResetLatest   AutoOffsetReset = "latest"
)

func (e AutoOffsetReset) ToPointer() *AutoOffsetReset {
	return &e
}
func (e *AutoOffsetReset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "earliest":
		fallthrough
	case "latest":
		*e = AutoOffsetReset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoOffsetReset: %v", v)
	}
}

type ConfluentConsumePluginBootstrapServers struct {
	// A string representing a host name, such as example.com.
	Host string `json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port int64 `json:"port"`
}

func (c *ConfluentConsumePluginBootstrapServers) GetHost() string {
	if c == nil {
		return ""
	}
	return c.Host
}

func (c *ConfluentConsumePluginBootstrapServers) GetPort() int64 {
	if c == nil {
		return 0
	}
	return c.Port
}

// CommitStrategy - The strategy to use for committing offsets.
type CommitStrategy string

const (
	CommitStrategyAuto CommitStrategy = "auto"
	CommitStrategyOff  CommitStrategy = "off"
)

func (e CommitStrategy) ToPointer() *CommitStrategy {
	return &e
}
func (e *CommitStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "off":
		*e = CommitStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommitStrategy: %v", v)
	}
}

// MessageDeserializer - The deserializer to use for the consumed messages.
type MessageDeserializer string

const (
	MessageDeserializerJSON MessageDeserializer = "json"
	MessageDeserializerNoop MessageDeserializer = "noop"
)

func (e MessageDeserializer) ToPointer() *MessageDeserializer {
	return &e
}
func (e *MessageDeserializer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "noop":
		*e = MessageDeserializer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageDeserializer: %v", v)
	}
}

// Mode - The mode of operation for the plugin.
type Mode string

const (
	ModeHTTPGet          Mode = "http-get"
	ModeServerSentEvents Mode = "server-sent-events"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http-get":
		fallthrough
	case "server-sent-events":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

type ConfluentConsumePluginBasic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (c *ConfluentConsumePluginBasic) GetPassword() string {
	if c == nil {
		return ""
	}
	return c.Password
}

func (c *ConfluentConsumePluginBasic) GetUsername() string {
	if c == nil {
		return ""
	}
	return c.Username
}

// ConfluentConsumePluginMode - Authentication mode to use with the schema registry.
type ConfluentConsumePluginMode string

const (
	ConfluentConsumePluginModeBasic ConfluentConsumePluginMode = "basic"
	ConfluentConsumePluginModeNone  ConfluentConsumePluginMode = "none"
)

func (e ConfluentConsumePluginMode) ToPointer() *ConfluentConsumePluginMode {
	return &e
}
func (e *ConfluentConsumePluginMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		*e = ConfluentConsumePluginMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentConsumePluginMode: %v", v)
	}
}

type ConfluentConsumePluginAuthentication struct {
	Basic *ConfluentConsumePluginBasic `json:"basic"`
	// Authentication mode to use with the schema registry.
	Mode *ConfluentConsumePluginMode `default:"none" json:"mode"`
}

func (c ConfluentConsumePluginAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentConsumePluginAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentConsumePluginAuthentication) GetBasic() *ConfluentConsumePluginBasic {
	if c == nil {
		return nil
	}
	return c.Basic
}

func (c *ConfluentConsumePluginAuthentication) GetMode() *ConfluentConsumePluginMode {
	if c == nil {
		return nil
	}
	return c.Mode
}

type ConfluentConsumePluginConfluent struct {
	Authentication ConfluentConsumePluginAuthentication `json:"authentication"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `default:"true" json:"ssl_verify"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `default:"null" json:"ttl"`
	// The URL of the schema registry.
	URL *string `default:"null" json:"url"`
}

func (c ConfluentConsumePluginConfluent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentConsumePluginConfluent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"authentication"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentConsumePluginConfluent) GetAuthentication() ConfluentConsumePluginAuthentication {
	if c == nil {
		return ConfluentConsumePluginAuthentication{}
	}
	return c.Authentication
}

func (c *ConfluentConsumePluginConfluent) GetSslVerify() *bool {
	if c == nil {
		return nil
	}
	return c.SslVerify
}

func (c *ConfluentConsumePluginConfluent) GetTTL() *float64 {
	if c == nil {
		return nil
	}
	return c.TTL
}

func (c *ConfluentConsumePluginConfluent) GetURL() *string {
	if c == nil {
		return nil
	}
	return c.URL
}

// ConfluentConsumePluginSchemaRegistry - The plugin-global schema registry configuration.
type ConfluentConsumePluginSchemaRegistry struct {
	Confluent *ConfluentConsumePluginConfluent `json:"confluent"`
}

func (c *ConfluentConsumePluginSchemaRegistry) GetConfluent() *ConfluentConsumePluginConfluent {
	if c == nil {
		return nil
	}
	return c.Confluent
}

type ConfluentConsumePluginConfigBasic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (c *ConfluentConsumePluginConfigBasic) GetPassword() string {
	if c == nil {
		return ""
	}
	return c.Password
}

func (c *ConfluentConsumePluginConfigBasic) GetUsername() string {
	if c == nil {
		return ""
	}
	return c.Username
}

// ConfluentConsumePluginConfigMode - Authentication mode to use with the schema registry.
type ConfluentConsumePluginConfigMode string

const (
	ConfluentConsumePluginConfigModeBasic ConfluentConsumePluginConfigMode = "basic"
	ConfluentConsumePluginConfigModeNone  ConfluentConsumePluginConfigMode = "none"
)

func (e ConfluentConsumePluginConfigMode) ToPointer() *ConfluentConsumePluginConfigMode {
	return &e
}
func (e *ConfluentConsumePluginConfigMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		*e = ConfluentConsumePluginConfigMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentConsumePluginConfigMode: %v", v)
	}
}

type ConfluentConsumePluginConfigAuthentication struct {
	Basic *ConfluentConsumePluginConfigBasic `json:"basic"`
	// Authentication mode to use with the schema registry.
	Mode *ConfluentConsumePluginConfigMode `default:"none" json:"mode"`
}

func (c ConfluentConsumePluginConfigAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentConsumePluginConfigAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentConsumePluginConfigAuthentication) GetBasic() *ConfluentConsumePluginConfigBasic {
	if c == nil {
		return nil
	}
	return c.Basic
}

func (c *ConfluentConsumePluginConfigAuthentication) GetMode() *ConfluentConsumePluginConfigMode {
	if c == nil {
		return nil
	}
	return c.Mode
}

type ConfluentConsumePluginConfigConfluent struct {
	Authentication ConfluentConsumePluginConfigAuthentication `json:"authentication"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `default:"true" json:"ssl_verify"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `default:"null" json:"ttl"`
	// The URL of the schema registry.
	URL *string `default:"null" json:"url"`
}

func (c ConfluentConsumePluginConfigConfluent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentConsumePluginConfigConfluent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"authentication"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentConsumePluginConfigConfluent) GetAuthentication() ConfluentConsumePluginConfigAuthentication {
	if c == nil {
		return ConfluentConsumePluginConfigAuthentication{}
	}
	return c.Authentication
}

func (c *ConfluentConsumePluginConfigConfluent) GetSslVerify() *bool {
	if c == nil {
		return nil
	}
	return c.SslVerify
}

func (c *ConfluentConsumePluginConfigConfluent) GetTTL() *float64 {
	if c == nil {
		return nil
	}
	return c.TTL
}

func (c *ConfluentConsumePluginConfigConfluent) GetURL() *string {
	if c == nil {
		return nil
	}
	return c.URL
}

// ConfluentConsumePluginConfigSchemaRegistry - The plugin-global schema registry configuration.
type ConfluentConsumePluginConfigSchemaRegistry struct {
	Confluent *ConfluentConsumePluginConfigConfluent `json:"confluent"`
}

func (c *ConfluentConsumePluginConfigSchemaRegistry) GetConfluent() *ConfluentConsumePluginConfigConfluent {
	if c == nil {
		return nil
	}
	return c.Confluent
}

type Topics struct {
	Name string `json:"name"`
	// The plugin-global schema registry configuration.
	SchemaRegistry ConfluentConsumePluginConfigSchemaRegistry `json:"schema_registry"`
}

func (t *Topics) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *Topics) GetSchemaRegistry() ConfluentConsumePluginConfigSchemaRegistry {
	if t == nil {
		return ConfluentConsumePluginConfigSchemaRegistry{}
	}
	return t.SchemaRegistry
}

type ConfluentConsumePluginConfig struct {
	// The offset to start from when there is no initial offset in the consumer group.
	AutoOffsetReset *AutoOffsetReset `default:"latest" json:"auto_offset_reset"`
	// Set of bootstrap brokers in a `{host: host, port: port}` list format.
	BootstrapServers []ConfluentConsumePluginBootstrapServers `json:"bootstrap_servers"`
	// Username/Apikey for SASL authentication.
	ClusterAPIKey string `json:"cluster_api_key"`
	// Password/ApiSecret for SASL authentication.
	ClusterAPISecret string `json:"cluster_api_secret"`
	// An identifier for the Kafka cluster. By default, this field generates a random string. You can also set your own custom cluster identifier.  If more than one Kafka plugin is configured without a `cluster_name` (that is, if the default autogenerated value is removed), these plugins will use the same producer, and by extension, the same cluster. Logs will be sent to the leader of the cluster.
	ClusterName *string `default:"null" json:"cluster_name"`
	// The strategy to use for committing offsets.
	CommitStrategy *CommitStrategy `default:"auto" json:"commit_strategy"`
	// Apikey for authentication with Confluent Cloud. This allows for management tasks such as creating topics, ACLs, etc.
	ConfluentCloudAPIKey *string `default:"null" json:"confluent_cloud_api_key"`
	// The corresponding secret for the Confluent Cloud API key.
	ConfluentCloudAPISecret *string `default:"null" json:"confluent_cloud_api_secret"`
	// Keepalive timeout in milliseconds.
	Keepalive        *int64 `default:"60000" json:"keepalive"`
	KeepaliveEnabled *bool  `default:"false" json:"keepalive_enabled"`
	// The deserializer to use for the consumed messages.
	MessageDeserializer *MessageDeserializer `default:"noop" json:"message_deserializer"`
	// The mode of operation for the plugin.
	Mode *Mode `default:"http-get" json:"mode"`
	// The plugin-global schema registry configuration.
	SchemaRegistry *ConfluentConsumePluginSchemaRegistry `json:"schema_registry"`
	// Socket timeout in milliseconds.
	Timeout *int64 `default:"10000" json:"timeout"`
	// The Kafka topics and their configuration you want to consume from.
	Topics []Topics `json:"topics"`
}

func (c ConfluentConsumePluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentConsumePluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"cluster_api_key", "cluster_api_secret", "topics"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentConsumePluginConfig) GetAutoOffsetReset() *AutoOffsetReset {
	if c == nil {
		return nil
	}
	return c.AutoOffsetReset
}

func (c *ConfluentConsumePluginConfig) GetBootstrapServers() []ConfluentConsumePluginBootstrapServers {
	if c == nil {
		return nil
	}
	return c.BootstrapServers
}

func (c *ConfluentConsumePluginConfig) GetClusterAPIKey() string {
	if c == nil {
		return ""
	}
	return c.ClusterAPIKey
}

func (c *ConfluentConsumePluginConfig) GetClusterAPISecret() string {
	if c == nil {
		return ""
	}
	return c.ClusterAPISecret
}

func (c *ConfluentConsumePluginConfig) GetClusterName() *string {
	if c == nil {
		return nil
	}
	return c.ClusterName
}

func (c *ConfluentConsumePluginConfig) GetCommitStrategy() *CommitStrategy {
	if c == nil {
		return nil
	}
	return c.CommitStrategy
}

func (c *ConfluentConsumePluginConfig) GetConfluentCloudAPIKey() *string {
	if c == nil {
		return nil
	}
	return c.ConfluentCloudAPIKey
}

func (c *ConfluentConsumePluginConfig) GetConfluentCloudAPISecret() *string {
	if c == nil {
		return nil
	}
	return c.ConfluentCloudAPISecret
}

func (c *ConfluentConsumePluginConfig) GetKeepalive() *int64 {
	if c == nil {
		return nil
	}
	return c.Keepalive
}

func (c *ConfluentConsumePluginConfig) GetKeepaliveEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.KeepaliveEnabled
}

func (c *ConfluentConsumePluginConfig) GetMessageDeserializer() *MessageDeserializer {
	if c == nil {
		return nil
	}
	return c.MessageDeserializer
}

func (c *ConfluentConsumePluginConfig) GetMode() *Mode {
	if c == nil {
		return nil
	}
	return c.Mode
}

func (c *ConfluentConsumePluginConfig) GetSchemaRegistry() *ConfluentConsumePluginSchemaRegistry {
	if c == nil {
		return nil
	}
	return c.SchemaRegistry
}

func (c *ConfluentConsumePluginConfig) GetTimeout() *int64 {
	if c == nil {
		return nil
	}
	return c.Timeout
}

func (c *ConfluentConsumePluginConfig) GetTopics() []Topics {
	if c == nil {
		return []Topics{}
	}
	return c.Topics
}

// ConfluentConsumePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ConfluentConsumePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (c *ConfluentConsumePluginConsumer) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

type ConfluentConsumePluginProtocols string

const (
	ConfluentConsumePluginProtocolsGrpc  ConfluentConsumePluginProtocols = "grpc"
	ConfluentConsumePluginProtocolsGrpcs ConfluentConsumePluginProtocols = "grpcs"
	ConfluentConsumePluginProtocolsHTTP  ConfluentConsumePluginProtocols = "http"
	ConfluentConsumePluginProtocolsHTTPS ConfluentConsumePluginProtocols = "https"
)

func (e ConfluentConsumePluginProtocols) ToPointer() *ConfluentConsumePluginProtocols {
	return &e
}
func (e *ConfluentConsumePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ConfluentConsumePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConfluentConsumePluginProtocols: %v", v)
	}
}

// ConfluentConsumePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type ConfluentConsumePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (c *ConfluentConsumePluginRoute) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// ConfluentConsumePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ConfluentConsumePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (c *ConfluentConsumePluginService) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

// ConfluentConsumePlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ConfluentConsumePlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                         `default:"null" json:"instance_name"`
	name         string                          `const:"confluent-consume" json:"name"`
	Ordering     *ConfluentConsumePluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []ConfluentConsumePluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                       `json:"updated_at,omitempty"`
	Config    ConfluentConsumePluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ConfluentConsumePluginConsumer `json:"consumer"`
	// A set of strings representing HTTP protocols.
	Protocols []ConfluentConsumePluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *ConfluentConsumePluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ConfluentConsumePluginService `json:"service"`
}

func (c ConfluentConsumePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfluentConsumePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfluentConsumePlugin) GetCreatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.CreatedAt
}

func (c *ConfluentConsumePlugin) GetEnabled() *bool {
	if c == nil {
		return nil
	}
	return c.Enabled
}

func (c *ConfluentConsumePlugin) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ConfluentConsumePlugin) GetInstanceName() *string {
	if c == nil {
		return nil
	}
	return c.InstanceName
}

func (c *ConfluentConsumePlugin) GetName() string {
	return "confluent-consume"
}

func (c *ConfluentConsumePlugin) GetOrdering() *ConfluentConsumePluginOrdering {
	if c == nil {
		return nil
	}
	return c.Ordering
}

func (c *ConfluentConsumePlugin) GetPartials() []ConfluentConsumePluginPartials {
	if c == nil {
		return nil
	}
	return c.Partials
}

func (c *ConfluentConsumePlugin) GetTags() []string {
	if c == nil {
		return nil
	}
	return c.Tags
}

func (c *ConfluentConsumePlugin) GetUpdatedAt() *int64 {
	if c == nil {
		return nil
	}
	return c.UpdatedAt
}

func (c *ConfluentConsumePlugin) GetConfig() ConfluentConsumePluginConfig {
	if c == nil {
		return ConfluentConsumePluginConfig{}
	}
	return c.Config
}

func (c *ConfluentConsumePlugin) GetConsumer() *ConfluentConsumePluginConsumer {
	if c == nil {
		return nil
	}
	return c.Consumer
}

func (c *ConfluentConsumePlugin) GetProtocols() []ConfluentConsumePluginProtocols {
	if c == nil {
		return nil
	}
	return c.Protocols
}

func (c *ConfluentConsumePlugin) GetRoute() *ConfluentConsumePluginRoute {
	if c == nil {
		return nil
	}
	return c.Route
}

func (c *ConfluentConsumePlugin) GetService() *ConfluentConsumePluginService {
	if c == nil {
		return nil
	}
	return c.Service
}
