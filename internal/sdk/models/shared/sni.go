// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// SNICertificate - The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
type SNICertificate struct {
	ID *string `json:"id,omitempty"`
}

func (o *SNICertificate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Sni struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64  `json:"created_at,omitempty"`
	ID        *string `json:"id,omitempty"`
	// The SNI name to associate with the given certificate.
	Name *string `json:"name,omitempty"`
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate *SNICertificate `json:"certificate,omitempty"`
}

func (o *Sni) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Sni) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Sni) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Sni) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Sni) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Sni) GetCertificate() *SNICertificate {
	if o == nil {
		return nil
	}
	return o.Certificate
}

type SNIInput struct {
	// The SNI name to associate with the given certificate.
	Name *string `json:"name,omitempty"`
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate *SNICertificate `json:"certificate,omitempty"`
}

func (o *SNIInput) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *SNIInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SNIInput) GetCertificate() *SNICertificate {
	if o == nil {
		return nil
	}
	return o.Certificate
}
