// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateAuditLogDestinationLogFormat - The output format of each log message.
type UpdateAuditLogDestinationLogFormat string

const (
	UpdateAuditLogDestinationLogFormatCef  UpdateAuditLogDestinationLogFormat = "cef"
	UpdateAuditLogDestinationLogFormatJSON UpdateAuditLogDestinationLogFormat = "json"
)

func (e UpdateAuditLogDestinationLogFormat) ToPointer() *UpdateAuditLogDestinationLogFormat {
	return &e
}
func (e *UpdateAuditLogDestinationLogFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cef":
		fallthrough
	case "json":
		*e = UpdateAuditLogDestinationLogFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAuditLogDestinationLogFormat: %v", v)
	}
}

// UpdateAuditLogDestination - The request schema to modify an audit log destination.
type UpdateAuditLogDestination struct {
	// The name of the audit log destination.
	Name *string `json:"name,omitempty"`
	// The endpoint that will receive audit log messages.
	Endpoint *string `json:"endpoint,omitempty"`
	// The value to include in the `Authorization` header when sending audit logs to the webhook.
	Authorization *string `json:"authorization,omitempty"`
	// The output format of each log message.
	LogFormat *UpdateAuditLogDestinationLogFormat `json:"log_format,omitempty"`
	// Indicates if the SSL certificate verification of the host endpoint should be skipped when delivering payloads.
	// We strongly recommend not setting this to 'true' as you are subject to man-in-the-middle and other attacks.
	// This option should be considered only for self-signed SSL certificates used in a non-production environment.
	SkipSslVerification *bool `json:"skip_ssl_verification,omitempty"`
}

func (o *UpdateAuditLogDestination) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateAuditLogDestination) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *UpdateAuditLogDestination) GetAuthorization() *string {
	if o == nil {
		return nil
	}
	return o.Authorization
}

func (o *UpdateAuditLogDestination) GetLogFormat() *UpdateAuditLogDestinationLogFormat {
	if o == nil {
		return nil
	}
	return o.LogFormat
}

func (o *UpdateAuditLogDestination) GetSkipSslVerification() *bool {
	if o == nil {
		return nil
	}
	return o.SkipSslVerification
}
