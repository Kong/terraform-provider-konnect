// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

// Oauth2IntrospectionPluginConsumerBy - A string indicating whether to associate OAuth2 `username` or `client_id` with the consumer's username. OAuth2 `username` is mapped to a consumer's `username` field, while an OAuth2 `client_id` maps to a consumer's `custom_id`.
type Oauth2IntrospectionPluginConsumerBy string

const (
	Oauth2IntrospectionPluginConsumerByUsername Oauth2IntrospectionPluginConsumerBy = "username"
	Oauth2IntrospectionPluginConsumerByClientID Oauth2IntrospectionPluginConsumerBy = "client_id"
)

func (e Oauth2IntrospectionPluginConsumerBy) ToPointer() *Oauth2IntrospectionPluginConsumerBy {
	return &e
}
func (e *Oauth2IntrospectionPluginConsumerBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "username":
		fallthrough
	case "client_id":
		*e = Oauth2IntrospectionPluginConsumerBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oauth2IntrospectionPluginConsumerBy: %v", v)
	}
}

type Oauth2IntrospectionPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request fails with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
	Anonymous *string `json:"anonymous,omitempty"`
	// The value to set as the `Authorization` header when querying the introspection endpoint. This depends on the OAuth 2.0 server, but usually is the `client_id` and `client_secret` as a Base64-encoded Basic Auth string (`Basic MG9hNWl...`).
	AuthorizationValue *string `json:"authorization_value,omitempty"`
	// A string indicating whether to associate OAuth2 `username` or `client_id` with the consumer's username. OAuth2 `username` is mapped to a consumer's `username` field, while an OAuth2 `client_id` maps to a consumer's `custom_id`.
	ConsumerBy *Oauth2IntrospectionPluginConsumerBy `json:"consumer_by,omitempty"`
	// A list of custom claims to be forwarded from the introspection response to the upstream request. Claims are forwarded in headers with prefix `X-Credential-{claim-name}`.
	CustomClaimsForward []string `json:"custom_claims_forward,omitempty"`
	// A list of custom headers to be added in the introspection request.
	CustomIntrospectionHeaders map[string]any `json:"custom_introspection_headers,omitempty"`
	// An optional boolean value telling the plugin to hide the credential to the upstream API server. It will be removed by Kong before proxying the request.
	HideCredentials *bool `json:"hide_credentials,omitempty"`
	// A boolean indicating whether to forward information about the current downstream request to the introspect endpoint. If true, headers `X-Request-Path` and `X-Request-Http-Method` will be inserted into the introspect request.
	IntrospectRequest *bool `json:"introspect_request,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	IntrospectionURL *string `json:"introspection_url,omitempty"`
	// An optional value in milliseconds that defines how long an idle connection lives before being closed.
	Keepalive *int64 `json:"keepalive,omitempty"`
	// A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests will always be allowed.
	RunOnPreflight *bool `json:"run_on_preflight,omitempty"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *int64 `json:"timeout,omitempty"`
	// The `token_type_hint` value to associate to introspection requests.
	TokenTypeHint *string `json:"token_type_hint,omitempty"`
	// The TTL in seconds for the introspection response. Set to 0 to disable the expiration.
	TTL *float64 `json:"ttl,omitempty"`
}

func (o *Oauth2IntrospectionPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *Oauth2IntrospectionPluginConfig) GetAuthorizationValue() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationValue
}

func (o *Oauth2IntrospectionPluginConfig) GetConsumerBy() *Oauth2IntrospectionPluginConsumerBy {
	if o == nil {
		return nil
	}
	return o.ConsumerBy
}

func (o *Oauth2IntrospectionPluginConfig) GetCustomClaimsForward() []string {
	if o == nil {
		return nil
	}
	return o.CustomClaimsForward
}

func (o *Oauth2IntrospectionPluginConfig) GetCustomIntrospectionHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomIntrospectionHeaders
}

func (o *Oauth2IntrospectionPluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *Oauth2IntrospectionPluginConfig) GetIntrospectRequest() *bool {
	if o == nil {
		return nil
	}
	return o.IntrospectRequest
}

func (o *Oauth2IntrospectionPluginConfig) GetIntrospectionURL() *string {
	if o == nil {
		return nil
	}
	return o.IntrospectionURL
}

func (o *Oauth2IntrospectionPluginConfig) GetKeepalive() *int64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *Oauth2IntrospectionPluginConfig) GetRunOnPreflight() *bool {
	if o == nil {
		return nil
	}
	return o.RunOnPreflight
}

func (o *Oauth2IntrospectionPluginConfig) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *Oauth2IntrospectionPluginConfig) GetTokenTypeHint() *string {
	if o == nil {
		return nil
	}
	return o.TokenTypeHint
}

func (o *Oauth2IntrospectionPluginConfig) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

// Oauth2IntrospectionPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type Oauth2IntrospectionPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2IntrospectionPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Oauth2IntrospectionPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2IntrospectionPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type Oauth2IntrospectionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *Oauth2IntrospectionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type Oauth2IntrospectionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *Oauth2IntrospectionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type Oauth2IntrospectionPluginOrdering struct {
	After  *Oauth2IntrospectionPluginAfter  `json:"after,omitempty"`
	Before *Oauth2IntrospectionPluginBefore `json:"before,omitempty"`
}

func (o *Oauth2IntrospectionPluginOrdering) GetAfter() *Oauth2IntrospectionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *Oauth2IntrospectionPluginOrdering) GetBefore() *Oauth2IntrospectionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type Oauth2IntrospectionPluginProtocols string

const (
	Oauth2IntrospectionPluginProtocolsGrpc           Oauth2IntrospectionPluginProtocols = "grpc"
	Oauth2IntrospectionPluginProtocolsGrpcs          Oauth2IntrospectionPluginProtocols = "grpcs"
	Oauth2IntrospectionPluginProtocolsHTTP           Oauth2IntrospectionPluginProtocols = "http"
	Oauth2IntrospectionPluginProtocolsHTTPS          Oauth2IntrospectionPluginProtocols = "https"
	Oauth2IntrospectionPluginProtocolsTCP            Oauth2IntrospectionPluginProtocols = "tcp"
	Oauth2IntrospectionPluginProtocolsTLS            Oauth2IntrospectionPluginProtocols = "tls"
	Oauth2IntrospectionPluginProtocolsTLSPassthrough Oauth2IntrospectionPluginProtocols = "tls_passthrough"
	Oauth2IntrospectionPluginProtocolsUDP            Oauth2IntrospectionPluginProtocols = "udp"
	Oauth2IntrospectionPluginProtocolsWs             Oauth2IntrospectionPluginProtocols = "ws"
	Oauth2IntrospectionPluginProtocolsWss            Oauth2IntrospectionPluginProtocols = "wss"
)

func (e Oauth2IntrospectionPluginProtocols) ToPointer() *Oauth2IntrospectionPluginProtocols {
	return &e
}
func (e *Oauth2IntrospectionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = Oauth2IntrospectionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oauth2IntrospectionPluginProtocols: %v", v)
	}
}

// Oauth2IntrospectionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type Oauth2IntrospectionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2IntrospectionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Oauth2IntrospectionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type Oauth2IntrospectionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2IntrospectionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Oauth2IntrospectionPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type Oauth2IntrospectionPlugin struct {
	Config Oauth2IntrospectionPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *Oauth2IntrospectionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *Oauth2IntrospectionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                              `json:"enabled,omitempty"`
	ID           *string                            `json:"id,omitempty"`
	InstanceName *string                            `json:"instance_name,omitempty"`
	name         string                             `const:"oauth-2-introspection" json:"name"`
	Ordering     *Oauth2IntrospectionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []Oauth2IntrospectionPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *Oauth2IntrospectionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *Oauth2IntrospectionPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (o Oauth2IntrospectionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Oauth2IntrospectionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Oauth2IntrospectionPlugin) GetConfig() Oauth2IntrospectionPluginConfig {
	if o == nil {
		return Oauth2IntrospectionPluginConfig{}
	}
	return o.Config
}

func (o *Oauth2IntrospectionPlugin) GetConsumer() *Oauth2IntrospectionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *Oauth2IntrospectionPlugin) GetConsumerGroup() *Oauth2IntrospectionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *Oauth2IntrospectionPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Oauth2IntrospectionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Oauth2IntrospectionPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Oauth2IntrospectionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *Oauth2IntrospectionPlugin) GetName() string {
	return "oauth-2-introspection"
}

func (o *Oauth2IntrospectionPlugin) GetOrdering() *Oauth2IntrospectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *Oauth2IntrospectionPlugin) GetProtocols() []Oauth2IntrospectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *Oauth2IntrospectionPlugin) GetRoute() *Oauth2IntrospectionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *Oauth2IntrospectionPlugin) GetService() *Oauth2IntrospectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *Oauth2IntrospectionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Oauth2IntrospectionPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

// Oauth2IntrospectionPluginInput - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type Oauth2IntrospectionPluginInput struct {
	Config Oauth2IntrospectionPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *Oauth2IntrospectionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *Oauth2IntrospectionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                              `json:"enabled,omitempty"`
	ID           *string                            `json:"id,omitempty"`
	InstanceName *string                            `json:"instance_name,omitempty"`
	name         string                             `const:"oauth-2-introspection" json:"name"`
	Ordering     *Oauth2IntrospectionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []Oauth2IntrospectionPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *Oauth2IntrospectionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *Oauth2IntrospectionPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (o Oauth2IntrospectionPluginInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Oauth2IntrospectionPluginInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Oauth2IntrospectionPluginInput) GetConfig() Oauth2IntrospectionPluginConfig {
	if o == nil {
		return Oauth2IntrospectionPluginConfig{}
	}
	return o.Config
}

func (o *Oauth2IntrospectionPluginInput) GetConsumer() *Oauth2IntrospectionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *Oauth2IntrospectionPluginInput) GetConsumerGroup() *Oauth2IntrospectionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *Oauth2IntrospectionPluginInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Oauth2IntrospectionPluginInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Oauth2IntrospectionPluginInput) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *Oauth2IntrospectionPluginInput) GetName() string {
	return "oauth-2-introspection"
}

func (o *Oauth2IntrospectionPluginInput) GetOrdering() *Oauth2IntrospectionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *Oauth2IntrospectionPluginInput) GetProtocols() []Oauth2IntrospectionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *Oauth2IntrospectionPluginInput) GetRoute() *Oauth2IntrospectionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *Oauth2IntrospectionPluginInput) GetService() *Oauth2IntrospectionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *Oauth2IntrospectionPluginInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
