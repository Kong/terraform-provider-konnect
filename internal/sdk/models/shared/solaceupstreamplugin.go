// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type SolaceUpstreamPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (s *SolaceUpstreamPluginAfter) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SolaceUpstreamPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (s *SolaceUpstreamPluginBefore) GetAccess() []string {
	if s == nil {
		return nil
	}
	return s.Access
}

type SolaceUpstreamPluginOrdering struct {
	After  *SolaceUpstreamPluginAfter  `json:"after,omitempty"`
	Before *SolaceUpstreamPluginBefore `json:"before,omitempty"`
}

func (s *SolaceUpstreamPluginOrdering) GetAfter() *SolaceUpstreamPluginAfter {
	if s == nil {
		return nil
	}
	return s.After
}

func (s *SolaceUpstreamPluginOrdering) GetBefore() *SolaceUpstreamPluginBefore {
	if s == nil {
		return nil
	}
	return s.Before
}

type SolaceUpstreamPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (s *SolaceUpstreamPluginPartials) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SolaceUpstreamPluginPartials) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SolaceUpstreamPluginPartials) GetPath() *string {
	if s == nil {
		return nil
	}
	return s.Path
}

// DeliveryMode - Sets the message delivery mode.
type DeliveryMode string

const (
	DeliveryModeDirect     DeliveryMode = "DIRECT"
	DeliveryModePersistent DeliveryMode = "PERSISTENT"
)

func (e DeliveryMode) ToPointer() *DeliveryMode {
	return &e
}
func (e *DeliveryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DIRECT":
		fallthrough
	case "PERSISTENT":
		*e = DeliveryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeliveryMode: %v", v)
	}
}

// SolaceUpstreamPluginType - The type of the destination.
type SolaceUpstreamPluginType string

const (
	SolaceUpstreamPluginTypeQueue SolaceUpstreamPluginType = "QUEUE"
	SolaceUpstreamPluginTypeTopic SolaceUpstreamPluginType = "TOPIC"
)

func (e SolaceUpstreamPluginType) ToPointer() *SolaceUpstreamPluginType {
	return &e
}
func (e *SolaceUpstreamPluginType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUE":
		fallthrough
	case "TOPIC":
		*e = SolaceUpstreamPluginType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceUpstreamPluginType: %v", v)
	}
}

type SolaceUpstreamPluginDestinations struct {
	// The name of the destination. You can use `$(uri_captures['topic_name']` in this field.
	Name string `json:"name"`
	// The type of the destination.
	Type *SolaceUpstreamPluginType `default:"QUEUE" json:"type"`
}

func (s SolaceUpstreamPluginDestinations) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceUpstreamPluginDestinations) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name"}); err != nil {
		return err
	}
	return nil
}

func (s *SolaceUpstreamPluginDestinations) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *SolaceUpstreamPluginDestinations) GetType() *SolaceUpstreamPluginType {
	if s == nil {
		return nil
	}
	return s.Type
}

// Message - The message related configuration.
type Message struct {
	// When using a non-DIRECT guaranteed delivery mode, this property sets the message acknowledgement timeout (waiting time).
	AckTimeout *int64 `default:"2000" json:"ack_timeout"`
	// When not using `forward_method`, `forward_uri`, `forward_headers` or `forward_body`, this sets the message content.
	DefaultContent *string `default:"null" json:"default_content"`
	// Sets the message delivery mode.
	DeliveryMode *DeliveryMode `default:"DIRECT" json:"delivery_mode"`
	// The message destinations.
	Destinations []SolaceUpstreamPluginDestinations `json:"destinations"`
	// Sets the dead message queue (DMQ) eligible property on the message.
	DmqEligible *bool `default:"false" json:"dmq_eligible"`
	// Include the request body and the body arguments in the message.
	ForwardBody *bool `default:"false" json:"forward_body"`
	// Include the request headers in the message.
	ForwardHeaders *bool `default:"false" json:"forward_headers"`
	// Include the request method in the message.
	ForwardMethod *bool `default:"false" json:"forward_method"`
	// Include the request URI and the URI arguments (as in, query arguments) in the message.
	ForwardURI *bool `default:"false" json:"forward_uri"`
	// The Lua functions that manipulates (or generates) the message being sent to Solace. The `message` variable can be used to access the current message content, and the function can return a new content.
	Functions []string `json:"functions"`
	// Sets the message priority.
	Priority *int64 `default:"4" json:"priority"`
	// Allows the application to set the content of the sender identifier.
	SenderID *string `default:"kong" json:"sender_id"`
	// Enable or disable the tracing. This is primarily used for distributed tracing and message correlation, especially in debugging or tracking message flows across multiple systems.
	Tracing *bool `default:"false" json:"tracing"`
	// Indicates whether the message should be included in distributed tracing (i.e., if it should be "sampled" for the tracing)
	TracingSampled *bool `default:"false" json:"tracing_sampled"`
	// Sets the time to live (TTL) in milliseconds for the message. Setting the time to live to zero disables the TTL for the message.
	TTL *int64 `default:"0" json:"ttl"`
}

func (m Message) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *Message) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, []string{"destinations"}); err != nil {
		return err
	}
	return nil
}

func (m *Message) GetAckTimeout() *int64 {
	if m == nil {
		return nil
	}
	return m.AckTimeout
}

func (m *Message) GetDefaultContent() *string {
	if m == nil {
		return nil
	}
	return m.DefaultContent
}

func (m *Message) GetDeliveryMode() *DeliveryMode {
	if m == nil {
		return nil
	}
	return m.DeliveryMode
}

func (m *Message) GetDestinations() []SolaceUpstreamPluginDestinations {
	if m == nil {
		return []SolaceUpstreamPluginDestinations{}
	}
	return m.Destinations
}

func (m *Message) GetDmqEligible() *bool {
	if m == nil {
		return nil
	}
	return m.DmqEligible
}

func (m *Message) GetForwardBody() *bool {
	if m == nil {
		return nil
	}
	return m.ForwardBody
}

func (m *Message) GetForwardHeaders() *bool {
	if m == nil {
		return nil
	}
	return m.ForwardHeaders
}

func (m *Message) GetForwardMethod() *bool {
	if m == nil {
		return nil
	}
	return m.ForwardMethod
}

func (m *Message) GetForwardURI() *bool {
	if m == nil {
		return nil
	}
	return m.ForwardURI
}

func (m *Message) GetFunctions() []string {
	if m == nil {
		return nil
	}
	return m.Functions
}

func (m *Message) GetPriority() *int64 {
	if m == nil {
		return nil
	}
	return m.Priority
}

func (m *Message) GetSenderID() *string {
	if m == nil {
		return nil
	}
	return m.SenderID
}

func (m *Message) GetTracing() *bool {
	if m == nil {
		return nil
	}
	return m.Tracing
}

func (m *Message) GetTracingSampled() *bool {
	if m == nil {
		return nil
	}
	return m.TracingSampled
}

func (m *Message) GetTTL() *int64 {
	if m == nil {
		return nil
	}
	return m.TTL
}

// Scheme - The client authentication scheme used when connection to an event broker.
type Scheme string

const (
	SchemeBasic  Scheme = "BASIC"
	SchemeNone   Scheme = "NONE"
	SchemeOauth2 Scheme = "OAUTH2"
)

func (e Scheme) ToPointer() *Scheme {
	return &e
}
func (e *Scheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BASIC":
		fallthrough
	case "NONE":
		fallthrough
	case "OAUTH2":
		*e = Scheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scheme: %v", v)
	}
}

// SolaceUpstreamPluginAuthentication - Session authentication related configuration.
type SolaceUpstreamPluginAuthentication struct {
	// The OAuth2 access token used with `OAUTH2` authentication scheme when connecting to an event broker.
	AccessToken       *string `default:"null" json:"access_token"`
	AccessTokenHeader *string `default:"null" json:"access_token_header"`
	// The OpenID Connect ID token used with `OAUTH2` authentication scheme when connecting to an event broker.
	IDToken       *string `default:"null" json:"id_token"`
	IDTokenHeader *string `default:"null" json:"id_token_header"`
	// The password used with `BASIC` authentication scheme when connecting to an event broker.
	Password *string `default:"null" json:"password"`
	// The client authentication scheme used when connection to an event broker.
	Scheme *Scheme `default:"BASIC" json:"scheme"`
	// The username used with `BASIC` authentication scheme when connecting to an event broker .
	Username *string `default:"null" json:"username"`
}

func (s SolaceUpstreamPluginAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceUpstreamPluginAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SolaceUpstreamPluginAuthentication) GetAccessToken() *string {
	if s == nil {
		return nil
	}
	return s.AccessToken
}

func (s *SolaceUpstreamPluginAuthentication) GetAccessTokenHeader() *string {
	if s == nil {
		return nil
	}
	return s.AccessTokenHeader
}

func (s *SolaceUpstreamPluginAuthentication) GetIDToken() *string {
	if s == nil {
		return nil
	}
	return s.IDToken
}

func (s *SolaceUpstreamPluginAuthentication) GetIDTokenHeader() *string {
	if s == nil {
		return nil
	}
	return s.IDTokenHeader
}

func (s *SolaceUpstreamPluginAuthentication) GetPassword() *string {
	if s == nil {
		return nil
	}
	return s.Password
}

func (s *SolaceUpstreamPluginAuthentication) GetScheme() *Scheme {
	if s == nil {
		return nil
	}
	return s.Scheme
}

func (s *SolaceUpstreamPluginAuthentication) GetUsername() *string {
	if s == nil {
		return nil
	}
	return s.Username
}

// Session related configuration.
type Session struct {
	// Session authentication related configuration.
	Authentication *SolaceUpstreamPluginAuthentication `json:"authentication"`
	// The timeout period (in milliseconds) for a connect operation to a given host (per host).
	ConnectTimeout *int64 `default:"3000" json:"connect_timeout"`
	// The IPv4 or IPv6 address or host name to connect to (see: https://docs.solace.com/API-Developer-Online-Ref-Documentation/c/index.html#host-entry).
	Host string `json:"host"`
	// Additional Solace session properties (each setting needs to have `SESSION_` prefix).
	Properties map[string]any `json:"properties,omitempty"`
	// Indicates whether the API should validate server certificates with the trusted certificates.
	SslValidateCertificate *bool `default:"false" json:"ssl_validate_certificate"`
	// The name of the Message VPN to attempt to join when connecting to an event broker.
	VpnName *string `default:"null" json:"vpn_name"`
}

func (s Session) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Session) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"host"}); err != nil {
		return err
	}
	return nil
}

func (s *Session) GetAuthentication() *SolaceUpstreamPluginAuthentication {
	if s == nil {
		return nil
	}
	return s.Authentication
}

func (s *Session) GetConnectTimeout() *int64 {
	if s == nil {
		return nil
	}
	return s.ConnectTimeout
}

func (s *Session) GetHost() string {
	if s == nil {
		return ""
	}
	return s.Host
}

func (s *Session) GetProperties() map[string]any {
	if s == nil {
		return nil
	}
	return s.Properties
}

func (s *Session) GetSslValidateCertificate() *bool {
	if s == nil {
		return nil
	}
	return s.SslValidateCertificate
}

func (s *Session) GetVpnName() *string {
	if s == nil {
		return nil
	}
	return s.VpnName
}

type SolaceUpstreamPluginConfig struct {
	// The message related configuration.
	Message Message `json:"message"`
	// Session related configuration.
	Session Session `json:"session"`
}

func (s *SolaceUpstreamPluginConfig) GetMessage() Message {
	if s == nil {
		return Message{}
	}
	return s.Message
}

func (s *SolaceUpstreamPluginConfig) GetSession() Session {
	if s == nil {
		return Session{}
	}
	return s.Session
}

type SolaceUpstreamPluginProtocols string

const (
	SolaceUpstreamPluginProtocolsGrpc  SolaceUpstreamPluginProtocols = "grpc"
	SolaceUpstreamPluginProtocolsGrpcs SolaceUpstreamPluginProtocols = "grpcs"
	SolaceUpstreamPluginProtocolsHTTP  SolaceUpstreamPluginProtocols = "http"
	SolaceUpstreamPluginProtocolsHTTPS SolaceUpstreamPluginProtocols = "https"
)

func (e SolaceUpstreamPluginProtocols) ToPointer() *SolaceUpstreamPluginProtocols {
	return &e
}
func (e *SolaceUpstreamPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = SolaceUpstreamPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SolaceUpstreamPluginProtocols: %v", v)
	}
}

// SolaceUpstreamPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type SolaceUpstreamPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (s *SolaceUpstreamPluginRoute) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SolaceUpstreamPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SolaceUpstreamPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (s *SolaceUpstreamPluginService) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

// SolaceUpstreamPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SolaceUpstreamPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                       `default:"null" json:"instance_name"`
	name         string                        `const:"solace-upstream" json:"name"`
	Ordering     *SolaceUpstreamPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []SolaceUpstreamPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                     `json:"updated_at,omitempty"`
	Config    SolaceUpstreamPluginConfig `json:"config"`
	// A set of strings representing HTTP protocols.
	Protocols []SolaceUpstreamPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *SolaceUpstreamPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SolaceUpstreamPluginService `json:"service"`
}

func (s SolaceUpstreamPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SolaceUpstreamPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (s *SolaceUpstreamPlugin) GetCreatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.CreatedAt
}

func (s *SolaceUpstreamPlugin) GetEnabled() *bool {
	if s == nil {
		return nil
	}
	return s.Enabled
}

func (s *SolaceUpstreamPlugin) GetID() *string {
	if s == nil {
		return nil
	}
	return s.ID
}

func (s *SolaceUpstreamPlugin) GetInstanceName() *string {
	if s == nil {
		return nil
	}
	return s.InstanceName
}

func (s *SolaceUpstreamPlugin) GetName() string {
	return "solace-upstream"
}

func (s *SolaceUpstreamPlugin) GetOrdering() *SolaceUpstreamPluginOrdering {
	if s == nil {
		return nil
	}
	return s.Ordering
}

func (s *SolaceUpstreamPlugin) GetPartials() []SolaceUpstreamPluginPartials {
	if s == nil {
		return nil
	}
	return s.Partials
}

func (s *SolaceUpstreamPlugin) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *SolaceUpstreamPlugin) GetUpdatedAt() *int64 {
	if s == nil {
		return nil
	}
	return s.UpdatedAt
}

func (s *SolaceUpstreamPlugin) GetConfig() SolaceUpstreamPluginConfig {
	if s == nil {
		return SolaceUpstreamPluginConfig{}
	}
	return s.Config
}

func (s *SolaceUpstreamPlugin) GetProtocols() []SolaceUpstreamPluginProtocols {
	if s == nil {
		return nil
	}
	return s.Protocols
}

func (s *SolaceUpstreamPlugin) GetRoute() *SolaceUpstreamPluginRoute {
	if s == nil {
		return nil
	}
	return s.Route
}

func (s *SolaceUpstreamPlugin) GetService() *SolaceUpstreamPluginService {
	if s == nil {
		return nil
	}
	return s.Service
}
