// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
	"time"
)

// MeshFaultInjectionItemType - the type of the resource
type MeshFaultInjectionItemType string

const (
	MeshFaultInjectionItemTypeMeshFaultInjection MeshFaultInjectionItemType = "MeshFaultInjection"
)

func (e MeshFaultInjectionItemType) ToPointer() *MeshFaultInjectionItemType {
	return &e
}
func (e *MeshFaultInjectionItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MeshFaultInjection":
		*e = MeshFaultInjectionItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemType: %v", v)
	}
}

type PercentageType string

const (
	PercentageTypeInteger PercentageType = "integer"
	PercentageTypeStr     PercentageType = "str"
)

// Percentage of requests on which abort will be injected, has to be
// either int or decimal represented as string.
type Percentage struct {
	Integer *int64
	Str     *string

	Type PercentageType
}

func CreatePercentageInteger(integer int64) Percentage {
	typ := PercentageTypeInteger

	return Percentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreatePercentageStr(str string) Percentage {
	typ := PercentageTypeStr

	return Percentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *Percentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = PercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Percentage", string(data))
}

func (u Percentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type Percentage: all fields are null")
}

// Abort defines a configuration of not delivering requests to destination
// service and replacing the responses from destination dataplane by
// predefined status code
type Abort struct {
	// HTTP status code which will be returned to source side
	HTTPStatus int `json:"httpStatus"`
	// Percentage of requests on which abort will be injected, has to be
	// either int or decimal represented as string.
	Percentage Percentage `json:"percentage"`
}

func (o *Abort) GetHTTPStatus() int {
	if o == nil {
		return 0
	}
	return o.HTTPStatus
}

func (o *Abort) GetPercentage() Percentage {
	if o == nil {
		return Percentage{}
	}
	return o.Percentage
}

type MeshFaultInjectionItemPercentageType string

const (
	MeshFaultInjectionItemPercentageTypeInteger MeshFaultInjectionItemPercentageType = "integer"
	MeshFaultInjectionItemPercentageTypeStr     MeshFaultInjectionItemPercentageType = "str"
)

// MeshFaultInjectionItemPercentage - Percentage of requests on which delay will be injected, has to be
// either int or decimal represented as string.
type MeshFaultInjectionItemPercentage struct {
	Integer *int64
	Str     *string

	Type MeshFaultInjectionItemPercentageType
}

func CreateMeshFaultInjectionItemPercentageInteger(integer int64) MeshFaultInjectionItemPercentage {
	typ := MeshFaultInjectionItemPercentageTypeInteger

	return MeshFaultInjectionItemPercentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMeshFaultInjectionItemPercentageStr(str string) MeshFaultInjectionItemPercentage {
	typ := MeshFaultInjectionItemPercentageTypeStr

	return MeshFaultInjectionItemPercentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeshFaultInjectionItemPercentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MeshFaultInjectionItemPercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeshFaultInjectionItemPercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MeshFaultInjectionItemPercentage", string(data))
}

func (u MeshFaultInjectionItemPercentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MeshFaultInjectionItemPercentage: all fields are null")
}

// Delay defines configuration of delaying a response from a destination
type Delay struct {
	// Percentage of requests on which delay will be injected, has to be
	// either int or decimal represented as string.
	Percentage MeshFaultInjectionItemPercentage `json:"percentage"`
	// The duration during which the response will be delayed
	Value string `json:"value"`
}

func (o *Delay) GetPercentage() MeshFaultInjectionItemPercentage {
	if o == nil {
		return MeshFaultInjectionItemPercentage{}
	}
	return o.Percentage
}

func (o *Delay) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type MeshFaultInjectionItemSpecPercentageType string

const (
	MeshFaultInjectionItemSpecPercentageTypeInteger MeshFaultInjectionItemSpecPercentageType = "integer"
	MeshFaultInjectionItemSpecPercentageTypeStr     MeshFaultInjectionItemSpecPercentageType = "str"
)

// MeshFaultInjectionItemSpecPercentage - Percentage of requests on which response bandwidth limit will be
// either int or decimal represented as string.
type MeshFaultInjectionItemSpecPercentage struct {
	Integer *int64
	Str     *string

	Type MeshFaultInjectionItemSpecPercentageType
}

func CreateMeshFaultInjectionItemSpecPercentageInteger(integer int64) MeshFaultInjectionItemSpecPercentage {
	typ := MeshFaultInjectionItemSpecPercentageTypeInteger

	return MeshFaultInjectionItemSpecPercentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMeshFaultInjectionItemSpecPercentageStr(str string) MeshFaultInjectionItemSpecPercentage {
	typ := MeshFaultInjectionItemSpecPercentageTypeStr

	return MeshFaultInjectionItemSpecPercentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeshFaultInjectionItemSpecPercentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MeshFaultInjectionItemSpecPercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeshFaultInjectionItemSpecPercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MeshFaultInjectionItemSpecPercentage", string(data))
}

func (u MeshFaultInjectionItemSpecPercentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MeshFaultInjectionItemSpecPercentage: all fields are null")
}

// ResponseBandwidth defines a configuration to limit the speed of
// responding to the requests
type ResponseBandwidth struct {
	// Limit is represented by value measure in Gbps, Mbps, kbps, e.g.
	// 10kbps
	Limit string `json:"limit"`
	// Percentage of requests on which response bandwidth limit will be
	// either int or decimal represented as string.
	Percentage MeshFaultInjectionItemSpecPercentage `json:"percentage"`
}

func (o *ResponseBandwidth) GetLimit() string {
	if o == nil {
		return ""
	}
	return o.Limit
}

func (o *ResponseBandwidth) GetPercentage() MeshFaultInjectionItemSpecPercentage {
	if o == nil {
		return MeshFaultInjectionItemSpecPercentage{}
	}
	return o.Percentage
}

// HTTP - FaultInjection defines the configuration of faults between dataplanes.
type HTTP struct {
	// Abort defines a configuration of not delivering requests to destination
	// service and replacing the responses from destination dataplane by
	// predefined status code
	Abort *Abort `json:"abort,omitempty"`
	// Delay defines configuration of delaying a response from a destination
	Delay *Delay `json:"delay,omitempty"`
	// ResponseBandwidth defines a configuration to limit the speed of
	// responding to the requests
	ResponseBandwidth *ResponseBandwidth `json:"responseBandwidth,omitempty"`
}

func (o *HTTP) GetAbort() *Abort {
	if o == nil {
		return nil
	}
	return o.Abort
}

func (o *HTTP) GetDelay() *Delay {
	if o == nil {
		return nil
	}
	return o.Delay
}

func (o *HTTP) GetResponseBandwidth() *ResponseBandwidth {
	if o == nil {
		return nil
	}
	return o.ResponseBandwidth
}

// MeshFaultInjectionItemDefault - Default is a configuration specific to the group of destinations referenced in
// 'targetRef'
type MeshFaultInjectionItemDefault struct {
	// Http allows to define list of Http faults between dataplanes.
	HTTP []HTTP `json:"http,omitempty"`
}

func (o *MeshFaultInjectionItemDefault) GetHTTP() []HTTP {
	if o == nil {
		return nil
	}
	return o.HTTP
}

// MeshFaultInjectionItemSpecKind - Kind of the referenced resource
type MeshFaultInjectionItemSpecKind string

const (
	MeshFaultInjectionItemSpecKindMesh                 MeshFaultInjectionItemSpecKind = "Mesh"
	MeshFaultInjectionItemSpecKindMeshSubset           MeshFaultInjectionItemSpecKind = "MeshSubset"
	MeshFaultInjectionItemSpecKindMeshGateway          MeshFaultInjectionItemSpecKind = "MeshGateway"
	MeshFaultInjectionItemSpecKindMeshService          MeshFaultInjectionItemSpecKind = "MeshService"
	MeshFaultInjectionItemSpecKindMeshExternalService  MeshFaultInjectionItemSpecKind = "MeshExternalService"
	MeshFaultInjectionItemSpecKindMeshMultiZoneService MeshFaultInjectionItemSpecKind = "MeshMultiZoneService"
	MeshFaultInjectionItemSpecKindMeshServiceSubset    MeshFaultInjectionItemSpecKind = "MeshServiceSubset"
	MeshFaultInjectionItemSpecKindMeshHTTPRoute        MeshFaultInjectionItemSpecKind = "MeshHTTPRoute"
	MeshFaultInjectionItemSpecKindDataplane            MeshFaultInjectionItemSpecKind = "Dataplane"
)

func (e MeshFaultInjectionItemSpecKind) ToPointer() *MeshFaultInjectionItemSpecKind {
	return &e
}
func (e *MeshFaultInjectionItemSpecKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshFaultInjectionItemSpecKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemSpecKind: %v", v)
	}
}

type MeshFaultInjectionItemSpecProxyTypes string

const (
	MeshFaultInjectionItemSpecProxyTypesSidecar MeshFaultInjectionItemSpecProxyTypes = "Sidecar"
	MeshFaultInjectionItemSpecProxyTypesGateway MeshFaultInjectionItemSpecProxyTypes = "Gateway"
)

func (e MeshFaultInjectionItemSpecProxyTypes) ToPointer() *MeshFaultInjectionItemSpecProxyTypes {
	return &e
}
func (e *MeshFaultInjectionItemSpecProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshFaultInjectionItemSpecProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemSpecProxyTypes: %v", v)
	}
}

// MeshFaultInjectionItemSpecTargetRef - TargetRef is a reference to the resource that represents a group of
// destinations.
type MeshFaultInjectionItemSpecTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshFaultInjectionItemSpecKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshFaultInjectionItemSpecProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetKind() *MeshFaultInjectionItemSpecKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetProxyTypes() []MeshFaultInjectionItemSpecProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshFaultInjectionItemSpecTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshFaultInjectionItemFrom struct {
	// Default is a configuration specific to the group of destinations referenced in
	// 'targetRef'
	Default *MeshFaultInjectionItemDefault `json:"default,omitempty"`
	// TargetRef is a reference to the resource that represents a group of
	// destinations.
	TargetRef MeshFaultInjectionItemSpecTargetRef `json:"targetRef"`
}

func (o *MeshFaultInjectionItemFrom) GetDefault() *MeshFaultInjectionItemDefault {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *MeshFaultInjectionItemFrom) GetTargetRef() MeshFaultInjectionItemSpecTargetRef {
	if o == nil {
		return MeshFaultInjectionItemSpecTargetRef{}
	}
	return o.TargetRef
}

// MeshFaultInjectionItemKind - Kind of the referenced resource
type MeshFaultInjectionItemKind string

const (
	MeshFaultInjectionItemKindMesh                 MeshFaultInjectionItemKind = "Mesh"
	MeshFaultInjectionItemKindMeshSubset           MeshFaultInjectionItemKind = "MeshSubset"
	MeshFaultInjectionItemKindMeshGateway          MeshFaultInjectionItemKind = "MeshGateway"
	MeshFaultInjectionItemKindMeshService          MeshFaultInjectionItemKind = "MeshService"
	MeshFaultInjectionItemKindMeshExternalService  MeshFaultInjectionItemKind = "MeshExternalService"
	MeshFaultInjectionItemKindMeshMultiZoneService MeshFaultInjectionItemKind = "MeshMultiZoneService"
	MeshFaultInjectionItemKindMeshServiceSubset    MeshFaultInjectionItemKind = "MeshServiceSubset"
	MeshFaultInjectionItemKindMeshHTTPRoute        MeshFaultInjectionItemKind = "MeshHTTPRoute"
	MeshFaultInjectionItemKindDataplane            MeshFaultInjectionItemKind = "Dataplane"
)

func (e MeshFaultInjectionItemKind) ToPointer() *MeshFaultInjectionItemKind {
	return &e
}
func (e *MeshFaultInjectionItemKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshFaultInjectionItemKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemKind: %v", v)
	}
}

type MeshFaultInjectionItemProxyTypes string

const (
	MeshFaultInjectionItemProxyTypesSidecar MeshFaultInjectionItemProxyTypes = "Sidecar"
	MeshFaultInjectionItemProxyTypesGateway MeshFaultInjectionItemProxyTypes = "Gateway"
)

func (e MeshFaultInjectionItemProxyTypes) ToPointer() *MeshFaultInjectionItemProxyTypes {
	return &e
}
func (e *MeshFaultInjectionItemProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshFaultInjectionItemProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemProxyTypes: %v", v)
	}
}

// MeshFaultInjectionItemTargetRef - TargetRef is a reference to the resource the policy takes an effect on.
// The resource could be either a real store object or virtual resource
// defined inplace.
type MeshFaultInjectionItemTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshFaultInjectionItemKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshFaultInjectionItemProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshFaultInjectionItemTargetRef) GetKind() *MeshFaultInjectionItemKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshFaultInjectionItemTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshFaultInjectionItemTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshFaultInjectionItemTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshFaultInjectionItemTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshFaultInjectionItemTargetRef) GetProxyTypes() []MeshFaultInjectionItemProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshFaultInjectionItemTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshFaultInjectionItemTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshFaultInjectionItemSpecToPercentageType string

const (
	MeshFaultInjectionItemSpecToPercentageTypeInteger MeshFaultInjectionItemSpecToPercentageType = "integer"
	MeshFaultInjectionItemSpecToPercentageTypeStr     MeshFaultInjectionItemSpecToPercentageType = "str"
)

// MeshFaultInjectionItemSpecToPercentage - Percentage of requests on which abort will be injected, has to be
// either int or decimal represented as string.
type MeshFaultInjectionItemSpecToPercentage struct {
	Integer *int64
	Str     *string

	Type MeshFaultInjectionItemSpecToPercentageType
}

func CreateMeshFaultInjectionItemSpecToPercentageInteger(integer int64) MeshFaultInjectionItemSpecToPercentage {
	typ := MeshFaultInjectionItemSpecToPercentageTypeInteger

	return MeshFaultInjectionItemSpecToPercentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMeshFaultInjectionItemSpecToPercentageStr(str string) MeshFaultInjectionItemSpecToPercentage {
	typ := MeshFaultInjectionItemSpecToPercentageTypeStr

	return MeshFaultInjectionItemSpecToPercentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeshFaultInjectionItemSpecToPercentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MeshFaultInjectionItemSpecToPercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeshFaultInjectionItemSpecToPercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MeshFaultInjectionItemSpecToPercentage", string(data))
}

func (u MeshFaultInjectionItemSpecToPercentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MeshFaultInjectionItemSpecToPercentage: all fields are null")
}

// MeshFaultInjectionItemAbort - Abort defines a configuration of not delivering requests to destination
// service and replacing the responses from destination dataplane by
// predefined status code
type MeshFaultInjectionItemAbort struct {
	// HTTP status code which will be returned to source side
	HTTPStatus int `json:"httpStatus"`
	// Percentage of requests on which abort will be injected, has to be
	// either int or decimal represented as string.
	Percentage MeshFaultInjectionItemSpecToPercentage `json:"percentage"`
}

func (o *MeshFaultInjectionItemAbort) GetHTTPStatus() int {
	if o == nil {
		return 0
	}
	return o.HTTPStatus
}

func (o *MeshFaultInjectionItemAbort) GetPercentage() MeshFaultInjectionItemSpecToPercentage {
	if o == nil {
		return MeshFaultInjectionItemSpecToPercentage{}
	}
	return o.Percentage
}

type MeshFaultInjectionItemSpecToDefaultPercentageType string

const (
	MeshFaultInjectionItemSpecToDefaultPercentageTypeInteger MeshFaultInjectionItemSpecToDefaultPercentageType = "integer"
	MeshFaultInjectionItemSpecToDefaultPercentageTypeStr     MeshFaultInjectionItemSpecToDefaultPercentageType = "str"
)

// MeshFaultInjectionItemSpecToDefaultPercentage - Percentage of requests on which delay will be injected, has to be
// either int or decimal represented as string.
type MeshFaultInjectionItemSpecToDefaultPercentage struct {
	Integer *int64
	Str     *string

	Type MeshFaultInjectionItemSpecToDefaultPercentageType
}

func CreateMeshFaultInjectionItemSpecToDefaultPercentageInteger(integer int64) MeshFaultInjectionItemSpecToDefaultPercentage {
	typ := MeshFaultInjectionItemSpecToDefaultPercentageTypeInteger

	return MeshFaultInjectionItemSpecToDefaultPercentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMeshFaultInjectionItemSpecToDefaultPercentageStr(str string) MeshFaultInjectionItemSpecToDefaultPercentage {
	typ := MeshFaultInjectionItemSpecToDefaultPercentageTypeStr

	return MeshFaultInjectionItemSpecToDefaultPercentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeshFaultInjectionItemSpecToDefaultPercentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MeshFaultInjectionItemSpecToDefaultPercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeshFaultInjectionItemSpecToDefaultPercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MeshFaultInjectionItemSpecToDefaultPercentage", string(data))
}

func (u MeshFaultInjectionItemSpecToDefaultPercentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MeshFaultInjectionItemSpecToDefaultPercentage: all fields are null")
}

// MeshFaultInjectionItemDelay - Delay defines configuration of delaying a response from a destination
type MeshFaultInjectionItemDelay struct {
	// Percentage of requests on which delay will be injected, has to be
	// either int or decimal represented as string.
	Percentage MeshFaultInjectionItemSpecToDefaultPercentage `json:"percentage"`
	// The duration during which the response will be delayed
	Value string `json:"value"`
}

func (o *MeshFaultInjectionItemDelay) GetPercentage() MeshFaultInjectionItemSpecToDefaultPercentage {
	if o == nil {
		return MeshFaultInjectionItemSpecToDefaultPercentage{}
	}
	return o.Percentage
}

func (o *MeshFaultInjectionItemDelay) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type MeshFaultInjectionItemSpecToDefaultHTTPPercentageType string

const (
	MeshFaultInjectionItemSpecToDefaultHTTPPercentageTypeInteger MeshFaultInjectionItemSpecToDefaultHTTPPercentageType = "integer"
	MeshFaultInjectionItemSpecToDefaultHTTPPercentageTypeStr     MeshFaultInjectionItemSpecToDefaultHTTPPercentageType = "str"
)

// MeshFaultInjectionItemSpecToDefaultHTTPPercentage - Percentage of requests on which response bandwidth limit will be
// either int or decimal represented as string.
type MeshFaultInjectionItemSpecToDefaultHTTPPercentage struct {
	Integer *int64
	Str     *string

	Type MeshFaultInjectionItemSpecToDefaultHTTPPercentageType
}

func CreateMeshFaultInjectionItemSpecToDefaultHTTPPercentageInteger(integer int64) MeshFaultInjectionItemSpecToDefaultHTTPPercentage {
	typ := MeshFaultInjectionItemSpecToDefaultHTTPPercentageTypeInteger

	return MeshFaultInjectionItemSpecToDefaultHTTPPercentage{
		Integer: &integer,
		Type:    typ,
	}
}

func CreateMeshFaultInjectionItemSpecToDefaultHTTPPercentageStr(str string) MeshFaultInjectionItemSpecToDefaultHTTPPercentage {
	typ := MeshFaultInjectionItemSpecToDefaultHTTPPercentageTypeStr

	return MeshFaultInjectionItemSpecToDefaultHTTPPercentage{
		Str:  &str,
		Type: typ,
	}
}

func (u *MeshFaultInjectionItemSpecToDefaultHTTPPercentage) UnmarshalJSON(data []byte) error {

	var integer int64 = int64(0)
	if err := utils.UnmarshalJSON(data, &integer, "", true, true); err == nil {
		u.Integer = &integer
		u.Type = MeshFaultInjectionItemSpecToDefaultHTTPPercentageTypeInteger
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MeshFaultInjectionItemSpecToDefaultHTTPPercentageTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MeshFaultInjectionItemSpecToDefaultHTTPPercentage", string(data))
}

func (u MeshFaultInjectionItemSpecToDefaultHTTPPercentage) MarshalJSON() ([]byte, error) {
	if u.Integer != nil {
		return utils.MarshalJSON(u.Integer, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type MeshFaultInjectionItemSpecToDefaultHTTPPercentage: all fields are null")
}

// MeshFaultInjectionItemResponseBandwidth - ResponseBandwidth defines a configuration to limit the speed of
// responding to the requests
type MeshFaultInjectionItemResponseBandwidth struct {
	// Limit is represented by value measure in Gbps, Mbps, kbps, e.g.
	// 10kbps
	Limit string `json:"limit"`
	// Percentage of requests on which response bandwidth limit will be
	// either int or decimal represented as string.
	Percentage MeshFaultInjectionItemSpecToDefaultHTTPPercentage `json:"percentage"`
}

func (o *MeshFaultInjectionItemResponseBandwidth) GetLimit() string {
	if o == nil {
		return ""
	}
	return o.Limit
}

func (o *MeshFaultInjectionItemResponseBandwidth) GetPercentage() MeshFaultInjectionItemSpecToDefaultHTTPPercentage {
	if o == nil {
		return MeshFaultInjectionItemSpecToDefaultHTTPPercentage{}
	}
	return o.Percentage
}

// MeshFaultInjectionItemHTTP - FaultInjection defines the configuration of faults between dataplanes.
type MeshFaultInjectionItemHTTP struct {
	// Abort defines a configuration of not delivering requests to destination
	// service and replacing the responses from destination dataplane by
	// predefined status code
	Abort *MeshFaultInjectionItemAbort `json:"abort,omitempty"`
	// Delay defines configuration of delaying a response from a destination
	Delay *MeshFaultInjectionItemDelay `json:"delay,omitempty"`
	// ResponseBandwidth defines a configuration to limit the speed of
	// responding to the requests
	ResponseBandwidth *MeshFaultInjectionItemResponseBandwidth `json:"responseBandwidth,omitempty"`
}

func (o *MeshFaultInjectionItemHTTP) GetAbort() *MeshFaultInjectionItemAbort {
	if o == nil {
		return nil
	}
	return o.Abort
}

func (o *MeshFaultInjectionItemHTTP) GetDelay() *MeshFaultInjectionItemDelay {
	if o == nil {
		return nil
	}
	return o.Delay
}

func (o *MeshFaultInjectionItemHTTP) GetResponseBandwidth() *MeshFaultInjectionItemResponseBandwidth {
	if o == nil {
		return nil
	}
	return o.ResponseBandwidth
}

// MeshFaultInjectionItemSpecDefault - Default is a configuration specific to the group of destinations referenced in
// 'targetRef'
type MeshFaultInjectionItemSpecDefault struct {
	// Http allows to define list of Http faults between dataplanes.
	HTTP []MeshFaultInjectionItemHTTP `json:"http,omitempty"`
}

func (o *MeshFaultInjectionItemSpecDefault) GetHTTP() []MeshFaultInjectionItemHTTP {
	if o == nil {
		return nil
	}
	return o.HTTP
}

// MeshFaultInjectionItemSpecToKind - Kind of the referenced resource
type MeshFaultInjectionItemSpecToKind string

const (
	MeshFaultInjectionItemSpecToKindMesh                 MeshFaultInjectionItemSpecToKind = "Mesh"
	MeshFaultInjectionItemSpecToKindMeshSubset           MeshFaultInjectionItemSpecToKind = "MeshSubset"
	MeshFaultInjectionItemSpecToKindMeshGateway          MeshFaultInjectionItemSpecToKind = "MeshGateway"
	MeshFaultInjectionItemSpecToKindMeshService          MeshFaultInjectionItemSpecToKind = "MeshService"
	MeshFaultInjectionItemSpecToKindMeshExternalService  MeshFaultInjectionItemSpecToKind = "MeshExternalService"
	MeshFaultInjectionItemSpecToKindMeshMultiZoneService MeshFaultInjectionItemSpecToKind = "MeshMultiZoneService"
	MeshFaultInjectionItemSpecToKindMeshServiceSubset    MeshFaultInjectionItemSpecToKind = "MeshServiceSubset"
	MeshFaultInjectionItemSpecToKindMeshHTTPRoute        MeshFaultInjectionItemSpecToKind = "MeshHTTPRoute"
	MeshFaultInjectionItemSpecToKindDataplane            MeshFaultInjectionItemSpecToKind = "Dataplane"
)

func (e MeshFaultInjectionItemSpecToKind) ToPointer() *MeshFaultInjectionItemSpecToKind {
	return &e
}
func (e *MeshFaultInjectionItemSpecToKind) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Mesh":
		fallthrough
	case "MeshSubset":
		fallthrough
	case "MeshGateway":
		fallthrough
	case "MeshService":
		fallthrough
	case "MeshExternalService":
		fallthrough
	case "MeshMultiZoneService":
		fallthrough
	case "MeshServiceSubset":
		fallthrough
	case "MeshHTTPRoute":
		fallthrough
	case "Dataplane":
		*e = MeshFaultInjectionItemSpecToKind(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemSpecToKind: %v", v)
	}
}

type MeshFaultInjectionItemSpecToProxyTypes string

const (
	MeshFaultInjectionItemSpecToProxyTypesSidecar MeshFaultInjectionItemSpecToProxyTypes = "Sidecar"
	MeshFaultInjectionItemSpecToProxyTypesGateway MeshFaultInjectionItemSpecToProxyTypes = "Gateway"
)

func (e MeshFaultInjectionItemSpecToProxyTypes) ToPointer() *MeshFaultInjectionItemSpecToProxyTypes {
	return &e
}
func (e *MeshFaultInjectionItemSpecToProxyTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Sidecar":
		fallthrough
	case "Gateway":
		*e = MeshFaultInjectionItemSpecToProxyTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeshFaultInjectionItemSpecToProxyTypes: %v", v)
	}
}

// MeshFaultInjectionItemSpecToTargetRef - TargetRef is a reference to the resource that represents a group of
// destinations.
type MeshFaultInjectionItemSpecToTargetRef struct {
	// Kind of the referenced resource
	Kind *MeshFaultInjectionItemSpecToKind `json:"kind,omitempty"`
	// Labels are used to select group of MeshServices that match labels. Either Labels or
	// Name and Namespace can be used.
	Labels map[string]string `json:"labels,omitempty"`
	// Mesh is reserved for future use to identify cross mesh resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the referenced resource. Can only be used with kinds: `MeshService`,
	// `MeshServiceSubset` and `MeshGatewayRoute`
	Name *string `json:"name,omitempty"`
	// Namespace specifies the namespace of target resource. If empty only resources in policy namespace
	// will be targeted.
	Namespace *string `json:"namespace,omitempty"`
	// ProxyTypes specifies the data plane types that are subject to the policy. When not specified,
	// all data plane types are targeted by the policy.
	ProxyTypes []MeshFaultInjectionItemSpecToProxyTypes `json:"proxyTypes,omitempty"`
	// SectionName is used to target specific section of resource.
	// For example, you can target port from MeshService.ports[] by its name. Only traffic to this port will be affected.
	SectionName *string `json:"sectionName,omitempty"`
	// Tags used to select a subset of proxies by tags. Can only be used with kinds
	// `MeshSubset` and `MeshServiceSubset`
	Tags map[string]string `json:"tags,omitempty"`
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetKind() *MeshFaultInjectionItemSpecToKind {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetProxyTypes() []MeshFaultInjectionItemSpecToProxyTypes {
	if o == nil {
		return nil
	}
	return o.ProxyTypes
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetSectionName() *string {
	if o == nil {
		return nil
	}
	return o.SectionName
}

func (o *MeshFaultInjectionItemSpecToTargetRef) GetTags() map[string]string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type MeshFaultInjectionItemTo struct {
	// Default is a configuration specific to the group of destinations referenced in
	// 'targetRef'
	Default *MeshFaultInjectionItemSpecDefault `json:"default,omitempty"`
	// TargetRef is a reference to the resource that represents a group of
	// destinations.
	TargetRef MeshFaultInjectionItemSpecToTargetRef `json:"targetRef"`
}

func (o *MeshFaultInjectionItemTo) GetDefault() *MeshFaultInjectionItemSpecDefault {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *MeshFaultInjectionItemTo) GetTargetRef() MeshFaultInjectionItemSpecToTargetRef {
	if o == nil {
		return MeshFaultInjectionItemSpecToTargetRef{}
	}
	return o.TargetRef
}

// MeshFaultInjectionItemSpec - Spec is the specification of the Kuma MeshFaultInjection resource.
type MeshFaultInjectionItemSpec struct {
	// From list makes a match between clients and corresponding configurations
	From []MeshFaultInjectionItemFrom `json:"from,omitempty"`
	// TargetRef is a reference to the resource the policy takes an effect on.
	// The resource could be either a real store object or virtual resource
	// defined inplace.
	TargetRef *MeshFaultInjectionItemTargetRef `json:"targetRef,omitempty"`
	// To list makes a match between clients and corresponding configurations
	To []MeshFaultInjectionItemTo `json:"to,omitempty"`
}

func (o *MeshFaultInjectionItemSpec) GetFrom() []MeshFaultInjectionItemFrom {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *MeshFaultInjectionItemSpec) GetTargetRef() *MeshFaultInjectionItemTargetRef {
	if o == nil {
		return nil
	}
	return o.TargetRef
}

func (o *MeshFaultInjectionItemSpec) GetTo() []MeshFaultInjectionItemTo {
	if o == nil {
		return nil
	}
	return o.To
}

type MeshFaultInjectionItem struct {
	// the type of the resource
	Type MeshFaultInjectionItemType `json:"type"`
	// Mesh is the name of the Kuma mesh this resource belongs to. It may be omitted for cluster-scoped resources.
	Mesh *string `json:"mesh,omitempty"`
	// Name of the Kuma resource
	Name string `json:"name"`
	// The labels to help identity resources
	Labels map[string]string `json:"labels,omitempty"`
	// Spec is the specification of the Kuma MeshFaultInjection resource.
	Spec MeshFaultInjectionItemSpec `json:"spec"`
	// Time at which the resource was created
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Time at which the resource was updated
	ModificationTime *time.Time `json:"modificationTime,omitempty"`
}

func (m MeshFaultInjectionItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(m, "", false)
}

func (m *MeshFaultInjectionItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &m, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *MeshFaultInjectionItem) GetType() MeshFaultInjectionItemType {
	if o == nil {
		return MeshFaultInjectionItemType("")
	}
	return o.Type
}

func (o *MeshFaultInjectionItem) GetMesh() *string {
	if o == nil {
		return nil
	}
	return o.Mesh
}

func (o *MeshFaultInjectionItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *MeshFaultInjectionItem) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *MeshFaultInjectionItem) GetSpec() MeshFaultInjectionItemSpec {
	if o == nil {
		return MeshFaultInjectionItemSpec{}
	}
	return o.Spec
}

func (o *MeshFaultInjectionItem) GetCreationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreationTime
}

func (o *MeshFaultInjectionItem) GetModificationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ModificationTime
}
