// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateRateLimitingPluginLimitBy - The entity that is used when aggregating the limits.
type CreateRateLimitingPluginLimitBy string

const (
	CreateRateLimitingPluginLimitByConsumer      CreateRateLimitingPluginLimitBy = "consumer"
	CreateRateLimitingPluginLimitByCredential    CreateRateLimitingPluginLimitBy = "credential"
	CreateRateLimitingPluginLimitByIP            CreateRateLimitingPluginLimitBy = "ip"
	CreateRateLimitingPluginLimitByService       CreateRateLimitingPluginLimitBy = "service"
	CreateRateLimitingPluginLimitByHeader        CreateRateLimitingPluginLimitBy = "header"
	CreateRateLimitingPluginLimitByPath          CreateRateLimitingPluginLimitBy = "path"
	CreateRateLimitingPluginLimitByConsumerGroup CreateRateLimitingPluginLimitBy = "consumer-group"
)

func (e CreateRateLimitingPluginLimitBy) ToPointer() *CreateRateLimitingPluginLimitBy {
	return &e
}
func (e *CreateRateLimitingPluginLimitBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "credential":
		fallthrough
	case "ip":
		fallthrough
	case "service":
		fallthrough
	case "header":
		fallthrough
	case "path":
		fallthrough
	case "consumer-group":
		*e = CreateRateLimitingPluginLimitBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRateLimitingPluginLimitBy: %v", v)
	}
}

// CreateRateLimitingPluginPolicy - The rate-limiting policies to use for retrieving and incrementing the limits.
type CreateRateLimitingPluginPolicy string

const (
	CreateRateLimitingPluginPolicyLocal   CreateRateLimitingPluginPolicy = "local"
	CreateRateLimitingPluginPolicyCluster CreateRateLimitingPluginPolicy = "cluster"
	CreateRateLimitingPluginPolicyRedis   CreateRateLimitingPluginPolicy = "redis"
)

func (e CreateRateLimitingPluginPolicy) ToPointer() *CreateRateLimitingPluginPolicy {
	return &e
}
func (e *CreateRateLimitingPluginPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "local":
		fallthrough
	case "cluster":
		fallthrough
	case "redis":
		*e = CreateRateLimitingPluginPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRateLimitingPluginPolicy: %v", v)
	}
}

// CreateRateLimitingPluginRedis - Redis configuration
type CreateRateLimitingPluginRedis struct {
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	Timeout *int64 `json:"timeout,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (o *CreateRateLimitingPluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *CreateRateLimitingPluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateRateLimitingPluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *CreateRateLimitingPluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateRateLimitingPluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *CreateRateLimitingPluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *CreateRateLimitingPluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *CreateRateLimitingPluginRedis) GetTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *CreateRateLimitingPluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type CreateRateLimitingPluginConfig struct {
	// The number of HTTP requests that can be made per day.
	Day *float64 `json:"day,omitempty"`
	// Set a custom error code to return when the rate limit is exceeded.
	ErrorCode *float64 `json:"error_code,omitempty"`
	// Set a custom error message to return when the rate limit is exceeded.
	ErrorMessage *string `json:"error_message,omitempty"`
	// A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
	FaultTolerant *bool `json:"fault_tolerant,omitempty"`
	// A string representing an HTTP header name.
	HeaderName *string `json:"header_name,omitempty"`
	// Optionally hide informative response headers.
	HideClientHeaders *bool `json:"hide_client_headers,omitempty"`
	// The number of HTTP requests that can be made per hour.
	Hour *float64 `json:"hour,omitempty"`
	// The entity that is used when aggregating the limits.
	LimitBy *CreateRateLimitingPluginLimitBy `json:"limit_by,omitempty"`
	// The number of HTTP requests that can be made per minute.
	Minute *float64 `json:"minute,omitempty"`
	// The number of HTTP requests that can be made per month.
	Month *float64 `json:"month,omitempty"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	Path *string `json:"path,omitempty"`
	// The rate-limiting policies to use for retrieving and incrementing the limits.
	Policy *CreateRateLimitingPluginPolicy `json:"policy,omitempty"`
	// Redis configuration
	Redis *CreateRateLimitingPluginRedis `json:"redis,omitempty"`
	// The number of HTTP requests that can be made per second.
	Second *float64 `json:"second,omitempty"`
	// How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
	SyncRate *float64 `json:"sync_rate,omitempty"`
	// The number of HTTP requests that can be made per year.
	Year *float64 `json:"year,omitempty"`
}

func (o *CreateRateLimitingPluginConfig) GetDay() *float64 {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CreateRateLimitingPluginConfig) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CreateRateLimitingPluginConfig) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CreateRateLimitingPluginConfig) GetFaultTolerant() *bool {
	if o == nil {
		return nil
	}
	return o.FaultTolerant
}

func (o *CreateRateLimitingPluginConfig) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *CreateRateLimitingPluginConfig) GetHideClientHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.HideClientHeaders
}

func (o *CreateRateLimitingPluginConfig) GetHour() *float64 {
	if o == nil {
		return nil
	}
	return o.Hour
}

func (o *CreateRateLimitingPluginConfig) GetLimitBy() *CreateRateLimitingPluginLimitBy {
	if o == nil {
		return nil
	}
	return o.LimitBy
}

func (o *CreateRateLimitingPluginConfig) GetMinute() *float64 {
	if o == nil {
		return nil
	}
	return o.Minute
}

func (o *CreateRateLimitingPluginConfig) GetMonth() *float64 {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CreateRateLimitingPluginConfig) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *CreateRateLimitingPluginConfig) GetPolicy() *CreateRateLimitingPluginPolicy {
	if o == nil {
		return nil
	}
	return o.Policy
}

func (o *CreateRateLimitingPluginConfig) GetRedis() *CreateRateLimitingPluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *CreateRateLimitingPluginConfig) GetSecond() *float64 {
	if o == nil {
		return nil
	}
	return o.Second
}

func (o *CreateRateLimitingPluginConfig) GetSyncRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SyncRate
}

func (o *CreateRateLimitingPluginConfig) GetYear() *float64 {
	if o == nil {
		return nil
	}
	return o.Year
}

type CreateRateLimitingPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateRateLimitingPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateRateLimitingPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateRateLimitingPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateRateLimitingPluginOrdering struct {
	After  *CreateRateLimitingPluginAfter  `json:"after,omitempty"`
	Before *CreateRateLimitingPluginBefore `json:"before,omitempty"`
}

func (o *CreateRateLimitingPluginOrdering) GetAfter() *CreateRateLimitingPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateRateLimitingPluginOrdering) GetBefore() *CreateRateLimitingPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateRateLimitingPluginProtocols string

const (
	CreateRateLimitingPluginProtocolsGrpc           CreateRateLimitingPluginProtocols = "grpc"
	CreateRateLimitingPluginProtocolsGrpcs          CreateRateLimitingPluginProtocols = "grpcs"
	CreateRateLimitingPluginProtocolsHTTP           CreateRateLimitingPluginProtocols = "http"
	CreateRateLimitingPluginProtocolsHTTPS          CreateRateLimitingPluginProtocols = "https"
	CreateRateLimitingPluginProtocolsTCP            CreateRateLimitingPluginProtocols = "tcp"
	CreateRateLimitingPluginProtocolsTLS            CreateRateLimitingPluginProtocols = "tls"
	CreateRateLimitingPluginProtocolsTLSPassthrough CreateRateLimitingPluginProtocols = "tls_passthrough"
	CreateRateLimitingPluginProtocolsUDP            CreateRateLimitingPluginProtocols = "udp"
	CreateRateLimitingPluginProtocolsWs             CreateRateLimitingPluginProtocols = "ws"
	CreateRateLimitingPluginProtocolsWss            CreateRateLimitingPluginProtocols = "wss"
)

func (e CreateRateLimitingPluginProtocols) ToPointer() *CreateRateLimitingPluginProtocols {
	return &e
}
func (e *CreateRateLimitingPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateRateLimitingPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRateLimitingPluginProtocols: %v", v)
	}
}

// CreateRateLimitingPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateRateLimitingPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRateLimitingPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRateLimitingPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRateLimitingPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRateLimitingPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateRateLimitingPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRateLimitingPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRateLimitingPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateRateLimitingPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRateLimitingPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRateLimitingPlugin struct {
	Config *CreateRateLimitingPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                             `json:"enabled,omitempty"`
	InstanceName *string                           `json:"instance_name,omitempty"`
	name         *string                           `const:"rate-limiting" json:"name,omitempty"`
	Ordering     *CreateRateLimitingPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateRateLimitingPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateRateLimitingPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateRateLimitingPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateRateLimitingPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateRateLimitingPluginService `json:"service,omitempty"`
}

func (c CreateRateLimitingPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRateLimitingPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateRateLimitingPlugin) GetConfig() *CreateRateLimitingPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateRateLimitingPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateRateLimitingPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateRateLimitingPlugin) GetName() *string {
	return types.String("rate-limiting")
}

func (o *CreateRateLimitingPlugin) GetOrdering() *CreateRateLimitingPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateRateLimitingPlugin) GetProtocols() []CreateRateLimitingPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateRateLimitingPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateRateLimitingPlugin) GetConsumer() *CreateRateLimitingPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateRateLimitingPlugin) GetConsumerGroup() *CreateRateLimitingPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateRateLimitingPlugin) GetRoute() *CreateRateLimitingPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateRateLimitingPlugin) GetService() *CreateRateLimitingPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
