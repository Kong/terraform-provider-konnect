// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateUDPLogPluginConfig struct {
	// Lua code as a key-value map
	CustomFieldsByLua map[string]any `json:"custom_fields_by_lua,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// An optional timeout in milliseconds when sending data to the upstream server.
	Timeout *float64 `json:"timeout,omitempty"`
}

func (o *CreateUDPLogPluginConfig) GetCustomFieldsByLua() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldsByLua
}

func (o *CreateUDPLogPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateUDPLogPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateUDPLogPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

type CreateUDPLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateUDPLogPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateUDPLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateUDPLogPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateUDPLogPluginOrdering struct {
	After  *CreateUDPLogPluginAfter  `json:"after,omitempty"`
	Before *CreateUDPLogPluginBefore `json:"before,omitempty"`
}

func (o *CreateUDPLogPluginOrdering) GetAfter() *CreateUDPLogPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateUDPLogPluginOrdering) GetBefore() *CreateUDPLogPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateUDPLogPluginProtocols string

const (
	CreateUDPLogPluginProtocolsGrpc           CreateUDPLogPluginProtocols = "grpc"
	CreateUDPLogPluginProtocolsGrpcs          CreateUDPLogPluginProtocols = "grpcs"
	CreateUDPLogPluginProtocolsHTTP           CreateUDPLogPluginProtocols = "http"
	CreateUDPLogPluginProtocolsHTTPS          CreateUDPLogPluginProtocols = "https"
	CreateUDPLogPluginProtocolsTCP            CreateUDPLogPluginProtocols = "tcp"
	CreateUDPLogPluginProtocolsTLS            CreateUDPLogPluginProtocols = "tls"
	CreateUDPLogPluginProtocolsTLSPassthrough CreateUDPLogPluginProtocols = "tls_passthrough"
	CreateUDPLogPluginProtocolsUDP            CreateUDPLogPluginProtocols = "udp"
	CreateUDPLogPluginProtocolsWs             CreateUDPLogPluginProtocols = "ws"
	CreateUDPLogPluginProtocolsWss            CreateUDPLogPluginProtocols = "wss"
)

func (e CreateUDPLogPluginProtocols) ToPointer() *CreateUDPLogPluginProtocols {
	return &e
}
func (e *CreateUDPLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateUDPLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUDPLogPluginProtocols: %v", v)
	}
}

// CreateUDPLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateUDPLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUDPLogPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateUDPLogPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUDPLogPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateUDPLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateUDPLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUDPLogPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateUDPLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateUDPLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUDPLogPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateUDPLogPlugin struct {
	Config *CreateUDPLogPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                       `json:"enabled,omitempty"`
	InstanceName *string                     `json:"instance_name,omitempty"`
	name         *string                     `const:"udp-log" json:"name,omitempty"`
	Ordering     *CreateUDPLogPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateUDPLogPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateUDPLogPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateUDPLogPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateUDPLogPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateUDPLogPluginService `json:"service,omitempty"`
}

func (c CreateUDPLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUDPLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUDPLogPlugin) GetConfig() *CreateUDPLogPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateUDPLogPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateUDPLogPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateUDPLogPlugin) GetName() *string {
	return types.String("udp-log")
}

func (o *CreateUDPLogPlugin) GetOrdering() *CreateUDPLogPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateUDPLogPlugin) GetProtocols() []CreateUDPLogPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateUDPLogPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateUDPLogPlugin) GetConsumer() *CreateUDPLogPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateUDPLogPlugin) GetConsumerGroup() *CreateUDPLogPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateUDPLogPlugin) GetRoute() *CreateUDPLogPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateUDPLogPlugin) GetService() *CreateUDPLogPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
