// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type KafkaConsumePluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (k *KafkaConsumePluginAfter) GetAccess() []string {
	if k == nil {
		return nil
	}
	return k.Access
}

type KafkaConsumePluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (k *KafkaConsumePluginBefore) GetAccess() []string {
	if k == nil {
		return nil
	}
	return k.Access
}

type KafkaConsumePluginOrdering struct {
	After  *KafkaConsumePluginAfter  `json:"after,omitempty"`
	Before *KafkaConsumePluginBefore `json:"before,omitempty"`
}

func (k *KafkaConsumePluginOrdering) GetAfter() *KafkaConsumePluginAfter {
	if k == nil {
		return nil
	}
	return k.After
}

func (k *KafkaConsumePluginOrdering) GetBefore() *KafkaConsumePluginBefore {
	if k == nil {
		return nil
	}
	return k.Before
}

type KafkaConsumePluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (k *KafkaConsumePluginPartials) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KafkaConsumePluginPartials) GetName() *string {
	if k == nil {
		return nil
	}
	return k.Name
}

func (k *KafkaConsumePluginPartials) GetPath() *string {
	if k == nil {
		return nil
	}
	return k.Path
}

// Mechanism - The SASL authentication mechanism.  Supported options: `PLAIN` or `SCRAM-SHA-256`.
type Mechanism string

const (
	MechanismPlain       Mechanism = "PLAIN"
	MechanismScramSha256 Mechanism = "SCRAM-SHA-256"
	MechanismScramSha512 Mechanism = "SCRAM-SHA-512"
)

func (e Mechanism) ToPointer() *Mechanism {
	return &e
}
func (e *Mechanism) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PLAIN":
		fallthrough
	case "SCRAM-SHA-256":
		fallthrough
	case "SCRAM-SHA-512":
		*e = Mechanism(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mechanism: %v", v)
	}
}

// KafkaConsumePluginStrategy - The authentication strategy for the plugin, the only option for the value is `sasl`.
type KafkaConsumePluginStrategy string

const (
	KafkaConsumePluginStrategySasl KafkaConsumePluginStrategy = "sasl"
)

func (e KafkaConsumePluginStrategy) ToPointer() *KafkaConsumePluginStrategy {
	return &e
}
func (e *KafkaConsumePluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sasl":
		*e = KafkaConsumePluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginStrategy: %v", v)
	}
}

type Authentication struct {
	// The SASL authentication mechanism.  Supported options: `PLAIN` or `SCRAM-SHA-256`.
	Mechanism *Mechanism `json:"mechanism,omitempty"`
	// Password for SASL authentication.
	Password *string `default:"null" json:"password"`
	// The authentication strategy for the plugin, the only option for the value is `sasl`.
	Strategy *KafkaConsumePluginStrategy `json:"strategy,omitempty"`
	// Enable this to indicate `DelegationToken` authentication
	Tokenauth *bool `default:"null" json:"tokenauth"`
	// Username for SASL authentication.
	User *string `default:"null" json:"user"`
}

func (a Authentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Authentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *Authentication) GetMechanism() *Mechanism {
	if a == nil {
		return nil
	}
	return a.Mechanism
}

func (a *Authentication) GetPassword() *string {
	if a == nil {
		return nil
	}
	return a.Password
}

func (a *Authentication) GetStrategy() *KafkaConsumePluginStrategy {
	if a == nil {
		return nil
	}
	return a.Strategy
}

func (a *Authentication) GetTokenauth() *bool {
	if a == nil {
		return nil
	}
	return a.Tokenauth
}

func (a *Authentication) GetUser() *string {
	if a == nil {
		return nil
	}
	return a.User
}

// KafkaConsumePluginAutoOffsetReset - The offset to start from when there is no initial offset in the consumer group.
type KafkaConsumePluginAutoOffsetReset string

const (
	KafkaConsumePluginAutoOffsetResetEarliest KafkaConsumePluginAutoOffsetReset = "earliest"
	KafkaConsumePluginAutoOffsetResetLatest   KafkaConsumePluginAutoOffsetReset = "latest"
)

func (e KafkaConsumePluginAutoOffsetReset) ToPointer() *KafkaConsumePluginAutoOffsetReset {
	return &e
}
func (e *KafkaConsumePluginAutoOffsetReset) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "earliest":
		fallthrough
	case "latest":
		*e = KafkaConsumePluginAutoOffsetReset(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginAutoOffsetReset: %v", v)
	}
}

type KafkaConsumePluginBootstrapServers struct {
	// A string representing a host name, such as example.com.
	Host string `json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port int64 `json:"port"`
}

func (k *KafkaConsumePluginBootstrapServers) GetHost() string {
	if k == nil {
		return ""
	}
	return k.Host
}

func (k *KafkaConsumePluginBootstrapServers) GetPort() int64 {
	if k == nil {
		return 0
	}
	return k.Port
}

// KafkaConsumePluginCommitStrategy - The strategy to use for committing offsets.
type KafkaConsumePluginCommitStrategy string

const (
	KafkaConsumePluginCommitStrategyAuto KafkaConsumePluginCommitStrategy = "auto"
	KafkaConsumePluginCommitStrategyOff  KafkaConsumePluginCommitStrategy = "off"
)

func (e KafkaConsumePluginCommitStrategy) ToPointer() *KafkaConsumePluginCommitStrategy {
	return &e
}
func (e *KafkaConsumePluginCommitStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "off":
		*e = KafkaConsumePluginCommitStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginCommitStrategy: %v", v)
	}
}

// KafkaConsumePluginMessageDeserializer - The deserializer to use for the consumed messages.
type KafkaConsumePluginMessageDeserializer string

const (
	KafkaConsumePluginMessageDeserializerJSON KafkaConsumePluginMessageDeserializer = "json"
	KafkaConsumePluginMessageDeserializerNoop KafkaConsumePluginMessageDeserializer = "noop"
)

func (e KafkaConsumePluginMessageDeserializer) ToPointer() *KafkaConsumePluginMessageDeserializer {
	return &e
}
func (e *KafkaConsumePluginMessageDeserializer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "noop":
		*e = KafkaConsumePluginMessageDeserializer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginMessageDeserializer: %v", v)
	}
}

// KafkaConsumePluginMode - The mode of operation for the plugin.
type KafkaConsumePluginMode string

const (
	KafkaConsumePluginModeHTTPGet          KafkaConsumePluginMode = "http-get"
	KafkaConsumePluginModeServerSentEvents KafkaConsumePluginMode = "server-sent-events"
	KafkaConsumePluginModeWebsocket        KafkaConsumePluginMode = "websocket"
)

func (e KafkaConsumePluginMode) ToPointer() *KafkaConsumePluginMode {
	return &e
}
func (e *KafkaConsumePluginMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http-get":
		fallthrough
	case "server-sent-events":
		fallthrough
	case "websocket":
		*e = KafkaConsumePluginMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginMode: %v", v)
	}
}

type KafkaConsumePluginBasic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (k *KafkaConsumePluginBasic) GetPassword() string {
	if k == nil {
		return ""
	}
	return k.Password
}

func (k *KafkaConsumePluginBasic) GetUsername() string {
	if k == nil {
		return ""
	}
	return k.Username
}

// KafkaConsumePluginConfigMode - Authentication mode to use with the schema registry.
type KafkaConsumePluginConfigMode string

const (
	KafkaConsumePluginConfigModeBasic KafkaConsumePluginConfigMode = "basic"
	KafkaConsumePluginConfigModeNone  KafkaConsumePluginConfigMode = "none"
)

func (e KafkaConsumePluginConfigMode) ToPointer() *KafkaConsumePluginConfigMode {
	return &e
}
func (e *KafkaConsumePluginConfigMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		*e = KafkaConsumePluginConfigMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigMode: %v", v)
	}
}

type KafkaConsumePluginAuthentication struct {
	Basic *KafkaConsumePluginBasic `json:"basic"`
	// Authentication mode to use with the schema registry.
	Mode *KafkaConsumePluginConfigMode `default:"none" json:"mode"`
}

func (k KafkaConsumePluginAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePluginAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"basic"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePluginAuthentication) GetBasic() *KafkaConsumePluginBasic {
	if k == nil {
		return nil
	}
	return k.Basic
}

func (k *KafkaConsumePluginAuthentication) GetMode() *KafkaConsumePluginConfigMode {
	if k == nil {
		return nil
	}
	return k.Mode
}

type KafkaConsumePluginConfluent struct {
	Authentication KafkaConsumePluginAuthentication `json:"authentication"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `default:"true" json:"ssl_verify"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `default:"null" json:"ttl"`
	// The URL of the schema registry.
	URL *string `default:"null" json:"url"`
}

func (k KafkaConsumePluginConfluent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePluginConfluent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"authentication"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePluginConfluent) GetAuthentication() KafkaConsumePluginAuthentication {
	if k == nil {
		return KafkaConsumePluginAuthentication{}
	}
	return k.Authentication
}

func (k *KafkaConsumePluginConfluent) GetSslVerify() *bool {
	if k == nil {
		return nil
	}
	return k.SslVerify
}

func (k *KafkaConsumePluginConfluent) GetTTL() *float64 {
	if k == nil {
		return nil
	}
	return k.TTL
}

func (k *KafkaConsumePluginConfluent) GetURL() *string {
	if k == nil {
		return nil
	}
	return k.URL
}

// KafkaConsumePluginSchemaRegistry - The plugin-global schema registry configuration.
type KafkaConsumePluginSchemaRegistry struct {
	Confluent *KafkaConsumePluginConfluent `json:"confluent"`
}

func (k *KafkaConsumePluginSchemaRegistry) GetConfluent() *KafkaConsumePluginConfluent {
	if k == nil {
		return nil
	}
	return k.Confluent
}

type KafkaConsumePluginSecurity struct {
	// UUID of certificate entity for mTLS authentication.
	CertificateID *string `default:"null" json:"certificate_id"`
	// Enables TLS.
	Ssl *bool `default:"null" json:"ssl"`
}

func (k KafkaConsumePluginSecurity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePluginSecurity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePluginSecurity) GetCertificateID() *string {
	if k == nil {
		return nil
	}
	return k.CertificateID
}

func (k *KafkaConsumePluginSecurity) GetSsl() *bool {
	if k == nil {
		return nil
	}
	return k.Ssl
}

type KafkaConsumePluginConfigBasic struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (k *KafkaConsumePluginConfigBasic) GetPassword() string {
	if k == nil {
		return ""
	}
	return k.Password
}

func (k *KafkaConsumePluginConfigBasic) GetUsername() string {
	if k == nil {
		return ""
	}
	return k.Username
}

// KafkaConsumePluginConfigTopicsMode - Authentication mode to use with the schema registry.
type KafkaConsumePluginConfigTopicsMode string

const (
	KafkaConsumePluginConfigTopicsModeBasic KafkaConsumePluginConfigTopicsMode = "basic"
	KafkaConsumePluginConfigTopicsModeNone  KafkaConsumePluginConfigTopicsMode = "none"
)

func (e KafkaConsumePluginConfigTopicsMode) ToPointer() *KafkaConsumePluginConfigTopicsMode {
	return &e
}
func (e *KafkaConsumePluginConfigTopicsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		fallthrough
	case "none":
		*e = KafkaConsumePluginConfigTopicsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginConfigTopicsMode: %v", v)
	}
}

type KafkaConsumePluginConfigAuthentication struct {
	Basic *KafkaConsumePluginConfigBasic `json:"basic"`
	// Authentication mode to use with the schema registry.
	Mode *KafkaConsumePluginConfigTopicsMode `default:"none" json:"mode"`
}

func (k KafkaConsumePluginConfigAuthentication) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePluginConfigAuthentication) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"basic"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePluginConfigAuthentication) GetBasic() *KafkaConsumePluginConfigBasic {
	if k == nil {
		return nil
	}
	return k.Basic
}

func (k *KafkaConsumePluginConfigAuthentication) GetMode() *KafkaConsumePluginConfigTopicsMode {
	if k == nil {
		return nil
	}
	return k.Mode
}

type KafkaConsumePluginConfigConfluent struct {
	Authentication KafkaConsumePluginConfigAuthentication `json:"authentication"`
	// Set to false to disable SSL certificate verification when connecting to the schema registry.
	SslVerify *bool `default:"true" json:"ssl_verify"`
	// The TTL in seconds for the schema registry cache.
	TTL *float64 `default:"null" json:"ttl"`
	// The URL of the schema registry.
	URL *string `default:"null" json:"url"`
}

func (k KafkaConsumePluginConfigConfluent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePluginConfigConfluent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"authentication"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePluginConfigConfluent) GetAuthentication() KafkaConsumePluginConfigAuthentication {
	if k == nil {
		return KafkaConsumePluginConfigAuthentication{}
	}
	return k.Authentication
}

func (k *KafkaConsumePluginConfigConfluent) GetSslVerify() *bool {
	if k == nil {
		return nil
	}
	return k.SslVerify
}

func (k *KafkaConsumePluginConfigConfluent) GetTTL() *float64 {
	if k == nil {
		return nil
	}
	return k.TTL
}

func (k *KafkaConsumePluginConfigConfluent) GetURL() *string {
	if k == nil {
		return nil
	}
	return k.URL
}

// KafkaConsumePluginConfigSchemaRegistry - The plugin-global schema registry configuration.
type KafkaConsumePluginConfigSchemaRegistry struct {
	Confluent *KafkaConsumePluginConfigConfluent `json:"confluent"`
}

func (k *KafkaConsumePluginConfigSchemaRegistry) GetConfluent() *KafkaConsumePluginConfigConfluent {
	if k == nil {
		return nil
	}
	return k.Confluent
}

type KafkaConsumePluginTopics struct {
	Name string `json:"name"`
	// The plugin-global schema registry configuration.
	SchemaRegistry KafkaConsumePluginConfigSchemaRegistry `json:"schema_registry"`
}

func (k *KafkaConsumePluginTopics) GetName() string {
	if k == nil {
		return ""
	}
	return k.Name
}

func (k *KafkaConsumePluginTopics) GetSchemaRegistry() KafkaConsumePluginConfigSchemaRegistry {
	if k == nil {
		return KafkaConsumePluginConfigSchemaRegistry{}
	}
	return k.SchemaRegistry
}

type KafkaConsumePluginConfig struct {
	Authentication *Authentication `json:"authentication"`
	// The offset to start from when there is no initial offset in the consumer group.
	AutoOffsetReset *KafkaConsumePluginAutoOffsetReset `default:"latest" json:"auto_offset_reset"`
	// Set of bootstrap brokers in a `{host: host, port: port}` list format.
	BootstrapServers []KafkaConsumePluginBootstrapServers `json:"bootstrap_servers"`
	// An identifier for the Kafka cluster.
	ClusterName *string `default:"null" json:"cluster_name"`
	// The strategy to use for committing offsets.
	CommitStrategy *KafkaConsumePluginCommitStrategy `default:"auto" json:"commit_strategy"`
	// The deserializer to use for the consumed messages.
	MessageDeserializer *KafkaConsumePluginMessageDeserializer `default:"noop" json:"message_deserializer"`
	// The mode of operation for the plugin.
	Mode *KafkaConsumePluginMode `default:"http-get" json:"mode"`
	// The plugin-global schema registry configuration.
	SchemaRegistry *KafkaConsumePluginSchemaRegistry `json:"schema_registry"`
	Security       *KafkaConsumePluginSecurity       `json:"security"`
	// The Kafka topics and their configuration you want to consume from.
	Topics []KafkaConsumePluginTopics `json:"topics"`
}

func (k KafkaConsumePluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"authentication", "bootstrap_servers", "schema_registry", "security", "topics"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePluginConfig) GetAuthentication() *Authentication {
	if k == nil {
		return nil
	}
	return k.Authentication
}

func (k *KafkaConsumePluginConfig) GetAutoOffsetReset() *KafkaConsumePluginAutoOffsetReset {
	if k == nil {
		return nil
	}
	return k.AutoOffsetReset
}

func (k *KafkaConsumePluginConfig) GetBootstrapServers() []KafkaConsumePluginBootstrapServers {
	if k == nil {
		return []KafkaConsumePluginBootstrapServers{}
	}
	return k.BootstrapServers
}

func (k *KafkaConsumePluginConfig) GetClusterName() *string {
	if k == nil {
		return nil
	}
	return k.ClusterName
}

func (k *KafkaConsumePluginConfig) GetCommitStrategy() *KafkaConsumePluginCommitStrategy {
	if k == nil {
		return nil
	}
	return k.CommitStrategy
}

func (k *KafkaConsumePluginConfig) GetMessageDeserializer() *KafkaConsumePluginMessageDeserializer {
	if k == nil {
		return nil
	}
	return k.MessageDeserializer
}

func (k *KafkaConsumePluginConfig) GetMode() *KafkaConsumePluginMode {
	if k == nil {
		return nil
	}
	return k.Mode
}

func (k *KafkaConsumePluginConfig) GetSchemaRegistry() *KafkaConsumePluginSchemaRegistry {
	if k == nil {
		return nil
	}
	return k.SchemaRegistry
}

func (k *KafkaConsumePluginConfig) GetSecurity() *KafkaConsumePluginSecurity {
	if k == nil {
		return nil
	}
	return k.Security
}

func (k *KafkaConsumePluginConfig) GetTopics() []KafkaConsumePluginTopics {
	if k == nil {
		return []KafkaConsumePluginTopics{}
	}
	return k.Topics
}

// KafkaConsumePluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type KafkaConsumePluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (k *KafkaConsumePluginConsumer) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

type KafkaConsumePluginProtocols string

const (
	KafkaConsumePluginProtocolsGrpc  KafkaConsumePluginProtocols = "grpc"
	KafkaConsumePluginProtocolsGrpcs KafkaConsumePluginProtocols = "grpcs"
	KafkaConsumePluginProtocolsHTTP  KafkaConsumePluginProtocols = "http"
	KafkaConsumePluginProtocolsHTTPS KafkaConsumePluginProtocols = "https"
	KafkaConsumePluginProtocolsWs    KafkaConsumePluginProtocols = "ws"
	KafkaConsumePluginProtocolsWss   KafkaConsumePluginProtocols = "wss"
)

func (e KafkaConsumePluginProtocols) ToPointer() *KafkaConsumePluginProtocols {
	return &e
}
func (e *KafkaConsumePluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = KafkaConsumePluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaConsumePluginProtocols: %v", v)
	}
}

// KafkaConsumePluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type KafkaConsumePluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (k *KafkaConsumePluginRoute) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

// KafkaConsumePluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type KafkaConsumePluginService struct {
	ID *string `json:"id,omitempty"`
}

func (k *KafkaConsumePluginService) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

// KafkaConsumePlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type KafkaConsumePlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                     `default:"null" json:"instance_name"`
	name         string                      `const:"kafka-consume" json:"name"`
	Ordering     *KafkaConsumePluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []KafkaConsumePluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                   `json:"updated_at,omitempty"`
	Config    KafkaConsumePluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *KafkaConsumePluginConsumer `json:"consumer"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []KafkaConsumePluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *KafkaConsumePluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *KafkaConsumePluginService `json:"service"`
}

func (k KafkaConsumePlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(k, "", false)
}

func (k *KafkaConsumePlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &k, "", false, []string{"name", "ordering", "partials", "tags", "config", "consumer", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (k *KafkaConsumePlugin) GetCreatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.CreatedAt
}

func (k *KafkaConsumePlugin) GetEnabled() *bool {
	if k == nil {
		return nil
	}
	return k.Enabled
}

func (k *KafkaConsumePlugin) GetID() *string {
	if k == nil {
		return nil
	}
	return k.ID
}

func (k *KafkaConsumePlugin) GetInstanceName() *string {
	if k == nil {
		return nil
	}
	return k.InstanceName
}

func (k *KafkaConsumePlugin) GetName() string {
	return "kafka-consume"
}

func (k *KafkaConsumePlugin) GetOrdering() *KafkaConsumePluginOrdering {
	if k == nil {
		return nil
	}
	return k.Ordering
}

func (k *KafkaConsumePlugin) GetPartials() []KafkaConsumePluginPartials {
	if k == nil {
		return nil
	}
	return k.Partials
}

func (k *KafkaConsumePlugin) GetTags() []string {
	if k == nil {
		return nil
	}
	return k.Tags
}

func (k *KafkaConsumePlugin) GetUpdatedAt() *int64 {
	if k == nil {
		return nil
	}
	return k.UpdatedAt
}

func (k *KafkaConsumePlugin) GetConfig() KafkaConsumePluginConfig {
	if k == nil {
		return KafkaConsumePluginConfig{}
	}
	return k.Config
}

func (k *KafkaConsumePlugin) GetConsumer() *KafkaConsumePluginConsumer {
	if k == nil {
		return nil
	}
	return k.Consumer
}

func (k *KafkaConsumePlugin) GetProtocols() []KafkaConsumePluginProtocols {
	if k == nil {
		return nil
	}
	return k.Protocols
}

func (k *KafkaConsumePlugin) GetRoute() *KafkaConsumePluginRoute {
	if k == nil {
		return nil
	}
	return k.Route
}

func (k *KafkaConsumePlugin) GetService() *KafkaConsumePluginService {
	if k == nil {
		return nil
	}
	return k.Service
}
