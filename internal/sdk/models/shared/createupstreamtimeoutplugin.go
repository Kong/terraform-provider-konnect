// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateUpstreamTimeoutPluginConfig struct {
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginConfig) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *CreateUpstreamTimeoutPluginConfig) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *CreateUpstreamTimeoutPluginConfig) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

type CreateUpstreamTimeoutPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateUpstreamTimeoutPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateUpstreamTimeoutPluginOrdering struct {
	After  *CreateUpstreamTimeoutPluginAfter  `json:"after,omitempty"`
	Before *CreateUpstreamTimeoutPluginBefore `json:"before,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginOrdering) GetAfter() *CreateUpstreamTimeoutPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateUpstreamTimeoutPluginOrdering) GetBefore() *CreateUpstreamTimeoutPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateUpstreamTimeoutPluginProtocols string

const (
	CreateUpstreamTimeoutPluginProtocolsGrpc           CreateUpstreamTimeoutPluginProtocols = "grpc"
	CreateUpstreamTimeoutPluginProtocolsGrpcs          CreateUpstreamTimeoutPluginProtocols = "grpcs"
	CreateUpstreamTimeoutPluginProtocolsHTTP           CreateUpstreamTimeoutPluginProtocols = "http"
	CreateUpstreamTimeoutPluginProtocolsHTTPS          CreateUpstreamTimeoutPluginProtocols = "https"
	CreateUpstreamTimeoutPluginProtocolsTCP            CreateUpstreamTimeoutPluginProtocols = "tcp"
	CreateUpstreamTimeoutPluginProtocolsTLS            CreateUpstreamTimeoutPluginProtocols = "tls"
	CreateUpstreamTimeoutPluginProtocolsTLSPassthrough CreateUpstreamTimeoutPluginProtocols = "tls_passthrough"
	CreateUpstreamTimeoutPluginProtocolsUDP            CreateUpstreamTimeoutPluginProtocols = "udp"
	CreateUpstreamTimeoutPluginProtocolsWs             CreateUpstreamTimeoutPluginProtocols = "ws"
	CreateUpstreamTimeoutPluginProtocolsWss            CreateUpstreamTimeoutPluginProtocols = "wss"
)

func (e CreateUpstreamTimeoutPluginProtocols) ToPointer() *CreateUpstreamTimeoutPluginProtocols {
	return &e
}
func (e *CreateUpstreamTimeoutPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateUpstreamTimeoutPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateUpstreamTimeoutPluginProtocols: %v", v)
	}
}

// CreateUpstreamTimeoutPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateUpstreamTimeoutPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateUpstreamTimeoutPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateUpstreamTimeoutPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateUpstreamTimeoutPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateUpstreamTimeoutPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateUpstreamTimeoutPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateUpstreamTimeoutPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateUpstreamTimeoutPlugin struct {
	Config *CreateUpstreamTimeoutPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                `json:"enabled,omitempty"`
	InstanceName *string                              `json:"instance_name,omitempty"`
	name         *string                              `const:"upstream-timeout" json:"name,omitempty"`
	Ordering     *CreateUpstreamTimeoutPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateUpstreamTimeoutPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateUpstreamTimeoutPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateUpstreamTimeoutPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateUpstreamTimeoutPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateUpstreamTimeoutPluginService `json:"service,omitempty"`
}

func (c CreateUpstreamTimeoutPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateUpstreamTimeoutPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateUpstreamTimeoutPlugin) GetConfig() *CreateUpstreamTimeoutPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateUpstreamTimeoutPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateUpstreamTimeoutPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateUpstreamTimeoutPlugin) GetName() *string {
	return types.String("upstream-timeout")
}

func (o *CreateUpstreamTimeoutPlugin) GetOrdering() *CreateUpstreamTimeoutPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateUpstreamTimeoutPlugin) GetProtocols() []CreateUpstreamTimeoutPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateUpstreamTimeoutPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateUpstreamTimeoutPlugin) GetConsumer() *CreateUpstreamTimeoutPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateUpstreamTimeoutPlugin) GetConsumerGroup() *CreateUpstreamTimeoutPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateUpstreamTimeoutPlugin) GetRoute() *CreateUpstreamTimeoutPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateUpstreamTimeoutPlugin) GetService() *CreateUpstreamTimeoutPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
