// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
	"time"
)

type PortalCustomDomainSSL struct {
	DomainVerificationMethod PortalCustomDomainVerificationMethod `json:"domain_verification_method"`
	VerificationStatus       PortalCustomDomainVerificationStatus `json:"verification_status"`
	ValidationErrors         []string                             `json:"validation_errors,omitempty"`
	// An ISO-8601 timestamp representation of the ssl certificate upload date.
	UploadedAt *time.Time `json:"uploaded_at,omitempty"`
	// An ISO-8601 timestamp representation of the ssl certificate expiration date.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// True when the provided certificate chain is served as-is without validation against a public trust store.
	//
	SkipCaCheck *bool `json:"skip_ca_check,omitempty"`
}

func (p PortalCustomDomainSSL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortalCustomDomainSSL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"domain_verification_method", "verification_status"}); err != nil {
		return err
	}
	return nil
}

func (p *PortalCustomDomainSSL) GetDomainVerificationMethod() PortalCustomDomainVerificationMethod {
	if p == nil {
		return PortalCustomDomainVerificationMethod("")
	}
	return p.DomainVerificationMethod
}

func (p *PortalCustomDomainSSL) GetVerificationStatus() PortalCustomDomainVerificationStatus {
	if p == nil {
		return PortalCustomDomainVerificationStatus("")
	}
	return p.VerificationStatus
}

func (p *PortalCustomDomainSSL) GetValidationErrors() []string {
	if p == nil {
		return nil
	}
	return p.ValidationErrors
}

func (p *PortalCustomDomainSSL) GetUploadedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.UploadedAt
}

func (p *PortalCustomDomainSSL) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PortalCustomDomainSSL) GetSkipCaCheck() *bool {
	if p == nil {
		return nil
	}
	return p.SkipCaCheck
}
