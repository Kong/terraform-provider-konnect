// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type OktaDcrConfig struct {
	// This secret should be copied from your identity provider's settings after you create a client
	// and assign it as the management client for DCR for this developer portal
	//
	DcrToken *string `json:"dcr_token,omitempty"`
}

func (o *OktaDcrConfig) GetDcrToken() *string {
	if o == nil {
		return nil
	}
	return o.DcrToken
}

// Okta - Payload to update an Okta DCR provider.
type Okta struct {
	// The name of the DCR provider. This is used to identify the DCR provider in the Konnect UI.
	//
	Name *string `json:"name,omitempty"`
	// The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
	//
	DisplayName *string `json:"display_name,omitempty"`
	Issuer      *string `json:"issuer,omitempty"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Labels are intended to store **INTERNAL** metadata.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels    map[string]string `json:"labels,omitempty"`
	DcrConfig *OktaDcrConfig    `json:"dcr_config,omitempty"`
}

func (o *Okta) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Okta) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Okta) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *Okta) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *Okta) GetDcrConfig() *OktaDcrConfig {
	if o == nil {
		return nil
	}
	return o.DcrConfig
}
