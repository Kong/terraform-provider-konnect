// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
	"time"
)

// State of the data-plane group.
type State string

const (
	StateCreated      State = "created"
	StateInitializing State = "initializing"
	StateReady        State = "ready"
	StateTerminating  State = "terminating"
	StateTerminated   State = "terminated"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "initializing":
		fallthrough
	case "ready":
		fallthrough
	case "terminating":
		fallthrough
	case "terminated":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

// StateMetadata - Metadata describing the backing state of the dataplane group and why it may be in an erroneous state.
type StateMetadata struct {
	// Reported status of the dataplane group from backing infrastructure.
	ReportedStatus *string `default:"null" json:"reported_status"`
	// Reason why the dataplane group may be in an erroneous state, reported from backing infrastructure.
	//
	Reason *string `default:"null" json:"reason"`
}

func (s StateMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *StateMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *StateMetadata) GetReportedStatus() *string {
	if s == nil {
		return nil
	}
	return s.ReportedStatus
}

func (s *StateMetadata) GetReason() *string {
	if s == nil {
		return nil
	}
	return s.Reason
}

// ConfigurationDataPlaneGroup - Object that describes the set of data-plane groups currently pointed to this configuration.
type ConfigurationDataPlaneGroup struct {
	// ID of the data-plane group that represents a deployment target for a set of data-planes.
	ID string `json:"id"`
	// Name of cloud provider.
	Provider ProviderName `json:"provider"`
	// Region ID for cloud provider region.
	Region    string                               `json:"region"`
	Autoscale ConfigurationDataPlaneGroupAutoscale `json:"autoscale"`
	// Array of environment variables to set for a data-plane group.
	Environment           []ConfigurationDataPlaneGroupEnvironmentField `json:"environment,omitempty"`
	CloudGatewayNetworkID string                                        `json:"cloud_gateway_network_id"`
	// State of the data-plane group.
	State State `json:"state"`
	// Metadata describing the backing state of the dataplane group and why it may be in an erroneous state.
	//
	StateMetadata *StateMetadata `json:"state_metadata,omitempty"`
	// List of private IP addresses of the internal load balancer that proxies traffic to this data-plane group.
	//
	PrivateIPAddresses []string `json:"private_ip_addresses"`
	// List of egress IP addresses for the network that this data-plane group runs on.
	//
	EgressIPAddresses []string `json:"egress_ip_addresses"`
	// An RFC-3339 timestamp representation of data-plane group creation date.
	CreatedAt time.Time `json:"created_at"`
	// An RFC-3339 timestamp representation of data-plane group update date.
	UpdatedAt time.Time `json:"updated_at"`
}

func (c ConfigurationDataPlaneGroup) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ConfigurationDataPlaneGroup) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "provider", "region", "autoscale", "cloud_gateway_network_id", "state", "created_at", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (c *ConfigurationDataPlaneGroup) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *ConfigurationDataPlaneGroup) GetProvider() ProviderName {
	if c == nil {
		return ProviderName("")
	}
	return c.Provider
}

func (c *ConfigurationDataPlaneGroup) GetRegion() string {
	if c == nil {
		return ""
	}
	return c.Region
}

func (c *ConfigurationDataPlaneGroup) GetAutoscale() ConfigurationDataPlaneGroupAutoscale {
	if c == nil {
		return ConfigurationDataPlaneGroupAutoscale{}
	}
	return c.Autoscale
}

func (c *ConfigurationDataPlaneGroup) GetEnvironment() []ConfigurationDataPlaneGroupEnvironmentField {
	if c == nil {
		return nil
	}
	return c.Environment
}

func (c *ConfigurationDataPlaneGroup) GetCloudGatewayNetworkID() string {
	if c == nil {
		return ""
	}
	return c.CloudGatewayNetworkID
}

func (c *ConfigurationDataPlaneGroup) GetState() State {
	if c == nil {
		return State("")
	}
	return c.State
}

func (c *ConfigurationDataPlaneGroup) GetStateMetadata() *StateMetadata {
	if c == nil {
		return nil
	}
	return c.StateMetadata
}

func (c *ConfigurationDataPlaneGroup) GetPrivateIPAddresses() []string {
	if c == nil {
		return nil
	}
	return c.PrivateIPAddresses
}

func (c *ConfigurationDataPlaneGroup) GetEgressIPAddresses() []string {
	if c == nil {
		return nil
	}
	return c.EgressIPAddresses
}

func (c *ConfigurationDataPlaneGroup) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ConfigurationDataPlaneGroup) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}
