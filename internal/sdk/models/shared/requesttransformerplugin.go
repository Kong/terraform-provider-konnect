// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type RequestTransformerPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (r *RequestTransformerPluginAfter) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RequestTransformerPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (r *RequestTransformerPluginBefore) GetAccess() []string {
	if r == nil {
		return nil
	}
	return r.Access
}

type RequestTransformerPluginOrdering struct {
	After  *RequestTransformerPluginAfter  `json:"after,omitempty"`
	Before *RequestTransformerPluginBefore `json:"before,omitempty"`
}

func (r *RequestTransformerPluginOrdering) GetAfter() *RequestTransformerPluginAfter {
	if r == nil {
		return nil
	}
	return r.After
}

func (r *RequestTransformerPluginOrdering) GetBefore() *RequestTransformerPluginBefore {
	if r == nil {
		return nil
	}
	return r.Before
}

type RequestTransformerPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (r *RequestTransformerPluginPartials) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RequestTransformerPluginPartials) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RequestTransformerPluginPartials) GetPath() *string {
	if r == nil {
		return nil
	}
	return r.Path
}

type Add struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
}

func (a *Add) GetBody() []string {
	if a == nil {
		return nil
	}
	return a.Body
}

func (a *Add) GetHeaders() []string {
	if a == nil {
		return nil
	}
	return a.Headers
}

func (a *Add) GetQuerystring() []string {
	if a == nil {
		return nil
	}
	return a.Querystring
}

type Append struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
}

func (a *Append) GetBody() []string {
	if a == nil {
		return nil
	}
	return a.Body
}

func (a *Append) GetHeaders() []string {
	if a == nil {
		return nil
	}
	return a.Headers
}

func (a *Append) GetQuerystring() []string {
	if a == nil {
		return nil
	}
	return a.Querystring
}

type Remove struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
}

func (r *Remove) GetBody() []string {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *Remove) GetHeaders() []string {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *Remove) GetQuerystring() []string {
	if r == nil {
		return nil
	}
	return r.Querystring
}

type Rename struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
}

func (r *Rename) GetBody() []string {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *Rename) GetHeaders() []string {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *Rename) GetQuerystring() []string {
	if r == nil {
		return nil
	}
	return r.Querystring
}

type Replace struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
	URI         *string  `default:"null" json:"uri"`
}

func (r Replace) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Replace) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *Replace) GetBody() []string {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *Replace) GetHeaders() []string {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *Replace) GetQuerystring() []string {
	if r == nil {
		return nil
	}
	return r.Querystring
}

func (r *Replace) GetURI() *string {
	if r == nil {
		return nil
	}
	return r.URI
}

type RequestTransformerPluginConfig struct {
	Add    *Add    `json:"add,omitempty"`
	Append *Append `json:"append,omitempty"`
	// A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
	HTTPMethod *string  `default:"null" json:"http_method"`
	Remove     *Remove  `json:"remove,omitempty"`
	Rename     *Rename  `json:"rename,omitempty"`
	Replace    *Replace `json:"replace,omitempty"`
}

func (r RequestTransformerPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestTransformerPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RequestTransformerPluginConfig) GetAdd() *Add {
	if r == nil {
		return nil
	}
	return r.Add
}

func (r *RequestTransformerPluginConfig) GetAppend() *Append {
	if r == nil {
		return nil
	}
	return r.Append
}

func (r *RequestTransformerPluginConfig) GetHTTPMethod() *string {
	if r == nil {
		return nil
	}
	return r.HTTPMethod
}

func (r *RequestTransformerPluginConfig) GetRemove() *Remove {
	if r == nil {
		return nil
	}
	return r.Remove
}

func (r *RequestTransformerPluginConfig) GetRename() *Rename {
	if r == nil {
		return nil
	}
	return r.Rename
}

func (r *RequestTransformerPluginConfig) GetReplace() *Replace {
	if r == nil {
		return nil
	}
	return r.Replace
}

// RequestTransformerPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RequestTransformerPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestTransformerPluginConsumer) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestTransformerPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type RequestTransformerPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestTransformerPluginConsumerGroup) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestTransformerPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type RequestTransformerPluginProtocols string

const (
	RequestTransformerPluginProtocolsGrpc           RequestTransformerPluginProtocols = "grpc"
	RequestTransformerPluginProtocolsGrpcs          RequestTransformerPluginProtocols = "grpcs"
	RequestTransformerPluginProtocolsHTTP           RequestTransformerPluginProtocols = "http"
	RequestTransformerPluginProtocolsHTTPS          RequestTransformerPluginProtocols = "https"
	RequestTransformerPluginProtocolsTCP            RequestTransformerPluginProtocols = "tcp"
	RequestTransformerPluginProtocolsTLS            RequestTransformerPluginProtocols = "tls"
	RequestTransformerPluginProtocolsTLSPassthrough RequestTransformerPluginProtocols = "tls_passthrough"
	RequestTransformerPluginProtocolsUDP            RequestTransformerPluginProtocols = "udp"
	RequestTransformerPluginProtocolsWs             RequestTransformerPluginProtocols = "ws"
	RequestTransformerPluginProtocolsWss            RequestTransformerPluginProtocols = "wss"
)

func (e RequestTransformerPluginProtocols) ToPointer() *RequestTransformerPluginProtocols {
	return &e
}
func (e *RequestTransformerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = RequestTransformerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestTransformerPluginProtocols: %v", v)
	}
}

// RequestTransformerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type RequestTransformerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestTransformerPluginRoute) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestTransformerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RequestTransformerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (r *RequestTransformerPluginService) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

// RequestTransformerPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type RequestTransformerPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                           `default:"null" json:"instance_name"`
	name         string                            `const:"request-transformer" json:"name"`
	Ordering     *RequestTransformerPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []RequestTransformerPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                          `json:"updated_at,omitempty"`
	Config    *RequestTransformerPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *RequestTransformerPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *RequestTransformerPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing protocols.
	Protocols []RequestTransformerPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *RequestTransformerPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RequestTransformerPluginService `json:"service"`
}

func (r RequestTransformerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestTransformerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"name", "ordering", "partials", "tags", "config", "consumer", "consumer_group", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (r *RequestTransformerPlugin) GetCreatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RequestTransformerPlugin) GetEnabled() *bool {
	if r == nil {
		return nil
	}
	return r.Enabled
}

func (r *RequestTransformerPlugin) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RequestTransformerPlugin) GetInstanceName() *string {
	if r == nil {
		return nil
	}
	return r.InstanceName
}

func (r *RequestTransformerPlugin) GetName() string {
	return "request-transformer"
}

func (r *RequestTransformerPlugin) GetOrdering() *RequestTransformerPluginOrdering {
	if r == nil {
		return nil
	}
	return r.Ordering
}

func (r *RequestTransformerPlugin) GetPartials() []RequestTransformerPluginPartials {
	if r == nil {
		return nil
	}
	return r.Partials
}

func (r *RequestTransformerPlugin) GetTags() []string {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *RequestTransformerPlugin) GetUpdatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}

func (r *RequestTransformerPlugin) GetConfig() *RequestTransformerPluginConfig {
	if r == nil {
		return nil
	}
	return r.Config
}

func (r *RequestTransformerPlugin) GetConsumer() *RequestTransformerPluginConsumer {
	if r == nil {
		return nil
	}
	return r.Consumer
}

func (r *RequestTransformerPlugin) GetConsumerGroup() *RequestTransformerPluginConsumerGroup {
	if r == nil {
		return nil
	}
	return r.ConsumerGroup
}

func (r *RequestTransformerPlugin) GetProtocols() []RequestTransformerPluginProtocols {
	if r == nil {
		return nil
	}
	return r.Protocols
}

func (r *RequestTransformerPlugin) GetRoute() *RequestTransformerPluginRoute {
	if r == nil {
		return nil
	}
	return r.Route
}

func (r *RequestTransformerPlugin) GetService() *RequestTransformerPluginService {
	if r == nil {
		return nil
	}
	return r.Service
}
