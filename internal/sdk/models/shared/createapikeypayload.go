// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CreateAPIKeyPayloadType string

const (
	CreateAPIKeyPayloadTypeNew    CreateAPIKeyPayloadType = "new"
	CreateAPIKeyPayloadTypeLegacy CreateAPIKeyPayloadType = "legacy"
)

func (e CreateAPIKeyPayloadType) ToPointer() *CreateAPIKeyPayloadType {
	return &e
}
func (e *CreateAPIKeyPayloadType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "legacy":
		*e = CreateAPIKeyPayloadType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAPIKeyPayloadType: %v", v)
	}
}

type CreateAPIKeyPayload struct {
	Type CreateAPIKeyPayloadType `json:"type"`
	// secret to be created. Must be unique within the realm. If not specified a secret will be automatically generated.
	Secret *string  `json:"secret,omitempty"`
	Tags   []string `json:"tags,omitempty"`
}

func (o *CreateAPIKeyPayload) GetType() CreateAPIKeyPayloadType {
	if o == nil {
		return CreateAPIKeyPayloadType("")
	}
	return o.Type
}

func (o *CreateAPIKeyPayload) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateAPIKeyPayload) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
