// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

// NameidFormat - The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`
type NameidFormat string

const (
	NameidFormatUnspecified  NameidFormat = "Unspecified"
	NameidFormatEmailAddress NameidFormat = "EmailAddress"
	NameidFormatPersistent   NameidFormat = "Persistent"
	NameidFormatTransient    NameidFormat = "Transient"
)

func (e NameidFormat) ToPointer() *NameidFormat {
	return &e
}
func (e *NameidFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unspecified":
		fallthrough
	case "EmailAddress":
		fallthrough
	case "Persistent":
		fallthrough
	case "Transient":
		*e = NameidFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameidFormat: %v", v)
	}
}

type SamlPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `json:"ip,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (o *SamlPluginClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *SamlPluginClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

type SamlPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
}

func (o *SamlPluginSentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *SamlPluginSentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// SamlPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type SamlPluginSentinelRole string

const (
	SamlPluginSentinelRoleMaster SamlPluginSentinelRole = "master"
	SamlPluginSentinelRoleSlave  SamlPluginSentinelRole = "slave"
	SamlPluginSentinelRoleAny    SamlPluginSentinelRole = "any"
)

func (e SamlPluginSentinelRole) ToPointer() *SamlPluginSentinelRole {
	return &e
}
func (e *SamlPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "master":
		fallthrough
	case "slave":
		fallthrough
	case "any":
		*e = SamlPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlPluginSentinelRole: %v", v)
	}
}

type SamlPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `json:"cluster_max_redirections,omitempty"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []SamlPluginClusterNodes `json:"cluster_nodes,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `json:"connect_timeout,omitempty"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `json:"connection_is_proxied,omitempty"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `json:"database,omitempty"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `json:"keepalive_backlog,omitempty"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `json:"keepalive_pool_size,omitempty"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `json:"password,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `json:"port,omitempty"`
	// The Redis session key prefix.
	Prefix *string `json:"prefix,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `json:"read_timeout,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `json:"send_timeout,omitempty"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `json:"sentinel_master,omitempty"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []SamlPluginSentinelNodes `json:"sentinel_nodes,omitempty"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `json:"sentinel_password,omitempty"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *SamlPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `json:"sentinel_username,omitempty"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `json:"server_name,omitempty"`
	// The Redis unix socket path.
	Socket *string `json:"socket,omitempty"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `json:"ssl,omitempty"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `json:"ssl_verify,omitempty"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `json:"username,omitempty"`
}

func (o *SamlPluginRedis) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *SamlPluginRedis) GetClusterNodes() []SamlPluginClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *SamlPluginRedis) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *SamlPluginRedis) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *SamlPluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *SamlPluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *SamlPluginRedis) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *SamlPluginRedis) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *SamlPluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *SamlPluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *SamlPluginRedis) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *SamlPluginRedis) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *SamlPluginRedis) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *SamlPluginRedis) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *SamlPluginRedis) GetSentinelNodes() []SamlPluginSentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *SamlPluginRedis) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *SamlPluginRedis) GetSentinelRole() *SamlPluginSentinelRole {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *SamlPluginRedis) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *SamlPluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *SamlPluginRedis) GetSocket() *string {
	if o == nil {
		return nil
	}
	return o.Socket
}

func (o *SamlPluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *SamlPluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *SamlPluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// RequestDigestAlgorithm - The digest algorithm for Authn requests: - `SHA256` - `SHA1`
type RequestDigestAlgorithm string

const (
	RequestDigestAlgorithmSha256 RequestDigestAlgorithm = "SHA256"
	RequestDigestAlgorithmSha1   RequestDigestAlgorithm = "SHA1"
)

func (e RequestDigestAlgorithm) ToPointer() *RequestDigestAlgorithm {
	return &e
}
func (e *RequestDigestAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHA256":
		fallthrough
	case "SHA1":
		*e = RequestDigestAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestDigestAlgorithm: %v", v)
	}
}

// RequestSignatureAlgorithm - The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`
type RequestSignatureAlgorithm string

const (
	RequestSignatureAlgorithmSha256 RequestSignatureAlgorithm = "SHA256"
	RequestSignatureAlgorithmSha384 RequestSignatureAlgorithm = "SHA384"
	RequestSignatureAlgorithmSha512 RequestSignatureAlgorithm = "SHA512"
)

func (e RequestSignatureAlgorithm) ToPointer() *RequestSignatureAlgorithm {
	return &e
}
func (e *RequestSignatureAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHA256":
		fallthrough
	case "SHA384":
		fallthrough
	case "SHA512":
		*e = RequestSignatureAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestSignatureAlgorithm: %v", v)
	}
}

// ResponseDigestAlgorithm - The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`
type ResponseDigestAlgorithm string

const (
	ResponseDigestAlgorithmSha256 ResponseDigestAlgorithm = "SHA256"
	ResponseDigestAlgorithmSha1   ResponseDigestAlgorithm = "SHA1"
)

func (e ResponseDigestAlgorithm) ToPointer() *ResponseDigestAlgorithm {
	return &e
}
func (e *ResponseDigestAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHA256":
		fallthrough
	case "SHA1":
		*e = ResponseDigestAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseDigestAlgorithm: %v", v)
	}
}

// ResponseSignatureAlgorithm - The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`
type ResponseSignatureAlgorithm string

const (
	ResponseSignatureAlgorithmSha256 ResponseSignatureAlgorithm = "SHA256"
	ResponseSignatureAlgorithmSha384 ResponseSignatureAlgorithm = "SHA384"
	ResponseSignatureAlgorithmSha512 ResponseSignatureAlgorithm = "SHA512"
)

func (e ResponseSignatureAlgorithm) ToPointer() *ResponseSignatureAlgorithm {
	return &e
}
func (e *ResponseSignatureAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SHA256":
		fallthrough
	case "SHA384":
		fallthrough
	case "SHA512":
		*e = ResponseSignatureAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseSignatureAlgorithm: %v", v)
	}
}

// SamlPluginSessionCookieSameSite - Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks.
type SamlPluginSessionCookieSameSite string

const (
	SamlPluginSessionCookieSameSiteStrict  SamlPluginSessionCookieSameSite = "Strict"
	SamlPluginSessionCookieSameSiteLax     SamlPluginSessionCookieSameSite = "Lax"
	SamlPluginSessionCookieSameSiteNone    SamlPluginSessionCookieSameSite = "None"
	SamlPluginSessionCookieSameSiteDefault SamlPluginSessionCookieSameSite = "Default"
)

func (e SamlPluginSessionCookieSameSite) ToPointer() *SamlPluginSessionCookieSameSite {
	return &e
}
func (e *SamlPluginSessionCookieSameSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Strict":
		fallthrough
	case "Lax":
		fallthrough
	case "None":
		fallthrough
	case "Default":
		*e = SamlPluginSessionCookieSameSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlPluginSessionCookieSameSite: %v", v)
	}
}

type SamlPluginSessionRequestHeaders string

const (
	SamlPluginSessionRequestHeadersID              SamlPluginSessionRequestHeaders = "id"
	SamlPluginSessionRequestHeadersAudience        SamlPluginSessionRequestHeaders = "audience"
	SamlPluginSessionRequestHeadersSubject         SamlPluginSessionRequestHeaders = "subject"
	SamlPluginSessionRequestHeadersTimeout         SamlPluginSessionRequestHeaders = "timeout"
	SamlPluginSessionRequestHeadersIdlingTimeout   SamlPluginSessionRequestHeaders = "idling-timeout"
	SamlPluginSessionRequestHeadersRollingTimeout  SamlPluginSessionRequestHeaders = "rolling-timeout"
	SamlPluginSessionRequestHeadersAbsoluteTimeout SamlPluginSessionRequestHeaders = "absolute-timeout"
)

func (e SamlPluginSessionRequestHeaders) ToPointer() *SamlPluginSessionRequestHeaders {
	return &e
}
func (e *SamlPluginSessionRequestHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "audience":
		fallthrough
	case "subject":
		fallthrough
	case "timeout":
		fallthrough
	case "idling-timeout":
		fallthrough
	case "rolling-timeout":
		fallthrough
	case "absolute-timeout":
		*e = SamlPluginSessionRequestHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlPluginSessionRequestHeaders: %v", v)
	}
}

type SamlPluginSessionResponseHeaders string

const (
	SamlPluginSessionResponseHeadersID              SamlPluginSessionResponseHeaders = "id"
	SamlPluginSessionResponseHeadersAudience        SamlPluginSessionResponseHeaders = "audience"
	SamlPluginSessionResponseHeadersSubject         SamlPluginSessionResponseHeaders = "subject"
	SamlPluginSessionResponseHeadersTimeout         SamlPluginSessionResponseHeaders = "timeout"
	SamlPluginSessionResponseHeadersIdlingTimeout   SamlPluginSessionResponseHeaders = "idling-timeout"
	SamlPluginSessionResponseHeadersRollingTimeout  SamlPluginSessionResponseHeaders = "rolling-timeout"
	SamlPluginSessionResponseHeadersAbsoluteTimeout SamlPluginSessionResponseHeaders = "absolute-timeout"
)

func (e SamlPluginSessionResponseHeaders) ToPointer() *SamlPluginSessionResponseHeaders {
	return &e
}
func (e *SamlPluginSessionResponseHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "audience":
		fallthrough
	case "subject":
		fallthrough
	case "timeout":
		fallthrough
	case "idling-timeout":
		fallthrough
	case "rolling-timeout":
		fallthrough
	case "absolute-timeout":
		*e = SamlPluginSessionResponseHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlPluginSessionResponseHeaders: %v", v)
	}
}

// SamlPluginSessionStorage - The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis
type SamlPluginSessionStorage string

const (
	SamlPluginSessionStorageCookie    SamlPluginSessionStorage = "cookie"
	SamlPluginSessionStorageMemcache  SamlPluginSessionStorage = "memcache"
	SamlPluginSessionStorageMemcached SamlPluginSessionStorage = "memcached"
	SamlPluginSessionStorageRedis     SamlPluginSessionStorage = "redis"
)

func (e SamlPluginSessionStorage) ToPointer() *SamlPluginSessionStorage {
	return &e
}
func (e *SamlPluginSessionStorage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cookie":
		fallthrough
	case "memcache":
		fallthrough
	case "memcached":
		fallthrough
	case "redis":
		*e = SamlPluginSessionStorage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlPluginSessionStorage: %v", v)
	}
}

type SamlPluginConfig struct {
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.
	Anonymous *string `json:"anonymous,omitempty"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	AssertionConsumerPath *string `json:"assertion_consumer_path,omitempty"`
	// The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.
	IdpCertificate *string `json:"idp_certificate,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	IdpSsoURL *string `json:"idp_sso_url,omitempty"`
	// The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.
	Issuer *string `json:"issuer,omitempty"`
	// The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`
	NameidFormat *NameidFormat    `json:"nameid_format,omitempty"`
	Redis        *SamlPluginRedis `json:"redis,omitempty"`
	// The digest algorithm for Authn requests: - `SHA256` - `SHA1`
	RequestDigestAlgorithm *RequestDigestAlgorithm `json:"request_digest_algorithm,omitempty"`
	// The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`
	RequestSignatureAlgorithm *RequestSignatureAlgorithm `json:"request_signature_algorithm,omitempty"`
	// The certificate for signing requests.
	RequestSigningCertificate *string `json:"request_signing_certificate,omitempty"`
	// The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.
	RequestSigningKey *string `json:"request_signing_key,omitempty"`
	// The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`
	ResponseDigestAlgorithm *ResponseDigestAlgorithm `json:"response_digest_algorithm,omitempty"`
	// The private encryption key required to decrypt encrypted assertions.
	ResponseEncryptionKey *string `json:"response_encryption_key,omitempty"`
	// The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`
	ResponseSignatureAlgorithm *ResponseSignatureAlgorithm `json:"response_signature_algorithm,omitempty"`
	// The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
	SessionAbsoluteTimeout *float64 `json:"session_absolute_timeout,omitempty"`
	// The session audience, for example "my-application"
	SessionAudience *string `json:"session_audience,omitempty"`
	// The session cookie domain flag.
	SessionCookieDomain *string `json:"session_cookie_domain,omitempty"`
	// Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
	SessionCookieHTTPOnly *bool `json:"session_cookie_http_only,omitempty"`
	// The session cookie name.
	SessionCookieName *string `json:"session_cookie_name,omitempty"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	SessionCookiePath *string `json:"session_cookie_path,omitempty"`
	// Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks.
	SessionCookieSameSite *SamlPluginSessionCookieSameSite `json:"session_cookie_same_site,omitempty"`
	// The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
	SessionCookieSecure *bool `json:"session_cookie_secure,omitempty"`
	// When set to `true`, audiences are forced to share the same subject.
	SessionEnforceSameSubject *bool `json:"session_enforce_same_subject,omitempty"`
	// When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
	SessionHashStorageKey *bool `json:"session_hash_storage_key,omitempty"`
	// When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
	SessionHashSubject *bool `json:"session_hash_subject,omitempty"`
	// The session cookie idle time in seconds.
	SessionIdlingTimeout *float64 `json:"session_idling_timeout,omitempty"`
	// The memcached host.
	SessionMemcachedHost *string `json:"session_memcached_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	SessionMemcachedPort *int64 `json:"session_memcached_port,omitempty"`
	// The memcached session key prefix.
	SessionMemcachedPrefix *string `json:"session_memcached_prefix,omitempty"`
	// The memcached unix socket path.
	SessionMemcachedSocket *string `json:"session_memcached_socket,omitempty"`
	// Enables or disables persistent sessions
	SessionRemember *bool `json:"session_remember,omitempty"`
	// Persistent session absolute timeout in seconds.
	SessionRememberAbsoluteTimeout *float64 `json:"session_remember_absolute_timeout,omitempty"`
	// Persistent session cookie name
	SessionRememberCookieName *string `json:"session_remember_cookie_name,omitempty"`
	// Persistent session rolling timeout in seconds.
	SessionRememberRollingTimeout *float64                           `json:"session_remember_rolling_timeout,omitempty"`
	SessionRequestHeaders         []SamlPluginSessionRequestHeaders  `json:"session_request_headers,omitempty"`
	SessionResponseHeaders        []SamlPluginSessionResponseHeaders `json:"session_response_headers,omitempty"`
	// The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
	SessionRollingTimeout *float64 `json:"session_rolling_timeout,omitempty"`
	// The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.
	SessionSecret *string `json:"session_secret,omitempty"`
	// The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis
	SessionStorage *SamlPluginSessionStorage `json:"session_storage,omitempty"`
	// Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.
	SessionStoreMetadata *bool `json:"session_store_metadata,omitempty"`
	// Enable signature validation for SAML responses.
	ValidateAssertionSignature *bool `json:"validate_assertion_signature,omitempty"`
}

func (o *SamlPluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *SamlPluginConfig) GetAssertionConsumerPath() *string {
	if o == nil {
		return nil
	}
	return o.AssertionConsumerPath
}

func (o *SamlPluginConfig) GetIdpCertificate() *string {
	if o == nil {
		return nil
	}
	return o.IdpCertificate
}

func (o *SamlPluginConfig) GetIdpSsoURL() *string {
	if o == nil {
		return nil
	}
	return o.IdpSsoURL
}

func (o *SamlPluginConfig) GetIssuer() *string {
	if o == nil {
		return nil
	}
	return o.Issuer
}

func (o *SamlPluginConfig) GetNameidFormat() *NameidFormat {
	if o == nil {
		return nil
	}
	return o.NameidFormat
}

func (o *SamlPluginConfig) GetRedis() *SamlPluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *SamlPluginConfig) GetRequestDigestAlgorithm() *RequestDigestAlgorithm {
	if o == nil {
		return nil
	}
	return o.RequestDigestAlgorithm
}

func (o *SamlPluginConfig) GetRequestSignatureAlgorithm() *RequestSignatureAlgorithm {
	if o == nil {
		return nil
	}
	return o.RequestSignatureAlgorithm
}

func (o *SamlPluginConfig) GetRequestSigningCertificate() *string {
	if o == nil {
		return nil
	}
	return o.RequestSigningCertificate
}

func (o *SamlPluginConfig) GetRequestSigningKey() *string {
	if o == nil {
		return nil
	}
	return o.RequestSigningKey
}

func (o *SamlPluginConfig) GetResponseDigestAlgorithm() *ResponseDigestAlgorithm {
	if o == nil {
		return nil
	}
	return o.ResponseDigestAlgorithm
}

func (o *SamlPluginConfig) GetResponseEncryptionKey() *string {
	if o == nil {
		return nil
	}
	return o.ResponseEncryptionKey
}

func (o *SamlPluginConfig) GetResponseSignatureAlgorithm() *ResponseSignatureAlgorithm {
	if o == nil {
		return nil
	}
	return o.ResponseSignatureAlgorithm
}

func (o *SamlPluginConfig) GetSessionAbsoluteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SessionAbsoluteTimeout
}

func (o *SamlPluginConfig) GetSessionAudience() *string {
	if o == nil {
		return nil
	}
	return o.SessionAudience
}

func (o *SamlPluginConfig) GetSessionCookieDomain() *string {
	if o == nil {
		return nil
	}
	return o.SessionCookieDomain
}

func (o *SamlPluginConfig) GetSessionCookieHTTPOnly() *bool {
	if o == nil {
		return nil
	}
	return o.SessionCookieHTTPOnly
}

func (o *SamlPluginConfig) GetSessionCookieName() *string {
	if o == nil {
		return nil
	}
	return o.SessionCookieName
}

func (o *SamlPluginConfig) GetSessionCookiePath() *string {
	if o == nil {
		return nil
	}
	return o.SessionCookiePath
}

func (o *SamlPluginConfig) GetSessionCookieSameSite() *SamlPluginSessionCookieSameSite {
	if o == nil {
		return nil
	}
	return o.SessionCookieSameSite
}

func (o *SamlPluginConfig) GetSessionCookieSecure() *bool {
	if o == nil {
		return nil
	}
	return o.SessionCookieSecure
}

func (o *SamlPluginConfig) GetSessionEnforceSameSubject() *bool {
	if o == nil {
		return nil
	}
	return o.SessionEnforceSameSubject
}

func (o *SamlPluginConfig) GetSessionHashStorageKey() *bool {
	if o == nil {
		return nil
	}
	return o.SessionHashStorageKey
}

func (o *SamlPluginConfig) GetSessionHashSubject() *bool {
	if o == nil {
		return nil
	}
	return o.SessionHashSubject
}

func (o *SamlPluginConfig) GetSessionIdlingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SessionIdlingTimeout
}

func (o *SamlPluginConfig) GetSessionMemcachedHost() *string {
	if o == nil {
		return nil
	}
	return o.SessionMemcachedHost
}

func (o *SamlPluginConfig) GetSessionMemcachedPort() *int64 {
	if o == nil {
		return nil
	}
	return o.SessionMemcachedPort
}

func (o *SamlPluginConfig) GetSessionMemcachedPrefix() *string {
	if o == nil {
		return nil
	}
	return o.SessionMemcachedPrefix
}

func (o *SamlPluginConfig) GetSessionMemcachedSocket() *string {
	if o == nil {
		return nil
	}
	return o.SessionMemcachedSocket
}

func (o *SamlPluginConfig) GetSessionRemember() *bool {
	if o == nil {
		return nil
	}
	return o.SessionRemember
}

func (o *SamlPluginConfig) GetSessionRememberAbsoluteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SessionRememberAbsoluteTimeout
}

func (o *SamlPluginConfig) GetSessionRememberCookieName() *string {
	if o == nil {
		return nil
	}
	return o.SessionRememberCookieName
}

func (o *SamlPluginConfig) GetSessionRememberRollingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SessionRememberRollingTimeout
}

func (o *SamlPluginConfig) GetSessionRequestHeaders() []SamlPluginSessionRequestHeaders {
	if o == nil {
		return nil
	}
	return o.SessionRequestHeaders
}

func (o *SamlPluginConfig) GetSessionResponseHeaders() []SamlPluginSessionResponseHeaders {
	if o == nil {
		return nil
	}
	return o.SessionResponseHeaders
}

func (o *SamlPluginConfig) GetSessionRollingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SessionRollingTimeout
}

func (o *SamlPluginConfig) GetSessionSecret() *string {
	if o == nil {
		return nil
	}
	return o.SessionSecret
}

func (o *SamlPluginConfig) GetSessionStorage() *SamlPluginSessionStorage {
	if o == nil {
		return nil
	}
	return o.SessionStorage
}

func (o *SamlPluginConfig) GetSessionStoreMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.SessionStoreMetadata
}

func (o *SamlPluginConfig) GetValidateAssertionSignature() *bool {
	if o == nil {
		return nil
	}
	return o.ValidateAssertionSignature
}

// SamlPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type SamlPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *SamlPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type SamlPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *SamlPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type SamlPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *SamlPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type SamlPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *SamlPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type SamlPluginOrdering struct {
	After  *SamlPluginAfter  `json:"after,omitempty"`
	Before *SamlPluginBefore `json:"before,omitempty"`
}

func (o *SamlPluginOrdering) GetAfter() *SamlPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *SamlPluginOrdering) GetBefore() *SamlPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type SamlPluginProtocols string

const (
	SamlPluginProtocolsGrpc           SamlPluginProtocols = "grpc"
	SamlPluginProtocolsGrpcs          SamlPluginProtocols = "grpcs"
	SamlPluginProtocolsHTTP           SamlPluginProtocols = "http"
	SamlPluginProtocolsHTTPS          SamlPluginProtocols = "https"
	SamlPluginProtocolsTCP            SamlPluginProtocols = "tcp"
	SamlPluginProtocolsTLS            SamlPluginProtocols = "tls"
	SamlPluginProtocolsTLSPassthrough SamlPluginProtocols = "tls_passthrough"
	SamlPluginProtocolsUDP            SamlPluginProtocols = "udp"
	SamlPluginProtocolsWs             SamlPluginProtocols = "ws"
	SamlPluginProtocolsWss            SamlPluginProtocols = "wss"
)

func (e SamlPluginProtocols) ToPointer() *SamlPluginProtocols {
	return &e
}
func (e *SamlPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = SamlPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamlPluginProtocols: %v", v)
	}
}

// SamlPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type SamlPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *SamlPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// SamlPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type SamlPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *SamlPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// SamlPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SamlPlugin struct {
	Config SamlPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *SamlPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *SamlPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool               `json:"enabled,omitempty"`
	ID           *string             `json:"id,omitempty"`
	InstanceName *string             `json:"instance_name,omitempty"`
	name         string              `const:"saml" json:"name"`
	Ordering     *SamlPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []SamlPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *SamlPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SamlPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (s SamlPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SamlPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SamlPlugin) GetConfig() SamlPluginConfig {
	if o == nil {
		return SamlPluginConfig{}
	}
	return o.Config
}

func (o *SamlPlugin) GetConsumer() *SamlPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *SamlPlugin) GetConsumerGroup() *SamlPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *SamlPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *SamlPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SamlPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SamlPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *SamlPlugin) GetName() string {
	return "saml"
}

func (o *SamlPlugin) GetOrdering() *SamlPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *SamlPlugin) GetProtocols() []SamlPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *SamlPlugin) GetRoute() *SamlPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *SamlPlugin) GetService() *SamlPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *SamlPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *SamlPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

// SamlPluginInput - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type SamlPluginInput struct {
	Config SamlPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *SamlPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *SamlPluginConsumerGroup `json:"consumer_group,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool               `json:"enabled,omitempty"`
	ID           *string             `json:"id,omitempty"`
	InstanceName *string             `json:"instance_name,omitempty"`
	name         string              `const:"saml" json:"name"`
	Ordering     *SamlPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []SamlPluginProtocols `json:"protocols,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *SamlPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *SamlPluginService `json:"service,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
}

func (s SamlPluginInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SamlPluginInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SamlPluginInput) GetConfig() SamlPluginConfig {
	if o == nil {
		return SamlPluginConfig{}
	}
	return o.Config
}

func (o *SamlPluginInput) GetConsumer() *SamlPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *SamlPluginInput) GetConsumerGroup() *SamlPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *SamlPluginInput) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SamlPluginInput) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SamlPluginInput) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *SamlPluginInput) GetName() string {
	return "saml"
}

func (o *SamlPluginInput) GetOrdering() *SamlPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *SamlPluginInput) GetProtocols() []SamlPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *SamlPluginInput) GetRoute() *SamlPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *SamlPluginInput) GetService() *SamlPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *SamlPluginInput) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}
