// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

// CreateAuditLogDestination - The request schema to create an audit log destination.
type CreateAuditLogDestination struct {
	// The name of the audit log destination.
	Name string `json:"name"`
	// The endpoint that will receive audit log messages.
	Endpoint string `json:"endpoint"`
	// The value to include in the `Authorization` header when sending audit logs to the webhook.
	Authorization *string `json:"authorization,omitempty"`
	// The output format of each log messages.
	LogFormat *LogFormat `default:"cef" json:"log_format"`
	// Indicates if the SSL certificate verification of the host endpoint should be skipped when delivering payloads.
	// We strongly recommend not setting this to 'true' as you are subject to man-in-the-middle and other attacks.
	// This option should be considered only for self-signed SSL certificates used in a non-production environment.
	SkipSslVerification *bool `default:"false" json:"skip_ssl_verification"`
}

func (c CreateAuditLogDestination) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAuditLogDestination) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAuditLogDestination) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateAuditLogDestination) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateAuditLogDestination) GetAuthorization() *string {
	if o == nil {
		return nil
	}
	return o.Authorization
}

func (o *CreateAuditLogDestination) GetLogFormat() *LogFormat {
	if o == nil {
		return nil
	}
	return o.LogFormat
}

func (o *CreateAuditLogDestination) GetSkipSslVerification() *bool {
	if o == nil {
		return nil
	}
	return o.SkipSslVerification
}
