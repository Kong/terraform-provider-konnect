// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateRequestTransformerAdvancedPluginJSONTypes string

const (
	CreateRequestTransformerAdvancedPluginJSONTypesBoolean CreateRequestTransformerAdvancedPluginJSONTypes = "boolean"
	CreateRequestTransformerAdvancedPluginJSONTypesNumber  CreateRequestTransformerAdvancedPluginJSONTypes = "number"
	CreateRequestTransformerAdvancedPluginJSONTypesString  CreateRequestTransformerAdvancedPluginJSONTypes = "string"
)

func (e CreateRequestTransformerAdvancedPluginJSONTypes) ToPointer() *CreateRequestTransformerAdvancedPluginJSONTypes {
	return &e
}
func (e *CreateRequestTransformerAdvancedPluginJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = CreateRequestTransformerAdvancedPluginJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestTransformerAdvancedPluginJSONTypes: %v", v)
	}
}

type CreateRequestTransformerAdvancedPluginAdd struct {
	Body        []string                                          `json:"body,omitempty"`
	Headers     []string                                          `json:"headers,omitempty"`
	JSONTypes   []CreateRequestTransformerAdvancedPluginJSONTypes `json:"json_types,omitempty"`
	Querystring []string                                          `json:"querystring,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginAdd) GetBody() []string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestTransformerAdvancedPluginAdd) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestTransformerAdvancedPluginAdd) GetJSONTypes() []CreateRequestTransformerAdvancedPluginJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *CreateRequestTransformerAdvancedPluginAdd) GetQuerystring() []string {
	if o == nil {
		return nil
	}
	return o.Querystring
}

type CreateRequestTransformerAdvancedPluginAllow struct {
	Body []string `json:"body,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginAllow) GetBody() []string {
	if o == nil {
		return nil
	}
	return o.Body
}

type CreateRequestTransformerAdvancedPluginConfigJSONTypes string

const (
	CreateRequestTransformerAdvancedPluginConfigJSONTypesBoolean CreateRequestTransformerAdvancedPluginConfigJSONTypes = "boolean"
	CreateRequestTransformerAdvancedPluginConfigJSONTypesNumber  CreateRequestTransformerAdvancedPluginConfigJSONTypes = "number"
	CreateRequestTransformerAdvancedPluginConfigJSONTypesString  CreateRequestTransformerAdvancedPluginConfigJSONTypes = "string"
)

func (e CreateRequestTransformerAdvancedPluginConfigJSONTypes) ToPointer() *CreateRequestTransformerAdvancedPluginConfigJSONTypes {
	return &e
}
func (e *CreateRequestTransformerAdvancedPluginConfigJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = CreateRequestTransformerAdvancedPluginConfigJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestTransformerAdvancedPluginConfigJSONTypes: %v", v)
	}
}

type CreateRequestTransformerAdvancedPluginAppend struct {
	Body        []string                                                `json:"body,omitempty"`
	Headers     []string                                                `json:"headers,omitempty"`
	JSONTypes   []CreateRequestTransformerAdvancedPluginConfigJSONTypes `json:"json_types,omitempty"`
	Querystring []string                                                `json:"querystring,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginAppend) GetBody() []string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestTransformerAdvancedPluginAppend) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestTransformerAdvancedPluginAppend) GetJSONTypes() []CreateRequestTransformerAdvancedPluginConfigJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *CreateRequestTransformerAdvancedPluginAppend) GetQuerystring() []string {
	if o == nil {
		return nil
	}
	return o.Querystring
}

type CreateRequestTransformerAdvancedPluginRemove struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginRemove) GetBody() []string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestTransformerAdvancedPluginRemove) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestTransformerAdvancedPluginRemove) GetQuerystring() []string {
	if o == nil {
		return nil
	}
	return o.Querystring
}

type CreateRequestTransformerAdvancedPluginRename struct {
	Body        []string `json:"body,omitempty"`
	Headers     []string `json:"headers,omitempty"`
	Querystring []string `json:"querystring,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginRename) GetBody() []string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestTransformerAdvancedPluginRename) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestTransformerAdvancedPluginRename) GetQuerystring() []string {
	if o == nil {
		return nil
	}
	return o.Querystring
}

type CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes string

const (
	CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypesBoolean CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes = "boolean"
	CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypesNumber  CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes = "number"
	CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypesString  CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes = "string"
)

func (e CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes) ToPointer() *CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes {
	return &e
}
func (e *CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes: %v", v)
	}
}

type CreateRequestTransformerAdvancedPluginReplace struct {
	Body        []string                                                       `json:"body,omitempty"`
	Headers     []string                                                       `json:"headers,omitempty"`
	JSONTypes   []CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes `json:"json_types,omitempty"`
	Querystring []string                                                       `json:"querystring,omitempty"`
	URI         *string                                                        `json:"uri,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginReplace) GetBody() []string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *CreateRequestTransformerAdvancedPluginReplace) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateRequestTransformerAdvancedPluginReplace) GetJSONTypes() []CreateRequestTransformerAdvancedPluginConfigReplaceJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *CreateRequestTransformerAdvancedPluginReplace) GetQuerystring() []string {
	if o == nil {
		return nil
	}
	return o.Querystring
}

func (o *CreateRequestTransformerAdvancedPluginReplace) GetURI() *string {
	if o == nil {
		return nil
	}
	return o.URI
}

type CreateRequestTransformerAdvancedPluginConfig struct {
	Add    *CreateRequestTransformerAdvancedPluginAdd    `json:"add,omitempty"`
	Allow  *CreateRequestTransformerAdvancedPluginAllow  `json:"allow,omitempty"`
	Append *CreateRequestTransformerAdvancedPluginAppend `json:"append,omitempty"`
	// Specify whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects.  See [Arrays and nested objects](#arrays-and-nested-objects).
	DotsInKeys *bool `json:"dots_in_keys,omitempty"`
	// A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
	HTTPMethod *string                                        `json:"http_method,omitempty"`
	Remove     *CreateRequestTransformerAdvancedPluginRemove  `json:"remove,omitempty"`
	Rename     *CreateRequestTransformerAdvancedPluginRename  `json:"rename,omitempty"`
	Replace    *CreateRequestTransformerAdvancedPluginReplace `json:"replace,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetAdd() *CreateRequestTransformerAdvancedPluginAdd {
	if o == nil {
		return nil
	}
	return o.Add
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetAllow() *CreateRequestTransformerAdvancedPluginAllow {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetAppend() *CreateRequestTransformerAdvancedPluginAppend {
	if o == nil {
		return nil
	}
	return o.Append
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetDotsInKeys() *bool {
	if o == nil {
		return nil
	}
	return o.DotsInKeys
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetHTTPMethod() *string {
	if o == nil {
		return nil
	}
	return o.HTTPMethod
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetRemove() *CreateRequestTransformerAdvancedPluginRemove {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetRename() *CreateRequestTransformerAdvancedPluginRename {
	if o == nil {
		return nil
	}
	return o.Rename
}

func (o *CreateRequestTransformerAdvancedPluginConfig) GetReplace() *CreateRequestTransformerAdvancedPluginReplace {
	if o == nil {
		return nil
	}
	return o.Replace
}

type CreateRequestTransformerAdvancedPluginProtocols string

const (
	CreateRequestTransformerAdvancedPluginProtocolsGrpc           CreateRequestTransformerAdvancedPluginProtocols = "grpc"
	CreateRequestTransformerAdvancedPluginProtocolsGrpcs          CreateRequestTransformerAdvancedPluginProtocols = "grpcs"
	CreateRequestTransformerAdvancedPluginProtocolsHTTP           CreateRequestTransformerAdvancedPluginProtocols = "http"
	CreateRequestTransformerAdvancedPluginProtocolsHTTPS          CreateRequestTransformerAdvancedPluginProtocols = "https"
	CreateRequestTransformerAdvancedPluginProtocolsTCP            CreateRequestTransformerAdvancedPluginProtocols = "tcp"
	CreateRequestTransformerAdvancedPluginProtocolsTLS            CreateRequestTransformerAdvancedPluginProtocols = "tls"
	CreateRequestTransformerAdvancedPluginProtocolsTLSPassthrough CreateRequestTransformerAdvancedPluginProtocols = "tls_passthrough"
	CreateRequestTransformerAdvancedPluginProtocolsUDP            CreateRequestTransformerAdvancedPluginProtocols = "udp"
	CreateRequestTransformerAdvancedPluginProtocolsWs             CreateRequestTransformerAdvancedPluginProtocols = "ws"
	CreateRequestTransformerAdvancedPluginProtocolsWss            CreateRequestTransformerAdvancedPluginProtocols = "wss"
)

func (e CreateRequestTransformerAdvancedPluginProtocols) ToPointer() *CreateRequestTransformerAdvancedPluginProtocols {
	return &e
}
func (e *CreateRequestTransformerAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateRequestTransformerAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRequestTransformerAdvancedPluginProtocols: %v", v)
	}
}

// CreateRequestTransformerAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateRequestTransformerAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRequestTransformerAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRequestTransformerAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateRequestTransformerAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateRequestTransformerAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateRequestTransformerAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateRequestTransformerAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateRequestTransformerAdvancedPlugin struct {
	Config *CreateRequestTransformerAdvancedPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"request-transformer-advanced" json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateRequestTransformerAdvancedPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateRequestTransformerAdvancedPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateRequestTransformerAdvancedPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateRequestTransformerAdvancedPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateRequestTransformerAdvancedPluginService `json:"service,omitempty"`
}

func (c CreateRequestTransformerAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateRequestTransformerAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateRequestTransformerAdvancedPlugin) GetConfig() *CreateRequestTransformerAdvancedPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateRequestTransformerAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateRequestTransformerAdvancedPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateRequestTransformerAdvancedPlugin) GetName() *string {
	return types.String("request-transformer-advanced")
}

func (o *CreateRequestTransformerAdvancedPlugin) GetProtocols() []CreateRequestTransformerAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateRequestTransformerAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateRequestTransformerAdvancedPlugin) GetConsumer() *CreateRequestTransformerAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateRequestTransformerAdvancedPlugin) GetConsumerGroup() *CreateRequestTransformerAdvancedPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateRequestTransformerAdvancedPlugin) GetRoute() *CreateRequestTransformerAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateRequestTransformerAdvancedPlugin) GetService() *CreateRequestTransformerAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
