// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type FileLogPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (f *FileLogPluginAfter) GetAccess() []string {
	if f == nil {
		return nil
	}
	return f.Access
}

type FileLogPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (f *FileLogPluginBefore) GetAccess() []string {
	if f == nil {
		return nil
	}
	return f.Access
}

type FileLogPluginOrdering struct {
	After  *FileLogPluginAfter  `json:"after,omitempty"`
	Before *FileLogPluginBefore `json:"before,omitempty"`
}

func (f *FileLogPluginOrdering) GetAfter() *FileLogPluginAfter {
	if f == nil {
		return nil
	}
	return f.After
}

func (f *FileLogPluginOrdering) GetBefore() *FileLogPluginBefore {
	if f == nil {
		return nil
	}
	return f.Before
}

type FileLogPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (f *FileLogPluginPartials) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *FileLogPluginPartials) GetName() *string {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *FileLogPluginPartials) GetPath() *string {
	if f == nil {
		return nil
	}
	return f.Path
}

type FileLogPluginConfig struct {
	// Lua code as a key-value map
	CustomFieldsByLua map[string]string `json:"custom_fields_by_lua,omitempty"`
	// The file path of the output log file. The plugin creates the log file if it doesn't exist yet.
	Path string `json:"path"`
	// Determines whether the log file is closed and reopened on every request.
	Reopen *bool `default:"false" json:"reopen"`
}

func (f FileLogPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FileLogPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"path"}); err != nil {
		return err
	}
	return nil
}

func (f *FileLogPluginConfig) GetCustomFieldsByLua() map[string]string {
	if f == nil {
		return nil
	}
	return f.CustomFieldsByLua
}

func (f *FileLogPluginConfig) GetPath() string {
	if f == nil {
		return ""
	}
	return f.Path
}

func (f *FileLogPluginConfig) GetReopen() *bool {
	if f == nil {
		return nil
	}
	return f.Reopen
}

// FileLogPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type FileLogPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (f *FileLogPluginConsumer) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

// FileLogPluginProtocols - A string representing a protocol, such as HTTP or HTTPS.
type FileLogPluginProtocols string

const (
	FileLogPluginProtocolsGrpc           FileLogPluginProtocols = "grpc"
	FileLogPluginProtocolsGrpcs          FileLogPluginProtocols = "grpcs"
	FileLogPluginProtocolsHTTP           FileLogPluginProtocols = "http"
	FileLogPluginProtocolsHTTPS          FileLogPluginProtocols = "https"
	FileLogPluginProtocolsTCP            FileLogPluginProtocols = "tcp"
	FileLogPluginProtocolsTLS            FileLogPluginProtocols = "tls"
	FileLogPluginProtocolsTLSPassthrough FileLogPluginProtocols = "tls_passthrough"
	FileLogPluginProtocolsUDP            FileLogPluginProtocols = "udp"
	FileLogPluginProtocolsWs             FileLogPluginProtocols = "ws"
	FileLogPluginProtocolsWss            FileLogPluginProtocols = "wss"
)

func (e FileLogPluginProtocols) ToPointer() *FileLogPluginProtocols {
	return &e
}
func (e *FileLogPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = FileLogPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FileLogPluginProtocols: %v", v)
	}
}

// FileLogPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type FileLogPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (f *FileLogPluginRoute) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

// FileLogPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type FileLogPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (f *FileLogPluginService) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

// FileLogPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type FileLogPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                `default:"null" json:"instance_name"`
	name         string                 `const:"file-log" json:"name"`
	Ordering     *FileLogPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []FileLogPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64              `json:"updated_at,omitempty"`
	Config    FileLogPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *FileLogPluginConsumer `json:"consumer"`
	// A set of strings representing protocols.
	Protocols []FileLogPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *FileLogPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *FileLogPluginService `json:"service"`
}

func (f FileLogPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *FileLogPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, []string{"name", "config"}); err != nil {
		return err
	}
	return nil
}

func (f *FileLogPlugin) GetCreatedAt() *int64 {
	if f == nil {
		return nil
	}
	return f.CreatedAt
}

func (f *FileLogPlugin) GetEnabled() *bool {
	if f == nil {
		return nil
	}
	return f.Enabled
}

func (f *FileLogPlugin) GetID() *string {
	if f == nil {
		return nil
	}
	return f.ID
}

func (f *FileLogPlugin) GetInstanceName() *string {
	if f == nil {
		return nil
	}
	return f.InstanceName
}

func (f *FileLogPlugin) GetName() string {
	return "file-log"
}

func (f *FileLogPlugin) GetOrdering() *FileLogPluginOrdering {
	if f == nil {
		return nil
	}
	return f.Ordering
}

func (f *FileLogPlugin) GetPartials() []FileLogPluginPartials {
	if f == nil {
		return nil
	}
	return f.Partials
}

func (f *FileLogPlugin) GetTags() []string {
	if f == nil {
		return nil
	}
	return f.Tags
}

func (f *FileLogPlugin) GetUpdatedAt() *int64 {
	if f == nil {
		return nil
	}
	return f.UpdatedAt
}

func (f *FileLogPlugin) GetConfig() FileLogPluginConfig {
	if f == nil {
		return FileLogPluginConfig{}
	}
	return f.Config
}

func (f *FileLogPlugin) GetConsumer() *FileLogPluginConsumer {
	if f == nil {
		return nil
	}
	return f.Consumer
}

func (f *FileLogPlugin) GetProtocols() []FileLogPluginProtocols {
	if f == nil {
		return nil
	}
	return f.Protocols
}

func (f *FileLogPlugin) GetRoute() *FileLogPluginRoute {
	if f == nil {
		return nil
	}
	return f.Route
}

func (f *FileLogPlugin) GetService() *FileLogPluginService {
	if f == nil {
		return nil
	}
	return f.Service
}
