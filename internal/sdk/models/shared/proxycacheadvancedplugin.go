// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type ProxyCacheAdvancedPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (p *ProxyCacheAdvancedPluginAfter) GetAccess() []string {
	if p == nil {
		return nil
	}
	return p.Access
}

type ProxyCacheAdvancedPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (p *ProxyCacheAdvancedPluginBefore) GetAccess() []string {
	if p == nil {
		return nil
	}
	return p.Access
}

type ProxyCacheAdvancedPluginOrdering struct {
	After  *ProxyCacheAdvancedPluginAfter  `json:"after,omitempty"`
	Before *ProxyCacheAdvancedPluginBefore `json:"before,omitempty"`
}

func (p *ProxyCacheAdvancedPluginOrdering) GetAfter() *ProxyCacheAdvancedPluginAfter {
	if p == nil {
		return nil
	}
	return p.After
}

func (p *ProxyCacheAdvancedPluginOrdering) GetBefore() *ProxyCacheAdvancedPluginBefore {
	if p == nil {
		return nil
	}
	return p.Before
}

type ProxyCacheAdvancedPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (p *ProxyCacheAdvancedPluginPartials) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *ProxyCacheAdvancedPluginPartials) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *ProxyCacheAdvancedPluginPartials) GetPath() *string {
	if p == nil {
		return nil
	}
	return p.Path
}

type ProxyCacheAdvancedPluginMemory struct {
	// The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.
	DictionaryName *string `default:"kong_db_cache" json:"dictionary_name"`
}

func (p ProxyCacheAdvancedPluginMemory) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPluginMemory) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPluginMemory) GetDictionaryName() *string {
	if p == nil {
		return nil
	}
	return p.DictionaryName
}

type ProxyCacheAdvancedPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `default:"127.0.0.1" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (p ProxyCacheAdvancedPluginClusterNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPluginClusterNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPluginClusterNodes) GetIP() *string {
	if p == nil {
		return nil
	}
	return p.IP
}

func (p *ProxyCacheAdvancedPluginClusterNodes) GetPort() *int64 {
	if p == nil {
		return nil
	}
	return p.Port
}

type ProxyCacheAdvancedPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (p ProxyCacheAdvancedPluginSentinelNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPluginSentinelNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPluginSentinelNodes) GetHost() *string {
	if p == nil {
		return nil
	}
	return p.Host
}

func (p *ProxyCacheAdvancedPluginSentinelNodes) GetPort() *int64 {
	if p == nil {
		return nil
	}
	return p.Port
}

// ProxyCacheAdvancedPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type ProxyCacheAdvancedPluginSentinelRole string

const (
	ProxyCacheAdvancedPluginSentinelRoleAny    ProxyCacheAdvancedPluginSentinelRole = "any"
	ProxyCacheAdvancedPluginSentinelRoleMaster ProxyCacheAdvancedPluginSentinelRole = "master"
	ProxyCacheAdvancedPluginSentinelRoleSlave  ProxyCacheAdvancedPluginSentinelRole = "slave"
)

func (e ProxyCacheAdvancedPluginSentinelRole) ToPointer() *ProxyCacheAdvancedPluginSentinelRole {
	return &e
}
func (e *ProxyCacheAdvancedPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = ProxyCacheAdvancedPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyCacheAdvancedPluginSentinelRole: %v", v)
	}
}

type ProxyCacheAdvancedPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []ProxyCacheAdvancedPluginClusterNodes `json:"cluster_nodes"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `default:"2000" json:"connect_timeout"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `default:"null" json:"keepalive_backlog"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `default:"2000" json:"read_timeout"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"2000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `default:"null" json:"sentinel_master"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []ProxyCacheAdvancedPluginSentinelNodes `json:"sentinel_nodes"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `default:"null" json:"sentinel_password"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *ProxyCacheAdvancedPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `default:"null" json:"sentinel_username"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (p ProxyCacheAdvancedPluginRedis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPluginRedis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"cluster_nodes", "sentinel_nodes"}); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPluginRedis) GetClusterMaxRedirections() *int64 {
	if p == nil {
		return nil
	}
	return p.ClusterMaxRedirections
}

func (p *ProxyCacheAdvancedPluginRedis) GetClusterNodes() []ProxyCacheAdvancedPluginClusterNodes {
	if p == nil {
		return nil
	}
	return p.ClusterNodes
}

func (p *ProxyCacheAdvancedPluginRedis) GetConnectTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.ConnectTimeout
}

func (p *ProxyCacheAdvancedPluginRedis) GetConnectionIsProxied() *bool {
	if p == nil {
		return nil
	}
	return p.ConnectionIsProxied
}

func (p *ProxyCacheAdvancedPluginRedis) GetDatabase() *int64 {
	if p == nil {
		return nil
	}
	return p.Database
}

func (p *ProxyCacheAdvancedPluginRedis) GetHost() *string {
	if p == nil {
		return nil
	}
	return p.Host
}

func (p *ProxyCacheAdvancedPluginRedis) GetKeepaliveBacklog() *int64 {
	if p == nil {
		return nil
	}
	return p.KeepaliveBacklog
}

func (p *ProxyCacheAdvancedPluginRedis) GetKeepalivePoolSize() *int64 {
	if p == nil {
		return nil
	}
	return p.KeepalivePoolSize
}

func (p *ProxyCacheAdvancedPluginRedis) GetPassword() *string {
	if p == nil {
		return nil
	}
	return p.Password
}

func (p *ProxyCacheAdvancedPluginRedis) GetPort() *int64 {
	if p == nil {
		return nil
	}
	return p.Port
}

func (p *ProxyCacheAdvancedPluginRedis) GetReadTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.ReadTimeout
}

func (p *ProxyCacheAdvancedPluginRedis) GetSendTimeout() *int64 {
	if p == nil {
		return nil
	}
	return p.SendTimeout
}

func (p *ProxyCacheAdvancedPluginRedis) GetSentinelMaster() *string {
	if p == nil {
		return nil
	}
	return p.SentinelMaster
}

func (p *ProxyCacheAdvancedPluginRedis) GetSentinelNodes() []ProxyCacheAdvancedPluginSentinelNodes {
	if p == nil {
		return nil
	}
	return p.SentinelNodes
}

func (p *ProxyCacheAdvancedPluginRedis) GetSentinelPassword() *string {
	if p == nil {
		return nil
	}
	return p.SentinelPassword
}

func (p *ProxyCacheAdvancedPluginRedis) GetSentinelRole() *ProxyCacheAdvancedPluginSentinelRole {
	if p == nil {
		return nil
	}
	return p.SentinelRole
}

func (p *ProxyCacheAdvancedPluginRedis) GetSentinelUsername() *string {
	if p == nil {
		return nil
	}
	return p.SentinelUsername
}

func (p *ProxyCacheAdvancedPluginRedis) GetServerName() *string {
	if p == nil {
		return nil
	}
	return p.ServerName
}

func (p *ProxyCacheAdvancedPluginRedis) GetSsl() *bool {
	if p == nil {
		return nil
	}
	return p.Ssl
}

func (p *ProxyCacheAdvancedPluginRedis) GetSslVerify() *bool {
	if p == nil {
		return nil
	}
	return p.SslVerify
}

func (p *ProxyCacheAdvancedPluginRedis) GetUsername() *string {
	if p == nil {
		return nil
	}
	return p.Username
}

type ProxyCacheAdvancedPluginRequestMethod string

const (
	ProxyCacheAdvancedPluginRequestMethodGet   ProxyCacheAdvancedPluginRequestMethod = "GET"
	ProxyCacheAdvancedPluginRequestMethodHead  ProxyCacheAdvancedPluginRequestMethod = "HEAD"
	ProxyCacheAdvancedPluginRequestMethodPatch ProxyCacheAdvancedPluginRequestMethod = "PATCH"
	ProxyCacheAdvancedPluginRequestMethodPost  ProxyCacheAdvancedPluginRequestMethod = "POST"
	ProxyCacheAdvancedPluginRequestMethodPut   ProxyCacheAdvancedPluginRequestMethod = "PUT"
)

func (e ProxyCacheAdvancedPluginRequestMethod) ToPointer() *ProxyCacheAdvancedPluginRequestMethod {
	return &e
}
func (e *ProxyCacheAdvancedPluginRequestMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "PATCH":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		*e = ProxyCacheAdvancedPluginRequestMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyCacheAdvancedPluginRequestMethod: %v", v)
	}
}

// ProxyCacheAdvancedPluginResponseHeaders - Caching related diagnostic headers that should be included in cached responses
type ProxyCacheAdvancedPluginResponseHeaders struct {
	XCacheKey    *bool `default:"true" json:"X-Cache-Key"`
	XCacheStatus *bool `default:"true" json:"X-Cache-Status"`
	Age          *bool `default:"true" json:"age"`
}

func (p ProxyCacheAdvancedPluginResponseHeaders) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPluginResponseHeaders) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPluginResponseHeaders) GetXCacheKey() *bool {
	if p == nil {
		return nil
	}
	return p.XCacheKey
}

func (p *ProxyCacheAdvancedPluginResponseHeaders) GetXCacheStatus() *bool {
	if p == nil {
		return nil
	}
	return p.XCacheStatus
}

func (p *ProxyCacheAdvancedPluginResponseHeaders) GetAge() *bool {
	if p == nil {
		return nil
	}
	return p.Age
}

// ProxyCacheAdvancedPluginStrategy - The backing data store in which to hold cache entities. Accepted values are: `memory` and `redis`.
type ProxyCacheAdvancedPluginStrategy string

const (
	ProxyCacheAdvancedPluginStrategyMemory ProxyCacheAdvancedPluginStrategy = "memory"
	ProxyCacheAdvancedPluginStrategyRedis  ProxyCacheAdvancedPluginStrategy = "redis"
)

func (e ProxyCacheAdvancedPluginStrategy) ToPointer() *ProxyCacheAdvancedPluginStrategy {
	return &e
}
func (e *ProxyCacheAdvancedPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "memory":
		fallthrough
	case "redis":
		*e = ProxyCacheAdvancedPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyCacheAdvancedPluginStrategy: %v", v)
	}
}

type ProxyCacheAdvancedPluginConfig struct {
	// Unhandled errors while trying to retrieve a cache entry (such as redis down) are resolved with `Bypass`, with the request going upstream.
	BypassOnErr *bool `default:"false" json:"bypass_on_err"`
	// When enabled, respect the Cache-Control behaviors defined in RFC7234.
	CacheControl *bool `default:"false" json:"cache_control"`
	// TTL in seconds of cache entities.
	CacheTTL *int64 `default:"300" json:"cache_ttl"`
	// Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value; for example, if the upstream is expected to respond with a `application/json; charset=utf-8` content-type, the plugin configuration must contain said value or a `Bypass` cache status is returned.
	ContentType []string `json:"content_type,omitempty"`
	// Determines whether to treat URIs as case sensitive. By default, case sensitivity is enabled. If set to true, requests are cached while ignoring case sensitivity in the URI.
	IgnoreURICase *bool                           `default:"false" json:"ignore_uri_case"`
	Memory        *ProxyCacheAdvancedPluginMemory `json:"memory"`
	Redis         *ProxyCacheAdvancedPluginRedis  `json:"redis"`
	// Downstream request methods considered cacheable. Available options: `HEAD`, `GET`, `POST`, `PATCH`, `PUT`.
	RequestMethod []ProxyCacheAdvancedPluginRequestMethod `json:"request_method,omitempty"`
	// Upstream response status code considered cacheable. The integers must be a value between 100 and 900.
	ResponseCode []int64 `json:"response_code,omitempty"`
	// Caching related diagnostic headers that should be included in cached responses
	ResponseHeaders *ProxyCacheAdvancedPluginResponseHeaders `json:"response_headers"`
	// Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.
	StorageTTL *int64 `default:"null" json:"storage_ttl"`
	// The backing data store in which to hold cache entities. Accepted values are: `memory` and `redis`.
	Strategy ProxyCacheAdvancedPluginStrategy `json:"strategy"`
	// Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.
	VaryHeaders []string `json:"vary_headers"`
	// Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration. By default, the max number of params accepted is 100. You can change this value via the `lua_max_post_args` in `kong.conf`.
	VaryQueryParams []string `json:"vary_query_params"`
}

func (p ProxyCacheAdvancedPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"memory", "redis", "response_headers", "strategy", "vary_headers", "vary_query_params"}); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPluginConfig) GetBypassOnErr() *bool {
	if p == nil {
		return nil
	}
	return p.BypassOnErr
}

func (p *ProxyCacheAdvancedPluginConfig) GetCacheControl() *bool {
	if p == nil {
		return nil
	}
	return p.CacheControl
}

func (p *ProxyCacheAdvancedPluginConfig) GetCacheTTL() *int64 {
	if p == nil {
		return nil
	}
	return p.CacheTTL
}

func (p *ProxyCacheAdvancedPluginConfig) GetContentType() []string {
	if p == nil {
		return nil
	}
	return p.ContentType
}

func (p *ProxyCacheAdvancedPluginConfig) GetIgnoreURICase() *bool {
	if p == nil {
		return nil
	}
	return p.IgnoreURICase
}

func (p *ProxyCacheAdvancedPluginConfig) GetMemory() *ProxyCacheAdvancedPluginMemory {
	if p == nil {
		return nil
	}
	return p.Memory
}

func (p *ProxyCacheAdvancedPluginConfig) GetRedis() *ProxyCacheAdvancedPluginRedis {
	if p == nil {
		return nil
	}
	return p.Redis
}

func (p *ProxyCacheAdvancedPluginConfig) GetRequestMethod() []ProxyCacheAdvancedPluginRequestMethod {
	if p == nil {
		return nil
	}
	return p.RequestMethod
}

func (p *ProxyCacheAdvancedPluginConfig) GetResponseCode() []int64 {
	if p == nil {
		return nil
	}
	return p.ResponseCode
}

func (p *ProxyCacheAdvancedPluginConfig) GetResponseHeaders() *ProxyCacheAdvancedPluginResponseHeaders {
	if p == nil {
		return nil
	}
	return p.ResponseHeaders
}

func (p *ProxyCacheAdvancedPluginConfig) GetStorageTTL() *int64 {
	if p == nil {
		return nil
	}
	return p.StorageTTL
}

func (p *ProxyCacheAdvancedPluginConfig) GetStrategy() ProxyCacheAdvancedPluginStrategy {
	if p == nil {
		return ProxyCacheAdvancedPluginStrategy("")
	}
	return p.Strategy
}

func (p *ProxyCacheAdvancedPluginConfig) GetVaryHeaders() []string {
	if p == nil {
		return nil
	}
	return p.VaryHeaders
}

func (p *ProxyCacheAdvancedPluginConfig) GetVaryQueryParams() []string {
	if p == nil {
		return nil
	}
	return p.VaryQueryParams
}

// ProxyCacheAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ProxyCacheAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (p *ProxyCacheAdvancedPluginConsumer) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

// ProxyCacheAdvancedPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type ProxyCacheAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (p *ProxyCacheAdvancedPluginConsumerGroup) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

type ProxyCacheAdvancedPluginProtocols string

const (
	ProxyCacheAdvancedPluginProtocolsGrpc  ProxyCacheAdvancedPluginProtocols = "grpc"
	ProxyCacheAdvancedPluginProtocolsGrpcs ProxyCacheAdvancedPluginProtocols = "grpcs"
	ProxyCacheAdvancedPluginProtocolsHTTP  ProxyCacheAdvancedPluginProtocols = "http"
	ProxyCacheAdvancedPluginProtocolsHTTPS ProxyCacheAdvancedPluginProtocols = "https"
)

func (e ProxyCacheAdvancedPluginProtocols) ToPointer() *ProxyCacheAdvancedPluginProtocols {
	return &e
}
func (e *ProxyCacheAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = ProxyCacheAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProxyCacheAdvancedPluginProtocols: %v", v)
	}
}

// ProxyCacheAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type ProxyCacheAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (p *ProxyCacheAdvancedPluginRoute) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

// ProxyCacheAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ProxyCacheAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (p *ProxyCacheAdvancedPluginService) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

// ProxyCacheAdvancedPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ProxyCacheAdvancedPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                           `default:"null" json:"instance_name"`
	name         string                            `const:"proxy-cache-advanced" json:"name"`
	Ordering     *ProxyCacheAdvancedPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []ProxyCacheAdvancedPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                         `json:"updated_at,omitempty"`
	Config    ProxyCacheAdvancedPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ProxyCacheAdvancedPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *ProxyCacheAdvancedPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []ProxyCacheAdvancedPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *ProxyCacheAdvancedPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ProxyCacheAdvancedPluginService `json:"service"`
}

func (p ProxyCacheAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProxyCacheAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"name", "ordering", "partials", "tags", "config", "consumer", "consumer_group", "route", "service"}); err != nil {
		return err
	}
	return nil
}

func (p *ProxyCacheAdvancedPlugin) GetCreatedAt() *int64 {
	if p == nil {
		return nil
	}
	return p.CreatedAt
}

func (p *ProxyCacheAdvancedPlugin) GetEnabled() *bool {
	if p == nil {
		return nil
	}
	return p.Enabled
}

func (p *ProxyCacheAdvancedPlugin) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *ProxyCacheAdvancedPlugin) GetInstanceName() *string {
	if p == nil {
		return nil
	}
	return p.InstanceName
}

func (p *ProxyCacheAdvancedPlugin) GetName() string {
	return "proxy-cache-advanced"
}

func (p *ProxyCacheAdvancedPlugin) GetOrdering() *ProxyCacheAdvancedPluginOrdering {
	if p == nil {
		return nil
	}
	return p.Ordering
}

func (p *ProxyCacheAdvancedPlugin) GetPartials() []ProxyCacheAdvancedPluginPartials {
	if p == nil {
		return nil
	}
	return p.Partials
}

func (p *ProxyCacheAdvancedPlugin) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *ProxyCacheAdvancedPlugin) GetUpdatedAt() *int64 {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *ProxyCacheAdvancedPlugin) GetConfig() ProxyCacheAdvancedPluginConfig {
	if p == nil {
		return ProxyCacheAdvancedPluginConfig{}
	}
	return p.Config
}

func (p *ProxyCacheAdvancedPlugin) GetConsumer() *ProxyCacheAdvancedPluginConsumer {
	if p == nil {
		return nil
	}
	return p.Consumer
}

func (p *ProxyCacheAdvancedPlugin) GetConsumerGroup() *ProxyCacheAdvancedPluginConsumerGroup {
	if p == nil {
		return nil
	}
	return p.ConsumerGroup
}

func (p *ProxyCacheAdvancedPlugin) GetProtocols() []ProxyCacheAdvancedPluginProtocols {
	if p == nil {
		return nil
	}
	return p.Protocols
}

func (p *ProxyCacheAdvancedPlugin) GetRoute() *ProxyCacheAdvancedPluginRoute {
	if p == nil {
		return nil
	}
	return p.Route
}

func (p *ProxyCacheAdvancedPlugin) GetService() *ProxyCacheAdvancedPluginService {
	if p == nil {
		return nil
	}
	return p.Service
}
