// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

// UpstreamAlgorithm - Which load balancing algorithm to use.
type UpstreamAlgorithm string

const (
	UpstreamAlgorithmConsistentHashing UpstreamAlgorithm = "consistent-hashing"
	UpstreamAlgorithmLatency           UpstreamAlgorithm = "latency"
	UpstreamAlgorithmLeastConnections  UpstreamAlgorithm = "least-connections"
	UpstreamAlgorithmRoundRobin        UpstreamAlgorithm = "round-robin"
	UpstreamAlgorithmStickySessions    UpstreamAlgorithm = "sticky-sessions"
)

func (e UpstreamAlgorithm) ToPointer() *UpstreamAlgorithm {
	return &e
}
func (e *UpstreamAlgorithm) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consistent-hashing":
		fallthrough
	case "latency":
		fallthrough
	case "least-connections":
		fallthrough
	case "round-robin":
		fallthrough
	case "sticky-sessions":
		*e = UpstreamAlgorithm(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpstreamAlgorithm: %v", v)
	}
}

// UpstreamClientCertificate - If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
type UpstreamClientCertificate struct {
	ID *string `json:"id,omitempty"`
}

func (u *UpstreamClientCertificate) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

// HashFallback - What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.
type HashFallback string

const (
	HashFallbackConsumer   HashFallback = "consumer"
	HashFallbackCookie     HashFallback = "cookie"
	HashFallbackHeader     HashFallback = "header"
	HashFallbackIP         HashFallback = "ip"
	HashFallbackNone       HashFallback = "none"
	HashFallbackPath       HashFallback = "path"
	HashFallbackQueryArg   HashFallback = "query_arg"
	HashFallbackURICapture HashFallback = "uri_capture"
)

func (e HashFallback) ToPointer() *HashFallback {
	return &e
}
func (e *HashFallback) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "cookie":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "none":
		fallthrough
	case "path":
		fallthrough
	case "query_arg":
		fallthrough
	case "uri_capture":
		*e = HashFallback(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HashFallback: %v", v)
	}
}

// HashOn - What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.
type HashOn string

const (
	HashOnConsumer   HashOn = "consumer"
	HashOnCookie     HashOn = "cookie"
	HashOnHeader     HashOn = "header"
	HashOnIP         HashOn = "ip"
	HashOnNone       HashOn = "none"
	HashOnPath       HashOn = "path"
	HashOnQueryArg   HashOn = "query_arg"
	HashOnURICapture HashOn = "uri_capture"
)

func (e HashOn) ToPointer() *HashOn {
	return &e
}
func (e *HashOn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "cookie":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "none":
		fallthrough
	case "path":
		fallthrough
	case "query_arg":
		fallthrough
	case "uri_capture":
		*e = HashOn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HashOn: %v", v)
	}
}

type Healthy struct {
	HTTPStatuses []int64  `json:"http_statuses,omitempty"`
	Interval     *float64 `default:"0" json:"interval"`
	Successes    *int64   `default:"0" json:"successes"`
}

func (h Healthy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *Healthy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (h *Healthy) GetHTTPStatuses() []int64 {
	if h == nil {
		return nil
	}
	return h.HTTPStatuses
}

func (h *Healthy) GetInterval() *float64 {
	if h == nil {
		return nil
	}
	return h.Interval
}

func (h *Healthy) GetSuccesses() *int64 {
	if h == nil {
		return nil
	}
	return h.Successes
}

type UpstreamType string

const (
	UpstreamTypeGrpc  UpstreamType = "grpc"
	UpstreamTypeGrpcs UpstreamType = "grpcs"
	UpstreamTypeHTTP  UpstreamType = "http"
	UpstreamTypeHTTPS UpstreamType = "https"
	UpstreamTypeTCP   UpstreamType = "tcp"
)

func (e UpstreamType) ToPointer() *UpstreamType {
	return &e
}
func (e *UpstreamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		*e = UpstreamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpstreamType: %v", v)
	}
}

type Unhealthy struct {
	HTTPFailures *int64   `default:"0" json:"http_failures"`
	HTTPStatuses []int64  `json:"http_statuses,omitempty"`
	Interval     *float64 `default:"0" json:"interval"`
	TCPFailures  *int64   `default:"0" json:"tcp_failures"`
	Timeouts     *int64   `default:"0" json:"timeouts"`
}

func (u Unhealthy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *Unhealthy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *Unhealthy) GetHTTPFailures() *int64 {
	if u == nil {
		return nil
	}
	return u.HTTPFailures
}

func (u *Unhealthy) GetHTTPStatuses() []int64 {
	if u == nil {
		return nil
	}
	return u.HTTPStatuses
}

func (u *Unhealthy) GetInterval() *float64 {
	if u == nil {
		return nil
	}
	return u.Interval
}

func (u *Unhealthy) GetTCPFailures() *int64 {
	if u == nil {
		return nil
	}
	return u.TCPFailures
}

func (u *Unhealthy) GetTimeouts() *int64 {
	if u == nil {
		return nil
	}
	return u.Timeouts
}

type Active struct {
	Concurrency *int64 `default:"10" json:"concurrency"`
	// A map of header names to arrays of header values.
	Headers map[string][]string `json:"headers,omitempty"`
	Healthy *Healthy            `json:"healthy,omitempty"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	HTTPPath *string `default:"/" json:"http_path"`
	// A string representing an SNI (server name indication) value for TLS.
	HTTPSSni               *string       `json:"https_sni,omitempty"`
	HTTPSVerifyCertificate *bool         `default:"true" json:"https_verify_certificate"`
	Timeout                *float64      `default:"1" json:"timeout"`
	Type                   *UpstreamType `default:"http" json:"type"`
	Unhealthy              *Unhealthy    `json:"unhealthy,omitempty"`
}

func (a Active) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Active) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *Active) GetConcurrency() *int64 {
	if a == nil {
		return nil
	}
	return a.Concurrency
}

func (a *Active) GetHeaders() map[string][]string {
	if a == nil {
		return nil
	}
	return a.Headers
}

func (a *Active) GetHealthy() *Healthy {
	if a == nil {
		return nil
	}
	return a.Healthy
}

func (a *Active) GetHTTPPath() *string {
	if a == nil {
		return nil
	}
	return a.HTTPPath
}

func (a *Active) GetHTTPSSni() *string {
	if a == nil {
		return nil
	}
	return a.HTTPSSni
}

func (a *Active) GetHTTPSVerifyCertificate() *bool {
	if a == nil {
		return nil
	}
	return a.HTTPSVerifyCertificate
}

func (a *Active) GetTimeout() *float64 {
	if a == nil {
		return nil
	}
	return a.Timeout
}

func (a *Active) GetType() *UpstreamType {
	if a == nil {
		return nil
	}
	return a.Type
}

func (a *Active) GetUnhealthy() *Unhealthy {
	if a == nil {
		return nil
	}
	return a.Unhealthy
}

type UpstreamHealthy struct {
	HTTPStatuses []int64 `json:"http_statuses,omitempty"`
	Successes    *int64  `default:"0" json:"successes"`
}

func (u UpstreamHealthy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpstreamHealthy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *UpstreamHealthy) GetHTTPStatuses() []int64 {
	if u == nil {
		return nil
	}
	return u.HTTPStatuses
}

func (u *UpstreamHealthy) GetSuccesses() *int64 {
	if u == nil {
		return nil
	}
	return u.Successes
}

type UpstreamHealthchecksType string

const (
	UpstreamHealthchecksTypeGrpc  UpstreamHealthchecksType = "grpc"
	UpstreamHealthchecksTypeGrpcs UpstreamHealthchecksType = "grpcs"
	UpstreamHealthchecksTypeHTTP  UpstreamHealthchecksType = "http"
	UpstreamHealthchecksTypeHTTPS UpstreamHealthchecksType = "https"
	UpstreamHealthchecksTypeTCP   UpstreamHealthchecksType = "tcp"
)

func (e UpstreamHealthchecksType) ToPointer() *UpstreamHealthchecksType {
	return &e
}
func (e *UpstreamHealthchecksType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		*e = UpstreamHealthchecksType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpstreamHealthchecksType: %v", v)
	}
}

type UpstreamUnhealthy struct {
	HTTPFailures *int64  `default:"0" json:"http_failures"`
	HTTPStatuses []int64 `json:"http_statuses,omitempty"`
	TCPFailures  *int64  `default:"0" json:"tcp_failures"`
	Timeouts     *int64  `default:"0" json:"timeouts"`
}

func (u UpstreamUnhealthy) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpstreamUnhealthy) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (u *UpstreamUnhealthy) GetHTTPFailures() *int64 {
	if u == nil {
		return nil
	}
	return u.HTTPFailures
}

func (u *UpstreamUnhealthy) GetHTTPStatuses() []int64 {
	if u == nil {
		return nil
	}
	return u.HTTPStatuses
}

func (u *UpstreamUnhealthy) GetTCPFailures() *int64 {
	if u == nil {
		return nil
	}
	return u.TCPFailures
}

func (u *UpstreamUnhealthy) GetTimeouts() *int64 {
	if u == nil {
		return nil
	}
	return u.Timeouts
}

type Passive struct {
	Healthy   *UpstreamHealthy          `json:"healthy,omitempty"`
	Type      *UpstreamHealthchecksType `default:"http" json:"type"`
	Unhealthy *UpstreamUnhealthy        `json:"unhealthy,omitempty"`
}

func (p Passive) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Passive) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *Passive) GetHealthy() *UpstreamHealthy {
	if p == nil {
		return nil
	}
	return p.Healthy
}

func (p *Passive) GetType() *UpstreamHealthchecksType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *Passive) GetUnhealthy() *UpstreamUnhealthy {
	if p == nil {
		return nil
	}
	return p.Unhealthy
}

// Healthchecks - The array of healthchecks.
type Healthchecks struct {
	Active    *Active  `json:"active,omitempty"`
	Passive   *Passive `json:"passive,omitempty"`
	Threshold *float64 `default:"0" json:"threshold"`
}

func (h Healthchecks) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(h, "", false)
}

func (h *Healthchecks) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &h, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (h *Healthchecks) GetActive() *Active {
	if h == nil {
		return nil
	}
	return h.Active
}

func (h *Healthchecks) GetPassive() *Passive {
	if h == nil {
		return nil
	}
	return h.Passive
}

func (h *Healthchecks) GetThreshold() *float64 {
	if h == nil {
		return nil
	}
	return h.Threshold
}

// Upstream - The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named `service.v1.xyz` for a Service object whose `host` is `service.v1.xyz`. Requests for this Service would be proxied to the targets defined within the upstream. An upstream also includes a [health checker][healthchecks], which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.
type Upstream struct {
	// Which load balancing algorithm to use.
	Algorithm *UpstreamAlgorithm `default:"round-robin" json:"algorithm"`
	// If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate *UpstreamClientCertificate `json:"client_certificate"`
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.
	HashFallback *HashFallback `default:"none" json:"hash_fallback"`
	// The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
	HashFallbackHeader *string `default:"null" json:"hash_fallback_header"`
	// The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
	HashFallbackQueryArg *string `default:"null" json:"hash_fallback_query_arg"`
	// The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
	HashFallbackURICapture *string `default:"null" json:"hash_fallback_uri_capture"`
	// What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.
	HashOn *HashOn `default:"none" json:"hash_on"`
	// The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
	HashOnCookie *string `default:"null" json:"hash_on_cookie"`
	// The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
	HashOnCookiePath *string `default:"/" json:"hash_on_cookie_path"`
	// The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
	HashOnHeader *string `default:"null" json:"hash_on_header"`
	// The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
	HashOnQueryArg *string `default:"null" json:"hash_on_query_arg"`
	// The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
	HashOnURICapture *string `default:"null" json:"hash_on_uri_capture"`
	// The array of healthchecks.
	Healthchecks *Healthchecks `json:"healthchecks,omitempty"`
	// The hostname to be used as `Host` header when proxying requests through Kong.
	HostHeader *string `default:"null" json:"host_header"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// This is a hostname, which must be equal to the `host` of a Service.
	Name string `json:"name"`
	// The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
	Slots *int64 `default:"10000" json:"slots"`
	// The cookie name to keep sticky sessions.
	StickySessionsCookie *string `default:"null" json:"sticky_sessions_cookie"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	StickySessionsCookiePath *string `default:"/" json:"sticky_sessions_cookie_path"`
	// An optional set of strings associated with the Upstream for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
	// If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
	UseSrvName *bool `default:"false" json:"use_srv_name"`
}

func (u Upstream) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *Upstream) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"client_certificate", "name", "tags"}); err != nil {
		return err
	}
	return nil
}

func (u *Upstream) GetAlgorithm() *UpstreamAlgorithm {
	if u == nil {
		return nil
	}
	return u.Algorithm
}

func (u *Upstream) GetClientCertificate() *UpstreamClientCertificate {
	if u == nil {
		return nil
	}
	return u.ClientCertificate
}

func (u *Upstream) GetCreatedAt() *int64 {
	if u == nil {
		return nil
	}
	return u.CreatedAt
}

func (u *Upstream) GetHashFallback() *HashFallback {
	if u == nil {
		return nil
	}
	return u.HashFallback
}

func (u *Upstream) GetHashFallbackHeader() *string {
	if u == nil {
		return nil
	}
	return u.HashFallbackHeader
}

func (u *Upstream) GetHashFallbackQueryArg() *string {
	if u == nil {
		return nil
	}
	return u.HashFallbackQueryArg
}

func (u *Upstream) GetHashFallbackURICapture() *string {
	if u == nil {
		return nil
	}
	return u.HashFallbackURICapture
}

func (u *Upstream) GetHashOn() *HashOn {
	if u == nil {
		return nil
	}
	return u.HashOn
}

func (u *Upstream) GetHashOnCookie() *string {
	if u == nil {
		return nil
	}
	return u.HashOnCookie
}

func (u *Upstream) GetHashOnCookiePath() *string {
	if u == nil {
		return nil
	}
	return u.HashOnCookiePath
}

func (u *Upstream) GetHashOnHeader() *string {
	if u == nil {
		return nil
	}
	return u.HashOnHeader
}

func (u *Upstream) GetHashOnQueryArg() *string {
	if u == nil {
		return nil
	}
	return u.HashOnQueryArg
}

func (u *Upstream) GetHashOnURICapture() *string {
	if u == nil {
		return nil
	}
	return u.HashOnURICapture
}

func (u *Upstream) GetHealthchecks() *Healthchecks {
	if u == nil {
		return nil
	}
	return u.Healthchecks
}

func (u *Upstream) GetHostHeader() *string {
	if u == nil {
		return nil
	}
	return u.HostHeader
}

func (u *Upstream) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *Upstream) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *Upstream) GetSlots() *int64 {
	if u == nil {
		return nil
	}
	return u.Slots
}

func (u *Upstream) GetStickySessionsCookie() *string {
	if u == nil {
		return nil
	}
	return u.StickySessionsCookie
}

func (u *Upstream) GetStickySessionsCookiePath() *string {
	if u == nil {
		return nil
	}
	return u.StickySessionsCookiePath
}

func (u *Upstream) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *Upstream) GetUpdatedAt() *int64 {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *Upstream) GetUseSrvName() *bool {
	if u == nil {
		return nil
	}
	return u.UseSrvName
}
