// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type Destinations struct {
	// A string representing an IP address or CIDR block, such as 192.168.1.1 or 192.168.0.0/16.
	IP *string `default:"null" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"null" json:"port"`
}

func (d Destinations) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Destinations) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (d *Destinations) GetIP() *string {
	if d == nil {
		return nil
	}
	return d.IP
}

func (d *Destinations) GetPort() *int64 {
	if d == nil {
		return nil
	}
	return d.Port
}

// HTTPSRedirectStatusCode - The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.
type HTTPSRedirectStatusCode int64

const (
	HTTPSRedirectStatusCodeThreeHundredAndOne      HTTPSRedirectStatusCode = 301
	HTTPSRedirectStatusCodeThreeHundredAndTwo      HTTPSRedirectStatusCode = 302
	HTTPSRedirectStatusCodeThreeHundredAndSeven    HTTPSRedirectStatusCode = 307
	HTTPSRedirectStatusCodeThreeHundredAndEight    HTTPSRedirectStatusCode = 308
	HTTPSRedirectStatusCodeFourHundredAndTwentySix HTTPSRedirectStatusCode = 426
)

func (e HTTPSRedirectStatusCode) ToPointer() *HTTPSRedirectStatusCode {
	return &e
}
func (e *HTTPSRedirectStatusCode) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 301:
		fallthrough
	case 302:
		fallthrough
	case 307:
		fallthrough
	case 308:
		fallthrough
	case 426:
		*e = HTTPSRedirectStatusCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HTTPSRedirectStatusCode: %v", v)
	}
}

// PathHandling - Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
type PathHandling string

const (
	PathHandlingV0 PathHandling = "v0"
	PathHandlingV1 PathHandling = "v1"
)

func (e PathHandling) ToPointer() *PathHandling {
	return &e
}
func (e *PathHandling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v0":
		fallthrough
	case "v1":
		*e = PathHandling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PathHandling: %v", v)
	}
}

// RouteJSONProtocols - A string representing a protocol, such as HTTP or HTTPS.
type RouteJSONProtocols string

const (
	RouteJSONProtocolsGrpc           RouteJSONProtocols = "grpc"
	RouteJSONProtocolsGrpcs          RouteJSONProtocols = "grpcs"
	RouteJSONProtocolsHTTP           RouteJSONProtocols = "http"
	RouteJSONProtocolsHTTPS          RouteJSONProtocols = "https"
	RouteJSONProtocolsTCP            RouteJSONProtocols = "tcp"
	RouteJSONProtocolsTLS            RouteJSONProtocols = "tls"
	RouteJSONProtocolsTLSPassthrough RouteJSONProtocols = "tls_passthrough"
	RouteJSONProtocolsUDP            RouteJSONProtocols = "udp"
	RouteJSONProtocolsWs             RouteJSONProtocols = "ws"
	RouteJSONProtocolsWss            RouteJSONProtocols = "wss"
)

func (e RouteJSONProtocols) ToPointer() *RouteJSONProtocols {
	return &e
}
func (e *RouteJSONProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = RouteJSONProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RouteJSONProtocols: %v", v)
	}
}

// RouteJSONService - The Service this Route is associated to. This is where the Route proxies traffic to.
type RouteJSONService struct {
	ID *string `json:"id,omitempty"`
}

func (r *RouteJSONService) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

type Sources struct {
	// A string representing an IP address or CIDR block, such as 192.168.1.1 or 192.168.0.0/16.
	IP *string `default:"null" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"null" json:"port"`
}

func (s Sources) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Sources) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *Sources) GetIP() *string {
	if s == nil {
		return nil
	}
	return s.IP
}

func (s *Sources) GetPort() *int64 {
	if s == nil {
		return nil
	}
	return s.Port
}

// RouteJSON - Route entities define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it. Every request matching a given Route will be proxied to its associated Service. The combination of Routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure. You need at least one matching rule that applies to the protocol being matched by the Route.
type RouteJSON struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
	Destinations []Destinations `json:"destinations"`
	// One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
	Headers map[string][]string `json:"headers,omitempty"`
	// A list of domain names that match this Route. Note that the hosts value is case sensitive.
	Hosts []string `json:"hosts"`
	// The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.
	HTTPSRedirectStatusCode *HTTPSRedirectStatusCode `default:"426" json:"https_redirect_status_code"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A list of HTTP methods that match this Route.
	Methods []string `json:"methods"`
	// The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
	Name *string `default:"null" json:"name"`
	// Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
	PathHandling *PathHandling `default:"v0" json:"path_handling"`
	// A list of paths that match this Route.
	Paths []string `json:"paths"`
	// When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
	PreserveHost *bool `default:"false" json:"preserve_host"`
	// An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
	Protocols []RouteJSONProtocols `json:"protocols"`
	// A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
	RegexPriority *int64 `default:"0" json:"regex_priority"`
	// Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
	RequestBuffering *bool `default:"true" json:"request_buffering"`
	// Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
	ResponseBuffering *bool `default:"true" json:"response_buffering"`
	// The Service this Route is associated to. This is where the Route proxies traffic to.
	Service *RouteJSONService `json:"service"`
	// A list of SNIs that match this Route when using stream routing.
	Snis []string `json:"snis"`
	// A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
	Sources []Sources `json:"sources"`
	// When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
	StripPath *bool `default:"true" json:"strip_path"`
	// An optional set of strings associated with the Route for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64 `json:"updated_at,omitempty"`
}

func (r RouteJSON) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RouteJSON) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (r *RouteJSON) GetCreatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.CreatedAt
}

func (r *RouteJSON) GetDestinations() []Destinations {
	if r == nil {
		return nil
	}
	return r.Destinations
}

func (r *RouteJSON) GetHeaders() map[string][]string {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *RouteJSON) GetHosts() []string {
	if r == nil {
		return nil
	}
	return r.Hosts
}

func (r *RouteJSON) GetHTTPSRedirectStatusCode() *HTTPSRedirectStatusCode {
	if r == nil {
		return nil
	}
	return r.HTTPSRedirectStatusCode
}

func (r *RouteJSON) GetID() *string {
	if r == nil {
		return nil
	}
	return r.ID
}

func (r *RouteJSON) GetMethods() []string {
	if r == nil {
		return nil
	}
	return r.Methods
}

func (r *RouteJSON) GetName() *string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *RouteJSON) GetPathHandling() *PathHandling {
	if r == nil {
		return nil
	}
	return r.PathHandling
}

func (r *RouteJSON) GetPaths() []string {
	if r == nil {
		return nil
	}
	return r.Paths
}

func (r *RouteJSON) GetPreserveHost() *bool {
	if r == nil {
		return nil
	}
	return r.PreserveHost
}

func (r *RouteJSON) GetProtocols() []RouteJSONProtocols {
	if r == nil {
		return nil
	}
	return r.Protocols
}

func (r *RouteJSON) GetRegexPriority() *int64 {
	if r == nil {
		return nil
	}
	return r.RegexPriority
}

func (r *RouteJSON) GetRequestBuffering() *bool {
	if r == nil {
		return nil
	}
	return r.RequestBuffering
}

func (r *RouteJSON) GetResponseBuffering() *bool {
	if r == nil {
		return nil
	}
	return r.ResponseBuffering
}

func (r *RouteJSON) GetService() *RouteJSONService {
	if r == nil {
		return nil
	}
	return r.Service
}

func (r *RouteJSON) GetSnis() []string {
	if r == nil {
		return nil
	}
	return r.Snis
}

func (r *RouteJSON) GetSources() []Sources {
	if r == nil {
		return nil
	}
	return r.Sources
}

func (r *RouteJSON) GetStripPath() *bool {
	if r == nil {
		return nil
	}
	return r.StripPath
}

func (r *RouteJSON) GetTags() []string {
	if r == nil {
		return nil
	}
	return r.Tags
}

func (r *RouteJSON) GetUpdatedAt() *int64 {
	if r == nil {
		return nil
	}
	return r.UpdatedAt
}
