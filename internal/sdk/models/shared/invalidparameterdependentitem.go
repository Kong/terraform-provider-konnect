// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Rule - invalid parameters rules
type Rule string

const (
	RuleDependentFields Rule = "dependent_fields"
)

func (e Rule) ToPointer() *Rule {
	return &e
}

func (e *Rule) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dependent_fields":
		*e = Rule(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rule: %v", v)
	}
}

type InvalidParameterDependentItem struct {
	Field string `json:"field"`
	// invalid parameters rules
	Rule       *Rule         `json:"rule"`
	Reason     string        `json:"reason"`
	Dependents []interface{} `json:"dependents"`
}

func (o *InvalidParameterDependentItem) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *InvalidParameterDependentItem) GetRule() *Rule {
	if o == nil {
		return nil
	}
	return o.Rule
}

func (o *InvalidParameterDependentItem) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *InvalidParameterDependentItem) GetDependents() []interface{} {
	if o == nil {
		return nil
	}
	return o.Dependents
}
