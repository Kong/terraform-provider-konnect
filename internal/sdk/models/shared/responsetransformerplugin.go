// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

type ResponseTransformerPluginProtocols string

const (
	ResponseTransformerPluginProtocolsGrpc           ResponseTransformerPluginProtocols = "grpc"
	ResponseTransformerPluginProtocolsGrpcs          ResponseTransformerPluginProtocols = "grpcs"
	ResponseTransformerPluginProtocolsHTTP           ResponseTransformerPluginProtocols = "http"
	ResponseTransformerPluginProtocolsHTTPS          ResponseTransformerPluginProtocols = "https"
	ResponseTransformerPluginProtocolsTCP            ResponseTransformerPluginProtocols = "tcp"
	ResponseTransformerPluginProtocolsTLS            ResponseTransformerPluginProtocols = "tls"
	ResponseTransformerPluginProtocolsTLSPassthrough ResponseTransformerPluginProtocols = "tls_passthrough"
	ResponseTransformerPluginProtocolsUDP            ResponseTransformerPluginProtocols = "udp"
	ResponseTransformerPluginProtocolsWs             ResponseTransformerPluginProtocols = "ws"
	ResponseTransformerPluginProtocolsWss            ResponseTransformerPluginProtocols = "wss"
)

func (e ResponseTransformerPluginProtocols) ToPointer() *ResponseTransformerPluginProtocols {
	return &e
}

func (e *ResponseTransformerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = ResponseTransformerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerPluginProtocols: %v", v)
	}
}

// ResponseTransformerPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type ResponseTransformerPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ResponseTransformerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type ResponseTransformerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// ResponseTransformerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type ResponseTransformerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *ResponseTransformerPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type ResponseTransformerPluginRemove struct {
	JSON    []string `json:"json,omitempty"`
	Headers []string `json:"headers,omitempty"`
}

func (o *ResponseTransformerPluginRemove) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerPluginRemove) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

type ResponseTransformerPluginRename struct {
	Headers []string `json:"headers,omitempty"`
}

func (o *ResponseTransformerPluginRename) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

type ResponseTransformerPluginJSONTypes string

const (
	ResponseTransformerPluginJSONTypesBoolean ResponseTransformerPluginJSONTypes = "boolean"
	ResponseTransformerPluginJSONTypesNumber  ResponseTransformerPluginJSONTypes = "number"
	ResponseTransformerPluginJSONTypesString  ResponseTransformerPluginJSONTypes = "string"
)

func (e ResponseTransformerPluginJSONTypes) ToPointer() *ResponseTransformerPluginJSONTypes {
	return &e
}

func (e *ResponseTransformerPluginJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = ResponseTransformerPluginJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerPluginJSONTypes: %v", v)
	}
}

type ResponseTransformerPluginReplace struct {
	JSON []string `json:"json,omitempty"`
	// List of JSON type names. Specify the types of the JSON values returned when appending
	// JSON properties. Each string element can be one of: boolean, number, or string.
	JSONTypes []ResponseTransformerPluginJSONTypes `json:"json_types,omitempty"`
	Headers   []string                             `json:"headers,omitempty"`
}

func (o *ResponseTransformerPluginReplace) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerPluginReplace) GetJSONTypes() []ResponseTransformerPluginJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *ResponseTransformerPluginReplace) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

type ResponseTransformerPluginConfigJSONTypes string

const (
	ResponseTransformerPluginConfigJSONTypesBoolean ResponseTransformerPluginConfigJSONTypes = "boolean"
	ResponseTransformerPluginConfigJSONTypesNumber  ResponseTransformerPluginConfigJSONTypes = "number"
	ResponseTransformerPluginConfigJSONTypesString  ResponseTransformerPluginConfigJSONTypes = "string"
)

func (e ResponseTransformerPluginConfigJSONTypes) ToPointer() *ResponseTransformerPluginConfigJSONTypes {
	return &e
}

func (e *ResponseTransformerPluginConfigJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = ResponseTransformerPluginConfigJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerPluginConfigJSONTypes: %v", v)
	}
}

type ResponseTransformerPluginAdd struct {
	JSON []string `json:"json,omitempty"`
	// List of JSON type names. Specify the types of the JSON values returned when appending
	// JSON properties. Each string element can be one of: boolean, number, or string.
	JSONTypes []ResponseTransformerPluginConfigJSONTypes `json:"json_types,omitempty"`
	Headers   []string                                   `json:"headers,omitempty"`
}

func (o *ResponseTransformerPluginAdd) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerPluginAdd) GetJSONTypes() []ResponseTransformerPluginConfigJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *ResponseTransformerPluginAdd) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

type ResponseTransformerPluginConfigAppendJSONTypes string

const (
	ResponseTransformerPluginConfigAppendJSONTypesBoolean ResponseTransformerPluginConfigAppendJSONTypes = "boolean"
	ResponseTransformerPluginConfigAppendJSONTypesNumber  ResponseTransformerPluginConfigAppendJSONTypes = "number"
	ResponseTransformerPluginConfigAppendJSONTypesString  ResponseTransformerPluginConfigAppendJSONTypes = "string"
)

func (e ResponseTransformerPluginConfigAppendJSONTypes) ToPointer() *ResponseTransformerPluginConfigAppendJSONTypes {
	return &e
}

func (e *ResponseTransformerPluginConfigAppendJSONTypes) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		fallthrough
	case "number":
		fallthrough
	case "string":
		*e = ResponseTransformerPluginConfigAppendJSONTypes(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseTransformerPluginConfigAppendJSONTypes: %v", v)
	}
}

type ResponseTransformerPluginAppend struct {
	JSON []string `json:"json,omitempty"`
	// List of JSON type names. Specify the types of the JSON values returned when appending
	// JSON properties. Each string element can be one of: boolean, number, or string.
	JSONTypes []ResponseTransformerPluginConfigAppendJSONTypes `json:"json_types,omitempty"`
	Headers   []string                                         `json:"headers,omitempty"`
}

func (o *ResponseTransformerPluginAppend) GetJSON() []string {
	if o == nil {
		return nil
	}
	return o.JSON
}

func (o *ResponseTransformerPluginAppend) GetJSONTypes() []ResponseTransformerPluginConfigAppendJSONTypes {
	if o == nil {
		return nil
	}
	return o.JSONTypes
}

func (o *ResponseTransformerPluginAppend) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

type ResponseTransformerPluginConfig struct {
	Remove  *ResponseTransformerPluginRemove  `json:"remove,omitempty"`
	Rename  *ResponseTransformerPluginRename  `json:"rename,omitempty"`
	Replace *ResponseTransformerPluginReplace `json:"replace,omitempty"`
	Add     *ResponseTransformerPluginAdd     `json:"add,omitempty"`
	Append  *ResponseTransformerPluginAppend  `json:"append,omitempty"`
}

func (o *ResponseTransformerPluginConfig) GetRemove() *ResponseTransformerPluginRemove {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *ResponseTransformerPluginConfig) GetRename() *ResponseTransformerPluginRename {
	if o == nil {
		return nil
	}
	return o.Rename
}

func (o *ResponseTransformerPluginConfig) GetReplace() *ResponseTransformerPluginReplace {
	if o == nil {
		return nil
	}
	return o.Replace
}

func (o *ResponseTransformerPluginConfig) GetAdd() *ResponseTransformerPluginAdd {
	if o == nil {
		return nil
	}
	return o.Add
}

func (o *ResponseTransformerPluginConfig) GetAppend() *ResponseTransformerPluginAppend {
	if o == nil {
		return nil
	}
	return o.Append
}

// ResponseTransformerPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type ResponseTransformerPlugin struct {
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"response-transformer" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []ResponseTransformerPluginProtocols `json:"protocols"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *ResponseTransformerPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *ResponseTransformerPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *ResponseTransformerPluginService `json:"service,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64                          `json:"created_at,omitempty"`
	ID        *string                         `json:"id,omitempty"`
	Config    ResponseTransformerPluginConfig `json:"config"`
}

func (r ResponseTransformerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResponseTransformerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ResponseTransformerPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *ResponseTransformerPlugin) GetName() string {
	return "response-transformer"
}

func (o *ResponseTransformerPlugin) GetProtocols() []ResponseTransformerPluginProtocols {
	if o == nil {
		return []ResponseTransformerPluginProtocols{}
	}
	return o.Protocols
}

func (o *ResponseTransformerPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *ResponseTransformerPlugin) GetConsumer() *ResponseTransformerPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *ResponseTransformerPlugin) GetRoute() *ResponseTransformerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *ResponseTransformerPlugin) GetService() *ResponseTransformerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *ResponseTransformerPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ResponseTransformerPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ResponseTransformerPlugin) GetConfig() ResponseTransformerPluginConfig {
	if o == nil {
		return ResponseTransformerPluginConfig{}
	}
	return o.Config
}
