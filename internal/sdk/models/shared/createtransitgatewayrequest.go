// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v3/internal/sdk/internal/utils"
)

type CreateTransitGatewayRequestType string

const (
	CreateTransitGatewayRequestTypeAWSTransitGateway           CreateTransitGatewayRequestType = "AWSTransitGateway"
	CreateTransitGatewayRequestTypeAWSVpcPeeringGateway        CreateTransitGatewayRequestType = "AWSVpcPeeringGateway"
	CreateTransitGatewayRequestTypeAWSResourceEndpointGateway  CreateTransitGatewayRequestType = "AWSResourceEndpointGateway"
	CreateTransitGatewayRequestTypeAzureTransitGateway         CreateTransitGatewayRequestType = "AzureTransitGateway"
	CreateTransitGatewayRequestTypeGcpVpcPeeringTransitGateway CreateTransitGatewayRequestType = "GcpVpcPeeringTransitGateway"
)

// CreateTransitGatewayRequest - Request schema for creating a transit gateway.
type CreateTransitGatewayRequest struct {
	AWSTransitGateway           *AWSTransitGateway           `queryParam:"inline,name=CreateTransitGatewayRequest"`
	AWSVpcPeeringGateway        *AWSVpcPeeringGateway        `queryParam:"inline,name=CreateTransitGatewayRequest"`
	AWSResourceEndpointGateway  *AWSResourceEndpointGateway  `queryParam:"inline,name=CreateTransitGatewayRequest"`
	AzureTransitGateway         *AzureTransitGateway         `queryParam:"inline,name=CreateTransitGatewayRequest"`
	GcpVpcPeeringTransitGateway *GcpVpcPeeringTransitGateway `queryParam:"inline,name=CreateTransitGatewayRequest"`

	Type CreateTransitGatewayRequestType
}

func CreateCreateTransitGatewayRequestAWSTransitGateway(awsTransitGateway AWSTransitGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeAWSTransitGateway

	return CreateTransitGatewayRequest{
		AWSTransitGateway: &awsTransitGateway,
		Type:              typ,
	}
}

func CreateCreateTransitGatewayRequestAWSVpcPeeringGateway(awsVpcPeeringGateway AWSVpcPeeringGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeAWSVpcPeeringGateway

	return CreateTransitGatewayRequest{
		AWSVpcPeeringGateway: &awsVpcPeeringGateway,
		Type:                 typ,
	}
}

func CreateCreateTransitGatewayRequestAWSResourceEndpointGateway(awsResourceEndpointGateway AWSResourceEndpointGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeAWSResourceEndpointGateway

	return CreateTransitGatewayRequest{
		AWSResourceEndpointGateway: &awsResourceEndpointGateway,
		Type:                       typ,
	}
}

func CreateCreateTransitGatewayRequestAzureTransitGateway(azureTransitGateway AzureTransitGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeAzureTransitGateway

	return CreateTransitGatewayRequest{
		AzureTransitGateway: &azureTransitGateway,
		Type:                typ,
	}
}

func CreateCreateTransitGatewayRequestGcpVpcPeeringTransitGateway(gcpVpcPeeringTransitGateway GcpVpcPeeringTransitGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeGcpVpcPeeringTransitGateway

	return CreateTransitGatewayRequest{
		GcpVpcPeeringTransitGateway: &gcpVpcPeeringTransitGateway,
		Type:                        typ,
	}
}

func (u *CreateTransitGatewayRequest) UnmarshalJSON(data []byte) error {

	var awsTransitGateway AWSTransitGateway = AWSTransitGateway{}
	if err := utils.UnmarshalJSON(data, &awsTransitGateway, "", true, nil); err == nil {
		u.AWSTransitGateway = &awsTransitGateway
		u.Type = CreateTransitGatewayRequestTypeAWSTransitGateway
		return nil
	}

	var awsVpcPeeringGateway AWSVpcPeeringGateway = AWSVpcPeeringGateway{}
	if err := utils.UnmarshalJSON(data, &awsVpcPeeringGateway, "", true, nil); err == nil {
		u.AWSVpcPeeringGateway = &awsVpcPeeringGateway
		u.Type = CreateTransitGatewayRequestTypeAWSVpcPeeringGateway
		return nil
	}

	var awsResourceEndpointGateway AWSResourceEndpointGateway = AWSResourceEndpointGateway{}
	if err := utils.UnmarshalJSON(data, &awsResourceEndpointGateway, "", true, nil); err == nil {
		u.AWSResourceEndpointGateway = &awsResourceEndpointGateway
		u.Type = CreateTransitGatewayRequestTypeAWSResourceEndpointGateway
		return nil
	}

	var azureTransitGateway AzureTransitGateway = AzureTransitGateway{}
	if err := utils.UnmarshalJSON(data, &azureTransitGateway, "", true, nil); err == nil {
		u.AzureTransitGateway = &azureTransitGateway
		u.Type = CreateTransitGatewayRequestTypeAzureTransitGateway
		return nil
	}

	var gcpVpcPeeringTransitGateway GcpVpcPeeringTransitGateway = GcpVpcPeeringTransitGateway{}
	if err := utils.UnmarshalJSON(data, &gcpVpcPeeringTransitGateway, "", true, nil); err == nil {
		u.GcpVpcPeeringTransitGateway = &gcpVpcPeeringTransitGateway
		u.Type = CreateTransitGatewayRequestTypeGcpVpcPeeringTransitGateway
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateTransitGatewayRequest", string(data))
}

func (u CreateTransitGatewayRequest) MarshalJSON() ([]byte, error) {
	if u.AWSTransitGateway != nil {
		return utils.MarshalJSON(u.AWSTransitGateway, "", true)
	}

	if u.AWSVpcPeeringGateway != nil {
		return utils.MarshalJSON(u.AWSVpcPeeringGateway, "", true)
	}

	if u.AWSResourceEndpointGateway != nil {
		return utils.MarshalJSON(u.AWSResourceEndpointGateway, "", true)
	}

	if u.AzureTransitGateway != nil {
		return utils.MarshalJSON(u.AzureTransitGateway, "", true)
	}

	if u.GcpVpcPeeringTransitGateway != nil {
		return utils.MarshalJSON(u.GcpVpcPeeringTransitGateway, "", true)
	}

	return nil, errors.New("could not marshal union type CreateTransitGatewayRequest: all fields are null")
}
