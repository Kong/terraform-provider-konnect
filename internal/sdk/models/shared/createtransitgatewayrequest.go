// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type AzureTransitGateway struct {
	// Human-readable name of the transit gateway.
	Name string `json:"name"`
	// List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway
	// attachment.
	//
	DNSConfig                      []TransitGatewayDNSConfig        `json:"dns_config,omitempty"`
	TransitGatewayAttachmentConfig AzureVNETPeeringAttachmentConfig `json:"transit_gateway_attachment_config"`
}

func (o *AzureTransitGateway) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AzureTransitGateway) GetDNSConfig() []TransitGatewayDNSConfig {
	if o == nil {
		return nil
	}
	return o.DNSConfig
}

func (o *AzureTransitGateway) GetTransitGatewayAttachmentConfig() AzureVNETPeeringAttachmentConfig {
	if o == nil {
		return AzureVNETPeeringAttachmentConfig{}
	}
	return o.TransitGatewayAttachmentConfig
}

type CreateAWSVpcPeeringGatewayAWSTransitGateway struct {
	// Human-readable name of the transit gateway.
	Name string `json:"name"`
	// List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway
	// attachment.
	//
	DNSConfig []TransitGatewayDNSConfig `json:"dns_config,omitempty"`
	// CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
	// network.
	//
	CidrBlocks                     []string                             `json:"cidr_blocks"`
	TransitGatewayAttachmentConfig AwsVpcPeeringGatewayAttachmentConfig `json:"transit_gateway_attachment_config"`
}

func (o *CreateAWSVpcPeeringGatewayAWSTransitGateway) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateAWSVpcPeeringGatewayAWSTransitGateway) GetDNSConfig() []TransitGatewayDNSConfig {
	if o == nil {
		return nil
	}
	return o.DNSConfig
}

func (o *CreateAWSVpcPeeringGatewayAWSTransitGateway) GetCidrBlocks() []string {
	if o == nil {
		return []string{}
	}
	return o.CidrBlocks
}

func (o *CreateAWSVpcPeeringGatewayAWSTransitGateway) GetTransitGatewayAttachmentConfig() AwsVpcPeeringGatewayAttachmentConfig {
	if o == nil {
		return AwsVpcPeeringGatewayAttachmentConfig{}
	}
	return o.TransitGatewayAttachmentConfig
}

type AWSTransitGateway struct {
	// Human-readable name of the transit gateway.
	Name string `json:"name"`
	// List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway
	// attachment.
	//
	DNSConfig []TransitGatewayDNSConfig `json:"dns_config,omitempty"`
	// CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
	// network.
	//
	CidrBlocks                     []string                          `json:"cidr_blocks"`
	TransitGatewayAttachmentConfig AwsTransitGatewayAttachmentConfig `json:"transit_gateway_attachment_config"`
}

func (o *AWSTransitGateway) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AWSTransitGateway) GetDNSConfig() []TransitGatewayDNSConfig {
	if o == nil {
		return nil
	}
	return o.DNSConfig
}

func (o *AWSTransitGateway) GetCidrBlocks() []string {
	if o == nil {
		return []string{}
	}
	return o.CidrBlocks
}

func (o *AWSTransitGateway) GetTransitGatewayAttachmentConfig() AwsTransitGatewayAttachmentConfig {
	if o == nil {
		return AwsTransitGatewayAttachmentConfig{}
	}
	return o.TransitGatewayAttachmentConfig
}

type CreateTransitGatewayRequestType string

const (
	CreateTransitGatewayRequestTypeAWSTransitGateway                           CreateTransitGatewayRequestType = "AWS Transit Gateway"
	CreateTransitGatewayRequestTypeCreateAWSVpcPeeringGatewayAWSTransitGateway CreateTransitGatewayRequestType = "CreateAwsVpcPeeringGateway_AWS Transit Gateway"
	CreateTransitGatewayRequestTypeAzureTransitGateway                         CreateTransitGatewayRequestType = "Azure Transit Gateway"
)

// CreateTransitGatewayRequest - Request schema for creating a transit gateway.
type CreateTransitGatewayRequest struct {
	AWSTransitGateway                           *AWSTransitGateway                           `queryParam:"inline"`
	CreateAWSVpcPeeringGatewayAWSTransitGateway *CreateAWSVpcPeeringGatewayAWSTransitGateway `queryParam:"inline"`
	AzureTransitGateway                         *AzureTransitGateway                         `queryParam:"inline"`

	Type CreateTransitGatewayRequestType
}

func CreateCreateTransitGatewayRequestAWSTransitGateway(awsTransitGateway AWSTransitGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeAWSTransitGateway

	return CreateTransitGatewayRequest{
		AWSTransitGateway: &awsTransitGateway,
		Type:              typ,
	}
}

func CreateCreateTransitGatewayRequestCreateAWSVpcPeeringGatewayAWSTransitGateway(createAWSVpcPeeringGatewayAWSTransitGateway CreateAWSVpcPeeringGatewayAWSTransitGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeCreateAWSVpcPeeringGatewayAWSTransitGateway

	return CreateTransitGatewayRequest{
		CreateAWSVpcPeeringGatewayAWSTransitGateway: &createAWSVpcPeeringGatewayAWSTransitGateway,
		Type: typ,
	}
}

func CreateCreateTransitGatewayRequestAzureTransitGateway(azureTransitGateway AzureTransitGateway) CreateTransitGatewayRequest {
	typ := CreateTransitGatewayRequestTypeAzureTransitGateway

	return CreateTransitGatewayRequest{
		AzureTransitGateway: &azureTransitGateway,
		Type:                typ,
	}
}

func (u *CreateTransitGatewayRequest) UnmarshalJSON(data []byte) error {

	var azureTransitGateway AzureTransitGateway = AzureTransitGateway{}
	if err := utils.UnmarshalJSON(data, &azureTransitGateway, "", true, true); err == nil {
		u.AzureTransitGateway = &azureTransitGateway
		u.Type = CreateTransitGatewayRequestTypeAzureTransitGateway
		return nil
	}

	var awsTransitGateway AWSTransitGateway = AWSTransitGateway{}
	if err := utils.UnmarshalJSON(data, &awsTransitGateway, "", true, true); err == nil {
		u.AWSTransitGateway = &awsTransitGateway
		u.Type = CreateTransitGatewayRequestTypeAWSTransitGateway
		return nil
	}

	var createAWSVpcPeeringGatewayAWSTransitGateway CreateAWSVpcPeeringGatewayAWSTransitGateway = CreateAWSVpcPeeringGatewayAWSTransitGateway{}
	if err := utils.UnmarshalJSON(data, &createAWSVpcPeeringGatewayAWSTransitGateway, "", true, true); err == nil {
		u.CreateAWSVpcPeeringGatewayAWSTransitGateway = &createAWSVpcPeeringGatewayAWSTransitGateway
		u.Type = CreateTransitGatewayRequestTypeCreateAWSVpcPeeringGatewayAWSTransitGateway
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateTransitGatewayRequest", string(data))
}

func (u CreateTransitGatewayRequest) MarshalJSON() ([]byte, error) {
	if u.AWSTransitGateway != nil {
		return utils.MarshalJSON(u.AWSTransitGateway, "", true)
	}

	if u.CreateAWSVpcPeeringGatewayAWSTransitGateway != nil {
		return utils.MarshalJSON(u.CreateAWSVpcPeeringGatewayAWSTransitGateway, "", true)
	}

	if u.AzureTransitGateway != nil {
		return utils.MarshalJSON(u.AzureTransitGateway, "", true)
	}

	return nil, errors.New("could not marshal union type CreateTransitGatewayRequest: all fields are null")
}
