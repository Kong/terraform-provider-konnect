// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateTLSMetadataHeadersPluginConfig struct {
	// Define the HTTP header name used for the SHA1 fingerprint of the client certificate.
	ClientCertFingerprintHeaderName *string `json:"client_cert_fingerprint_header_name,omitempty"`
	// Define the HTTP header name used for the PEM format URL encoded client certificate.
	ClientCertHeaderName *string `json:"client_cert_header_name,omitempty"`
	// Define the HTTP header name used for the issuer DN of the client certificate.
	ClientCertIssuerDnHeaderName *string `json:"client_cert_issuer_dn_header_name,omitempty"`
	// Define the HTTP header name used for the subject DN of the client certificate.
	ClientCertSubjectDnHeaderName *string `json:"client_cert_subject_dn_header_name,omitempty"`
	// Define the HTTP header name used for the serial number of the client certificate.
	ClientSerialHeaderName *string `json:"client_serial_header_name,omitempty"`
	// Enables TLS client certificate metadata values to be injected into HTTP headers.
	InjectClientCertDetails *bool `json:"inject_client_cert_details,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginConfig) GetClientCertFingerprintHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.ClientCertFingerprintHeaderName
}

func (o *CreateTLSMetadataHeadersPluginConfig) GetClientCertHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.ClientCertHeaderName
}

func (o *CreateTLSMetadataHeadersPluginConfig) GetClientCertIssuerDnHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.ClientCertIssuerDnHeaderName
}

func (o *CreateTLSMetadataHeadersPluginConfig) GetClientCertSubjectDnHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.ClientCertSubjectDnHeaderName
}

func (o *CreateTLSMetadataHeadersPluginConfig) GetClientSerialHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.ClientSerialHeaderName
}

func (o *CreateTLSMetadataHeadersPluginConfig) GetInjectClientCertDetails() *bool {
	if o == nil {
		return nil
	}
	return o.InjectClientCertDetails
}

type CreateTLSMetadataHeadersPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateTLSMetadataHeadersPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateTLSMetadataHeadersPluginOrdering struct {
	After  *CreateTLSMetadataHeadersPluginAfter  `json:"after,omitempty"`
	Before *CreateTLSMetadataHeadersPluginBefore `json:"before,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginOrdering) GetAfter() *CreateTLSMetadataHeadersPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateTLSMetadataHeadersPluginOrdering) GetBefore() *CreateTLSMetadataHeadersPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateTLSMetadataHeadersPluginProtocols string

const (
	CreateTLSMetadataHeadersPluginProtocolsGrpc           CreateTLSMetadataHeadersPluginProtocols = "grpc"
	CreateTLSMetadataHeadersPluginProtocolsGrpcs          CreateTLSMetadataHeadersPluginProtocols = "grpcs"
	CreateTLSMetadataHeadersPluginProtocolsHTTP           CreateTLSMetadataHeadersPluginProtocols = "http"
	CreateTLSMetadataHeadersPluginProtocolsHTTPS          CreateTLSMetadataHeadersPluginProtocols = "https"
	CreateTLSMetadataHeadersPluginProtocolsTCP            CreateTLSMetadataHeadersPluginProtocols = "tcp"
	CreateTLSMetadataHeadersPluginProtocolsTLS            CreateTLSMetadataHeadersPluginProtocols = "tls"
	CreateTLSMetadataHeadersPluginProtocolsTLSPassthrough CreateTLSMetadataHeadersPluginProtocols = "tls_passthrough"
	CreateTLSMetadataHeadersPluginProtocolsUDP            CreateTLSMetadataHeadersPluginProtocols = "udp"
	CreateTLSMetadataHeadersPluginProtocolsWs             CreateTLSMetadataHeadersPluginProtocols = "ws"
	CreateTLSMetadataHeadersPluginProtocolsWss            CreateTLSMetadataHeadersPluginProtocols = "wss"
)

func (e CreateTLSMetadataHeadersPluginProtocols) ToPointer() *CreateTLSMetadataHeadersPluginProtocols {
	return &e
}
func (e *CreateTLSMetadataHeadersPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateTLSMetadataHeadersPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTLSMetadataHeadersPluginProtocols: %v", v)
	}
}

// CreateTLSMetadataHeadersPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateTLSMetadataHeadersPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateTLSMetadataHeadersPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateTLSMetadataHeadersPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateTLSMetadataHeadersPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateTLSMetadataHeadersPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateTLSMetadataHeadersPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateTLSMetadataHeadersPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateTLSMetadataHeadersPlugin struct {
	Config *CreateTLSMetadataHeadersPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                                   `json:"enabled,omitempty"`
	InstanceName *string                                 `json:"instance_name,omitempty"`
	name         *string                                 `const:"tls-metadata-headers" json:"name,omitempty"`
	Ordering     *CreateTLSMetadataHeadersPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateTLSMetadataHeadersPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateTLSMetadataHeadersPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateTLSMetadataHeadersPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateTLSMetadataHeadersPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateTLSMetadataHeadersPluginService `json:"service,omitempty"`
}

func (c CreateTLSMetadataHeadersPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTLSMetadataHeadersPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTLSMetadataHeadersPlugin) GetConfig() *CreateTLSMetadataHeadersPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateTLSMetadataHeadersPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateTLSMetadataHeadersPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateTLSMetadataHeadersPlugin) GetName() *string {
	return types.String("tls-metadata-headers")
}

func (o *CreateTLSMetadataHeadersPlugin) GetOrdering() *CreateTLSMetadataHeadersPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateTLSMetadataHeadersPlugin) GetProtocols() []CreateTLSMetadataHeadersPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateTLSMetadataHeadersPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateTLSMetadataHeadersPlugin) GetConsumer() *CreateTLSMetadataHeadersPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateTLSMetadataHeadersPlugin) GetConsumerGroup() *CreateTLSMetadataHeadersPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateTLSMetadataHeadersPlugin) GetRoute() *CreateTLSMetadataHeadersPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateTLSMetadataHeadersPlugin) GetService() *CreateTLSMetadataHeadersPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
