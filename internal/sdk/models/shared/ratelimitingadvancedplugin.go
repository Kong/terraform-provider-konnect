// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type RateLimitingAdvancedPluginAfter struct {
	Access []string `json:"access"`
}

func (o *RateLimitingAdvancedPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type RateLimitingAdvancedPluginBefore struct {
	Access []string `json:"access"`
}

func (o *RateLimitingAdvancedPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type RateLimitingAdvancedPluginOrdering struct {
	After  *RateLimitingAdvancedPluginAfter  `json:"after"`
	Before *RateLimitingAdvancedPluginBefore `json:"before"`
}

func (o *RateLimitingAdvancedPluginOrdering) GetAfter() *RateLimitingAdvancedPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *RateLimitingAdvancedPluginOrdering) GetBefore() *RateLimitingAdvancedPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type RateLimitingAdvancedPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (r RateLimitingAdvancedPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingAdvancedPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingAdvancedPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RateLimitingAdvancedPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *RateLimitingAdvancedPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type CompoundIdentifier string

const (
	CompoundIdentifierConsumer      CompoundIdentifier = "consumer"
	CompoundIdentifierConsumerGroup CompoundIdentifier = "consumer-group"
	CompoundIdentifierCredential    CompoundIdentifier = "credential"
	CompoundIdentifierHeader        CompoundIdentifier = "header"
	CompoundIdentifierIP            CompoundIdentifier = "ip"
	CompoundIdentifierPath          CompoundIdentifier = "path"
	CompoundIdentifierService       CompoundIdentifier = "service"
)

func (e CompoundIdentifier) ToPointer() *CompoundIdentifier {
	return &e
}
func (e *CompoundIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "consumer-group":
		fallthrough
	case "credential":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "path":
		fallthrough
	case "service":
		*e = CompoundIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompoundIdentifier: %v", v)
	}
}

// RateLimitingAdvancedPluginIdentifier - The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. Note if `identifier` is `consumer-group`, the plugin must be applied on a consumer group entity. Because a consumer may belong to multiple consumer groups, the plugin needs to know explicitly which consumer group to limit the rate.
type RateLimitingAdvancedPluginIdentifier string

const (
	RateLimitingAdvancedPluginIdentifierConsumer      RateLimitingAdvancedPluginIdentifier = "consumer"
	RateLimitingAdvancedPluginIdentifierConsumerGroup RateLimitingAdvancedPluginIdentifier = "consumer-group"
	RateLimitingAdvancedPluginIdentifierCredential    RateLimitingAdvancedPluginIdentifier = "credential"
	RateLimitingAdvancedPluginIdentifierHeader        RateLimitingAdvancedPluginIdentifier = "header"
	RateLimitingAdvancedPluginIdentifierIP            RateLimitingAdvancedPluginIdentifier = "ip"
	RateLimitingAdvancedPluginIdentifierPath          RateLimitingAdvancedPluginIdentifier = "path"
	RateLimitingAdvancedPluginIdentifierService       RateLimitingAdvancedPluginIdentifier = "service"
)

func (e RateLimitingAdvancedPluginIdentifier) ToPointer() *RateLimitingAdvancedPluginIdentifier {
	return &e
}
func (e *RateLimitingAdvancedPluginIdentifier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "consumer":
		fallthrough
	case "consumer-group":
		fallthrough
	case "credential":
		fallthrough
	case "header":
		fallthrough
	case "ip":
		fallthrough
	case "path":
		fallthrough
	case "service":
		*e = RateLimitingAdvancedPluginIdentifier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingAdvancedPluginIdentifier: %v", v)
	}
}

type RateLimitingAdvancedPluginClusterNodes struct {
	// A string representing a host name, such as example.com.
	IP *string `default:"127.0.0.1" json:"ip"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (r RateLimitingAdvancedPluginClusterNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingAdvancedPluginClusterNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingAdvancedPluginClusterNodes) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *RateLimitingAdvancedPluginClusterNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// RedisProxyType - If the `connection_is_proxied` is enabled, this field indicates the proxy type and version you are using. For example, you can enable this optioin when you want authentication between Kong and Envoy proxy.
type RedisProxyType string

const (
	RedisProxyTypeEnvoyV131 RedisProxyType = "envoy_v1.31"
)

func (e RedisProxyType) ToPointer() *RedisProxyType {
	return &e
}
func (e *RedisProxyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "envoy_v1.31":
		*e = RedisProxyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RedisProxyType: %v", v)
	}
}

type RateLimitingAdvancedPluginSentinelNodes struct {
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
}

func (r RateLimitingAdvancedPluginSentinelNodes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingAdvancedPluginSentinelNodes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingAdvancedPluginSentinelNodes) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *RateLimitingAdvancedPluginSentinelNodes) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

// RateLimitingAdvancedPluginSentinelRole - Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
type RateLimitingAdvancedPluginSentinelRole string

const (
	RateLimitingAdvancedPluginSentinelRoleAny    RateLimitingAdvancedPluginSentinelRole = "any"
	RateLimitingAdvancedPluginSentinelRoleMaster RateLimitingAdvancedPluginSentinelRole = "master"
	RateLimitingAdvancedPluginSentinelRoleSlave  RateLimitingAdvancedPluginSentinelRole = "slave"
)

func (e RateLimitingAdvancedPluginSentinelRole) ToPointer() *RateLimitingAdvancedPluginSentinelRole {
	return &e
}
func (e *RateLimitingAdvancedPluginSentinelRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "master":
		fallthrough
	case "slave":
		*e = RateLimitingAdvancedPluginSentinelRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingAdvancedPluginSentinelRole: %v", v)
	}
}

type RateLimitingAdvancedPluginRedis struct {
	// Maximum retry attempts for redirection.
	ClusterMaxRedirections *int64 `default:"5" json:"cluster_max_redirections"`
	// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
	ClusterNodes []RateLimitingAdvancedPluginClusterNodes `json:"cluster_nodes"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64 `default:"2000" json:"connect_timeout"`
	// If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
	ConnectionIsProxied *bool `default:"false" json:"connection_is_proxied"`
	// Database to use for the Redis connection when using the `redis` strategy
	Database *int64 `default:"0" json:"database"`
	// A string representing a host name, such as example.com.
	Host *string `default:"127.0.0.1" json:"host"`
	// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
	KeepaliveBacklog *int64 `default:"null" json:"keepalive_backlog"`
	// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
	KeepalivePoolSize *int64 `default:"256" json:"keepalive_pool_size"`
	// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
	Password *string `default:"null" json:"password"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port *int64 `default:"6379" json:"port"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout *int64 `default:"2000" json:"read_timeout"`
	// If the `connection_is_proxied` is enabled, this field indicates the proxy type and version you are using. For example, you can enable this optioin when you want authentication between Kong and Envoy proxy.
	RedisProxyType *RedisProxyType `json:"redis_proxy_type,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"2000" json:"send_timeout"`
	// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
	SentinelMaster *string `default:"null" json:"sentinel_master"`
	// Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
	SentinelNodes []RateLimitingAdvancedPluginSentinelNodes `json:"sentinel_nodes"`
	// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
	SentinelPassword *string `default:"null" json:"sentinel_password"`
	// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
	SentinelRole *RateLimitingAdvancedPluginSentinelRole `json:"sentinel_role,omitempty"`
	// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
	SentinelUsername *string `default:"null" json:"sentinel_username"`
	// A string representing an SNI (server name indication) value for TLS.
	ServerName *string `default:"null" json:"server_name"`
	// If set to true, uses SSL to connect to Redis.
	Ssl *bool `default:"false" json:"ssl"`
	// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
	SslVerify *bool `default:"false" json:"ssl_verify"`
	// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
	Username *string `default:"null" json:"username"`
}

func (r RateLimitingAdvancedPluginRedis) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingAdvancedPluginRedis) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingAdvancedPluginRedis) GetClusterMaxRedirections() *int64 {
	if o == nil {
		return nil
	}
	return o.ClusterMaxRedirections
}

func (o *RateLimitingAdvancedPluginRedis) GetClusterNodes() []RateLimitingAdvancedPluginClusterNodes {
	if o == nil {
		return nil
	}
	return o.ClusterNodes
}

func (o *RateLimitingAdvancedPluginRedis) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *RateLimitingAdvancedPluginRedis) GetConnectionIsProxied() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectionIsProxied
}

func (o *RateLimitingAdvancedPluginRedis) GetDatabase() *int64 {
	if o == nil {
		return nil
	}
	return o.Database
}

func (o *RateLimitingAdvancedPluginRedis) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *RateLimitingAdvancedPluginRedis) GetKeepaliveBacklog() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepaliveBacklog
}

func (o *RateLimitingAdvancedPluginRedis) GetKeepalivePoolSize() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepalivePoolSize
}

func (o *RateLimitingAdvancedPluginRedis) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *RateLimitingAdvancedPluginRedis) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *RateLimitingAdvancedPluginRedis) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *RateLimitingAdvancedPluginRedis) GetRedisProxyType() *RedisProxyType {
	if o == nil {
		return nil
	}
	return o.RedisProxyType
}

func (o *RateLimitingAdvancedPluginRedis) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *RateLimitingAdvancedPluginRedis) GetSentinelMaster() *string {
	if o == nil {
		return nil
	}
	return o.SentinelMaster
}

func (o *RateLimitingAdvancedPluginRedis) GetSentinelNodes() []RateLimitingAdvancedPluginSentinelNodes {
	if o == nil {
		return nil
	}
	return o.SentinelNodes
}

func (o *RateLimitingAdvancedPluginRedis) GetSentinelPassword() *string {
	if o == nil {
		return nil
	}
	return o.SentinelPassword
}

func (o *RateLimitingAdvancedPluginRedis) GetSentinelRole() *RateLimitingAdvancedPluginSentinelRole {
	if o == nil {
		return nil
	}
	return o.SentinelRole
}

func (o *RateLimitingAdvancedPluginRedis) GetSentinelUsername() *string {
	if o == nil {
		return nil
	}
	return o.SentinelUsername
}

func (o *RateLimitingAdvancedPluginRedis) GetServerName() *string {
	if o == nil {
		return nil
	}
	return o.ServerName
}

func (o *RateLimitingAdvancedPluginRedis) GetSsl() *bool {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *RateLimitingAdvancedPluginRedis) GetSslVerify() *bool {
	if o == nil {
		return nil
	}
	return o.SslVerify
}

func (o *RateLimitingAdvancedPluginRedis) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// RateLimitingAdvancedPluginStrategy - The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`.
type RateLimitingAdvancedPluginStrategy string

const (
	RateLimitingAdvancedPluginStrategyCluster RateLimitingAdvancedPluginStrategy = "cluster"
	RateLimitingAdvancedPluginStrategyLocal   RateLimitingAdvancedPluginStrategy = "local"
	RateLimitingAdvancedPluginStrategyRedis   RateLimitingAdvancedPluginStrategy = "redis"
)

func (e RateLimitingAdvancedPluginStrategy) ToPointer() *RateLimitingAdvancedPluginStrategy {
	return &e
}
func (e *RateLimitingAdvancedPluginStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cluster":
		fallthrough
	case "local":
		fallthrough
	case "redis":
		*e = RateLimitingAdvancedPluginStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingAdvancedPluginStrategy: %v", v)
	}
}

// RateLimitingAdvancedPluginWindowType - Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters.
type RateLimitingAdvancedPluginWindowType string

const (
	RateLimitingAdvancedPluginWindowTypeFixed   RateLimitingAdvancedPluginWindowType = "fixed"
	RateLimitingAdvancedPluginWindowTypeSliding RateLimitingAdvancedPluginWindowType = "sliding"
)

func (e RateLimitingAdvancedPluginWindowType) ToPointer() *RateLimitingAdvancedPluginWindowType {
	return &e
}
func (e *RateLimitingAdvancedPluginWindowType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		fallthrough
	case "sliding":
		*e = RateLimitingAdvancedPluginWindowType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingAdvancedPluginWindowType: %v", v)
	}
}

type RateLimitingAdvancedPluginConfig struct {
	// Similar to `identifer`, but supports combining multiple items. The priority of `compound_identifier` is higher than `identifier`, which means if `compound_identifer` is set, it will be used, otherwise `identifier` will be used.
	CompoundIdentifier []CompoundIdentifier `json:"compound_identifier"`
	// List of consumer groups allowed to override the rate limiting settings for the given Route or Service. Required if `enforce_consumer_groups` is set to `true`.
	ConsumerGroups []string `json:"consumer_groups"`
	// The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.
	DictionaryName *string `default:"kong_rate_limiting_counters" json:"dictionary_name"`
	// If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.
	DisablePenalty *bool `default:"false" json:"disable_penalty"`
	// Determines if consumer groups are allowed to override the rate limiting settings for the given Route or Service. Flipping `enforce_consumer_groups` from `true` to `false` disables the group override, but does not clear the list of consumer groups. You can then flip `enforce_consumer_groups` to `true` to re-enforce the groups.
	EnforceConsumerGroups *bool `default:"false" json:"enforce_consumer_groups"`
	// Set a custom error code to return when the rate limit is exceeded.
	ErrorCode *float64 `default:"429" json:"error_code"`
	// Set a custom error message to return when the rate limit is exceeded.
	ErrorMessage *string `default:"API rate limit exceeded" json:"error_message"`
	// A string representing an HTTP header name.
	HeaderName *string `default:"null" json:"header_name"`
	// Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.
	HideClientHeaders *bool `default:"false" json:"hide_client_headers"`
	// The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. Note if `identifier` is `consumer-group`, the plugin must be applied on a consumer group entity. Because a consumer may belong to multiple consumer groups, the plugin needs to know explicitly which consumer group to limit the rate.
	Identifier *RateLimitingAdvancedPluginIdentifier `default:"consumer" json:"identifier"`
	// One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
	Limit []float64 `json:"limit"`
	// The shared dictionary where concurrency control locks are stored. The default shared dictionary is `kong_locks`. The shared dictionary should be declare in nginx-kong.conf.
	LockDictionaryName *string `default:"kong_locks" json:"lock_dictionary_name"`
	// The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `dictionary_name`, need to be the same.
	Namespace *string `default:"null" json:"namespace"`
	// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
	Path  *string                          `default:"null" json:"path"`
	Redis *RateLimitingAdvancedPluginRedis `json:"redis,omitempty"`
	// The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.
	RetryAfterJitterMax *float64 `default:"0" json:"retry_after_jitter_max"`
	// The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`.
	Strategy *RateLimitingAdvancedPluginStrategy `default:"local" json:"strategy"`
	// How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).
	SyncRate *float64 `default:"null" json:"sync_rate"`
	// One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
	WindowSize []float64 `json:"window_size"`
	// Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters.
	WindowType *RateLimitingAdvancedPluginWindowType `default:"sliding" json:"window_type"`
}

func (r RateLimitingAdvancedPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingAdvancedPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingAdvancedPluginConfig) GetCompoundIdentifier() []CompoundIdentifier {
	if o == nil {
		return nil
	}
	return o.CompoundIdentifier
}

func (o *RateLimitingAdvancedPluginConfig) GetConsumerGroups() []string {
	if o == nil {
		return nil
	}
	return o.ConsumerGroups
}

func (o *RateLimitingAdvancedPluginConfig) GetDictionaryName() *string {
	if o == nil {
		return nil
	}
	return o.DictionaryName
}

func (o *RateLimitingAdvancedPluginConfig) GetDisablePenalty() *bool {
	if o == nil {
		return nil
	}
	return o.DisablePenalty
}

func (o *RateLimitingAdvancedPluginConfig) GetEnforceConsumerGroups() *bool {
	if o == nil {
		return nil
	}
	return o.EnforceConsumerGroups
}

func (o *RateLimitingAdvancedPluginConfig) GetErrorCode() *float64 {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *RateLimitingAdvancedPluginConfig) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *RateLimitingAdvancedPluginConfig) GetHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.HeaderName
}

func (o *RateLimitingAdvancedPluginConfig) GetHideClientHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.HideClientHeaders
}

func (o *RateLimitingAdvancedPluginConfig) GetIdentifier() *RateLimitingAdvancedPluginIdentifier {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *RateLimitingAdvancedPluginConfig) GetLimit() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.Limit
}

func (o *RateLimitingAdvancedPluginConfig) GetLockDictionaryName() *string {
	if o == nil {
		return nil
	}
	return o.LockDictionaryName
}

func (o *RateLimitingAdvancedPluginConfig) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *RateLimitingAdvancedPluginConfig) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *RateLimitingAdvancedPluginConfig) GetRedis() *RateLimitingAdvancedPluginRedis {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *RateLimitingAdvancedPluginConfig) GetRetryAfterJitterMax() *float64 {
	if o == nil {
		return nil
	}
	return o.RetryAfterJitterMax
}

func (o *RateLimitingAdvancedPluginConfig) GetStrategy() *RateLimitingAdvancedPluginStrategy {
	if o == nil {
		return nil
	}
	return o.Strategy
}

func (o *RateLimitingAdvancedPluginConfig) GetSyncRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SyncRate
}

func (o *RateLimitingAdvancedPluginConfig) GetWindowSize() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.WindowSize
}

func (o *RateLimitingAdvancedPluginConfig) GetWindowType() *RateLimitingAdvancedPluginWindowType {
	if o == nil {
		return nil
	}
	return o.WindowType
}

// RateLimitingAdvancedPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type RateLimitingAdvancedPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingAdvancedPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RateLimitingAdvancedPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type RateLimitingAdvancedPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingAdvancedPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type RateLimitingAdvancedPluginProtocols string

const (
	RateLimitingAdvancedPluginProtocolsGrpc  RateLimitingAdvancedPluginProtocols = "grpc"
	RateLimitingAdvancedPluginProtocolsGrpcs RateLimitingAdvancedPluginProtocols = "grpcs"
	RateLimitingAdvancedPluginProtocolsHTTP  RateLimitingAdvancedPluginProtocols = "http"
	RateLimitingAdvancedPluginProtocolsHTTPS RateLimitingAdvancedPluginProtocols = "https"
)

func (e RateLimitingAdvancedPluginProtocols) ToPointer() *RateLimitingAdvancedPluginProtocols {
	return &e
}
func (e *RateLimitingAdvancedPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = RateLimitingAdvancedPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitingAdvancedPluginProtocols: %v", v)
	}
}

// RateLimitingAdvancedPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type RateLimitingAdvancedPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingAdvancedPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RateLimitingAdvancedPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type RateLimitingAdvancedPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *RateLimitingAdvancedPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// RateLimitingAdvancedPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type RateLimitingAdvancedPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                             `default:"null" json:"instance_name"`
	name         string                              `const:"rate-limiting-advanced" json:"name"`
	Ordering     *RateLimitingAdvancedPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []RateLimitingAdvancedPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                           `json:"updated_at,omitempty"`
	Config    RateLimitingAdvancedPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *RateLimitingAdvancedPluginConsumer `json:"consumer"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *RateLimitingAdvancedPluginConsumerGroup `json:"consumer_group"`
	// A set of strings representing HTTP protocols.
	Protocols []RateLimitingAdvancedPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *RateLimitingAdvancedPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *RateLimitingAdvancedPluginService `json:"service"`
}

func (r RateLimitingAdvancedPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RateLimitingAdvancedPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RateLimitingAdvancedPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RateLimitingAdvancedPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *RateLimitingAdvancedPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RateLimitingAdvancedPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *RateLimitingAdvancedPlugin) GetName() string {
	return "rate-limiting-advanced"
}

func (o *RateLimitingAdvancedPlugin) GetOrdering() *RateLimitingAdvancedPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *RateLimitingAdvancedPlugin) GetPartials() []RateLimitingAdvancedPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *RateLimitingAdvancedPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *RateLimitingAdvancedPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RateLimitingAdvancedPlugin) GetConfig() RateLimitingAdvancedPluginConfig {
	if o == nil {
		return RateLimitingAdvancedPluginConfig{}
	}
	return o.Config
}

func (o *RateLimitingAdvancedPlugin) GetConsumer() *RateLimitingAdvancedPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *RateLimitingAdvancedPlugin) GetConsumerGroup() *RateLimitingAdvancedPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *RateLimitingAdvancedPlugin) GetProtocols() []RateLimitingAdvancedPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *RateLimitingAdvancedPlugin) GetRoute() *RateLimitingAdvancedPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *RateLimitingAdvancedPlugin) GetService() *RateLimitingAdvancedPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
