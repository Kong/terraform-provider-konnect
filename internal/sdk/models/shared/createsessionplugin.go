// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateSessionPluginCookieSameSite - Determines whether and how a cookie may be sent with cross-site requests.
type CreateSessionPluginCookieSameSite string

const (
	CreateSessionPluginCookieSameSiteStrict  CreateSessionPluginCookieSameSite = "Strict"
	CreateSessionPluginCookieSameSiteLax     CreateSessionPluginCookieSameSite = "Lax"
	CreateSessionPluginCookieSameSiteNone    CreateSessionPluginCookieSameSite = "None"
	CreateSessionPluginCookieSameSiteDefault CreateSessionPluginCookieSameSite = "Default"
)

func (e CreateSessionPluginCookieSameSite) ToPointer() *CreateSessionPluginCookieSameSite {
	return &e
}
func (e *CreateSessionPluginCookieSameSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Strict":
		fallthrough
	case "Lax":
		fallthrough
	case "None":
		fallthrough
	case "Default":
		*e = CreateSessionPluginCookieSameSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSessionPluginCookieSameSite: %v", v)
	}
}

type CreateSessionPluginLogoutMethods string

const (
	CreateSessionPluginLogoutMethodsGet    CreateSessionPluginLogoutMethods = "GET"
	CreateSessionPluginLogoutMethodsPost   CreateSessionPluginLogoutMethods = "POST"
	CreateSessionPluginLogoutMethodsDelete CreateSessionPluginLogoutMethods = "DELETE"
)

func (e CreateSessionPluginLogoutMethods) ToPointer() *CreateSessionPluginLogoutMethods {
	return &e
}
func (e *CreateSessionPluginLogoutMethods) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "DELETE":
		*e = CreateSessionPluginLogoutMethods(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSessionPluginLogoutMethods: %v", v)
	}
}

type CreateSessionPluginRequestHeaders string

const (
	CreateSessionPluginRequestHeadersID              CreateSessionPluginRequestHeaders = "id"
	CreateSessionPluginRequestHeadersAudience        CreateSessionPluginRequestHeaders = "audience"
	CreateSessionPluginRequestHeadersSubject         CreateSessionPluginRequestHeaders = "subject"
	CreateSessionPluginRequestHeadersTimeout         CreateSessionPluginRequestHeaders = "timeout"
	CreateSessionPluginRequestHeadersIdlingTimeout   CreateSessionPluginRequestHeaders = "idling-timeout"
	CreateSessionPluginRequestHeadersRollingTimeout  CreateSessionPluginRequestHeaders = "rolling-timeout"
	CreateSessionPluginRequestHeadersAbsoluteTimeout CreateSessionPluginRequestHeaders = "absolute-timeout"
)

func (e CreateSessionPluginRequestHeaders) ToPointer() *CreateSessionPluginRequestHeaders {
	return &e
}
func (e *CreateSessionPluginRequestHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "audience":
		fallthrough
	case "subject":
		fallthrough
	case "timeout":
		fallthrough
	case "idling-timeout":
		fallthrough
	case "rolling-timeout":
		fallthrough
	case "absolute-timeout":
		*e = CreateSessionPluginRequestHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSessionPluginRequestHeaders: %v", v)
	}
}

type CreateSessionPluginResponseHeaders string

const (
	CreateSessionPluginResponseHeadersID              CreateSessionPluginResponseHeaders = "id"
	CreateSessionPluginResponseHeadersAudience        CreateSessionPluginResponseHeaders = "audience"
	CreateSessionPluginResponseHeadersSubject         CreateSessionPluginResponseHeaders = "subject"
	CreateSessionPluginResponseHeadersTimeout         CreateSessionPluginResponseHeaders = "timeout"
	CreateSessionPluginResponseHeadersIdlingTimeout   CreateSessionPluginResponseHeaders = "idling-timeout"
	CreateSessionPluginResponseHeadersRollingTimeout  CreateSessionPluginResponseHeaders = "rolling-timeout"
	CreateSessionPluginResponseHeadersAbsoluteTimeout CreateSessionPluginResponseHeaders = "absolute-timeout"
)

func (e CreateSessionPluginResponseHeaders) ToPointer() *CreateSessionPluginResponseHeaders {
	return &e
}
func (e *CreateSessionPluginResponseHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "audience":
		fallthrough
	case "subject":
		fallthrough
	case "timeout":
		fallthrough
	case "idling-timeout":
		fallthrough
	case "rolling-timeout":
		fallthrough
	case "absolute-timeout":
		*e = CreateSessionPluginResponseHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSessionPluginResponseHeaders: %v", v)
	}
}

// CreateSessionPluginStorage - Determines where the session data is stored. `kong`: Stores encrypted session data into Kong's current database strategy; the cookie will not contain any session data. `cookie`: Stores encrypted session data within the cookie itself.
type CreateSessionPluginStorage string

const (
	CreateSessionPluginStorageCookie CreateSessionPluginStorage = "cookie"
	CreateSessionPluginStorageKong   CreateSessionPluginStorage = "kong"
)

func (e CreateSessionPluginStorage) ToPointer() *CreateSessionPluginStorage {
	return &e
}
func (e *CreateSessionPluginStorage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cookie":
		fallthrough
	case "kong":
		*e = CreateSessionPluginStorage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSessionPluginStorage: %v", v)
	}
}

type CreateSessionPluginConfig struct {
	// The session cookie absolute timeout, in seconds. Specifies how long the session can be used until it is no longer valid.
	AbsoluteTimeout *float64 `json:"absolute_timeout,omitempty"`
	// The session audience, which is the intended target application. For example `"my-application"`.
	Audience *string `json:"audience,omitempty"`
	// The domain with which the cookie is intended to be exchanged.
	CookieDomain *string `json:"cookie_domain,omitempty"`
	// Applies the `HttpOnly` tag so that the cookie is sent only to a server.
	CookieHTTPOnly *bool `json:"cookie_http_only,omitempty"`
	// The name of the cookie.
	CookieName *string `json:"cookie_name,omitempty"`
	// The resource in the host where the cookie is available.
	CookiePath *string `json:"cookie_path,omitempty"`
	// Determines whether and how a cookie may be sent with cross-site requests.
	CookieSameSite *CreateSessionPluginCookieSameSite `json:"cookie_same_site,omitempty"`
	// Applies the Secure directive so that the cookie may be sent to the server only with an encrypted request over the HTTPS protocol.
	CookieSecure *bool `json:"cookie_secure,omitempty"`
	// The session cookie idle time, in seconds.
	IdlingTimeout *float64 `json:"idling_timeout,omitempty"`
	// A set of HTTP methods that the plugin will respond to.
	LogoutMethods []CreateSessionPluginLogoutMethods `json:"logout_methods,omitempty"`
	// The POST argument passed to logout requests. Do not change this property.
	LogoutPostArg *string `json:"logout_post_arg,omitempty"`
	// The query argument passed to logout requests.
	LogoutQueryArg    *string `json:"logout_query_arg,omitempty"`
	ReadBodyForLogout *bool   `json:"read_body_for_logout,omitempty"`
	// Enables or disables persistent sessions.
	Remember *bool `json:"remember,omitempty"`
	// The persistent session absolute timeout limit, in seconds.
	RememberAbsoluteTimeout *float64 `json:"remember_absolute_timeout,omitempty"`
	// Persistent session cookie name. Use with the `remember` configuration parameter.
	RememberCookieName *string `json:"remember_cookie_name,omitempty"`
	// The persistent session rolling timeout window, in seconds.
	RememberRollingTimeout *float64 `json:"remember_rolling_timeout,omitempty"`
	// List of information to include, as headers, in the response to the downstream.
	RequestHeaders []CreateSessionPluginRequestHeaders `json:"request_headers,omitempty"`
	// List of information to include, as headers, in the response to the downstream.
	ResponseHeaders []CreateSessionPluginResponseHeaders `json:"response_headers,omitempty"`
	// The session cookie rolling timeout, in seconds. Specifies how long the session can be used until it needs to be renewed.
	RollingTimeout *float64 `json:"rolling_timeout,omitempty"`
	// The secret that is used in keyed HMAC generation.
	Secret *string `json:"secret,omitempty"`
	// The duration, in seconds, after which an old cookie is discarded, starting from the moment when the session becomes outdated and is replaced by a new one.
	StaleTTL *float64 `json:"stale_ttl,omitempty"`
	// Determines where the session data is stored. `kong`: Stores encrypted session data into Kong's current database strategy; the cookie will not contain any session data. `cookie`: Stores encrypted session data within the cookie itself.
	Storage *CreateSessionPluginStorage `json:"storage,omitempty"`
}

func (o *CreateSessionPluginConfig) GetAbsoluteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.AbsoluteTimeout
}

func (o *CreateSessionPluginConfig) GetAudience() *string {
	if o == nil {
		return nil
	}
	return o.Audience
}

func (o *CreateSessionPluginConfig) GetCookieDomain() *string {
	if o == nil {
		return nil
	}
	return o.CookieDomain
}

func (o *CreateSessionPluginConfig) GetCookieHTTPOnly() *bool {
	if o == nil {
		return nil
	}
	return o.CookieHTTPOnly
}

func (o *CreateSessionPluginConfig) GetCookieName() *string {
	if o == nil {
		return nil
	}
	return o.CookieName
}

func (o *CreateSessionPluginConfig) GetCookiePath() *string {
	if o == nil {
		return nil
	}
	return o.CookiePath
}

func (o *CreateSessionPluginConfig) GetCookieSameSite() *CreateSessionPluginCookieSameSite {
	if o == nil {
		return nil
	}
	return o.CookieSameSite
}

func (o *CreateSessionPluginConfig) GetCookieSecure() *bool {
	if o == nil {
		return nil
	}
	return o.CookieSecure
}

func (o *CreateSessionPluginConfig) GetIdlingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.IdlingTimeout
}

func (o *CreateSessionPluginConfig) GetLogoutMethods() []CreateSessionPluginLogoutMethods {
	if o == nil {
		return nil
	}
	return o.LogoutMethods
}

func (o *CreateSessionPluginConfig) GetLogoutPostArg() *string {
	if o == nil {
		return nil
	}
	return o.LogoutPostArg
}

func (o *CreateSessionPluginConfig) GetLogoutQueryArg() *string {
	if o == nil {
		return nil
	}
	return o.LogoutQueryArg
}

func (o *CreateSessionPluginConfig) GetReadBodyForLogout() *bool {
	if o == nil {
		return nil
	}
	return o.ReadBodyForLogout
}

func (o *CreateSessionPluginConfig) GetRemember() *bool {
	if o == nil {
		return nil
	}
	return o.Remember
}

func (o *CreateSessionPluginConfig) GetRememberAbsoluteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RememberAbsoluteTimeout
}

func (o *CreateSessionPluginConfig) GetRememberCookieName() *string {
	if o == nil {
		return nil
	}
	return o.RememberCookieName
}

func (o *CreateSessionPluginConfig) GetRememberRollingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RememberRollingTimeout
}

func (o *CreateSessionPluginConfig) GetRequestHeaders() []CreateSessionPluginRequestHeaders {
	if o == nil {
		return nil
	}
	return o.RequestHeaders
}

func (o *CreateSessionPluginConfig) GetResponseHeaders() []CreateSessionPluginResponseHeaders {
	if o == nil {
		return nil
	}
	return o.ResponseHeaders
}

func (o *CreateSessionPluginConfig) GetRollingTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RollingTimeout
}

func (o *CreateSessionPluginConfig) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateSessionPluginConfig) GetStaleTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.StaleTTL
}

func (o *CreateSessionPluginConfig) GetStorage() *CreateSessionPluginStorage {
	if o == nil {
		return nil
	}
	return o.Storage
}

type CreateSessionPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateSessionPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateSessionPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateSessionPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateSessionPluginOrdering struct {
	After  *CreateSessionPluginAfter  `json:"after,omitempty"`
	Before *CreateSessionPluginBefore `json:"before,omitempty"`
}

func (o *CreateSessionPluginOrdering) GetAfter() *CreateSessionPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateSessionPluginOrdering) GetBefore() *CreateSessionPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateSessionPluginProtocols string

const (
	CreateSessionPluginProtocolsGrpc           CreateSessionPluginProtocols = "grpc"
	CreateSessionPluginProtocolsGrpcs          CreateSessionPluginProtocols = "grpcs"
	CreateSessionPluginProtocolsHTTP           CreateSessionPluginProtocols = "http"
	CreateSessionPluginProtocolsHTTPS          CreateSessionPluginProtocols = "https"
	CreateSessionPluginProtocolsTCP            CreateSessionPluginProtocols = "tcp"
	CreateSessionPluginProtocolsTLS            CreateSessionPluginProtocols = "tls"
	CreateSessionPluginProtocolsTLSPassthrough CreateSessionPluginProtocols = "tls_passthrough"
	CreateSessionPluginProtocolsUDP            CreateSessionPluginProtocols = "udp"
	CreateSessionPluginProtocolsWs             CreateSessionPluginProtocols = "ws"
	CreateSessionPluginProtocolsWss            CreateSessionPluginProtocols = "wss"
)

func (e CreateSessionPluginProtocols) ToPointer() *CreateSessionPluginProtocols {
	return &e
}
func (e *CreateSessionPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateSessionPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSessionPluginProtocols: %v", v)
	}
}

// CreateSessionPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateSessionPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSessionPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateSessionPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSessionPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateSessionPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateSessionPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSessionPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateSessionPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateSessionPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateSessionPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateSessionPlugin struct {
	Config *CreateSessionPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                        `json:"enabled,omitempty"`
	InstanceName *string                      `json:"instance_name,omitempty"`
	name         *string                      `const:"session" json:"name,omitempty"`
	Ordering     *CreateSessionPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateSessionPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateSessionPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateSessionPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateSessionPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateSessionPluginService `json:"service,omitempty"`
}

func (c CreateSessionPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateSessionPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateSessionPlugin) GetConfig() *CreateSessionPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateSessionPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateSessionPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateSessionPlugin) GetName() *string {
	return types.String("session")
}

func (o *CreateSessionPlugin) GetOrdering() *CreateSessionPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateSessionPlugin) GetProtocols() []CreateSessionPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateSessionPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateSessionPlugin) GetConsumer() *CreateSessionPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateSessionPlugin) GetConsumerGroup() *CreateSessionPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateSessionPlugin) GetRoute() *CreateSessionPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateSessionPlugin) GetService() *CreateSessionPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
