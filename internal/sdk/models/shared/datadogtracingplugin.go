// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type DatadogTracingPluginAfter struct {
	Access []string `json:"access"`
}

func (o *DatadogTracingPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type DatadogTracingPluginBefore struct {
	Access []string `json:"access"`
}

func (o *DatadogTracingPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type DatadogTracingPluginOrdering struct {
	After  *DatadogTracingPluginAfter  `json:"after"`
	Before *DatadogTracingPluginBefore `json:"before"`
}

func (o *DatadogTracingPluginOrdering) GetAfter() *DatadogTracingPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *DatadogTracingPluginOrdering) GetBefore() *DatadogTracingPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type DatadogTracingPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `default:"null" json:"name"`
	Path *string `default:"null" json:"path"`
}

func (d DatadogTracingPluginPartials) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DatadogTracingPluginPartials) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DatadogTracingPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DatadogTracingPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DatadogTracingPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type DatadogTracingPluginConfig struct {
	BatchFlushDelay *int64  `default:"3" json:"batch_flush_delay"`
	BatchSpanCount  *int64  `default:"200" json:"batch_span_count"`
	ConnectTimeout  *int64  `default:"1000" json:"connect_timeout"`
	Endpoint        *string `default:"null" json:"endpoint"`
	Environment     *string `default:"none" json:"environment"`
	ReadTimeout     *int64  `default:"5000" json:"read_timeout"`
	SendTimeout     *int64  `default:"5000" json:"send_timeout"`
	ServiceName     *string `default:"kong" json:"service_name"`
}

func (d DatadogTracingPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DatadogTracingPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DatadogTracingPluginConfig) GetBatchFlushDelay() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchFlushDelay
}

func (o *DatadogTracingPluginConfig) GetBatchSpanCount() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchSpanCount
}

func (o *DatadogTracingPluginConfig) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *DatadogTracingPluginConfig) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *DatadogTracingPluginConfig) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *DatadogTracingPluginConfig) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *DatadogTracingPluginConfig) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *DatadogTracingPluginConfig) GetServiceName() *string {
	if o == nil {
		return nil
	}
	return o.ServiceName
}

// DatadogTracingPluginConsumerGroup - If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
type DatadogTracingPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogTracingPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type DatadogTracingPluginProtocols string

const (
	DatadogTracingPluginProtocolsGrpc  DatadogTracingPluginProtocols = "grpc"
	DatadogTracingPluginProtocolsGrpcs DatadogTracingPluginProtocols = "grpcs"
	DatadogTracingPluginProtocolsHTTP  DatadogTracingPluginProtocols = "http"
	DatadogTracingPluginProtocolsHTTPS DatadogTracingPluginProtocols = "https"
)

func (e DatadogTracingPluginProtocols) ToPointer() *DatadogTracingPluginProtocols {
	return &e
}
func (e *DatadogTracingPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = DatadogTracingPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatadogTracingPluginProtocols: %v", v)
	}
}

// DatadogTracingPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type DatadogTracingPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogTracingPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// DatadogTracingPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type DatadogTracingPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *DatadogTracingPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// DatadogTracingPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type DatadogTracingPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                       `default:"null" json:"instance_name"`
	name         string                        `const:"datadog-tracing" json:"name"`
	Ordering     *DatadogTracingPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []DatadogTracingPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                      `json:"updated_at,omitempty"`
	Config    *DatadogTracingPluginConfig `json:"config"`
	// If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups
	ConsumerGroup *DatadogTracingPluginConsumerGroup `json:"consumer_group"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.
	Protocols []DatadogTracingPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *DatadogTracingPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *DatadogTracingPluginService `json:"service"`
}

func (d DatadogTracingPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DatadogTracingPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DatadogTracingPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DatadogTracingPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *DatadogTracingPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DatadogTracingPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *DatadogTracingPlugin) GetName() string {
	return "datadog-tracing"
}

func (o *DatadogTracingPlugin) GetOrdering() *DatadogTracingPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *DatadogTracingPlugin) GetPartials() []DatadogTracingPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *DatadogTracingPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *DatadogTracingPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *DatadogTracingPlugin) GetConfig() *DatadogTracingPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *DatadogTracingPlugin) GetConsumerGroup() *DatadogTracingPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *DatadogTracingPlugin) GetProtocols() []DatadogTracingPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *DatadogTracingPlugin) GetRoute() *DatadogTracingPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *DatadogTracingPlugin) GetService() *DatadogTracingPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
