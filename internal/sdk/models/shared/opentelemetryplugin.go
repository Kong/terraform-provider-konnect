// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

type OpentelemetryPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *OpentelemetryPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type OpentelemetryPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *OpentelemetryPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type OpentelemetryPluginOrdering struct {
	After  *OpentelemetryPluginAfter  `json:"after,omitempty"`
	Before *OpentelemetryPluginBefore `json:"before,omitempty"`
}

func (o *OpentelemetryPluginOrdering) GetAfter() *OpentelemetryPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *OpentelemetryPluginOrdering) GetBefore() *OpentelemetryPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type OpentelemetryPluginPartials struct {
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

func (o *OpentelemetryPluginPartials) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OpentelemetryPluginPartials) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OpentelemetryPluginPartials) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type HeaderType string

const (
	HeaderTypeAws      HeaderType = "aws"
	HeaderTypeB3       HeaderType = "b3"
	HeaderTypeB3Single HeaderType = "b3-single"
	HeaderTypeDatadog  HeaderType = "datadog"
	HeaderTypeGcp      HeaderType = "gcp"
	HeaderTypeIgnore   HeaderType = "ignore"
	HeaderTypeInstana  HeaderType = "instana"
	HeaderTypeJaeger   HeaderType = "jaeger"
	HeaderTypeOt       HeaderType = "ot"
	HeaderTypePreserve HeaderType = "preserve"
	HeaderTypeW3c      HeaderType = "w3c"
)

func (e HeaderType) ToPointer() *HeaderType {
	return &e
}
func (e *HeaderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "b3":
		fallthrough
	case "b3-single":
		fallthrough
	case "datadog":
		fallthrough
	case "gcp":
		fallthrough
	case "ignore":
		fallthrough
	case "instana":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "preserve":
		fallthrough
	case "w3c":
		*e = HeaderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HeaderType: %v", v)
	}
}

// DefaultFormat - The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.
type DefaultFormat string

const (
	DefaultFormatAws      DefaultFormat = "aws"
	DefaultFormatB3       DefaultFormat = "b3"
	DefaultFormatB3Single DefaultFormat = "b3-single"
	DefaultFormatDatadog  DefaultFormat = "datadog"
	DefaultFormatGcp      DefaultFormat = "gcp"
	DefaultFormatInstana  DefaultFormat = "instana"
	DefaultFormatJaeger   DefaultFormat = "jaeger"
	DefaultFormatOt       DefaultFormat = "ot"
	DefaultFormatW3c      DefaultFormat = "w3c"
)

func (e DefaultFormat) ToPointer() *DefaultFormat {
	return &e
}
func (e *DefaultFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "b3":
		fallthrough
	case "b3-single":
		fallthrough
	case "datadog":
		fallthrough
	case "gcp":
		fallthrough
	case "instana":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "w3c":
		*e = DefaultFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultFormat: %v", v)
	}
}

type Extract string

const (
	ExtractAws     Extract = "aws"
	ExtractB3      Extract = "b3"
	ExtractDatadog Extract = "datadog"
	ExtractGcp     Extract = "gcp"
	ExtractInstana Extract = "instana"
	ExtractJaeger  Extract = "jaeger"
	ExtractOt      Extract = "ot"
	ExtractW3c     Extract = "w3c"
)

func (e Extract) ToPointer() *Extract {
	return &e
}
func (e *Extract) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "b3":
		fallthrough
	case "datadog":
		fallthrough
	case "gcp":
		fallthrough
	case "instana":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "w3c":
		*e = Extract(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Extract: %v", v)
	}
}

type Inject string

const (
	InjectAws      Inject = "aws"
	InjectB3       Inject = "b3"
	InjectB3Single Inject = "b3-single"
	InjectDatadog  Inject = "datadog"
	InjectGcp      Inject = "gcp"
	InjectInstana  Inject = "instana"
	InjectJaeger   Inject = "jaeger"
	InjectOt       Inject = "ot"
	InjectPreserve Inject = "preserve"
	InjectW3c      Inject = "w3c"
)

func (e Inject) ToPointer() *Inject {
	return &e
}
func (e *Inject) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws":
		fallthrough
	case "b3":
		fallthrough
	case "b3-single":
		fallthrough
	case "datadog":
		fallthrough
	case "gcp":
		fallthrough
	case "instana":
		fallthrough
	case "jaeger":
		fallthrough
	case "ot":
		fallthrough
	case "preserve":
		fallthrough
	case "w3c":
		*e = Inject(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Inject: %v", v)
	}
}

type Propagation struct {
	// Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.
	Clear []string `json:"clear,omitempty"`
	// The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.
	DefaultFormat DefaultFormat `json:"default_format"`
	// Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.
	Extract []Extract `json:"extract,omitempty"`
	// Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.
	Inject []Inject `json:"inject,omitempty"`
}

func (o *Propagation) GetClear() []string {
	if o == nil {
		return nil
	}
	return o.Clear
}

func (o *Propagation) GetDefaultFormat() DefaultFormat {
	if o == nil {
		return DefaultFormat("")
	}
	return o.DefaultFormat
}

func (o *Propagation) GetExtract() []Extract {
	if o == nil {
		return nil
	}
	return o.Extract
}

func (o *Propagation) GetInject() []Inject {
	if o == nil {
		return nil
	}
	return o.Inject
}

// OpentelemetryPluginConcurrencyLimit - The number of of queue delivery timers. -1 indicates unlimited.
type OpentelemetryPluginConcurrencyLimit int64

const (
	OpentelemetryPluginConcurrencyLimitMinus1 OpentelemetryPluginConcurrencyLimit = -1
	OpentelemetryPluginConcurrencyLimitOne    OpentelemetryPluginConcurrencyLimit = 1
)

func (e OpentelemetryPluginConcurrencyLimit) ToPointer() *OpentelemetryPluginConcurrencyLimit {
	return &e
}
func (e *OpentelemetryPluginConcurrencyLimit) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case -1:
		fallthrough
	case 1:
		*e = OpentelemetryPluginConcurrencyLimit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpentelemetryPluginConcurrencyLimit: %v", v)
	}
}

type OpentelemetryPluginQueue struct {
	// The number of of queue delivery timers. -1 indicates unlimited.
	ConcurrencyLimit *OpentelemetryPluginConcurrencyLimit `default:"1" json:"concurrency_limit"`
	// Time in seconds before the initial retry is made for a failing batch.
	InitialRetryDelay *float64 `default:"0.01" json:"initial_retry_delay"`
	// Maximum number of entries that can be processed at a time.
	MaxBatchSize *int64 `default:"1" json:"max_batch_size"`
	// Maximum number of bytes that can be waiting on a queue, requires string content.
	MaxBytes *int64 `json:"max_bytes,omitempty"`
	// Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
	MaxCoalescingDelay *float64 `default:"1" json:"max_coalescing_delay"`
	// Maximum number of entries that can be waiting on the queue.
	MaxEntries *int64 `default:"10000" json:"max_entries"`
	// Maximum time in seconds between retries, caps exponential backoff.
	MaxRetryDelay *float64 `default:"60" json:"max_retry_delay"`
	// Time in seconds before the queue gives up calling a failed handler for a batch.
	MaxRetryTime *float64 `default:"60" json:"max_retry_time"`
}

func (o OpentelemetryPluginQueue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpentelemetryPluginQueue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpentelemetryPluginQueue) GetConcurrencyLimit() *OpentelemetryPluginConcurrencyLimit {
	if o == nil {
		return nil
	}
	return o.ConcurrencyLimit
}

func (o *OpentelemetryPluginQueue) GetInitialRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialRetryDelay
}

func (o *OpentelemetryPluginQueue) GetMaxBatchSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBatchSize
}

func (o *OpentelemetryPluginQueue) GetMaxBytes() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBytes
}

func (o *OpentelemetryPluginQueue) GetMaxCoalescingDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxCoalescingDelay
}

func (o *OpentelemetryPluginQueue) GetMaxEntries() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxEntries
}

func (o *OpentelemetryPluginQueue) GetMaxRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryDelay
}

func (o *OpentelemetryPluginQueue) GetMaxRetryTime() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxRetryTime
}

// SamplingStrategy - The sampling strategy to use for OTLP `traces`. Set `parent_drop_probability_fallback` if you want parent-based sampling when the parent span contains a `false` sampled flag, and fallback to probability-based sampling otherwise. Set `parent_probability_fallback` if you want parent-based sampling when the parent span contains a valid sampled flag (`true` or `false`), and fallback to probability-based sampling otherwise.
type SamplingStrategy string

const (
	SamplingStrategyParentDropProbabilityFallback SamplingStrategy = "parent_drop_probability_fallback"
	SamplingStrategyParentProbabilityFallback     SamplingStrategy = "parent_probability_fallback"
)

func (e SamplingStrategy) ToPointer() *SamplingStrategy {
	return &e
}
func (e *SamplingStrategy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "parent_drop_probability_fallback":
		fallthrough
	case "parent_probability_fallback":
		*e = SamplingStrategy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SamplingStrategy: %v", v)
	}
}

type OpentelemetryPluginConfig struct {
	// The delay, in seconds, between two consecutive batches.
	BatchFlushDelay *int64 `json:"batch_flush_delay,omitempty"`
	// The number of spans to be sent in a single batch.
	BatchSpanCount *int64 `json:"batch_span_count,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ConnectTimeout *int64      `default:"1000" json:"connect_timeout"`
	HeaderType     *HeaderType `default:"preserve" json:"header_type"`
	// The custom headers to be added in the HTTP request sent to the OTLP server. This setting is useful for adding the authentication headers (token) for the APM backend.
	Headers                      map[string]any `json:"headers,omitempty"`
	HTTPResponseHeaderForTraceid *string        `json:"http_response_header_for_traceid,omitempty"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	LogsEndpoint *string                   `json:"logs_endpoint,omitempty"`
	Propagation  *Propagation              `json:"propagation,omitempty"`
	Queue        *OpentelemetryPluginQueue `json:"queue,omitempty"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	ReadTimeout        *int64         `default:"5000" json:"read_timeout"`
	ResourceAttributes map[string]any `json:"resource_attributes,omitempty"`
	// Tracing sampling rate for configuring the probability-based sampler. When set, this value supersedes the global `tracing_sampling_rate` setting from kong.conf.
	SamplingRate *float64 `json:"sampling_rate,omitempty"`
	// The sampling strategy to use for OTLP `traces`. Set `parent_drop_probability_fallback` if you want parent-based sampling when the parent span contains a `false` sampled flag, and fallback to probability-based sampling otherwise. Set `parent_probability_fallback` if you want parent-based sampling when the parent span contains a valid sampled flag (`true` or `false`), and fallback to probability-based sampling otherwise.
	SamplingStrategy *SamplingStrategy `default:"parent_drop_probability_fallback" json:"sampling_strategy"`
	// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
	SendTimeout *int64 `default:"5000" json:"send_timeout"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	TracesEndpoint *string `json:"traces_endpoint,omitempty"`
}

func (o OpentelemetryPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpentelemetryPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpentelemetryPluginConfig) GetBatchFlushDelay() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchFlushDelay
}

func (o *OpentelemetryPluginConfig) GetBatchSpanCount() *int64 {
	if o == nil {
		return nil
	}
	return o.BatchSpanCount
}

func (o *OpentelemetryPluginConfig) GetConnectTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ConnectTimeout
}

func (o *OpentelemetryPluginConfig) GetHeaderType() *HeaderType {
	if o == nil {
		return nil
	}
	return o.HeaderType
}

func (o *OpentelemetryPluginConfig) GetHeaders() map[string]any {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *OpentelemetryPluginConfig) GetHTTPResponseHeaderForTraceid() *string {
	if o == nil {
		return nil
	}
	return o.HTTPResponseHeaderForTraceid
}

func (o *OpentelemetryPluginConfig) GetLogsEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.LogsEndpoint
}

func (o *OpentelemetryPluginConfig) GetPropagation() *Propagation {
	if o == nil {
		return nil
	}
	return o.Propagation
}

func (o *OpentelemetryPluginConfig) GetQueue() *OpentelemetryPluginQueue {
	if o == nil {
		return nil
	}
	return o.Queue
}

func (o *OpentelemetryPluginConfig) GetReadTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.ReadTimeout
}

func (o *OpentelemetryPluginConfig) GetResourceAttributes() map[string]any {
	if o == nil {
		return nil
	}
	return o.ResourceAttributes
}

func (o *OpentelemetryPluginConfig) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *OpentelemetryPluginConfig) GetSamplingStrategy() *SamplingStrategy {
	if o == nil {
		return nil
	}
	return o.SamplingStrategy
}

func (o *OpentelemetryPluginConfig) GetSendTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SendTimeout
}

func (o *OpentelemetryPluginConfig) GetTracesEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.TracesEndpoint
}

// OpentelemetryPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type OpentelemetryPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *OpentelemetryPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type OpentelemetryPluginProtocols string

const (
	OpentelemetryPluginProtocolsGrpc  OpentelemetryPluginProtocols = "grpc"
	OpentelemetryPluginProtocolsGrpcs OpentelemetryPluginProtocols = "grpcs"
	OpentelemetryPluginProtocolsHTTP  OpentelemetryPluginProtocols = "http"
	OpentelemetryPluginProtocolsHTTPS OpentelemetryPluginProtocols = "https"
)

func (e OpentelemetryPluginProtocols) ToPointer() *OpentelemetryPluginProtocols {
	return &e
}
func (e *OpentelemetryPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = OpentelemetryPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OpentelemetryPluginProtocols: %v", v)
	}
}

// OpentelemetryPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
type OpentelemetryPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *OpentelemetryPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// OpentelemetryPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type OpentelemetryPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *OpentelemetryPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// OpentelemetryPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type OpentelemetryPlugin struct {
	// Unix epoch when the resource was created.
	CreatedAt *int64 `json:"created_at,omitempty"`
	// Whether the plugin is applied.
	Enabled *bool `default:"true" json:"enabled"`
	// A string representing a UUID (universally unique identifier).
	ID *string `json:"id,omitempty"`
	// A unique string representing a UTF-8 encoded name.
	InstanceName *string                      `default:"null" json:"instance_name"`
	name         string                       `const:"opentelemetry" json:"name"`
	Ordering     *OpentelemetryPluginOrdering `json:"ordering"`
	// A list of partials to be used by the plugin.
	Partials []OpentelemetryPluginPartials `json:"partials"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int64                     `json:"updated_at,omitempty"`
	Config    *OpentelemetryPluginConfig `json:"config,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *OpentelemetryPluginConsumer `json:"consumer"`
	// A set of strings representing HTTP protocols.
	Protocols []OpentelemetryPluginProtocols `json:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.
	Route *OpentelemetryPluginRoute `json:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *OpentelemetryPluginService `json:"service"`
}

func (o OpentelemetryPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpentelemetryPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpentelemetryPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *OpentelemetryPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *OpentelemetryPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OpentelemetryPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *OpentelemetryPlugin) GetName() string {
	return "opentelemetry"
}

func (o *OpentelemetryPlugin) GetOrdering() *OpentelemetryPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *OpentelemetryPlugin) GetPartials() []OpentelemetryPluginPartials {
	if o == nil {
		return nil
	}
	return o.Partials
}

func (o *OpentelemetryPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *OpentelemetryPlugin) GetUpdatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *OpentelemetryPlugin) GetConfig() *OpentelemetryPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *OpentelemetryPlugin) GetConsumer() *OpentelemetryPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *OpentelemetryPlugin) GetProtocols() []OpentelemetryPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *OpentelemetryPlugin) GetRoute() *OpentelemetryPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *OpentelemetryPlugin) GetService() *OpentelemetryPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
