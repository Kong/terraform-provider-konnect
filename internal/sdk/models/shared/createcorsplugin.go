// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateCorsPluginMethods string

const (
	CreateCorsPluginMethodsGet     CreateCorsPluginMethods = "GET"
	CreateCorsPluginMethodsHead    CreateCorsPluginMethods = "HEAD"
	CreateCorsPluginMethodsPut     CreateCorsPluginMethods = "PUT"
	CreateCorsPluginMethodsPatch   CreateCorsPluginMethods = "PATCH"
	CreateCorsPluginMethodsPost    CreateCorsPluginMethods = "POST"
	CreateCorsPluginMethodsDelete  CreateCorsPluginMethods = "DELETE"
	CreateCorsPluginMethodsOptions CreateCorsPluginMethods = "OPTIONS"
	CreateCorsPluginMethodsTrace   CreateCorsPluginMethods = "TRACE"
	CreateCorsPluginMethodsConnect CreateCorsPluginMethods = "CONNECT"
)

func (e CreateCorsPluginMethods) ToPointer() *CreateCorsPluginMethods {
	return &e
}
func (e *CreateCorsPluginMethods) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		fallthrough
	case "POST":
		fallthrough
	case "DELETE":
		fallthrough
	case "OPTIONS":
		fallthrough
	case "TRACE":
		fallthrough
	case "CONNECT":
		*e = CreateCorsPluginMethods(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCorsPluginMethods: %v", v)
	}
}

type CreateCorsPluginConfig struct {
	// Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.
	Credentials *bool `json:"credentials,omitempty"`
	// Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.
	ExposedHeaders []string `json:"exposed_headers,omitempty"`
	// Value for the `Access-Control-Allow-Headers` header.
	Headers []string `json:"headers,omitempty"`
	// Indicates how long the results of the preflight request can be cached, in `seconds`.
	MaxAge *float64 `json:"max_age,omitempty"`
	// 'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'
	Methods []CreateCorsPluginMethods `json:"methods,omitempty"`
	// List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.
	Origins []string `json:"origins,omitempty"`
	// A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.
	PreflightContinue *bool `json:"preflight_continue,omitempty"`
	// Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.
	PrivateNetwork *bool `json:"private_network,omitempty"`
}

func (o *CreateCorsPluginConfig) GetCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *CreateCorsPluginConfig) GetExposedHeaders() []string {
	if o == nil {
		return nil
	}
	return o.ExposedHeaders
}

func (o *CreateCorsPluginConfig) GetHeaders() []string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateCorsPluginConfig) GetMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxAge
}

func (o *CreateCorsPluginConfig) GetMethods() []CreateCorsPluginMethods {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CreateCorsPluginConfig) GetOrigins() []string {
	if o == nil {
		return nil
	}
	return o.Origins
}

func (o *CreateCorsPluginConfig) GetPreflightContinue() *bool {
	if o == nil {
		return nil
	}
	return o.PreflightContinue
}

func (o *CreateCorsPluginConfig) GetPrivateNetwork() *bool {
	if o == nil {
		return nil
	}
	return o.PrivateNetwork
}

type CreateCorsPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateCorsPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateCorsPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateCorsPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateCorsPluginOrdering struct {
	After  *CreateCorsPluginAfter  `json:"after,omitempty"`
	Before *CreateCorsPluginBefore `json:"before,omitempty"`
}

func (o *CreateCorsPluginOrdering) GetAfter() *CreateCorsPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateCorsPluginOrdering) GetBefore() *CreateCorsPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateCorsPluginProtocols string

const (
	CreateCorsPluginProtocolsGrpc           CreateCorsPluginProtocols = "grpc"
	CreateCorsPluginProtocolsGrpcs          CreateCorsPluginProtocols = "grpcs"
	CreateCorsPluginProtocolsHTTP           CreateCorsPluginProtocols = "http"
	CreateCorsPluginProtocolsHTTPS          CreateCorsPluginProtocols = "https"
	CreateCorsPluginProtocolsTCP            CreateCorsPluginProtocols = "tcp"
	CreateCorsPluginProtocolsTLS            CreateCorsPluginProtocols = "tls"
	CreateCorsPluginProtocolsTLSPassthrough CreateCorsPluginProtocols = "tls_passthrough"
	CreateCorsPluginProtocolsUDP            CreateCorsPluginProtocols = "udp"
	CreateCorsPluginProtocolsWs             CreateCorsPluginProtocols = "ws"
	CreateCorsPluginProtocolsWss            CreateCorsPluginProtocols = "wss"
)

func (e CreateCorsPluginProtocols) ToPointer() *CreateCorsPluginProtocols {
	return &e
}
func (e *CreateCorsPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateCorsPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCorsPluginProtocols: %v", v)
	}
}

// CreateCorsPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateCorsPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorsPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateCorsPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorsPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateCorsPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateCorsPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorsPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateCorsPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateCorsPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateCorsPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateCorsPlugin struct {
	Config *CreateCorsPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                     `json:"enabled,omitempty"`
	InstanceName *string                   `json:"instance_name,omitempty"`
	name         *string                   `const:"cors" json:"name,omitempty"`
	Ordering     *CreateCorsPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateCorsPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateCorsPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateCorsPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateCorsPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateCorsPluginService `json:"service,omitempty"`
}

func (c CreateCorsPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateCorsPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateCorsPlugin) GetConfig() *CreateCorsPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateCorsPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateCorsPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateCorsPlugin) GetName() *string {
	return types.String("cors")
}

func (o *CreateCorsPlugin) GetOrdering() *CreateCorsPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateCorsPlugin) GetProtocols() []CreateCorsPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateCorsPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateCorsPlugin) GetConsumer() *CreateCorsPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateCorsPlugin) GetConsumerGroup() *CreateCorsPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateCorsPlugin) GetRoute() *CreateCorsPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateCorsPlugin) GetService() *CreateCorsPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
