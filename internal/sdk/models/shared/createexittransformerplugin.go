// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

type CreateExitTransformerPluginConfig struct {
	Functions []string `json:"functions,omitempty"`
	// Determines whether to handle unexpected errors by transforming their responses.
	HandleUnexpected *bool `json:"handle_unexpected,omitempty"`
	// Determines whether to handle unknown status codes by transforming their responses.
	HandleUnknown *bool `json:"handle_unknown,omitempty"`
}

func (o *CreateExitTransformerPluginConfig) GetFunctions() []string {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CreateExitTransformerPluginConfig) GetHandleUnexpected() *bool {
	if o == nil {
		return nil
	}
	return o.HandleUnexpected
}

func (o *CreateExitTransformerPluginConfig) GetHandleUnknown() *bool {
	if o == nil {
		return nil
	}
	return o.HandleUnknown
}

type CreateExitTransformerPluginProtocols string

const (
	CreateExitTransformerPluginProtocolsGrpc           CreateExitTransformerPluginProtocols = "grpc"
	CreateExitTransformerPluginProtocolsGrpcs          CreateExitTransformerPluginProtocols = "grpcs"
	CreateExitTransformerPluginProtocolsHTTP           CreateExitTransformerPluginProtocols = "http"
	CreateExitTransformerPluginProtocolsHTTPS          CreateExitTransformerPluginProtocols = "https"
	CreateExitTransformerPluginProtocolsTCP            CreateExitTransformerPluginProtocols = "tcp"
	CreateExitTransformerPluginProtocolsTLS            CreateExitTransformerPluginProtocols = "tls"
	CreateExitTransformerPluginProtocolsTLSPassthrough CreateExitTransformerPluginProtocols = "tls_passthrough"
	CreateExitTransformerPluginProtocolsUDP            CreateExitTransformerPluginProtocols = "udp"
	CreateExitTransformerPluginProtocolsWs             CreateExitTransformerPluginProtocols = "ws"
	CreateExitTransformerPluginProtocolsWss            CreateExitTransformerPluginProtocols = "wss"
)

func (e CreateExitTransformerPluginProtocols) ToPointer() *CreateExitTransformerPluginProtocols {
	return &e
}
func (e *CreateExitTransformerPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateExitTransformerPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateExitTransformerPluginProtocols: %v", v)
	}
}

// CreateExitTransformerPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateExitTransformerPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateExitTransformerPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateExitTransformerPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateExitTransformerPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateExitTransformerPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateExitTransformerPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateExitTransformerPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateExitTransformerPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateExitTransformerPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateExitTransformerPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateExitTransformerPlugin struct {
	Config *CreateExitTransformerPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool   `json:"enabled,omitempty"`
	InstanceName *string `json:"instance_name,omitempty"`
	name         *string `const:"exit-transformer" json:"name,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateExitTransformerPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateExitTransformerPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateExitTransformerPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateExitTransformerPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateExitTransformerPluginService `json:"service,omitempty"`
}

func (c CreateExitTransformerPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateExitTransformerPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateExitTransformerPlugin) GetConfig() *CreateExitTransformerPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateExitTransformerPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateExitTransformerPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateExitTransformerPlugin) GetName() *string {
	return types.String("exit-transformer")
}

func (o *CreateExitTransformerPlugin) GetProtocols() []CreateExitTransformerPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateExitTransformerPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateExitTransformerPlugin) GetConsumer() *CreateExitTransformerPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateExitTransformerPlugin) GetConsumerGroup() *CreateExitTransformerPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateExitTransformerPlugin) GetRoute() *CreateExitTransformerPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateExitTransformerPlugin) GetService() *CreateExitTransformerPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
