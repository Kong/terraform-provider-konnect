// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/v2/internal/sdk/internal/utils"
)

// DefaultAPIVisibility - The default visibility of APIs in the portal. If set to `public`, newly published APIs are visible to unauthenticated developers. If set to `private`, newly published APIs are hidden from unauthenticated developers.
type DefaultAPIVisibility string

const (
	DefaultAPIVisibilityPublic  DefaultAPIVisibility = "public"
	DefaultAPIVisibilityPrivate DefaultAPIVisibility = "private"
)

func (e DefaultAPIVisibility) ToPointer() *DefaultAPIVisibility {
	return &e
}
func (e *DefaultAPIVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = DefaultAPIVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultAPIVisibility: %v", v)
	}
}

// DefaultPageVisibility - The default visibility of pages in the portal. If set to `public`, newly created pages are visible to unauthenticated developers. If set to `private`, newly created pages are hidden from unauthenticated developers.
type DefaultPageVisibility string

const (
	DefaultPageVisibilityPublic  DefaultPageVisibility = "public"
	DefaultPageVisibilityPrivate DefaultPageVisibility = "private"
)

func (e DefaultPageVisibility) ToPointer() *DefaultPageVisibility {
	return &e
}
func (e *DefaultPageVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = DefaultPageVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DefaultPageVisibility: %v", v)
	}
}

// CreatePortal - Create a portal.
type CreatePortal struct {
	// The name of the portal, used to distinguish it from other portals. Name must be unique.
	Name string `json:"name"`
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName *string `json:"display_name,omitempty"`
	// A description of the portal.
	Description *string `default:"null" json:"description"`
	// Whether the portal supports developer authentication. If disabled, developers cannot register for accounts or create applications.
	AuthenticationEnabled *bool `default:"true" json:"authentication_enabled"`
	// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register for APIs until unless assigned to teams with access to view and consume specific APIs. Authentication must be enabled to use RBAC.
	RbacEnabled *bool `default:"false" json:"rbac_enabled"`
	// The default visibility of APIs in the portal. If set to `public`, newly published APIs are visible to unauthenticated developers. If set to `private`, newly published APIs are hidden from unauthenticated developers.
	DefaultAPIVisibility *DefaultAPIVisibility `json:"default_api_visibility,omitempty"`
	// The default visibility of pages in the portal. If set to `public`, newly created pages are visible to unauthenticated developers. If set to `private`, newly created pages are hidden from unauthenticated developers.
	DefaultPageVisibility *DefaultPageVisibility `json:"default_page_visibility,omitempty"`
	// The default authentication strategy for APIs published to the portal. Newly published APIs will use this authentication strategy unless overridden during publication. If set to `null`, API publications will not use an authentication strategy unless set during publication.
	DefaultApplicationAuthStrategyID *string `default:"null" json:"default_application_auth_strategy_id"`
	// Whether developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveDevelopers *bool `default:"false" json:"auto_approve_developers"`
	// Whether requests from applications to register for APIs will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveApplications *bool `default:"false" json:"auto_approve_applications"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	//
	// Labels are intended to store **INTERNAL** metadata.
	//
	// Keys must be of length 1-63 characters, and cannot start with "kong", "konnect", "mesh", "kic", or "_".
	//
	Labels map[string]*string `json:"labels,omitempty"`
}

func (c CreatePortal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePortal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePortal) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreatePortal) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CreatePortal) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreatePortal) GetAuthenticationEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AuthenticationEnabled
}

func (o *CreatePortal) GetRbacEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.RbacEnabled
}

func (o *CreatePortal) GetDefaultAPIVisibility() *DefaultAPIVisibility {
	if o == nil {
		return nil
	}
	return o.DefaultAPIVisibility
}

func (o *CreatePortal) GetDefaultPageVisibility() *DefaultPageVisibility {
	if o == nil {
		return nil
	}
	return o.DefaultPageVisibility
}

func (o *CreatePortal) GetDefaultApplicationAuthStrategyID() *string {
	if o == nil {
		return nil
	}
	return o.DefaultApplicationAuthStrategyID
}

func (o *CreatePortal) GetAutoApproveDevelopers() *bool {
	if o == nil {
		return nil
	}
	return o.AutoApproveDevelopers
}

func (o *CreatePortal) GetAutoApproveApplications() *bool {
	if o == nil {
		return nil
	}
	return o.AutoApproveApplications
}

func (o *CreatePortal) GetLabels() map[string]*string {
	if o == nil {
		return nil
	}
	return o.Labels
}
