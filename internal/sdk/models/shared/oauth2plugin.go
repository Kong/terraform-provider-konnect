// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

type Oauth2PluginProtocols string

const (
	Oauth2PluginProtocolsGrpc           Oauth2PluginProtocols = "grpc"
	Oauth2PluginProtocolsGrpcs          Oauth2PluginProtocols = "grpcs"
	Oauth2PluginProtocolsHTTP           Oauth2PluginProtocols = "http"
	Oauth2PluginProtocolsHTTPS          Oauth2PluginProtocols = "https"
	Oauth2PluginProtocolsTCP            Oauth2PluginProtocols = "tcp"
	Oauth2PluginProtocolsTLS            Oauth2PluginProtocols = "tls"
	Oauth2PluginProtocolsTLSPassthrough Oauth2PluginProtocols = "tls_passthrough"
	Oauth2PluginProtocolsUDP            Oauth2PluginProtocols = "udp"
	Oauth2PluginProtocolsWs             Oauth2PluginProtocols = "ws"
	Oauth2PluginProtocolsWss            Oauth2PluginProtocols = "wss"
)

func (e Oauth2PluginProtocols) ToPointer() *Oauth2PluginProtocols {
	return &e
}

func (e *Oauth2PluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = Oauth2PluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oauth2PluginProtocols: %v", v)
	}
}

// Oauth2PluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type Oauth2PluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2PluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Oauth2PluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type Oauth2PluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2PluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Oauth2PluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type Oauth2PluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *Oauth2PluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Oauth2PluginPkce - Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin.
type Oauth2PluginPkce string

const (
	Oauth2PluginPkceNone   Oauth2PluginPkce = "none"
	Oauth2PluginPkceLax    Oauth2PluginPkce = "lax"
	Oauth2PluginPkceStrict Oauth2PluginPkce = "strict"
)

func (e Oauth2PluginPkce) ToPointer() *Oauth2PluginPkce {
	return &e
}

func (e *Oauth2PluginPkce) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "lax":
		fallthrough
	case "strict":
		*e = Oauth2PluginPkce(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Oauth2PluginPkce: %v", v)
	}
}

type Oauth2PluginConfig struct {
	// Describes an array of scope names that will be available to the end user. If `mandatory_scope` is set to `true`, then `scopes` are required.
	Scopes []string `json:"scopes,omitempty"`
	// An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.
	MandatoryScope *bool `default:"false" json:"mandatory_scope"`
	// The unique key the plugin has generated when it has been added to the Service.
	ProvisionKey *string `json:"provision_key,omitempty"`
	// An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to `0` to disable the expiration.
	TokenExpiration *float64 `default:"7200" json:"token_expiration"`
	// An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).
	EnableAuthorizationCode *bool `default:"false" json:"enable_authorization_code"`
	// An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).
	EnableImplicitGrant *bool `default:"false" json:"enable_implicit_grant"`
	// An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).
	EnableClientCredentials *bool `default:"false" json:"enable_client_credentials"`
	// An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).
	EnablePasswordGrant *bool `default:"false" json:"enable_password_grant"`
	// An optional boolean value telling the plugin to show or hide the credential from the upstream service.
	HideCredentials *bool `default:"false" json:"hide_credentials"`
	// Accepts HTTPs requests that have already been terminated by a proxy or load balancer.
	AcceptHTTPIfAlreadyTerminated *bool `default:"false" json:"accept_http_if_already_terminated"`
	// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
	Anonymous *string `json:"anonymous,omitempty"`
	// An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.
	GlobalCredentials *bool `default:"false" json:"global_credentials"`
	// The name of the header that is supposed to carry the access token.
	AuthHeaderName *string `default:"authorization" json:"auth_header_name"`
	// Time-to-live value for data
	RefreshTokenTTL *float64 `default:"1209600" json:"refresh_token_ttl"`
	// An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.
	ReuseRefreshToken      *bool `default:"false" json:"reuse_refresh_token"`
	PersistentRefreshToken *bool `default:"false" json:"persistent_refresh_token"`
	// Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin.
	Pkce *Oauth2PluginPkce `default:"lax" json:"pkce"`
}

func (o Oauth2PluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Oauth2PluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Oauth2PluginConfig) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *Oauth2PluginConfig) GetMandatoryScope() *bool {
	if o == nil {
		return nil
	}
	return o.MandatoryScope
}

func (o *Oauth2PluginConfig) GetProvisionKey() *string {
	if o == nil {
		return nil
	}
	return o.ProvisionKey
}

func (o *Oauth2PluginConfig) GetTokenExpiration() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenExpiration
}

func (o *Oauth2PluginConfig) GetEnableAuthorizationCode() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAuthorizationCode
}

func (o *Oauth2PluginConfig) GetEnableImplicitGrant() *bool {
	if o == nil {
		return nil
	}
	return o.EnableImplicitGrant
}

func (o *Oauth2PluginConfig) GetEnableClientCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.EnableClientCredentials
}

func (o *Oauth2PluginConfig) GetEnablePasswordGrant() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePasswordGrant
}

func (o *Oauth2PluginConfig) GetHideCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.HideCredentials
}

func (o *Oauth2PluginConfig) GetAcceptHTTPIfAlreadyTerminated() *bool {
	if o == nil {
		return nil
	}
	return o.AcceptHTTPIfAlreadyTerminated
}

func (o *Oauth2PluginConfig) GetAnonymous() *string {
	if o == nil {
		return nil
	}
	return o.Anonymous
}

func (o *Oauth2PluginConfig) GetGlobalCredentials() *bool {
	if o == nil {
		return nil
	}
	return o.GlobalCredentials
}

func (o *Oauth2PluginConfig) GetAuthHeaderName() *string {
	if o == nil {
		return nil
	}
	return o.AuthHeaderName
}

func (o *Oauth2PluginConfig) GetRefreshTokenTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshTokenTTL
}

func (o *Oauth2PluginConfig) GetReuseRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.ReuseRefreshToken
}

func (o *Oauth2PluginConfig) GetPersistentRefreshToken() *bool {
	if o == nil {
		return nil
	}
	return o.PersistentRefreshToken
}

func (o *Oauth2PluginConfig) GetPkce() *Oauth2PluginPkce {
	if o == nil {
		return nil
	}
	return o.Pkce
}

// Oauth2Plugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type Oauth2Plugin struct {
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"oauth2" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []Oauth2PluginProtocols `json:"protocols"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *Oauth2PluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *Oauth2PluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *Oauth2PluginService `json:"service,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64             `json:"created_at,omitempty"`
	ID        *string            `json:"id,omitempty"`
	Config    Oauth2PluginConfig `json:"config"`
}

func (o Oauth2Plugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *Oauth2Plugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Oauth2Plugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Oauth2Plugin) GetName() string {
	return "oauth2"
}

func (o *Oauth2Plugin) GetProtocols() []Oauth2PluginProtocols {
	if o == nil {
		return []Oauth2PluginProtocols{}
	}
	return o.Protocols
}

func (o *Oauth2Plugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Oauth2Plugin) GetConsumer() *Oauth2PluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *Oauth2Plugin) GetRoute() *Oauth2PluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *Oauth2Plugin) GetService() *Oauth2PluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *Oauth2Plugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Oauth2Plugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Oauth2Plugin) GetConfig() Oauth2PluginConfig {
	if o == nil {
		return Oauth2PluginConfig{}
	}
	return o.Config
}
