// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type GCPVPCPeeringAttachmentType string

const (
	GCPVPCPeeringAttachmentTypeGcpVpcPeeringAttachment GCPVPCPeeringAttachmentType = "gcp-vpc-peering-attachment"
)

func (e GCPVPCPeeringAttachmentType) ToPointer() *GCPVPCPeeringAttachmentType {
	return &e
}
func (e *GCPVPCPeeringAttachmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gcp-vpc-peering-attachment":
		*e = GCPVPCPeeringAttachmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GCPVPCPeeringAttachmentType: %v", v)
	}
}

type GCPVPCPeeringAttachmentConfig struct {
	Kind GCPVPCPeeringAttachmentType `json:"kind"`
	// GCP Project ID of the peer account to create attachment to.
	PeerProjectID string `json:"peer_project_id"`
	// GCP VPC Name of the peer account to create attachment to.
	PeerVpcName string `json:"peer_vpc_name"`
}

func (o *GCPVPCPeeringAttachmentConfig) GetKind() GCPVPCPeeringAttachmentType {
	if o == nil {
		return GCPVPCPeeringAttachmentType("")
	}
	return o.Kind
}

func (o *GCPVPCPeeringAttachmentConfig) GetPeerProjectID() string {
	if o == nil {
		return ""
	}
	return o.PeerProjectID
}

func (o *GCPVPCPeeringAttachmentConfig) GetPeerVpcName() string {
	if o == nil {
		return ""
	}
	return o.PeerVpcName
}
