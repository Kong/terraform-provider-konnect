// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
)

type AWSLambdaPluginProtocols string

const (
	AWSLambdaPluginProtocolsGrpc           AWSLambdaPluginProtocols = "grpc"
	AWSLambdaPluginProtocolsGrpcs          AWSLambdaPluginProtocols = "grpcs"
	AWSLambdaPluginProtocolsHTTP           AWSLambdaPluginProtocols = "http"
	AWSLambdaPluginProtocolsHTTPS          AWSLambdaPluginProtocols = "https"
	AWSLambdaPluginProtocolsTCP            AWSLambdaPluginProtocols = "tcp"
	AWSLambdaPluginProtocolsTLS            AWSLambdaPluginProtocols = "tls"
	AWSLambdaPluginProtocolsTLSPassthrough AWSLambdaPluginProtocols = "tls_passthrough"
	AWSLambdaPluginProtocolsUDP            AWSLambdaPluginProtocols = "udp"
	AWSLambdaPluginProtocolsWs             AWSLambdaPluginProtocols = "ws"
	AWSLambdaPluginProtocolsWss            AWSLambdaPluginProtocols = "wss"
)

func (e AWSLambdaPluginProtocols) ToPointer() *AWSLambdaPluginProtocols {
	return &e
}

func (e *AWSLambdaPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = AWSLambdaPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSLambdaPluginProtocols: %v", v)
	}
}

// AWSLambdaPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type AWSLambdaPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *AWSLambdaPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AWSLambdaPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type AWSLambdaPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *AWSLambdaPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AWSLambdaPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type AWSLambdaPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *AWSLambdaPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// AWSLambdaPluginInvocationType - The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun.
type AWSLambdaPluginInvocationType string

const (
	AWSLambdaPluginInvocationTypeRequestResponse AWSLambdaPluginInvocationType = "RequestResponse"
	AWSLambdaPluginInvocationTypeEvent           AWSLambdaPluginInvocationType = "Event"
	AWSLambdaPluginInvocationTypeDryRun          AWSLambdaPluginInvocationType = "DryRun"
)

func (e AWSLambdaPluginInvocationType) ToPointer() *AWSLambdaPluginInvocationType {
	return &e
}

func (e *AWSLambdaPluginInvocationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RequestResponse":
		fallthrough
	case "Event":
		fallthrough
	case "DryRun":
		*e = AWSLambdaPluginInvocationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSLambdaPluginInvocationType: %v", v)
	}
}

// AWSLambdaPluginLogType - The LogType to use when invoking the function. By default, None and Tail are supported.
type AWSLambdaPluginLogType string

const (
	AWSLambdaPluginLogTypeTail AWSLambdaPluginLogType = "Tail"
	AWSLambdaPluginLogTypeNone AWSLambdaPluginLogType = "None"
)

func (e AWSLambdaPluginLogType) ToPointer() *AWSLambdaPluginLogType {
	return &e
}

func (e *AWSLambdaPluginLogType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Tail":
		fallthrough
	case "None":
		*e = AWSLambdaPluginLogType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSLambdaPluginLogType: %v", v)
	}
}

// AWSLambdaPluginAWSImdsProtocolVersion - Identifier to select the IMDS protocol version to use: `v1` or `v2`.
type AWSLambdaPluginAWSImdsProtocolVersion string

const (
	AWSLambdaPluginAWSImdsProtocolVersionV1 AWSLambdaPluginAWSImdsProtocolVersion = "v1"
	AWSLambdaPluginAWSImdsProtocolVersionV2 AWSLambdaPluginAWSImdsProtocolVersion = "v2"
)

func (e AWSLambdaPluginAWSImdsProtocolVersion) ToPointer() *AWSLambdaPluginAWSImdsProtocolVersion {
	return &e
}

func (e *AWSLambdaPluginAWSImdsProtocolVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		fallthrough
	case "v2":
		*e = AWSLambdaPluginAWSImdsProtocolVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AWSLambdaPluginAWSImdsProtocolVersion: %v", v)
	}
}

type AWSLambdaPluginConfig struct {
	// An optional timeout in milliseconds when invoking the function.
	Timeout *float64 `default:"60000" json:"timeout"`
	// An optional value in milliseconds that defines how long an idle connection lives before being closed.
	Keepalive *float64 `default:"60000" json:"keepalive"`
	// The AWS key credential to be used when invoking the function.
	AwsKey *string `json:"aws_key,omitempty"`
	// The AWS secret credential to be used when invoking the function.
	AwsSecret *string `json:"aws_secret,omitempty"`
	// The target AWS IAM role ARN used to invoke the Lambda function.
	AwsAssumeRoleArn *string `json:"aws_assume_role_arn,omitempty"`
	// The identifier of the assumed role session.
	AwsRoleSessionName *string `default:"kong" json:"aws_role_session_name"`
	// A string representing a host name, such as example.com.
	AwsRegion *string `json:"aws_region,omitempty"`
	// The AWS Lambda function name to invoke.
	FunctionName *string `json:"function_name,omitempty"`
	// The qualifier to use when invoking the function.
	Qualifier *string `json:"qualifier,omitempty"`
	// The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun.
	InvocationType *AWSLambdaPluginInvocationType `default:"RequestResponse" json:"invocation_type"`
	// The LogType to use when invoking the function. By default, None and Tail are supported.
	LogType *AWSLambdaPluginLogType `default:"Tail" json:"log_type"`
	// A string representing a host name, such as example.com.
	Host *string `json:"host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	Port         *int64 `default:"443" json:"port"`
	DisableHTTPS *bool  `default:"false" json:"disable_https"`
	// The response status code to use (instead of the default 200, 202, or 204) in the case of an Unhandled Function Error.
	UnhandledStatus *int64 `json:"unhandled_status,omitempty"`
	// An optional value that defines whether the original HTTP request method verb is sent in the request_method field of the JSON-encoded request.
	ForwardRequestMethod *bool `default:"false" json:"forward_request_method"`
	// An optional value that defines whether the original HTTP request URI is sent in the request_uri field of the JSON-encoded request.
	ForwardRequestURI *bool `default:"false" json:"forward_request_uri"`
	// An optional value that defines whether the original HTTP request headers are sent as a map in the request_headers field of the JSON-encoded request.
	ForwardRequestHeaders *bool `default:"false" json:"forward_request_headers"`
	// An optional value that defines whether the request body is sent in the request_body field of the JSON-encoded request. If the body arguments can be parsed, they are sent in the separate request_body_args field of the request.
	ForwardRequestBody *bool `default:"false" json:"forward_request_body"`
	// An optional value that defines whether the response format to receive from the Lambda to this format.
	IsProxyIntegration *bool `default:"false" json:"is_proxy_integration"`
	// An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.
	AwsgatewayCompatible *bool `default:"false" json:"awsgateway_compatible"`
	// A string representing a URL, such as https://example.com/path/to/resource?q=search.
	ProxyURL *string `json:"proxy_url,omitempty"`
	// An optional value that defines whether Kong should send large bodies that are buffered to disk
	SkipLargeBodies *bool `default:"true" json:"skip_large_bodies"`
	// An optional value that Base64-encodes the request body.
	Base64EncodeBody *bool `default:"true" json:"base64_encode_body"`
	// Identifier to select the IMDS protocol version to use: `v1` or `v2`.
	AwsImdsProtocolVersion *AWSLambdaPluginAWSImdsProtocolVersion `default:"v1" json:"aws_imds_protocol_version"`
}

func (a AWSLambdaPluginConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AWSLambdaPluginConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AWSLambdaPluginConfig) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *AWSLambdaPluginConfig) GetKeepalive() *float64 {
	if o == nil {
		return nil
	}
	return o.Keepalive
}

func (o *AWSLambdaPluginConfig) GetAwsKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsKey
}

func (o *AWSLambdaPluginConfig) GetAwsSecret() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecret
}

func (o *AWSLambdaPluginConfig) GetAwsAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AwsAssumeRoleArn
}

func (o *AWSLambdaPluginConfig) GetAwsRoleSessionName() *string {
	if o == nil {
		return nil
	}
	return o.AwsRoleSessionName
}

func (o *AWSLambdaPluginConfig) GetAwsRegion() *string {
	if o == nil {
		return nil
	}
	return o.AwsRegion
}

func (o *AWSLambdaPluginConfig) GetFunctionName() *string {
	if o == nil {
		return nil
	}
	return o.FunctionName
}

func (o *AWSLambdaPluginConfig) GetQualifier() *string {
	if o == nil {
		return nil
	}
	return o.Qualifier
}

func (o *AWSLambdaPluginConfig) GetInvocationType() *AWSLambdaPluginInvocationType {
	if o == nil {
		return nil
	}
	return o.InvocationType
}

func (o *AWSLambdaPluginConfig) GetLogType() *AWSLambdaPluginLogType {
	if o == nil {
		return nil
	}
	return o.LogType
}

func (o *AWSLambdaPluginConfig) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AWSLambdaPluginConfig) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AWSLambdaPluginConfig) GetDisableHTTPS() *bool {
	if o == nil {
		return nil
	}
	return o.DisableHTTPS
}

func (o *AWSLambdaPluginConfig) GetUnhandledStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.UnhandledStatus
}

func (o *AWSLambdaPluginConfig) GetForwardRequestMethod() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestMethod
}

func (o *AWSLambdaPluginConfig) GetForwardRequestURI() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestURI
}

func (o *AWSLambdaPluginConfig) GetForwardRequestHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestHeaders
}

func (o *AWSLambdaPluginConfig) GetForwardRequestBody() *bool {
	if o == nil {
		return nil
	}
	return o.ForwardRequestBody
}

func (o *AWSLambdaPluginConfig) GetIsProxyIntegration() *bool {
	if o == nil {
		return nil
	}
	return o.IsProxyIntegration
}

func (o *AWSLambdaPluginConfig) GetAwsgatewayCompatible() *bool {
	if o == nil {
		return nil
	}
	return o.AwsgatewayCompatible
}

func (o *AWSLambdaPluginConfig) GetProxyURL() *string {
	if o == nil {
		return nil
	}
	return o.ProxyURL
}

func (o *AWSLambdaPluginConfig) GetSkipLargeBodies() *bool {
	if o == nil {
		return nil
	}
	return o.SkipLargeBodies
}

func (o *AWSLambdaPluginConfig) GetBase64EncodeBody() *bool {
	if o == nil {
		return nil
	}
	return o.Base64EncodeBody
}

func (o *AWSLambdaPluginConfig) GetAwsImdsProtocolVersion() *AWSLambdaPluginAWSImdsProtocolVersion {
	if o == nil {
		return nil
	}
	return o.AwsImdsProtocolVersion
}

// AWSLambdaPlugin - A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
type AWSLambdaPlugin struct {
	// Whether the plugin is applied.
	Enabled *bool  `default:"true" json:"enabled"`
	name    string `const:"aws-lambda" json:"name"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []AWSLambdaPluginProtocols `json:"protocols"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer *AWSLambdaPluginConsumer `json:"consumer,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *AWSLambdaPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *AWSLambdaPluginService `json:"service,omitempty"`
	// Unix epoch when the resource was created.
	CreatedAt *int64                `json:"created_at,omitempty"`
	ID        *string               `json:"id,omitempty"`
	Config    AWSLambdaPluginConfig `json:"config"`
}

func (a AWSLambdaPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AWSLambdaPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AWSLambdaPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AWSLambdaPlugin) GetName() string {
	return "aws-lambda"
}

func (o *AWSLambdaPlugin) GetProtocols() []AWSLambdaPluginProtocols {
	if o == nil {
		return []AWSLambdaPluginProtocols{}
	}
	return o.Protocols
}

func (o *AWSLambdaPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *AWSLambdaPlugin) GetConsumer() *AWSLambdaPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *AWSLambdaPlugin) GetRoute() *AWSLambdaPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *AWSLambdaPlugin) GetService() *AWSLambdaPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *AWSLambdaPlugin) GetCreatedAt() *int64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *AWSLambdaPlugin) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *AWSLambdaPlugin) GetConfig() AWSLambdaPluginConfig {
	if o == nil {
		return AWSLambdaPluginConfig{}
	}
	return o.Config
}
