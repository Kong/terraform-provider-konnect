// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-konnect/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-konnect/internal/sdk/types"
)

// CreateForwardProxyPluginProxyScheme - The proxy scheme to use when connecting. Only `http` is supported.
type CreateForwardProxyPluginProxyScheme string

const (
	CreateForwardProxyPluginProxySchemeHTTP CreateForwardProxyPluginProxyScheme = "http"
)

func (e CreateForwardProxyPluginProxyScheme) ToPointer() *CreateForwardProxyPluginProxyScheme {
	return &e
}
func (e *CreateForwardProxyPluginProxyScheme) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = CreateForwardProxyPluginProxyScheme(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateForwardProxyPluginProxyScheme: %v", v)
	}
}

// CreateForwardProxyPluginXHeaders - Determines how to handle headers when forwarding the request.
type CreateForwardProxyPluginXHeaders string

const (
	CreateForwardProxyPluginXHeadersAppend      CreateForwardProxyPluginXHeaders = "append"
	CreateForwardProxyPluginXHeadersTransparent CreateForwardProxyPluginXHeaders = "transparent"
	CreateForwardProxyPluginXHeadersDelete      CreateForwardProxyPluginXHeaders = "delete"
)

func (e CreateForwardProxyPluginXHeaders) ToPointer() *CreateForwardProxyPluginXHeaders {
	return &e
}
func (e *CreateForwardProxyPluginXHeaders) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "append":
		fallthrough
	case "transparent":
		fallthrough
	case "delete":
		*e = CreateForwardProxyPluginXHeaders(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateForwardProxyPluginXHeaders: %v", v)
	}
}

type CreateForwardProxyPluginConfig struct {
	// The password to authenticate with, if the forward proxy is protected
	// by basic authentication.
	AuthPassword *string `json:"auth_password,omitempty"`
	// The username to authenticate with, if the forward proxy is protected
	// by basic authentication.
	AuthUsername *string `json:"auth_username,omitempty"`
	// A string representing a host name, such as example.com.
	HTTPProxyHost *string `json:"http_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPProxyPort *int64 `json:"http_proxy_port,omitempty"`
	// A string representing a host name, such as example.com.
	HTTPSProxyHost *string `json:"https_proxy_host,omitempty"`
	// An integer representing a port number between 0 and 65535, inclusive.
	HTTPSProxyPort *int64 `json:"https_proxy_port,omitempty"`
	// Whether the server certificate will be verified according to the CA certificates specified in lua_ssl_trusted_certificate.
	HTTPSVerify *bool `json:"https_verify,omitempty"`
	// The proxy scheme to use when connecting. Only `http` is supported.
	ProxyScheme *CreateForwardProxyPluginProxyScheme `json:"proxy_scheme,omitempty"`
	// Determines how to handle headers when forwarding the request.
	XHeaders *CreateForwardProxyPluginXHeaders `json:"x_headers,omitempty"`
}

func (o *CreateForwardProxyPluginConfig) GetAuthPassword() *string {
	if o == nil {
		return nil
	}
	return o.AuthPassword
}

func (o *CreateForwardProxyPluginConfig) GetAuthUsername() *string {
	if o == nil {
		return nil
	}
	return o.AuthUsername
}

func (o *CreateForwardProxyPluginConfig) GetHTTPProxyHost() *string {
	if o == nil {
		return nil
	}
	return o.HTTPProxyHost
}

func (o *CreateForwardProxyPluginConfig) GetHTTPProxyPort() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPProxyPort
}

func (o *CreateForwardProxyPluginConfig) GetHTTPSProxyHost() *string {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyHost
}

func (o *CreateForwardProxyPluginConfig) GetHTTPSProxyPort() *int64 {
	if o == nil {
		return nil
	}
	return o.HTTPSProxyPort
}

func (o *CreateForwardProxyPluginConfig) GetHTTPSVerify() *bool {
	if o == nil {
		return nil
	}
	return o.HTTPSVerify
}

func (o *CreateForwardProxyPluginConfig) GetProxyScheme() *CreateForwardProxyPluginProxyScheme {
	if o == nil {
		return nil
	}
	return o.ProxyScheme
}

func (o *CreateForwardProxyPluginConfig) GetXHeaders() *CreateForwardProxyPluginXHeaders {
	if o == nil {
		return nil
	}
	return o.XHeaders
}

type CreateForwardProxyPluginAfter struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateForwardProxyPluginAfter) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateForwardProxyPluginBefore struct {
	Access []string `json:"access,omitempty"`
}

func (o *CreateForwardProxyPluginBefore) GetAccess() []string {
	if o == nil {
		return nil
	}
	return o.Access
}

type CreateForwardProxyPluginOrdering struct {
	After  *CreateForwardProxyPluginAfter  `json:"after,omitempty"`
	Before *CreateForwardProxyPluginBefore `json:"before,omitempty"`
}

func (o *CreateForwardProxyPluginOrdering) GetAfter() *CreateForwardProxyPluginAfter {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *CreateForwardProxyPluginOrdering) GetBefore() *CreateForwardProxyPluginBefore {
	if o == nil {
		return nil
	}
	return o.Before
}

type CreateForwardProxyPluginProtocols string

const (
	CreateForwardProxyPluginProtocolsGrpc           CreateForwardProxyPluginProtocols = "grpc"
	CreateForwardProxyPluginProtocolsGrpcs          CreateForwardProxyPluginProtocols = "grpcs"
	CreateForwardProxyPluginProtocolsHTTP           CreateForwardProxyPluginProtocols = "http"
	CreateForwardProxyPluginProtocolsHTTPS          CreateForwardProxyPluginProtocols = "https"
	CreateForwardProxyPluginProtocolsTCP            CreateForwardProxyPluginProtocols = "tcp"
	CreateForwardProxyPluginProtocolsTLS            CreateForwardProxyPluginProtocols = "tls"
	CreateForwardProxyPluginProtocolsTLSPassthrough CreateForwardProxyPluginProtocols = "tls_passthrough"
	CreateForwardProxyPluginProtocolsUDP            CreateForwardProxyPluginProtocols = "udp"
	CreateForwardProxyPluginProtocolsWs             CreateForwardProxyPluginProtocols = "ws"
	CreateForwardProxyPluginProtocolsWss            CreateForwardProxyPluginProtocols = "wss"
)

func (e CreateForwardProxyPluginProtocols) ToPointer() *CreateForwardProxyPluginProtocols {
	return &e
}
func (e *CreateForwardProxyPluginProtocols) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grpc":
		fallthrough
	case "grpcs":
		fallthrough
	case "http":
		fallthrough
	case "https":
		fallthrough
	case "tcp":
		fallthrough
	case "tls":
		fallthrough
	case "tls_passthrough":
		fallthrough
	case "udp":
		fallthrough
	case "ws":
		fallthrough
	case "wss":
		*e = CreateForwardProxyPluginProtocols(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateForwardProxyPluginProtocols: %v", v)
	}
}

// CreateForwardProxyPluginConsumer - If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
type CreateForwardProxyPluginConsumer struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateForwardProxyPluginConsumer) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateForwardProxyPluginConsumerGroup struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateForwardProxyPluginConsumerGroup) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateForwardProxyPluginRoute - If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
type CreateForwardProxyPluginRoute struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateForwardProxyPluginRoute) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// CreateForwardProxyPluginService - If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
type CreateForwardProxyPluginService struct {
	ID *string `json:"id,omitempty"`
}

func (o *CreateForwardProxyPluginService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type CreateForwardProxyPlugin struct {
	Config *CreateForwardProxyPluginConfig `json:"config,omitempty"`
	// Whether the plugin is applied.
	Enabled      *bool                             `json:"enabled,omitempty"`
	InstanceName *string                           `json:"instance_name,omitempty"`
	name         *string                           `const:"forward-proxy" json:"name,omitempty"`
	Ordering     *CreateForwardProxyPluginOrdering `json:"ordering,omitempty"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []CreateForwardProxyPluginProtocols `json:"protocols,omitempty"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `json:"tags,omitempty"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *CreateForwardProxyPluginConsumer      `json:"consumer,omitempty"`
	ConsumerGroup *CreateForwardProxyPluginConsumerGroup `json:"consumer_group,omitempty"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *CreateForwardProxyPluginRoute `json:"route,omitempty"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *CreateForwardProxyPluginService `json:"service,omitempty"`
}

func (c CreateForwardProxyPlugin) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateForwardProxyPlugin) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateForwardProxyPlugin) GetConfig() *CreateForwardProxyPluginConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CreateForwardProxyPlugin) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateForwardProxyPlugin) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *CreateForwardProxyPlugin) GetName() *string {
	return types.String("forward-proxy")
}

func (o *CreateForwardProxyPlugin) GetOrdering() *CreateForwardProxyPluginOrdering {
	if o == nil {
		return nil
	}
	return o.Ordering
}

func (o *CreateForwardProxyPlugin) GetProtocols() []CreateForwardProxyPluginProtocols {
	if o == nil {
		return nil
	}
	return o.Protocols
}

func (o *CreateForwardProxyPlugin) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *CreateForwardProxyPlugin) GetConsumer() *CreateForwardProxyPluginConsumer {
	if o == nil {
		return nil
	}
	return o.Consumer
}

func (o *CreateForwardProxyPlugin) GetConsumerGroup() *CreateForwardProxyPluginConsumerGroup {
	if o == nil {
		return nil
	}
	return o.ConsumerGroup
}

func (o *CreateForwardProxyPlugin) GetRoute() *CreateForwardProxyPluginRoute {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CreateForwardProxyPlugin) GetService() *CreateForwardProxyPluginService {
	if o == nil {
		return nil
	}
	return o.Service
}
